<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>J.のblog</title>
  
  
  <link href="http://dycloud.fun/atom.xml" rel="self"/>
  
  <link href="http://dycloud.fun/"/>
  <updated>2024-03-12T07:27:42.946Z</updated>
  <id>http://dycloud.fun/</id>
  
  <author>
    <name>J.</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录AWS Oracle实例数据迁移的艰辛过程</title>
    <link href="http://dycloud.fun/2024/03/12/%E8%AE%B0%E5%BD%95AWS%20Oracle%E5%AE%9E%E4%BE%8B%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E7%9A%84%E8%89%B0%E8%BE%9B%E8%BF%87%E7%A8%8B/"/>
    <id>http://dycloud.fun/2024/03/12/%E8%AE%B0%E5%BD%95AWS%20Oracle%E5%AE%9E%E4%BE%8B%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E7%9A%84%E8%89%B0%E8%BE%9B%E8%BF%87%E7%A8%8B/</id>
    <published>2024-03-12T04:12:23.000Z</published>
    <updated>2024-03-12T07:27:42.946Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司在aws的项目要迁移到我们公司云平台，需要将aws上面的rds（oracle）实例迁移到本地云平台，遇到各种各样的问题，下面总结下遇到的所有问题及解决方法。<br>我这边用了各种各样的方法进行迁移，最终才成功将数据迁回</p><h3 id="方法1（失败）：navicat-工具，因对oracle数据库不太熟悉，所以首先选择用工具直接同步，此过程步骤简单，只需要在工具上选择源库和目标库同步即可"><a href="#方法1（失败）：navicat-工具，因对oracle数据库不太熟悉，所以首先选择用工具直接同步，此过程步骤简单，只需要在工具上选择源库和目标库同步即可" class="headerlink" title="方法1（失败）：navicat 工具，因对oracle数据库不太熟悉，所以首先选择用工具直接同步，此过程步骤简单，只需要在工具上选择源库和目标库同步即可"></a>方法1（失败）：navicat 工具，因对oracle数据库不太熟悉，所以首先选择用工具直接同步，此过程步骤简单，只需要在工具上选择源库和目标库同步即可</h3><p><img src="https://img-blog.csdnimg.cn/direct/3a53a4fdc57045aca51eda517d7d625b.png" alt="在这里插入图片描述"><br>问题：</p><ul><li>用工具导出速度很慢，1秒大概导出1000条左右，且会随着导出时长增加而增加</li><li>容易中断，我这边首次导出到60多w条数据时工具卡住，无法继续导出</li><li>数据导出不全，通过navicat导出发现大部分表数据不全，甚至有些表数据完全没有导入</li></ul><p>基于上面遇到的问题，所以舍弃了该方法</p><h3 id="方法2（失败）：导出sql文件后，使用sqlplus导入"><a href="#方法2（失败）：导出sql文件后，使用sqlplus导入" class="headerlink" title="方法2（失败）：导出sql文件后，使用sqlplus导入"></a>方法2（失败）：导出sql文件后，使用sqlplus导入</h3><p>sql文件可以用工具导出，我这边还是使用navicat导出sql文件，导出后如下图是每个表生成一个sql文件<br><img src="https://img-blog.csdnimg.cn/direct/5b36f7a6bea1479f8be9856eb9376d20.png" alt="在这里插入图片描述"></p><p>使用sqlplus进入需导入数据的库中进行导入发现部分表报错了，报错原因是中有超过3000个字符长度的字段，而sqlplus不支持超过3000的，需要手动更改sql语句，因表数据量较大，故放弃此方法</p><p><img src="https://img-blog.csdnimg.cn/direct/17f0ff2054c14e799e7f893be486b63a.png" alt="在这里插入图片描述"></p><h3 id="方法3（失败）：导出csv文件，再通过sqlload导入"><a href="#方法3（失败）：导出csv文件，再通过sqlload导入" class="headerlink" title="方法3（失败）：导出csv文件，再通过sqlload导入"></a>方法3（失败）：导出csv文件，再通过sqlload导入</h3><h5 id="1、使用工具导出csv文件，注意字段分隔符和行分隔符。"><a href="#1、使用工具导出csv文件，注意字段分隔符和行分隔符。" class="headerlink" title="1、使用工具导出csv文件，注意字段分隔符和行分隔符。"></a>1、使用工具导出csv文件，注意字段分隔符和行分隔符。</h5><h5 id="2、创建控制文件"><a href="#2、创建控制文件" class="headerlink" title="2、创建控制文件"></a>2、创建控制文件</h5><p>该定义解析和导入CSV文件的数据。控制文件需要指定csv文件的位置、字段分隔符、数据格式等，需要和导出时候指定的相同，下面是我导出某个表的一个控制文件，可以看到字段比较多</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>oracle@waixuan-prod ~/pub<span class="token punctuation">]</span>$ <span class="token function">cat</span> epub_p_publications.ctlLOAD DATAINFILE <span class="token string">'EPUB_P_PUBLICATIONS.csv'</span>BADFILE <span class="token string">'epub_p_publications_data.bad'</span>DISCARDFILE <span class="token string">'epub_p_publications_data.discard'</span>INTO TABLE EPUBLISHING.EPUB_P_PUBLICATIONSFIELDS TERMINATED BY <span class="token string">','</span> OPTIONALLY ENCLOSED BY <span class="token string">'\"'</span> TRAILING NULLCOLS<span class="token punctuation">(</span>PUB_ID,PUB_PARENT_ID,PUB_VOLUME_ID,PUB_ISSUE_ID,PUBLISHER_ID,PUB_TITLE,PUB_CHINESE_TITLE,PUB_AUTHOR,PUB_CODE,PUB_HAVEMARC,PUB_MARCPATH,PUB_PAGE_START,PUB_PAGE_END,LIST_PRICE,LCURR,SALE_PRICE,SCURR,BROWSE_PRECENT,IN_COLLECTION,CONTENT_TYPE,CONTENT_COVER,CREATE_ON TIMESTAMP <span class="token string">"DD/MM/YYYY HH24:MI:SS.FF3"</span>,UPDATE_ON TIMESTAMP <span class="token string">"DD/MM/YYYY HH24:MI:SS.FF3"</span>,CONTENT_PDF,PUB_PATH,PUB_LANG,CONTENT_BREED,CONTENT_SUBTITLE,CONTENT_MEDIA,CONTENT_ORIGINALNO,CONTENT_VOLUMESNUM,CONTENT_NORMS,CONTENT_EVOLUTION,HOMEPAGE,NEWEST,SELECTED,SPECIAL,STATUS,OA,FREE,PUB_DATE,PUB_SUBJECT,PUB_LOCAL,PUB_WEB_URL,PUB_CREATE_DATE,SISBN,HISBN,CONTENT_ACTIVITY,PUB_SUBJECT_EN,SOURCE_ID,BUY_TIMES,PUB_YEAR,PUB_MONTH,PUB_DAY,PUB_VOLUME,START_VOLUME,END_VOLUME,PUB_ISSUE,PUB_DOI,PUB_KEYWORD,PUB_REFERENCE,SUBSCRIPTION_CODE,CODE_ISSUED_ABROAD,POST_JOURNAL_CODE,CN_CODE,OLD_JOURNAL_CODE,JOURNAL_CODE,FORMERLY,TITLE_PINYIN,THEME,AUDIENCE,PUB_SIZE,REVISION,OTHER_AUTHOR,CHOICE,COLLECTION_BOOK_SUBCODE,VOLUME_BOOK_SUBCODE,IS_COLLECTION_BOOK,IS_VOLUME_BOOK,VICE_TITLE,CONTENT_WORDS,CONTENT_EDITOR,CONTENT_PAGE_NUM,CONTENT_PLACE,CONTENT_LANG,ISSUE_METHOD_ID,FORMAT_ID,PUBLISH_METHOD_ID,CONTENT_VOLUME_BOOK_ID,CONTENT_COLLECTION_BOOK_ID,DIC_ID,JOUR_DIC_ID,CONTENT_FORMAT,CONTENT_SPONSORS,JOURNALSTATUS,PUB_INITIAL,PUB_ABSTRACT char<span class="token punctuation">(</span><span class="token number">99999</span><span class="token punctuation">)</span>,AUTHOR_PINYIN,CONTENT_SHUMING,CONTENT_FENCE,CONTENT_FENCE_TITLE,CONTENT_BINGLIE_TITLE,CONTENT_AUTHOR_JIANJIE,CONTENT_XINXIYUAN,CONTENT_GONGHUOSHANG,CONTENT_MUCI,CONTENT_CONG_SHU,CONTENT_BEIZHU,ISINSOLR,CONTENT_GROUP,CONTENT_SUBJECTCN_WX,CONTENT_SUBJECTEN_WX,CONTENT_SUBJECT_WX,CONTENT_STATUS_WX,SHELVES_STATUS<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、运行sqlldr命令"><a href="#3、运行sqlldr命令" class="headerlink" title="3、运行sqlldr命令"></a>3、运行sqlldr命令</h5><p>需要指定用户名、密码、控制文件、日志文件、支持最大的错误数量，注意要导入的表不能有数据，必须是空表</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>oracle@waixuan-prod ~/pub<span class="token punctuation">]</span>$ sqlldr <span class="token assign-left variable">userid</span><span class="token operator">=</span>epublishing/xxxxxxx <span class="token assign-left variable">control</span><span class="token operator">=</span>epub_p_publications.ctl <span class="token assign-left variable">log</span><span class="token operator">=</span>epub_p_publications.log <span class="token assign-left variable">errors</span><span class="token operator">=</span><span class="token number">9999999999</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行后如下图开始导入，原本以为很顺利，导入速度也比较快，100万数据大概30+秒左右导入完成<br><img src="https://img-blog.csdnimg.cn/direct/cb618f91db5642c085d79fddcfc5456c.png" alt="在这里插入图片描述"><br>导入完成发现导入日志有大量报错信息，信息如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Record <span class="token number">13110</span>: Rejected - Error on table EPUBLISHING.EPUB_P_PUBLICATIONS, <span class="token function">column</span> PUB_ABSTRACT.second enclosure string not present<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>报错显示<code>PUB_ABSTRACT</code> 这个字段导入有问题，查了报错的原因可能如下：<br>1、查看源表该字段发现该字段是<code>long</code>类型，而我ctl文件中指定的该字段为<code>char(99999)</code>类型，如果该字段有任何记录超过该类型就不会被完全导入<br>2、<code>sqlload</code>的限制，<code>sqlload</code>处理<code>long</code>类型字段时可能会有限制或不支持，看了下oracle官网建议使用<code>clob</code>数据类型代替<code>long</code>，但是ctl文件中不能指定<code>CLOB</code>类型。<br>基于上面2个问题，发现数据还是无法完整导入，故放弃。</p><h3 id="方法4（成功）：使用Oracle-Data-Pump和数据库连接导入数据"><a href="#方法4（成功）：使用Oracle-Data-Pump和数据库连接导入数据" class="headerlink" title="方法4（成功）：使用Oracle Data Pump和数据库连接导入数据"></a>方法4（成功）：使用Oracle Data Pump和数据库连接导入数据</h3><p>该方法是查看aws官网推荐方式，链接如下：<a href="%E8%AF%A5%E6%96%B9%E6%B3%95%E6%98%AF%E6%9F%A5%E7%9C%8Baws%E5%AE%98%E7%BD%91%E6%8E%A8%E8%8D%90%E6%96%B9%E5%BC%8F%EF%BC%8C%E9%93%BE%E6%8E%A5%E5%A6%82%E4%B8%8B%EF%BC%9Ahttps://docs.aws.amazon.com/zh_cn/AmazonRDS/latest/UserGuide/Oracle.Procedural.Importing.DataPump.html#Oracle.Procedural.Importing.DataPumpDBLink.requirements%20%E5%85%B6%E5%AE%9E%E5%AE%98%E7%BD%91%E6%8E%A8%E8%8D%90%E6%9C%89%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F">https://docs.aws.amazon.com/zh_cn&#x2F;AmazonRDS&#x2F;latest&#x2F;UserGuide&#x2F;Oracle.Procedural.Importing.DataPump.html#Oracle.Procedural.Importing.DataPumpDBLink.requirements</a><br>其实官网推荐有两种方式</p><ul><li>1、使用<code>Oracle DataPump</code>和<code>AmazonS3</code>存储桶导入数据</li><li>2、使用<code>Oracle DataPump</code>和数据库连接导入数据</li></ul><p>我这边首先试的是第一种方式，该方法步骤如下：</p><ol><li>在<code>RDS for oracle </code>目标数据库实例上向数据库用户授予权限</li><li>使用<code>DBMS_DATAPUMP</code>将数据导出到转存文件中</li><li>将转存文件上传到AmazonS3存储桶</li><li>将转存文件从<code>AmazonS3</code>桶下载到目标数据库实例</li><li>使用<code>DBMS_DATAPUMP</code>将转存文件导入到目标数据库实例</li></ol><p>该种方法我这边尝试失败，卡在步骤3，无法将转存文件上传到S3桶，因项目时间问题没有过多研究，故选择第二种官方推荐方式，该方法流程如下：</p><h5 id="1-在RDS-for-oracle目标数据库实例上向用户授予权限"><a href="#1-在RDS-for-oracle目标数据库实例上向用户授予权限" class="headerlink" title="1. 在RDS for oracle目标数据库实例上向用户授予权限"></a>1. 在<code>RDS for oracle</code>目标数据库实例上向用户授予权限</h5><h5 id="2-向用户授予源数据库权限"><a href="#2-向用户授予源数据库权限" class="headerlink" title="2. 向用户授予源数据库权限"></a>2. 向用户授予源数据库权限</h5><h5 id="3-在源库使用DBMS-DATAPUMP创建转存文件"><a href="#3-在源库使用DBMS-DATAPUMP创建转存文件" class="headerlink" title="3. 在源库使用DBMS_DATAPUMP创建转存文件"></a>3. 在源库使用<code>DBMS_DATAPUMP</code>创建转存文件</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">DECLARE  v_hdnl NUMBER<span class="token punctuation">;</span>BEGIN  v_hdnl :<span class="token operator">=</span> DBMS_DATAPUMP.OPEN<span class="token punctuation">(</span>     operation <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'EXPORT'</span> ,     job_mode  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'SCHEMA'</span> ,     job_name  <span class="token operator">=</span><span class="token operator">></span> null  <span class="token punctuation">)</span><span class="token punctuation">;</span>  DBMS_DATAPUMP.ADD_FILE<span class="token punctuation">(</span>     handle    <span class="token operator">=</span><span class="token operator">></span> v_hdnl,     filename  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'sample.dmp'</span>    ,     directory <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'DATA_PUMP_DIR'</span> ,     filetype  <span class="token operator">=</span><span class="token operator">></span> dbms_datapump.ku<span class="token variable">$_file_type_dump_file</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  DBMS_DATAPUMP.ADD_FILE<span class="token punctuation">(</span>     handle    <span class="token operator">=</span><span class="token operator">></span> v_hdnl           ,     filename  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'sample_exp.log'</span> ,     directory <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'DATA_PUMP_DIR'</span>  ,     filetype  <span class="token operator">=</span><span class="token operator">></span> dbms_datapump.ku<span class="token variable">$_file_type_log_file</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  DBMS_DATAPUMP.METADATA_FILTER<span class="token punctuation">(</span>    v_hdnl              ,    <span class="token string">'SCHEMA_EXPR'</span>       ,    <span class="token string">'IN ('</span>'SCHEMA_1<span class="token string">''</span><span class="token punctuation">)</span><span class="token string">'  );  DBMS_DATAPUMP.METADATA_FILTER(    v_hdnl,    '</span>EXCLUDE_NAME_EXPR<span class="token string">',    q'</span><span class="token punctuation">[</span>IN <span class="token punctuation">(</span>SELECT NAME FROM sys.OBJ$            WHERE TYPE<span class="token comment"># IN (66,67,74,79,59,62,46) </span>           AND OWNER<span class="token comment"># IN </span>             <span class="token punctuation">(</span>SELECT <span class="token environment constant">USER</span><span class="token comment"># FROM SYS.USER$ </span>              WHERE NAME IN <span class="token punctuation">(</span><span class="token string">'RDSADMIN'</span>,<span class="token string">'SYS'</span>,<span class="token string">'SYSTEM'</span>,<span class="token string">'RDS_DATAGUARD'</span>,<span class="token string">'RDSSEC'</span><span class="token punctuation">)</span>             <span class="token punctuation">)</span>          <span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token string">',    '</span>PROCOBJ'  <span class="token punctuation">)</span><span class="token punctuation">;</span>  DBMS_DATAPUMP.START_JOB<span class="token punctuation">(</span>v_hdnl<span class="token punctuation">)</span><span class="token punctuation">;</span>END<span class="token punctuation">;</span>/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以使用<code>expdb</code>，<code>directory </code>可以使用原有目录<code>DATA_PUMP_DIR</code>，或自行创建<br>目录可以通过<code>SELECT directory_name, directory_path FROM dba_directories; </code>命令查询</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">expdp  dbman1/xxxxxxx@datacenter.cbxxxxxxxx.us-east-2.rds.amazonaws.com/datacent <span class="token assign-left variable">schemas</span><span class="token operator">=</span>mailserver  <span class="token assign-left variable">DIRECTORY</span><span class="token operator">=</span>DATA_PUMP_DIR <span class="token assign-left variable">DUMPFILE</span><span class="token operator">=</span>mailservers.dmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>导出之后会在该RDS实例的DIRECTORY 目录下生成mailservers.dmp，<strong>但我这里无法看到，因为是RDS数据库无法和常规自建数据库一样，连接到服务器上查看，所以也无法使用常规方法将dmp文件下载</strong></p><h5 id="4-在源库中创建目标数据库实例的数据库链接"><a href="#4-在源库中创建目标数据库实例的数据库链接" class="headerlink" title="4. 在源库中创建目标数据库实例的数据库链接"></a>4. 在源库中创建目标数据库实例的数据库链接</h5><p>创建名为<code>tolocal</code>的数据库连接，连接到位于我们公司云上的自建数据库实例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CREATE DATABASE LINK tolocal   CONNECT TO <span class="token operator">&lt;</span>master_user_account<span class="token operator">></span> IDENTIFIED BY <span class="token operator">&lt;</span>password<span class="token operator">></span>  USING <span class="token string">'(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=&lt;dns or ip address of remote db>)         (PORT=&lt;listener port>))(CONNECT_DATA=(SID=&lt;remote SID>)))'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-使用DMBS-FILE-TRANSFER将导出的转存文件复制到目标数据库实例"><a href="#5-使用DMBS-FILE-TRANSFER将导出的转存文件复制到目标数据库实例" class="headerlink" title="5. 使用DMBS_FILE_TRANSFER将导出的转存文件复制到目标数据库实例"></a>5. 使用DMBS_FILE_TRANSFER将导出的转存文件复制到目标数据库实例</h5><p>在源库使用 <code>DBMS_FILE_TRANSFER</code> 将转储文件从源数据库实例复制到目标数据库实例。以下脚本将名为<code> sample.dmp</code> 的转储文件从源实例复制到名为<code> tolocal</code> 的目标数据库链接</p><ul><li><code>source_directory_object</code>：源数据库目录对象</li><li><code>source_file_name</code>：源数据库dmp文件名</li><li><code>destination_directory_object</code>：目标数据库目录对象</li><li><code>destination_file_name</code>：目标数据库dmp文件名</li><li><code>destination_database</code>：指定上面第4步创建的链接名</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">BEGIN  DBMS_FILE_TRANSFER.PUT_FILE<span class="token punctuation">(</span>    source_directory_object       <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'DATA_PUMP_DIR'</span>,    source_file_name              <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'sample.dmp'</span>,    destination_directory_object  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'DATA_PUMP_DIR'</span>,    destination_file_name         <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'sample_copied.dmp'</span>,     destination_database          <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'to_rds'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>END<span class="token punctuation">;</span>/ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该过程主要看数据量，执行后要耐心等待一段时间，执行成功后可以到目标oracle实例所在的服务器的<code>DATA_PUMP_DIR</code> 目录对应的路径查看是否有该<code>destination_file_name</code>文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>oracle@waixuan-test ~<span class="token punctuation">]</span>$  ll /data/oracle/product/19.3.000/db_home/rdbms/log/total <span class="token number">9506324</span>-rw-r----- <span class="token number">1</span> oracle oinstall <span class="token number">3442290688</span> Mar <span class="token number">12</span> <span class="token number">10</span>:46 CONVERTERALLNEWS.dmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="6-使用Oracle-Data-Pump-impdp方法将转存文件导入到目标数据库实例"><a href="#6-使用Oracle-Data-Pump-impdp方法将转存文件导入到目标数据库实例" class="headerlink" title="6. 使用Oracle Data Pump impdp方法将转存文件导入到目标数据库实例"></a>6. 使用Oracle Data Pump impdp方法将转存文件导入到目标数据库实例</h5><p>在目标库使用下面的命令将转存文件导入到数据库中</p><ul><li><code>DIRECTORY</code>：对应第5步的<code>destination_directory_object</code></li><li><code>DUMPFILE</code>：对应第5步的<code>destination_file_name</code></li><li><code>LOGFILE</code>：指定导入的日志文件名</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">impdp  converterserver/xxxxxx <span class="token assign-left variable">DIRECTORY</span><span class="token operator">=</span>yusys_dbdump_dir <span class="token assign-left variable">DUMPFILE</span><span class="token operator">=</span>CONVERTER_ALL_TABLES_all.dmp <span class="token assign-left variable">LOGFILE</span><span class="token operator">=</span>import_log.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原以为这样终于可以导入成功。。。但意外来的总是那么突然<br><img src="https://img-blog.csdnimg.cn/direct/20188c41806e49879c87d60e7b0b618d.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ORA-39002: invalid operationORA-39405: Oracle Data Pump does not support importing from a <span class="token builtin class-name">source</span> database with TSTZ version <span class="token number">33</span> into a target database with TSTZ version <span class="token number">32</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>好吧，继续，查看报错信息发现是源库的时区和目标库的时区不同导致导入失败，查看源库和目标库时区：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-- 源库：SELECT version FROM <span class="token function">v</span><span class="token variable">$timezone_file</span><span class="token punctuation">;</span><span class="token number">33</span>-- 目标库：SELECT version FROM <span class="token function">v</span><span class="token variable">$timezone_file</span><span class="token punctuation">;</span><span class="token number">32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到源库33，目标库32，所以需要升级目标库的时区，升级方法如下：<br>首先需要下载时区补丁，这个补丁不确定是否需要购买相关支持才有权限下载，我这边也是通过渠道获得的相关补丁。<br>解压补丁，将文件上传到需升级时区的数据库服务器上，然后将其解压到Opatch目录下，这个是我的路径</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>oracle@waixuan-test /data/oracle/product/19.3.000/db_home/OPatch<span class="token punctuation">]</span>$ <span class="token builtin class-name">pwd</span> /data/oracle/product/19.3.000/db_home/OPatch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解压补丁包后有两个目录，将这两个目录移动到Opatch目录下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>oracle@waixuan-test /data/oracle/product/19.3.000/db_home/OPatch/buding/28852325<span class="token punctuation">]</span>$ lltotal <span class="token number">16</span>drwxr-x--- <span class="token number">3</span> oracle oinstall <span class="token number">4096</span> Aug  <span class="token number">9</span>  <span class="token number">2019</span> etcdrwxr-x--- <span class="token number">3</span> oracle oinstall <span class="token number">4096</span> Aug  <span class="token number">9</span>  <span class="token number">2019</span> files-rw-rw-r-- <span class="token number">1</span> oracle oinstall <span class="token number">5779</span> Aug  <span class="token number">9</span>  <span class="token number">2019</span> README.txt<span class="token punctuation">[</span>oracle@waixuan-test /data/oracle/product/19.3.000/db_home/OPatch<span class="token punctuation">]</span>$ lltotal <span class="token number">228</span>drwxrwxrwx <span class="token number">6</span> oracle oinstall  <span class="token number">4096</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> autodrwxr-x--- <span class="token number">3</span> oracle oinstall  <span class="token number">4096</span> Mar <span class="token number">12</span> <span class="token number">14</span>:49 budingdrwxrwxrwx <span class="token number">2</span> oracle oinstall  <span class="token number">4096</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> config-rwxr-x--- <span class="token number">1</span> oracle oinstall   <span class="token number">589</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> datapatchdrwxrwxrwx <span class="token number">2</span> oracle oinstall  <span class="token number">4096</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> docs-rwxr-x--- <span class="token number">1</span> oracle oinstall <span class="token number">23550</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> emdpatch.pldrwxr-x--- <span class="token number">3</span> oracle oinstall  <span class="token number">4096</span> Aug  <span class="token number">9</span>  <span class="token number">2019</span> etcdrwxr-x--- <span class="token number">3</span> oracle oinstall  <span class="token number">4096</span> Aug  <span class="token number">9</span>  <span class="token number">2019</span> filesdrwxrwxrwx <span class="token number">2</span> oracle oinstall  <span class="token number">4096</span> Jan <span class="token number">23</span> 08:47 jlibdrwxrwxrwx <span class="token number">5</span> oracle oinstall  <span class="token number">4096</span> Aug <span class="token number">17</span>  <span class="token number">2018</span> jredrwxrwxrwx <span class="token number">9</span> oracle oinstall  <span class="token number">4096</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> modulesdrwxrwxrwx <span class="token number">5</span> oracle oinstall  <span class="token number">4096</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> ocm-rwxr-x--- <span class="token number">1</span> oracle oinstall <span class="token number">48493</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> opatch-rwxr-x--- <span class="token number">1</span> oracle oinstall  <span class="token number">1442</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> opatchauto-rwxrwxrwx <span class="token number">1</span> oracle oinstall   <span class="token number">393</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> opatchauto.cmd-rwxrwxrwx <span class="token number">1</span> oracle oinstall  <span class="token number">4290</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> opatch_env.sh-rwxr-x--- <span class="token number">1</span> oracle oinstall  <span class="token number">2551</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> opatch.pldrwxrwxrwx <span class="token number">4</span> oracle oinstall  <span class="token number">4096</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> opatchprereqs-rwxr-x--- <span class="token number">1</span> oracle oinstall  <span class="token number">3159</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> operr-rwxrwxrwx <span class="token number">1</span> oracle oinstall  <span class="token number">3177</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> operr_readme.txtdrwxrwxrwx <span class="token number">2</span> oracle oinstall  <span class="token number">4096</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> oplandrwxrwxrwx <span class="token number">3</span> oracle oinstall  <span class="token number">4096</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> oracle_commondrwxrwxrwx <span class="token number">3</span> oracle oinstall  <span class="token number">4096</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> plugins-rw-rw-r-- <span class="token number">1</span> oracle oinstall  <span class="token number">5779</span> Aug  <span class="token number">9</span>  <span class="token number">2019</span> README.txtdrwxrwxrwx <span class="token number">2</span> oracle oinstall  <span class="token number">4096</span> Jan <span class="token number">23</span> 08:47 scripts-rw-r----- <span class="token number">1</span> oracle oinstall    <span class="token number">27</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> version.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此目录下执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>oracle@iZ2zehl1ro7yd08bzf0h3rZ OPatch<span class="token punctuation">]</span>$ ./opatch apply<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/direct/de3437ebe1ff4252b0bb2f47102a3494.png" alt="在这里插入图片描述"><br>看到下图的提示就是成功了<br><img src="https://img-blog.csdnimg.cn/direct/82ced0efb4814344b90d6d33e73a90f4.png" alt="在这里插入图片描述"><br>查看已装补丁情况</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">opatch lsinventory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后需要执行补丁sql<br>upg_tzv_check.sql<br>upg_tzv_apply.sql</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>oracle@iZ2zehl1ro7yd08bzf0h3rZ yusys<span class="token punctuation">]</span>$ sqlplus / as sysdba SQL*Plus: Release <span class="token number">19.0</span>.0.0.0 - Production on Tue Mar <span class="token number">12</span> <span class="token number">10</span>:18:20 <span class="token number">2024</span>Version <span class="token number">19.3</span>.0.0.0Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">1982</span>, <span class="token number">2019</span>, Oracle.  All rights reserved.Connected to:Oracle Database 19c Enterprise Edition Release <span class="token number">19.0</span>.0.0.0 - ProductionVersion <span class="token number">19.3</span>.0.0.0SQL<span class="token operator">></span> @upg_tzv_check.sql<span class="token punctuation">;</span>INFO: Starting with RDBMS DST update preparation.INFO: NO actual RDBMS DST update will be <span class="token keyword">done</span> by this script.INFO: If an ERROR occurs the script will EXIT sqlplus.INFO: Doing checks <span class="token keyword">for</span> known issues <span class="token punctuation">..</span>.INFO: Database version is <span class="token number">19.0</span>.0.0 <span class="token builtin class-name">.</span>INFO: Database RDBMS DST version is DSTv32 <span class="token builtin class-name">.</span>INFO: No known issues detected.INFO: Now detecting new RDBMS DST version.A prepare window has been successfully started.INFO: Newest RDBMS DST version detected is DSTv33 <span class="token builtin class-name">.</span>INFO: Next step is checking all TSTZ data.INFO: It might take a <span class="token keyword">while</span> before any further output is seen <span class="token punctuation">..</span>.A prepare window has been successfully ended.INFO: A newer RDBMS DST version than the one currently used is found.INFO: Note that NO DST update was yet done.INFO: Now run upg_tzv_apply.sql to <span class="token keyword">do</span> the actual RDBMS DST update.INFO: Note that the upg_tzv_apply.sql script willINFO: restart the database <span class="token number">2</span> <span class="token builtin class-name">times</span> WITHOUT any confirmation or prompt.SQL<span class="token operator">></span> @upg_tzv_apply.sql<span class="token punctuation">;</span>INFO: If an ERROR occurs the script will EXIT sqlplus.INFO: The database RDBMS DST version will be updated to DSTv33 <span class="token builtin class-name">.</span>WARNING: This script will restart the database <span class="token number">2</span> <span class="token builtin class-name">times</span>WARNING: WITHOUT asking ANY confirmation.WARNING: Hit control-c NOW <span class="token keyword">if</span> this is not intended.INFO: Restarting the database <span class="token keyword">in</span> UPGRADE mode to start the DST upgrade.Database closed.Database dismounted.ORACLE instance shut down.ORACLE instance started.Total System Global Area <span class="token number">9932109768</span> bytesFixed Size                 <span class="token number">12445640</span> bytesVariable Size            <span class="token number">1610612736</span> bytesDatabase Buffers         <span class="token number">8287944704</span> bytesRedo Buffers               <span class="token number">21106688</span> bytesDatabase mounted.Database opened.INFO: Starting the RDBMS DST upgrade.INFO: Upgrading all SYS owned TSTZ data.INFO: It might take <span class="token function">time</span> before any further output is seen <span class="token punctuation">..</span>.An upgrade window has been successfully started.INFO: Restarting the database <span class="token keyword">in</span> NORMAL mode to upgrade non-SYS TSTZ data.Database closed.Database dismounted.ORACLE instance shut down.ORACLE instance started.Total System Global Area <span class="token number">9932109768</span> bytesFixed Size                 <span class="token number">12445640</span> bytesVariable Size            <span class="token number">1610612736</span> bytesDatabase Buffers         <span class="token number">8287944704</span> bytesRedo Buffers               <span class="token number">21106688</span> bytesDatabase mounted.Database opened.INFO: Upgrading all non-SYS TSTZ data.INFO: It might take <span class="token function">time</span> before any further output is seen <span class="token punctuation">..</span>.INFO: Do NOT start any application yet that uses TSTZ data<span class="token operator">!</span>INFO: Next is a list of all upgraded tables:Table list: <span class="token string">"GSMADMIN_INTERNAL"</span><span class="token builtin class-name">.</span><span class="token string">"AQ<span class="token variable">$_CHANGE_LOG_QUEUE_TABLE_L</span>"</span>Number of failures: <span class="token number">0</span>Table list: <span class="token string">"GSMADMIN_INTERNAL"</span><span class="token builtin class-name">.</span><span class="token string">"AQ<span class="token variable">$_CHANGE_LOG_QUEUE_TABLE_S</span>"</span>Number of failures: <span class="token number">0</span>Table list: <span class="token string">"MDSYS"</span><span class="token builtin class-name">.</span><span class="token string">"SDO_DIAG_MESSAGES_TABLE"</span>Number of failures: <span class="token number">0</span>Table list: <span class="token string">"DVSYS"</span><span class="token builtin class-name">.</span><span class="token string">"AUDIT_TRAIL$"</span>Number of failures: <span class="token number">0</span>Table list: <span class="token string">"DVSYS"</span><span class="token builtin class-name">.</span><span class="token string">"SIMULATION_LOG$"</span>Number of failures: <span class="token number">0</span>INFO: Total failures during update of TSTZ data: <span class="token number">0</span> <span class="token builtin class-name">.</span>An upgrade window has been successfully ended.INFO: Your new Server RDBMS DST version is DSTv33 <span class="token builtin class-name">.</span>INFO: The RDBMS DST update is successfully finished.INFO: Make sure to <span class="token builtin class-name">exit</span> this sqlplus session.INFO: Do not use it <span class="token keyword">for</span> timezone related selects.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行过后查看当前数据库时区，和源库相同都是33了！<br><img src="https://img-blog.csdnimg.cn/direct/312ad03f3e8646c9844ad9ad94668de3.png" alt="在这里插入图片描述"><br>此时再执行导入命令就可以了<br><img src="https://img-blog.csdnimg.cn/direct/c47a328f14894aabbe52d92159db936f.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近公司在aws的项目要迁移到我们公司云平台，需要将aws上面的rds（oracle）实例迁移到本地云平台，遇到各种各样的问题，下面总结下遇到的所有问题及解决方法。&lt;br&gt;我这边用了各种各样的方法进行迁移，最终才成功将数据迁回&lt;/p&gt;
&lt;h3 id=&quot;方法1（失败）：nav</summary>
      
    
    
    
    <category term="oracle" scheme="http://dycloud.fun/categories/oracle/"/>
    
    
    <category term="oracle" scheme="http://dycloud.fun/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>vue3左侧菜单隐藏某选项</title>
    <link href="http://dycloud.fun/2023/07/29/%E6%A0%B9%E6%8D%AErouter%E6%98%BE%E7%A4%BA%E5%B7%A6%E4%BE%A7%E8%8F%9C%E5%8D%95%E6%A0%8F%E9%9A%90%E8%97%8F%E6%9F%90%E4%B8%AA%E8%8F%9C%E5%8D%95%E9%80%89%E9%A1%B9/"/>
    <id>http://dycloud.fun/2023/07/29/%E6%A0%B9%E6%8D%AErouter%E6%98%BE%E7%A4%BA%E5%B7%A6%E4%BE%A7%E8%8F%9C%E5%8D%95%E6%A0%8F%E9%9A%90%E8%97%8F%E6%9F%90%E4%B8%AA%E8%8F%9C%E5%8D%95%E9%80%89%E9%A1%B9/</id>
    <published>2023-07-29T06:32:00.000Z</published>
    <updated>2024-01-17T07:05:51.529Z</updated>
    
    <content type="html"><![CDATA[<h1 id="根据router显示左侧菜单栏隐藏某个菜单选项"><a href="#根据router显示左侧菜单栏隐藏某个菜单选项" class="headerlink" title="根据router显示左侧菜单栏隐藏某个菜单选项"></a>根据router显示左侧菜单栏隐藏某个菜单选项</h1><p>在写k8s管理平台的时候遇到一个问题，我的左侧菜单栏是通过route路径获取的</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aside-menu<span class="token punctuation">"</span></span>         <span class="token attr-name">router</span>         <span class="token attr-name">:default-active</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$route.path<span class="token punctuation">"</span></span>         <span class="token attr-name">:collapse</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isCollapse<span class="token punctuation">"</span></span>         <span class="token attr-name">background-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#131b27<span class="token punctuation">"</span></span>         <span class="token attr-name">text-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#bfcbd9<span class="token punctuation">"</span></span>         <span class="token attr-name">active-text-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#20a0ff<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是我router目录下index.js的路由</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> LoginView<span class="token punctuation">,</span>      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">'/Summary'</span><span class="token punctuation">,</span>      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/Summary"</span><span class="token punctuation">,</span>      <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"odometer"</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span>HomeView<span class="token punctuation">,</span>      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"odometer"</span><span class="token punctuation">,</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/Summary"</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'概要'</span><span class="token punctuation">,</span>          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"概要"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/Summary/SummaryView.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/workflow'</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span>HomeView<span class="token punctuation">,</span>      <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"VideoPlay"</span><span class="token punctuation">,</span>      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/workflow"</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"工作流"</span><span class="token punctuation">,</span>          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"VideoPlay"</span><span class="token punctuation">,</span>          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"工作流"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/workflow/workflowView.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/cluster"</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"集群"</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span>HomeView<span class="token punctuation">,</span>      <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"home-filled"</span><span class="token punctuation">,</span>      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"集群"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/cluster/node"</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Node"</span><span class="token punctuation">,</span>          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-s-data"</span><span class="token punctuation">,</span>          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Node"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/cluster/nodeView.vue"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/cluster/namespace"</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Namespace"</span><span class="token punctuation">,</span>          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-document-add"</span><span class="token punctuation">,</span>          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"创建namespace"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/cluster/namespaceView.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/workload"</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"工作负载"</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span>HomeView<span class="token punctuation">,</span>      <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"menu"</span><span class="token punctuation">,</span>      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"工作负载"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/workload/deployment"</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Deployment"</span><span class="token punctuation">,</span>          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-s-data"</span><span class="token punctuation">,</span>          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Deployment"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/workload/deploymentView.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"pod/:type/:deploymentName/:namespace"</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Pod"</span><span class="token punctuation">,</span>          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-document-add"</span><span class="token punctuation">,</span>          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Pod"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">hidden</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/workload/podView.vue"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/workload/deamonset"</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"DaemonSet"</span><span class="token punctuation">,</span>          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-document-add"</span><span class="token punctuation">,</span>          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"DaemonSet"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/workload/daemonsetView.vue"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/workload/statefulset"</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"StatefulSet"</span><span class="token punctuation">,</span>          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-document-add"</span><span class="token punctuation">,</span>          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"DaemonSets"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/workload/statefulsetView.vue"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/loadbalance"</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"负载均衡"</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span>HomeView<span class="token punctuation">,</span>      <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"files"</span><span class="token punctuation">,</span>      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"负载均衡"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/loadbalance/service"</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Service"</span><span class="token punctuation">,</span>          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-s-data"</span><span class="token punctuation">,</span>          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Service"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/loadbalance/serviceView.vue"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/loadbalance/ingress"</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Ingress"</span><span class="token punctuation">,</span>          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-document-add"</span><span class="token punctuation">,</span>          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Ingress"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/loadbalance/ingressView.vue"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/storage"</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"存储与配置"</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span>HomeView<span class="token punctuation">,</span>      <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"tickets"</span><span class="token punctuation">,</span>      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"存储与配置"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/storage/configmap"</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Configmap"</span><span class="token punctuation">,</span>          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-document-add"</span><span class="token punctuation">,</span>          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Configmap"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/storage/configmapView.vue"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/storage/secret"</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Secret"</span><span class="token punctuation">,</span>          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-document-add"</span><span class="token punctuation">,</span>          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Secret"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/storage/secretView.vue"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/storage/persistentvolume"</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"PersistentVolume"</span><span class="token punctuation">,</span>          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-document-add"</span><span class="token punctuation">,</span>          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"PersistemtVolume"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/storage/persistentvolumeView.vue"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/storage/persistentvolumeclaim"</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"PersistentVolumeClaim"</span><span class="token punctuation">,</span>          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-s-data"</span><span class="token punctuation">,</span>          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"PersistentVolumeClaim"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/storage/persistentvolumeClainView.vue"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/users"</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"用户管理"</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span>HomeView<span class="token punctuation">,</span>      <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"avatar"</span><span class="token punctuation">,</span>      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"存储与配置"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/users/user"</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"用户"</span><span class="token punctuation">,</span>          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-document-add"</span><span class="token punctuation">,</span>          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"用户"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/user/userView.vue"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"user/:id"</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"userDetail"</span><span class="token punctuation">,</span>          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-document-add"</span><span class="token punctuation">,</span>          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"用户详情"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">hidden</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/user/userInfoView.vue"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/user/group"</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"用户组"</span><span class="token punctuation">,</span>          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-document-add"</span><span class="token punctuation">,</span>          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"用户组"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/user/groupView.vue"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/user/settings"</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"用户设置"</span><span class="token punctuation">,</span>          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-s-data"</span><span class="token punctuation">,</span>          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"用户设置"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/user/userSetView.vue"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/404'</span><span class="token punctuation">,</span>      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/common/404.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'404'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/403'</span><span class="token punctuation">,</span>      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/common/403.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'403'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//其他路径跳转至404页面</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/:pathMatch(.*)'</span><span class="token punctuation">,</span>      <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">'/404'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而如果我想让左侧菜单栏不显示某些路由呢？网上找了很多方法都不起作用，终于根据下面的方法成功了。注意，要在router路由中添加hidden属性如：meta: {title: “Pod”, requireAuth: true,hidden: true},</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">filterRoutes</span><span class="token punctuation">(</span><span class="token parameter">routes</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> routes      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>r<span class="token punctuation">.</span>meta<span class="token operator">?.</span>hidden<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token operator">...</span>r<span class="token punctuation">,</span>            <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token function">filterRoutes</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>children<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> filteredRouters <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">filterRoutes</span><span class="token punctuation">(</span>routers<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;根据router显示左侧菜单栏隐藏某个菜单选项&quot;&gt;&lt;a href=&quot;#根据router显示左侧菜单栏隐藏某个菜单选项&quot; class=&quot;headerlink&quot; title=&quot;根据router显示左侧菜单栏隐藏某个菜单选项&quot;&gt;&lt;/a&gt;根据router显示左侧菜单栏隐藏</summary>
      
    
    
    
    <category term="golang" scheme="http://dycloud.fun/categories/golang/"/>
    
    
    <category term="云原生" scheme="http://dycloud.fun/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    <category term="golang" scheme="http://dycloud.fun/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Vue状态管理</title>
    <link href="http://dycloud.fun/2023/07/13/Vue%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
    <id>http://dycloud.fun/2023/07/13/Vue%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</id>
    <published>2023-07-13T09:29:00.000Z</published>
    <updated>2024-01-17T07:05:26.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue状态管理"><a href="#Vue状态管理" class="headerlink" title="Vue状态管理"></a>Vue状态管理</h1><p>前端每个页面访问后端数据的时候都需要token，那么所有组件都需要依赖token这个数据，所以就需要将token找个一个共享的存储，让其他组件都能访问到它，和服务端的session功能类似，如何实现？</p><h3 id="一、共享内存"><a href="#一、共享内存" class="headerlink" title="一、共享内存"></a>一、共享内存</h3><p>第一种方式最直接：共享内存，直接开辟一个变量，全局都可以访问到了，类似于后端的全局变量</p><h5 id="1、全局注入"><a href="#1、全局注入" class="headerlink" title="1、全局注入"></a>1、全局注入</h5><p>使用到 provide() 函数注入到根实例, 从而提供全局变量功能</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> RouterLink<span class="token punctuation">,</span> RouterView <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">"@/components/HelloWorld.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> provide <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token comment">// 如果的变量可以是响应式的</span><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token comment">/* 注入名 */</span> <span class="token string">"count"</span><span class="token punctuation">,</span> <span class="token comment">/* 值 */</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过inject获取父组件注入的变量</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> inject <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token comment">// 这里也可以获取默认值: inject(&lt;变量名称>, &lt;变量默认值>), 如果获取不到变量 就使用默认值</span><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">doClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"doClick"</span><span class="token operator">></span>You clicked me <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> times<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、组合式函数"><a href="#2、组合式函数" class="headerlink" title="2、组合式函数"></a>2、组合式函数</h5><p>声明一个响应式模块，导出后，提供给所有组件使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// store/global.js</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他组件通过js的导入语法直接使用，妥妥的全局变量</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> store <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@/stores/global"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">doClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  store<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"doClick"</span><span class="token operator">></span>You clicked me <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> store<span class="token punctuation">.</span>count <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> times<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>这种其实就是一个简单粗暴的 通过共享内存进行通信的方式, 好在其简单易懂，也许你会喜欢, 但是也有它的缺陷</p><p>因为这种方式使用的是内存, 所以页面关闭或者刷新就都没有, 想要就状态持久化 还需要存储</p><h3 id="二、浏览器本地存储"><a href="#二、浏览器本地存储" class="headerlink" title="二、浏览器本地存储"></a>二、浏览器本地存储</h3><p>这种方式就需要使用到浏览器的存储功能了, 它可供我们存储客户端临时信息 简称 Web Storage</p><p><img src="/images/2M0BPYlJWs_hEMm7Sa50pKw2oDeD_3f8G1HVWIiHMOA.png" alt="image"></p><ul><li>cookie</li><li>sessionStorage</li><li>localStorage</li></ul><h5 id="1、cookie"><a href="#1、cookie" class="headerlink" title="1、cookie"></a>1、cookie</h5><p>cookie是有可以设置过期时间的，同一个域下的页面都可以访问</p><p>cookie在没有设置过期时间时，系统默认浏览器关闭时失效，只有设置了没到期的保存日期时，浏览器才会把cookie作为文件保存在本地上。当expire到期时，cookie不会自动删除，仅在下次启动浏览器或刷新浏览器时，浏览器会检测cookie过期时间，如已过期浏览器则会删除过期cookie</p><p>注意：</p><ul><li>数据存放大小：4k，因为每次http请求都会携带cookie</li><li>浏览器关闭时，cookie会失效</li><li>注意cookie可以支持httpOnly，这个时候前端js是修改不了的（也看不到）</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 读取cookie, 注意读取出来的cookie是个字符串</span>document<span class="token punctuation">.</span>cookie<span class="token string">'language=zh; Sub-System=develop; sidebarStatus=1; Current-Namespace=c16mhsddrei91m4ri0jg; Refresh-Token=paBuyTIfsX3BeKrXrCmD8khUla6x8y1g'</span><span class="token comment">// 需要自己处理</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'; '</span><span class="token punctuation">)</span><span class="token comment">// 直接赋值就添加了一个key-value</span>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">'cookieKey=cookieValue'</span><span class="token string">'language=zh; Sub-System=develop; sidebarStatus=1; Current-Namespace=c16mhsddrei91m4ri0jg; Refresh-Token=paBuyTIfsX3BeKrXrCmD8khUla6x8y1g; cookieKey=cookieValue'</span><span class="token comment">// 当然cookie还有很多选项可以设置, 通过;隔开比如</span>document<span class="token punctuation">.</span>cookie<span class="token operator">=</span><span class="token string">"username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/"</span><span class="token punctuation">;</span><span class="token comment">// 修改cookie和设置cookie一样, 保证key相同就可以</span>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">'cookieKey=cookieValue2'</span>document<span class="token punctuation">.</span>cookie<span class="token string">'language=zh; Sub-System=develop; sidebarStatus=1; Current-Namespace=c16mhsddrei91m4ri0jg; Refresh-Token=paBuyTIfsX3BeKrXrCmD8khUla6x8y1g; cookieKey=cookieValue2'</span><span class="token comment">// 删除cookie时，把expires 设置到过期的时间即可, 比如设置个2019年的时间</span>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">cookieKey=;expires=Mon, 26 Aug 2019 12:00:00 UTC</span><span class="token template-punctuation string">`</span></span>document<span class="token punctuation">.</span>cookie<span class="token string">'language=zh; Sub-System=develop; sidebarStatus=1; Current-Namespace=c16mhsddrei91m4ri0jg; Refresh-Token=paBuyTIfsX3BeKrXrCmD8khUla6x8y1g'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、sessionStorage"><a href="#2、sessionStorage" class="headerlink" title="2、sessionStorage"></a>2、sessionStorage</h5><p>存储的数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁, 因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储</p><p>那么，到底什么是一个会话？多个标签页之间的数据是否会共享呢？</p><blockquote><p>我们可以验证下: 开启2个窗口, 直接通过浏览器修改sessionStorage 进行验证</p></blockquote><p>通过验证我们可以知道 一个标签页 就表示一个回话, 当标签页关闭, 回话就清除, 不通标签页之间不共享数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 通过setItem设置key-value</span>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'value1'</span><span class="token punctuation">)</span>sessionStorage<span class="token punctuation">[</span><span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'value2'</span>sessionStorage<span class="token punctuation">.</span>key2<span class="token operator">=</span> <span class="token string">'value2'</span><span class="token comment">// 查询sessionStorage对象</span>sessionStorageStorage <span class="token punctuation">&#123;</span><span class="token literal-property property">key2</span><span class="token operator">:</span> <span class="token string">'value2'</span><span class="token punctuation">,</span> <span class="token literal-property property">key1</span><span class="token operator">:</span> <span class="token string">'value1'</span><span class="token punctuation">,</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token comment">// 通过getItem获取key的值</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span>sessionStorage<span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">]</span>sessionStorage<span class="token punctuation">.</span>key1<span class="token comment">// 修改</span>sessionStorage<span class="token punctuation">.</span>key1 <span class="token operator">=</span> <span class="token string">'value11'</span>sessionStorage<span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'value11'</span><span class="token comment">// 删除key</span>sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span><span class="token comment">// 清空storage</span>sessionStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、localStorage"><a href="#3、localStorage" class="headerlink" title="3、localStorage"></a>3、localStorage</h5><p>localStorage生命周期是永久, 除非主动删除数据，否则数据是永远不会过期的</p><p>相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口）</p><blockquote><p>我们可以验证下: 开启2个窗口, 直接通过浏览器修改localStorage 进行验证</p></blockquote><p>localStorage的操作方法和sessionStorage完全一样:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 通过setItem设置key-value</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'value1'</span><span class="token punctuation">)</span>localStorage<span class="token punctuation">[</span><span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'value2'</span>localStorage<span class="token punctuation">.</span>key2 <span class="token operator">=</span> <span class="token string">'value2'</span><span class="token comment">// 查询sessionStorage对象</span>localStorageStorage <span class="token punctuation">&#123;</span><span class="token literal-property property">key2</span><span class="token operator">:</span> <span class="token string">'value2'</span><span class="token punctuation">,</span> <span class="token literal-property property">key1</span><span class="token operator">:</span> <span class="token string">'value1'</span><span class="token punctuation">,</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token comment">// 通过getItem获取key的值</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span>localStorage<span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">]</span>localStorage<span class="token punctuation">.</span>key1<span class="token comment">// 修改</span>localStorage<span class="token punctuation">.</span>key1 <span class="token operator">=</span> <span class="token string">'value11'</span>localStorage<span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'value11'</span><span class="token comment">// 删除key</span>localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span><span class="token comment">// 清空storage</span>localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、Vueuse与本地存储"><a href="#三、Vueuse与本地存储" class="headerlink" title="三、Vueuse与本地存储"></a>三、Vueuse与本地存储</h3><p>作为vue3的标准库, vueuse提供了很多实用的工具来实现了状态管理, 其他就有保护浏览器存储的组合式API函数: <a href="https://gitee.com/link?target=https://vueuse.org/functions.html%23category=State">Vueuse State相关工具</a></p><p>在vueuse中有一个高频使用的函数: useStorage, 就默认就是使用的LocalStorage, 该函数已经讲LocalStroage包装成了响应式了, 因此你可以把他理解为一个带有持久化机制的响应式对象</p><p>下面是useStorage的基础用法:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useStorage <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@vueuse/core'</span><span class="token comment">// bind object</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">useStorage</span><span class="token punctuation">(</span><span class="token string">'my-store'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">hello</span><span class="token operator">:</span> <span class="token string">'hi'</span><span class="token punctuation">,</span> <span class="token literal-property property">greeting</span><span class="token operator">:</span> <span class="token string">'Hello'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// bind boolean</span><span class="token keyword">const</span> flag <span class="token operator">=</span> <span class="token function">useStorage</span><span class="token punctuation">(</span><span class="token string">'my-flag'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// returns Ref&lt;boolean></span><span class="token comment">// bind number</span><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">useStorage</span><span class="token punctuation">(</span><span class="token string">'my-count'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// returns Ref&lt;number></span><span class="token comment">// bind string with SessionStorage</span><span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">useStorage</span><span class="token punctuation">(</span><span class="token string">'my-id'</span><span class="token punctuation">,</span> <span class="token string">'some-string-id'</span><span class="token punctuation">,</span> sessionStorage<span class="token punctuation">)</span> <span class="token comment">// returns Ref&lt;string></span><span class="token comment">// delete data from storage</span>state<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们集合前面共享内存的通信方式, 把他们改造成, 结合本地存储基础, 从而避免刷新页面是状态丢失:</p><ul><li>注入依赖</li><li>组合式函数</li></ul><h5 id="注入依赖持久化"><a href="#注入依赖持久化" class="headerlink" title="注入依赖持久化"></a>注入依赖持久化</h5><p>直接使用useStorage构造一个响应式持久化变量:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> RouterLink<span class="token punctuation">,</span> RouterView <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useStorage <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@vueuse/core'</span><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">"@/components/HelloWorld.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> provide <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token comment">// 如果的变量可以是响应式的</span><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">useStorage</span><span class="token punctuation">(</span><span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token comment">/* 注入名 */</span> <span class="token string">"count"</span><span class="token punctuation">,</span> <span class="token comment">/* 值 */</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里也可以获取默认值: inject(&lt;变量名称>, &lt;变量默认值>), 如果获取不到变量 就使用默认值</span><span class="token comment">// const count = inject("count");</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="全局变量持久化"><a href="#全局变量持久化" class="headerlink" title="全局变量持久化"></a>全局变量持久化</h5><p>声明一个响应式模块，导出后，提供给所有组件使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// stroes/app.js</span><span class="token comment">// 保存当前应用程序的状态</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useStorage <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@vueuse/core'</span><span class="token comment">// localStorage.setItem('my-store', '&#123;"hello": "nihao"&#125;')</span><span class="token comment">// 将用户的token等信息保存到浏览器的localstorage中</span><span class="token keyword">export</span> <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">useStorage</span><span class="token punctuation">(</span>    <span class="token string">'vblog'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">token</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">is_login</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    localStorage<span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">mergeDefaults</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// &lt;--</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样登录成功后就可以通过全局变量保存到localstorage中</p><p><img src="/images/7FhHj0RZ6jcFyOyTHOeZTff_NuBsATyuYl84sFsLDV0.png" alt="image"></p><p>某个组件需要使用</p><p><img src="/images/dn6pgAwskk3qACKChFVNC2og2QXBA4HgQwTYEt_SBmY.png" alt="image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue状态管理&quot;&gt;&lt;a href=&quot;#Vue状态管理&quot; class=&quot;headerlink&quot; title=&quot;Vue状态管理&quot;&gt;&lt;/a&gt;Vue状态管理&lt;/h1&gt;&lt;p&gt;前端每个页面访问后端数据的时候都需要token，那么所有组件都需要依赖token这个数据，所以就需要</summary>
      
    
    
    
    <category term="golang" scheme="http://dycloud.fun/categories/golang/"/>
    
    
    <category term="云原生" scheme="http://dycloud.fun/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    <category term="golang" scheme="http://dycloud.fun/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>基于IOC解决对象依赖问题</title>
    <link href="http://dycloud.fun/2023/06/27/%E5%9F%BA%E4%BA%8EIOC%E8%A7%A3%E5%86%B3%E5%AF%B9%E8%B1%A1%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/"/>
    <id>http://dycloud.fun/2023/06/27/%E5%9F%BA%E4%BA%8EIOC%E8%A7%A3%E5%86%B3%E5%AF%B9%E8%B1%A1%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/</id>
    <published>2023-06-27T03:32:00.000Z</published>
    <updated>2024-01-17T07:04:53.952Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于IOC解决对象依赖问题"><a href="#基于IOC解决对象依赖问题" class="headerlink" title="基于IOC解决对象依赖问题"></a>基于IOC解决对象依赖问题</h1><p>ioc是一种软件设计原则，用来降低代码之间耦合度。如果没有ioc机制，多个模块调用会显得异常繁琐，而ioc是将控制权从程序代码中抽离，交给外部的容器或框架，从而实现依赖关系的动态置顶，增加程序的灵活性和可维护性，下面我的例子只是一个简单的以容器为基础实现的ioc注册。</p><p>store.go：</p><ul><li>IocContainer：负责注册ioc对象、初始化ioc对象操作</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go">ackage ioc<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"gitee.com/dujie5416/vblog/apps/users/config"</span>    <span class="token string">"github.com/gin-gonic/gin"</span><span class="token punctuation">)</span><span class="token comment">//</span><span class="token comment">//  IocContainer</span><span class="token comment">//  @Description: 定义一个对象注册表</span><span class="token comment">//</span><span class="token keyword">type</span> IocContainer <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 采用map来保证对象的注册关系</span>    store <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>IocObject<span class="token punctuation">&#125;</span><span class="token comment">/* * Init * @Description: 负责初始化所有的对象，因为map是无序的，这里如果要控制初始化的顺序，可以替换成list * @receiver c * @return error */</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>IocContainer<span class="token punctuation">)</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>store<span class="token punctuation">)</span>    config<span class="token punctuation">.</span><span class="token function">LoadMysqlConfigFromToml</span><span class="token punctuation">(</span><span class="token string">"../etc/mysql.toml"</span><span class="token punctuation">)</span>    <span class="token comment">// 遍历所有单例对象，并对每个单例对象进行初始化操作</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> obj <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>store <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> obj<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> err        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token comment">/* * Registry * @Description: 将对象注册到ioc中 * @receiver c * @param obj */</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>IocContainer<span class="token punctuation">)</span> <span class="token function">Registry</span><span class="token punctuation">(</span>obj IocObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    c<span class="token punctuation">.</span>store<span class="token punctuation">[</span>obj<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">&#125;</span><span class="token comment">/* * Get * @Description: 获取ioc对象的名字 * @receiver c * @param name * @return any */</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>IocContainer<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> any <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> c<span class="token punctuation">.</span>store<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token comment">//  GinApiHandlers</span><span class="token comment">//  @Description: gin api的接口，用于注册路由</span><span class="token comment">//</span><span class="token keyword">type</span> GinApiHandlers <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>    <span class="token function">RegisterRouter</span><span class="token punctuation">(</span>r gin<span class="token punctuation">.</span>IRouter<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/* * RouteRegistry * @Description: 将每个api handlers 的路由注册到root router中 * @receiver c * @param router */</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>IocContainer<span class="token punctuation">)</span> <span class="token function">RouteRegistry</span><span class="token punctuation">(</span>router gin<span class="token punctuation">.</span>IRouter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>store<span class="token punctuation">)</span>    <span class="token comment">// 找到被扩管的APIHandler</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> obj <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>store <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> api<span class="token punctuation">,</span> ok <span class="token operator">:=</span> obj<span class="token punctuation">.</span><span class="token punctuation">(</span>GinApiHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>            api<span class="token punctuation">.</span><span class="token function">RegisterRouter</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>interface.go：定义Init()和Name()函数，注册进ioc对象必须实现该两种方法</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> ioc<span class="token comment">//</span><span class="token comment">//  IocObject</span><span class="token comment">//  @Description: 定义注册进来的对象的约束条件</span><span class="token comment">//</span><span class="token keyword">type</span> IocObject <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 对象的初始化</span>    <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>    <span class="token comment">// 对象的名称</span>    <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller.go：专门用于注入controller对象</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> ioc<span class="token comment">/* * Controller * @Description: 专门用于注册controller对象 * @return *IocContainer */</span><span class="token keyword">func</span> <span class="token function">Controller</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>IocContainer <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> controllerContainer<span class="token punctuation">&#125;</span><span class="token comment">//ioc注册表对象，全局只有一个</span><span class="token keyword">var</span> controllerContainer <span class="token operator">=</span> <span class="token operator">&amp;</span>IocContainer<span class="token punctuation">&#123;</span>    store<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>IocObject<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>api.go：专门注册api对象</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> ioc<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">/* * ApiHandler * @Description: 专门用于注册api handler对象 * @return *IocContainer */</span><span class="token keyword">func</span> <span class="token function">ApiHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>IocContainer <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> apiHandlerContainer<span class="token punctuation">&#125;</span><span class="token comment">//ioc注册表对象，全局只有一个</span><span class="token keyword">var</span> apiHandlerContainer <span class="token operator">=</span> <span class="token operator">&amp;</span>IocContainer<span class="token punctuation">&#123;</span>    store<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>IocObject<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"这是apihand"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将对象注入到ioc：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> impl<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"gitee.com/dujie5416/vblog/apps/blog"</span>    <span class="token string">"gitee.com/dujie5416/vblog/apps/users/config"</span>    <span class="token string">"gitee.com/dujie5416/vblog/ioc"</span>    <span class="token string">"gorm.io/gorm"</span><span class="token punctuation">)</span><span class="token comment">/* * init * @Description: 将blog impl 对象注册到ioc管理 */</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ioc<span class="token punctuation">.</span><span class="token function">Controller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Registry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>BlogImpl<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token comment">//  BlogImpl</span><span class="token comment">//  @Description: 博客实现结构体</span><span class="token comment">//</span><span class="token keyword">type</span> BlogImpl <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">&#125;</span><span class="token comment">/* * Init * @Description: 实现ioc obj 接口 * @receiver b * @return error */</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>BlogImpl<span class="token punctuation">)</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>    b<span class="token punctuation">.</span>db <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Mysql<span class="token punctuation">.</span><span class="token function">GetMysqlConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>BlogImpl<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> blog<span class="token punctuation">.</span>AppName<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据name获取ioc对象的值：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> api<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"gitee.com/dujie5416/vblog/apps/blog"</span>    <span class="token string">"gitee.com/dujie5416/vblog/ioc"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ioc<span class="token punctuation">.</span><span class="token function">ApiHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Registry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>BlogApiHandler<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> BlogApiHandler <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    svc blog<span class="token punctuation">.</span>Service<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>BlogApiHandler<span class="token punctuation">)</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>    b<span class="token punctuation">.</span>svc <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">Controller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>blog<span class="token punctuation">.</span>AppName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>blog<span class="token punctuation">.</span>Service<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>BlogApiHandler<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> blog<span class="token punctuation">.</span>AppName<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基于IOC解决对象依赖问题&quot;&gt;&lt;a href=&quot;#基于IOC解决对象依赖问题&quot; class=&quot;headerlink&quot; title=&quot;基于IOC解决对象依赖问题&quot;&gt;&lt;/a&gt;基于IOC解决对象依赖问题&lt;/h1&gt;&lt;p&gt;ioc是一种软件设计原则，用来降低代码之间耦合度。如</summary>
      
    
    
    
    <category term="golang" scheme="http://dycloud.fun/categories/golang/"/>
    
    
    <category term="云原生" scheme="http://dycloud.fun/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    <category term="golang" scheme="http://dycloud.fun/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Gin框架</title>
    <link href="http://dycloud.fun/2023/06/23/Gin%E6%A1%86%E6%9E%B6/"/>
    <id>http://dycloud.fun/2023/06/23/Gin%E6%A1%86%E6%9E%B6/</id>
    <published>2023-06-23T06:32:00.000Z</published>
    <updated>2023-08-30T03:23:03.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gin框架"><a href="#Gin框架" class="headerlink" title="Gin框架"></a>Gin框架</h1><h3 id="一、Gin框架使用"><a href="#一、Gin框架使用" class="headerlink" title="一、Gin框架使用"></a>一、Gin框架使用</h3><h5 id="1、Gin框架简介"><a href="#1、Gin框架简介" class="headerlink" title="1、Gin框架简介"></a>1、Gin框架简介</h5><p>Gin是一个用Go语言编写的Web框架。Gin框架拥有很好的性能，借助高性能的<strong>HttpRouter</strong>包，运行速度得到了极大的提升。</p><h5 id="2、Gin框架安装与示例"><a href="#2、Gin框架安装与示例" class="headerlink" title="2、Gin框架安装与示例"></a>2、Gin框架安装与示例</h5><p>（1）、安装</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>gin<span class="token operator">-</span>gonic<span class="token operator">/</span>gin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）、示例</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Get</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    name <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token comment">// 从url中获取name字段</span>    <span class="token comment">// 返回字符串格式的数据</span>    <span class="token comment">//c.String(200, "欢迎您：%s", name)</span>    <span class="token comment">// c.JSON ：返回JSON格式的数据</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>        <span class="token string">"code"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span>        <span class="token string">"msg"</span><span class="token punctuation">:</span>  <span class="token string">"返回信息"</span><span class="token punctuation">,</span>        <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token string">"欢迎您"</span> <span class="token operator">+</span> name<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建一个默认的路由引擎</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// GET：请求方式：/hello：请求的路径，当客户端以Get方法请求/hello路径时，会执行后面的函数</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> Get<span class="token punctuation">)</span>    <span class="token comment">//r.POST("/user/login", Post)</span>    <span class="token comment">// 启动HTTP服务，默认在0.0.0.0:8080启动服务</span>    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1:8090"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/jrXRa7egP8ZJprErQGCJzH2QvcwBf7f_gjPuRZLOiGA.png" alt="image"></p><h5 id="3、Gin路由和控制器"><a href="#3、Gin路由和控制器" class="headerlink" title="3、Gin路由和控制器"></a>3、Gin路由和控制器</h5><p>路由：一个HTTP请求找到对应 的处理器函数的过程。处理器函数主要负责执行HTTP请求和响应任务。如下代码中的goLogin() 函数就是Gin的处理器函数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">goLogin</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    name <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>    password <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"dujie"</span> <span class="token operator">&amp;&amp;</span> password <span class="token operator">==</span> <span class="token string">"123456"</span> <span class="token punctuation">&#123;</span>        context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"code"</span><span class="token punctuation">:</span>     http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span>            <span class="token string">"msg"</span><span class="token punctuation">:</span>      <span class="token string">"登录成功"</span><span class="token punctuation">,</span>            <span class="token string">"username"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">403</span><span class="token punctuation">,</span>            <span class="token string">"msg"</span><span class="token punctuation">:</span>  <span class="token string">"用户或密码错误"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//context.String(200, "username=%s password=%s", name, password)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>####### <strong>（1）、路由规则</strong><br>一条路由规则由HTTP请求方法、URL路径、处理器函数这3个部分组成</p><ol><li><strong>HTTP请求方法</strong></li></ol><p>常用的HTTP请求方法有GET、POST、PUT、DELETE等</p><ol start="2"><li><strong>URL路径</strong></li></ol><p>Gin框架的URL路径有3种写法</p><p>1）静态URL路径，即不带任何参数的URL路径，例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token operator">/</span>users<span class="token operator">/</span>dujie<span class="token operator">/</span>user<span class="token operator">/</span><span class="token number">1</span><span class="token operator">/</span>article<span class="token operator">/</span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2）带路径参数的URL路径，URL路径中带有参数，参数由英文冒号”:” 跟着一个字符串定义。例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">定义参数<span class="token punctuation">:</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3）带星号(*)模糊匹配参数的URL路径</p><p>星号（*）代表匹配任意路径的意思。必须在 * 后面指定一个参数名，之后可以通过这个参数获取 * 号匹配的内容。例如：”&#x2F;user&#x2F;*path” 可以通过path参数获取 * 号匹配的内容，如&#x2F;user&#x2F;1 、&#x2F;user&#x2F;dujie&#x2F;comment&#x2F;1等。</p><p> </p><ol start="3"><li><strong>处理器函数</strong></li></ol><p>Gin框架的处理器函数定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> HandlerFunc <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Context<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>处理器函数接受一个上下文参数。可以通过上下文参数获取HTTP的请求参数，返回HTTP请求的响应。</p><p>####### <strong>（1）、分组路由</strong><br>在做API开发时，如果要支持多个API版本，则可以通过分组路由来处理API版本。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建一个默认的路由引擎</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// GET：请求方式：/hello：请求的路径，当客户端以Get方法请求/hello路径时，会执行后面的函数</span>    v1 <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/v1"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        v1<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> goLogin<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    v2 <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/v2"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        v2<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> goLogin<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8090"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">goLogin</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"1："</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>Params<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2："</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"3："</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>Keys<span class="token punctuation">)</span>    name <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>    password <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"dujie"</span> <span class="token operator">&amp;&amp;</span> password <span class="token operator">==</span> <span class="token string">"123456"</span> <span class="token punctuation">&#123;</span>        context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"code"</span><span class="token punctuation">:</span>     http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span>            <span class="token string">"msg"</span><span class="token punctuation">:</span>      <span class="token string">"登录成功"</span><span class="token punctuation">,</span>            <span class="token string">"username"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">403</span><span class="token punctuation">,</span>            <span class="token string">"msg"</span><span class="token punctuation">:</span>  <span class="token string">"用户或密码错误"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//context.String(200, "username=%s password=%s", name, password)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子会将注册下面的路由信息：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token operator">/</span>v1<span class="token operator">/</span>login<span class="token operator">/</span>v2<span class="token operator">/</span>login<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="4、Gin处理请求参数"><a href="#4、Gin处理请求参数" class="headerlink" title="4、Gin处理请求参数"></a>4、Gin处理请求参数</h5><p>（1）、获取GET请求参数</p><p>Gin获取GET请求参数常用方法如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Query returns the keyed url query value if it exists,</span><span class="token comment">// otherwise it returns an empty string `("")`.</span><span class="token comment">// It is shortcut for `c.Request.URL.Query().Get(key)`</span><span class="token comment">//</span><span class="token comment">//    GET /path?id=1234&amp;name=Manu&amp;value=</span><span class="token comment">//   c.Query("id") == "1234"</span><span class="token comment">//   c.Query("name") == "Manu"</span><span class="token comment">//   c.Query("value") == ""</span><span class="token comment">//   c.Query("wtf") == ""</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Query</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>value<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">GetQuery</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token comment">// DefaultQuery returns the keyed url query value if it exists,</span><span class="token comment">// otherwise it returns the specified defaultValue string.</span><span class="token comment">// See: Query() and GetQuery() for further information.</span><span class="token comment">//</span><span class="token comment">//GET /?name=Manu&amp;lastname=</span><span class="token comment">//c.DefaultQuery("name", "unknown") == "Manu"</span><span class="token comment">//c.DefaultQuery("id", "none") == "none"</span><span class="token comment">//c.DefaultQuery("lastname", "none") == ""</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">DefaultQuery</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> defaultValue <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetQuery</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span><span class="token keyword">return</span> value<span class="token punctuation">&#125;</span><span class="token keyword">return</span> defaultValue<span class="token punctuation">&#125;</span><span class="token comment">// DefaultQuery returns the keyed url query value if it exists,</span><span class="token comment">// otherwise it returns the specified defaultValue string.</span><span class="token comment">// See: Query() and GetQuery() for further information.</span><span class="token comment">//</span><span class="token comment">//GET /?name=Manu&amp;lastname=</span><span class="token comment">//c.DefaultQuery("name", "unknown") == "Manu"</span><span class="token comment">//c.DefaultQuery("id", "none") == "none"</span><span class="token comment">//c.DefaultQuery("lastname", "none") == ""</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">DefaultQuery</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> defaultValue <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetQuery</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span><span class="token keyword">return</span> value<span class="token punctuation">&#125;</span><span class="token keyword">return</span> defaultValue<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（2）、获取POST请求参数</strong></p><p>Gin获取POST请求参数的常用方法如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// PostForm returns the specified key from a POST urlencoded form or multipart form</span><span class="token comment">// when it exists, otherwise it returns an empty string `("")`.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">PostForm</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>value<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">GetPostForm</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token comment">// DefaultPostForm returns the specified key from a POST urlencoded form or multipart form</span><span class="token comment">// when it exists, otherwise it returns the specified defaultValue string.</span><span class="token comment">// See: PostForm() and GetPostForm() for further information.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">DefaultPostForm</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> defaultValue <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetPostForm</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span><span class="token keyword">return</span> value<span class="token punctuation">&#125;</span><span class="token keyword">return</span> defaultValue<span class="token punctuation">&#125;</span><span class="token comment">// GetPostForm is like PostForm(key). It returns the specified key from a POST urlencoded</span><span class="token comment">// form or multipart form when it exists `(value, true)` (even when the value is an empty string),</span><span class="token comment">// otherwise it returns ("", false).</span><span class="token comment">// For example, during a PATCH request to update the user's email:</span><span class="token comment">//</span><span class="token comment">//    email=mail@example.com  -->  ("mail@example.com", true) := GetPostForm("email") // set email to "mail@example.com"</span><span class="token comment">//   email=                  -->  ("", true) := GetPostForm("email") // set email to ""</span><span class="token comment">//                            -->  ("", false) := GetPostForm("email") // do nothing with email</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">GetPostForm</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> values<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetPostFormArray</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span><span class="token keyword">return</span> values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ok<span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法示例：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 跟PostForm的区别是：可以通过第2个参数设置参数默认值</span>name <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">DefaultPostForm</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token comment">//name := context.PostForm("username")</span>password<span class="token punctuation">,</span> ok <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">GetPostForm</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span><span class="token string">"参数不存在"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（3）、获取URL路径参数</strong></p><p>Gin获取URL路径参数是指，获取&#x2F;user&#x2F;:id 这类路由绑定的参数。&#x2F;user&#x2F;:id 绑定了一个参数id。获取URL路径参数的函数如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Param</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> c<span class="token punctuation">.</span>Params<span class="token punctuation">.</span><span class="token function">ByName</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go">r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/:id"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    id <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>    <span class="token keyword">if</span> id <span class="token operator">==</span> <span class="token string">"1"</span> <span class="token punctuation">&#123;</span>        context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>            <span class="token string">"msg"</span><span class="token punctuation">:</span> User<span class="token punctuation">&#123;</span>                UserName<span class="token punctuation">:</span> <span class="token string">"dujie"</span><span class="token punctuation">,</span>                Age<span class="token punctuation">:</span>      <span class="token number">32</span><span class="token punctuation">,</span>                Phone<span class="token punctuation">:</span>    <span class="token string">"15811047166"</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token punctuation">,</span>            <span class="token string">"msg"</span><span class="token punctuation">:</span>  <span class="token string">"无此用户！！！"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（4）、将请求参数绑定到结构体</strong></p><p>前面获取参数的方式都是逐个进行参数的读取，比较麻烦。Gin支持将请求参数自动绑定到一个结构体对象，这种方式支持GET&#x2F;POST请求，也支持HTTP请求体中内容为JSON或XML格式的参数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    UserName <span class="token builtin">string</span> <span class="token string">`json:"userName" form:"username"`</span>    Phone    <span class="token builtin">string</span> <span class="token string">`json:"phone" form:"phone"`</span>    Age      <span class="token builtin">int</span>    <span class="token string">`json:"age" form:"age"`</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>json:”userName”</td><td>数据为JSON格式，并且json字段名为userName</td></tr><tr><td>form:”phone”</td><td>表单参数名为phone</td></tr></tbody></table><p>模拟添加用户：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/user/:id"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    u <span class="token operator">:=</span> User<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> context<span class="token punctuation">.</span><span class="token function">ShouldBind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>UserName<span class="token punctuation">)</span>        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Phone<span class="token punctuation">)</span>        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Age<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>        <span class="token string">"code"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span>        <span class="token string">"msg"</span><span class="token punctuation">:</span>  u<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//context.String(200, "Success")</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>context.ShouldBind(&amp;u) </code>用于将请求中的数据绑定到指定的结构体</p><h5 id="5、Gin生成HTTP请求响应"><a href="#5、Gin生成HTTP请求响应" class="headerlink" title="5、Gin生成HTTP请求响应"></a>5、Gin生成HTTP请求响应</h5><p>Gin支持以字符串、JSON、XML、文件等格式生成HTTP请求响应。gin.Context 上下文对象支持多种返回处理结果。</p><p><strong>（1）以字符串方式生成HTTP请求响应。</strong></p><p>通过String()方法生成字符串方式的HTTP请求响应。String()方法的定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// String writes the given string into the response body.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span>code <span class="token builtin">int</span><span class="token punctuation">,</span> format <span class="token builtin">string</span><span class="token punctuation">,</span> values <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span><span class="token function">Render</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> render<span class="token punctuation">.</span>String<span class="token punctuation">&#123;</span>Format<span class="token punctuation">:</span> format<span class="token punctuation">,</span> Data<span class="token punctuation">:</span> values<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>该方法使用示例如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Handler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"hello%s ,欢迎%s"</span><span class="token punctuation">,</span><span class="token string">"go"</span><span class="token punctuation">,</span><span class="token string">"dujie"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（2）以JSON格式生成HTTP请求响应。</strong></p><p>实际开发API接口时，最常用的就是JSON</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/user/:id"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    u <span class="token operator">:=</span> User<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> context<span class="token punctuation">.</span><span class="token function">ShouldBind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>UserName<span class="token punctuation">)</span>        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Phone<span class="token punctuation">)</span>        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Age<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>        <span class="token string">"code"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span>        <span class="token string">"msg"</span><span class="token punctuation">:</span>  u<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（3）以XML格式生成HTTP请求响应。</strong></p><p>定义一个User结构体，默认结构体的名字就是XML的根节点名字。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    UserName <span class="token builtin">string</span> <span class="token string">`xml:"userName" form:"username"`</span>    Phone    <span class="token builtin">string</span> <span class="token string">`xml:"phone" form:"phone"`</span>    Age      <span class="token builtin">int</span>    <span class="token string">`xml:"age" form:"age"`</span><span class="token punctuation">&#125;</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/:id"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        id <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>        <span class="token keyword">if</span> id <span class="token operator">==</span> <span class="token string">"1"</span> <span class="token punctuation">&#123;</span>            u <span class="token operator">:=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">&#123;</span>                UserName<span class="token punctuation">:</span> <span class="token string">"dujie"</span><span class="token punctuation">,</span>                Age<span class="token punctuation">:</span>      <span class="token number">32</span><span class="token punctuation">,</span>                Phone<span class="token punctuation">:</span>    <span class="token string">"15811047166"</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span>            context<span class="token punctuation">.</span><span class="token function">XML</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/ximOXiVaTWYZnsZ9N_87_7NuNaY7VOlqtqA3kDWSJJ4.png" alt="image"></p><p><strong>（4）以文件格式生成HTTP请求响应。</strong></p><p>通过File() 方法直接返回本地文件，参数为本地文件地址</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span>（c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 通过File（）方法直接返回本地丈件’参数为本地丈件地址  ′</span>      c<span class="token punctuation">.</span><span class="token function">File</span><span class="token punctuation">(</span><span class="token string">"/var/www/gin/test.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（5）设置HTTP响应头。</strong></p><p>Gin中提供了<code>Header()</code>方法来设置HTTP响应头。默认采用key&#x2F;value方式，支持设置多个Header</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/:id"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        id <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>        context<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span>        context<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"site"</span><span class="token punctuation">,</span> <span class="token string">"dujie"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/9ursxjNtKpQ9LIfDPeKTakw4TRCipaBkRqmaCp67lD0.png" alt="image"></p><p><strong>（6）Gin处理静态文件</strong></p><p>如果项目中包含JS、CSS、JPG之类的静态文件，下面的例子：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建一个默认的路由引擎</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Static</span><span class="token punctuation">(</span><span class="token string">"/assets"</span><span class="token punctuation">,</span><span class="token string">"/var/www/gin/assets"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">StaticFile</span><span class="token punctuation">(</span><span class="token string">"/favicon.ico"</span><span class="token punctuation">,</span><span class="token string">"./static/favicon.ico"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（7）Gin处理cookie</strong></p><p>Gin主要通过上下文对象提供的<code>SetCookie()</code> 和<code>Cookie()</code> 两个方法操作cookie，这两个函数都是对go语言<code>net/http</code>包中<code>http.SetCookie()</code>方法的重新封装，本质是一样</p><ol><li>设置cookie</li></ol><p>Gin使用SetCookie()方法设置cookie。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// SetCookie adds a Set-Cookie header to the ResponseWriter's headers.</span><span class="token comment">// The provided cookie must have a valid Name. Invalid cookies may be</span><span class="token comment">// silently dropped.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">SetCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value <span class="token builtin">string</span><span class="token punctuation">,</span> maxAge <span class="token builtin">int</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> domain <span class="token builtin">string</span><span class="token punctuation">,</span> secure<span class="token punctuation">,</span> httpOnly <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> path <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>path <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">&#125;</span>http<span class="token punctuation">.</span><span class="token function">SetCookie</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Cookie<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span>     name<span class="token punctuation">,</span>  <span class="token comment">// Cookie 的名称</span>Value<span class="token punctuation">:</span>    url<span class="token punctuation">.</span><span class="token function">QueryEscape</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// Cookie的值</span>MaxAge<span class="token punctuation">:</span>   maxAge<span class="token punctuation">,</span> <span class="token comment">// 过期时间（秒）</span>Path<span class="token punctuation">:</span>     path<span class="token punctuation">,</span> <span class="token comment">// 路径</span>Domain<span class="token punctuation">:</span>   domain<span class="token punctuation">,</span> <span class="token comment">// 域</span>SameSite<span class="token punctuation">:</span> c<span class="token punctuation">.</span>sameSite<span class="token punctuation">,</span> Secure<span class="token punctuation">:</span>   secure<span class="token punctuation">,</span> <span class="token comment">// 是否只允许HTTPs访问</span>HttpOnly<span class="token punctuation">:</span> httpOnly<span class="token punctuation">,</span> <span class="token comment">// 是否允许浏览器仅通过HTTP获取Cookie</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go">r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/:id"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    context<span class="token punctuation">.</span><span class="token function">SetCookie</span><span class="token punctuation">(</span><span class="token string">"my_cookie"</span><span class="token punctuation">,</span> <span class="token string">"cookievalue"</span><span class="token punctuation">,</span> <span class="token number">3600</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    id <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>    context<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span>    context<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"site"</span><span class="token punctuation">,</span> <span class="token string">"dujie"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> id <span class="token operator">==</span> <span class="token string">"1"</span> <span class="token punctuation">&#123;</span>        u <span class="token operator">:=</span> User<span class="token punctuation">&#123;</span>            UserName<span class="token punctuation">:</span> <span class="token string">"dujie"</span><span class="token punctuation">,</span>            Age<span class="token punctuation">:</span>      <span class="token number">32</span><span class="token punctuation">,</span>            Phone<span class="token punctuation">:</span>    <span class="token string">"15811047166"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//context.XML(200, u)</span>        context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>            <span class="token string">"msg"</span><span class="token punctuation">:</span>  u<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token punctuation">,</span>            <span class="token string">"msg"</span><span class="token punctuation">:</span>  <span class="token string">"无此用户！！！"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/cGczYh95uVn_E_XRJd719AQyRgUMRg69MAIwRrYI2xY.png" alt="image"></p><ol start="2"><li>读取Cookie</li></ol><p>Gin使用Cookie() 方法读取cookie</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/:id"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//context.SetCookie("cookie", "value", 3600, "/", "127.0.0.1", false, true)</span>        cookie<span class="token punctuation">,</span> err <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Cookie</span><span class="token punctuation">(</span><span class="token string">"cookie"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>删除Cookie</li></ol><p>将SetCookie() 方法的MaxAge参数设置为-1，就可以删除cookie</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">context<span class="token punctuation">.</span><span class="token function">SetCookie</span><span class="token punctuation">(</span><span class="token string">"cookie"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>（8）Gin文件上传</strong></p><p>Gin使用<code>SaveUploadFile()</code> 方法实现文件上传</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>MaxMultipartMemory <span class="token operator">=</span> <span class="token number">64</span> <span class="token operator">&lt;&lt;</span><span class="token number">20</span>    r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// file 是表单字段名字</span>        file<span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">FormFile</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span>        <span class="token comment">// 打印上传的文件名</span>        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>Filename<span class="token punctuation">)</span>        <span class="token comment">// 将上传的文件保存到./dujie.jpg中</span>        context<span class="token punctuation">.</span><span class="token function">SaveUploadedFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token string">"./dujie.jpg"</span><span class="token punctuation">)</span>        context<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"'%s' uploaded!"</span><span class="token punctuation">,</span>file<span class="token punctuation">.</span>Filename<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8090"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（9）Gin中间件</strong></p><p>Gin中，中间件(Middleware)是指可以拦截HTTP请求——响应生命周期的特殊函数。在请求——响应生命周期中可以注册多个中间件。每个中间件执行不同的功能，一个中间件执行完，才轮到下一个中间件执行，中间件常用的应用场景如下：</p><ul><li>请求限速</li><li>API接口签名处理</li><li>权限校验</li><li>统一错误处理</li></ul><p>如果想拦截所有请求，则可以开发一个中间件函数来实现。Gin支持设置全局中间件和针对路由分组的中间件。在设置全局中间件后，会拦截所有请求。通过分组路由设置的中间件，仅对这个分组下的路由起作用</p><p><strong>（9.1）使用中间件</strong></p><p>Gin中使用<code>Use()</code>方法来使用中间件</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 通过Use()方法设置中间件</span>    <span class="token comment">// 设置日志中间件，主要用于打印请求日志</span>    r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>gin<span class="token punctuation">.</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 设置Recovery中间件，主要用于拦截panic错误，不至于导致程序崩溃</span>    r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>gin<span class="token punctuation">.</span><span class="token function">Recovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/:id"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>            <span class="token string">"msg"</span><span class="token punctuation">:</span>  <span class="token string">"成功"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8090"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（9.2）自定义中间件</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> gin<span class="token punctuation">.</span>HandlerFunc <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 可以通过上下文对象，设置一些依附在上下文对象里面的键值数据</span>        context<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"example"</span><span class="token punctuation">,</span> <span class="token string">"这是一个中间件数据"</span><span class="token punctuation">)</span>        <span class="token comment">// 在这里处理请求到达处理器函数之前的逻辑</span>        <span class="token comment">// 调用下一个中间件，或者处理器的处理函数，具体得看注册了多少个中间件</span>        context<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 在这里可以处理返给客户端之前的响应逻辑</span>        latency <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>latency<span class="token punctuation">)</span>        <span class="token comment">// 例如，查询请求状态码</span>        status <span class="token operator">:=</span> context<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">Status</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 注册上面自定义的日志中间件</span>    r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取日志中间件中注入的键值数据，接口断言是否是string类型</span>        example <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">MustGet</span><span class="token punctuation">(</span><span class="token string">"example"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8090"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 运行访问后输出</span><span class="token punctuation">[</span>GIN<span class="token operator">-</span>debug<span class="token punctuation">]</span> GET    <span class="token operator">/</span>hello                    <span class="token operator">--</span><span class="token operator">></span> main<span class="token punctuation">.</span>main<span class="token punctuation">.</span>func1 <span class="token punctuation">(</span><span class="token number">4</span> handlers<span class="token punctuation">)</span><span class="token punctuation">[</span>GIN<span class="token operator">-</span>debug<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> You trusted all proxies<span class="token punctuation">,</span> this is NOT safe<span class="token punctuation">.</span> We recommend you to set a value<span class="token punctuation">.</span>Please check https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>pkg<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">.</span>dev<span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>gin<span class="token operator">-</span>gonic<span class="token operator">/</span>gin#readme<span class="token operator">-</span>don<span class="token operator">-</span>t<span class="token operator">-</span>trust<span class="token operator">-</span>all<span class="token operator">-</span>proxies <span class="token keyword">for</span> details<span class="token punctuation">.</span><span class="token punctuation">[</span>GIN<span class="token operator">-</span>debug<span class="token punctuation">]</span> Listening and serving HTTP on <span class="token punctuation">:</span><span class="token number">8090</span><span class="token number">2023</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">30</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">07</span><span class="token punctuation">:</span><span class="token number">53</span> 这是一个中间件数据<span class="token number">2023</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">30</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">07</span><span class="token punctuation">:</span><span class="token number">53</span> <span class="token number">256.417</span>µs<span class="token number">2023</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">30</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">07</span><span class="token punctuation">:</span><span class="token number">53</span> <span class="token number">200</span><span class="token punctuation">[</span>GIN<span class="token punctuation">]</span> <span class="token number">2023</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">30</span> <span class="token operator">-</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">07</span><span class="token punctuation">:</span><span class="token number">53</span> <span class="token operator">|</span> <span class="token number">200</span> <span class="token operator">|</span>     <span class="token number">369.125</span>µs <span class="token operator">|</span>       <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token operator">|</span> GET      <span class="token string">"/hello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（10）Gin处理session</strong></p><p>在Gin中，依赖”github.com&#x2F;gin-contrib&#x2F;sessions”包中的中间件处理session。该包中的中间件支持cookie、MemStore、Redis、Memcached、Mongodb引擎。</p><p>1、安装</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>gin<span class="token operator">-</span>contrib<span class="token operator">/</span>sessions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、用法示例</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 创建基于cookie的存储引擎，password123456参数是用于加密的秘钥</span>    store <span class="token operator">:=</span> cookie<span class="token punctuation">.</span><span class="token function">NewStore</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"password123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 设置session中间件，参数my_session 指的是session的名字，也是cookie的名字</span>    <span class="token comment">// store是前面创建的存储引擎，可以将其替换成其他存储引擎，如Redis等</span>    r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>sessions<span class="token punctuation">.</span><span class="token function">Sessions</span><span class="token punctuation">(</span><span class="token string">"my_session"</span><span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 初始化session对象</span>        session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>        <span class="token comment">// 通过session Get()函数读取session值</span>        <span class="token comment">// session 是键值对格式数据，因此需要通过key查询数据</span>        <span class="token keyword">if</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"world"</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 设置session数据</span>            session<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span>            <span class="token comment">// 删除session数据</span>            session<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token string">"dujie"</span><span class="token punctuation">)</span>            <span class="token comment">// 保存session数据</span>            session<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 删除整个session</span>            <span class="token comment">// session.Clear()</span>        <span class="token punctuation">&#125;</span>        context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"hello"</span><span class="token punctuation">:</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 获取session</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/session"</span><span class="token punctuation">,</span> Handler<span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8090"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取session的handler函数</span><span class="token keyword">func</span> <span class="token function">Handler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    data<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Cookie</span><span class="token punctuation">(</span><span class="token string">"my_session"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"not found"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/PdOQSGRA-04_7y1ZYpow_iacKReUL_XvlN8eZfqWmCE.png" alt="image"></p><p>3、基于Redis存储引擎的session</p><p>如果想将session数据保存到Redis中，则只要将session的存储引擎改成Redis即可</p><p>安装Gin的Redis存储引擎包</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>gin<span class="token operator">-</span>contrib<span class="token operator">/</span>sessions<span class="token operator">/</span>redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>基于Redis存储引擎示例</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//store := cookie.NewStore([]byte("password123456"))</span>    <span class="token comment">// 初始化基于redis的存储引擎</span>    store<span class="token punctuation">,</span> err <span class="token operator">:=</span> redis<span class="token punctuation">.</span><span class="token function">NewStore</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"localhost:6379"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>sessions<span class="token punctuation">.</span><span class="token function">Sessions</span><span class="token punctuation">(</span><span class="token string">"my_session"</span><span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>        <span class="token keyword">var</span> count <span class="token builtin">int</span>        v <span class="token operator">:=</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> v <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>            count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            count <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>            count<span class="token operator">++</span>        <span class="token punctuation">&#125;</span>        session<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>        session<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"count"</span><span class="token punctuation">:</span> count<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/session"</span><span class="token punctuation">,</span> Handler<span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8090"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">Handler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 上下文中获取session</span>    session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    count <span class="token operator">:=</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"————————"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>    <span class="token keyword">if</span> count <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"count"</span><span class="token punctuation">:</span> count<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"not found"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Gin框架&quot;&gt;&lt;a href=&quot;#Gin框架&quot; class=&quot;headerlink&quot; title=&quot;Gin框架&quot;&gt;&lt;/a&gt;Gin框架&lt;/h1&gt;&lt;h3 id=&quot;一、Gin框架使用&quot;&gt;&lt;a href=&quot;#一、Gin框架使用&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="golang" scheme="http://dycloud.fun/categories/golang/"/>
    
    
    <category term="云原生" scheme="http://dycloud.fun/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    <category term="golang" scheme="http://dycloud.fun/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>ServeMux、httprouter</title>
    <link href="http://dycloud.fun/2023/06/04/ServeMux%E3%80%81httprouter/"/>
    <id>http://dycloud.fun/2023/06/04/ServeMux%E3%80%81httprouter/</id>
    <published>2023-06-04T03:32:00.000Z</published>
    <updated>2023-08-30T03:09:18.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ServeMux、httprouter"><a href="#ServeMux、httprouter" class="headerlink" title="ServeMux、httprouter"></a>ServeMux、httprouter</h1><h3 id="一、创建一个简单的goWeb服务器"><a href="#一、创建一个简单的goWeb服务器" class="headerlink" title="一、创建一个简单的goWeb服务器"></a>一、创建一个简单的goWeb服务器</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Hello</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>RemoteAddr<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Method<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Host<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">)</span>    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"这是测试页面"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> Hello<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span>err<span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上例代码，main()函数通过代码<code>http.ListenAndServe(&quot;:8080&quot;,nil)</code> 启动一个8080 端口的服务器。如果这个函数传入第一个参数(网络地址)为空，则服务器在启动后默认使用 <a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a> 地址进行访问；如果这个函数传入的第二个参数为nil，则服务器在启动后将使用<strong>默认的多路复用器(DefaultServeMux)</strong></p><p>运行上例代码，在浏览器中访问<a href="http://127.0.0.1:8080%EF%BC%8C%E9%BB%98%E8%AE%A4%E4%BC%9A%E6%98%BE%E7%A4%BA/">http://127.0.0.1:8080，默认会显示</a> “这是测试页面”字符串</p><p><img src="/images/hIeiHevWkLJZiTON48hDf12pL6vr4fRGnCp20P0Utls.png" alt="image"></p><p>用户可以通过Server结构体对服务器进行更加详细的配置，包括为请求读取操作设置超时时间等。GoWeb服务器的请求和响应流程如下：</p><p><img src="/images/12cHr9ikXtyQXMGMLAsneQmfz5lpgER4HJ8TZ6WRzfk.png" alt="image"></p><ol><li>客户端发送请求；</li><li>服务器端的多路复用器收到请求；</li><li>多路复用器请求的URL找到注册的处理器，将请求交由处理器处理</li><li>处理器执行程序逻辑，如果必要，则与数据库进行交互，得到处理结果</li><li>处理器调用模板引擎将指定的模板和上一步得到的结果渲染成客户端可识别的数据格式（通常是HTML）</li><li>服务器端将数据通过HTTP相应返回给客户端。</li><li>客户端拿到数据，执行对应的操作（例如渲染出来呈现给用户）</li></ol><h3 id="二、接受请求"><a href="#二、接受请求" class="headerlink" title="二、接受请求"></a><strong>二、接受请求</strong></h3><h5 id="2-1、ServeMux和DefaultServeMux"><a href="#2-1、ServeMux和DefaultServeMux" class="headerlink" title="2.1、ServeMux和DefaultServeMux"></a><strong>2.1、ServeMux和DefaultServeMux</strong></h5><p>####### <strong>1、ServeMux和DefaultServeMux简介</strong><br><img src="/images/c0wZVZywXOppPf_EakxP_EqF14PsEzNpA9kXDIHvnXU.png" alt="image"></p><p>ServeMux 是一个结构体，其中包括一个映射，这个映射将会URL映射至相应的处理器。它会在映射中找出与被请求URL最为匹配的URL，然后调用与之相对应的处理器<code>ServeHTTP()</code>方法来处理请求</p><p>DefaultServeMux 是 net&#x2F;http 包中默认提供的一个多路复用器，其本质是ServeMux的一个实例。多路服务器的任务是——根据请求的URL将请求重定向到不同的处理器。如果用户没有为Serve对象指定处理器，则服务器默认使用DefaultServeMux作为ServeMux结构体的实例。</p><p><code>HandleFunc()</code> 函数用于为指定的URL注册一个处理器。<code>HandleFunc()</code> 处理器函数会在内部调用DefaultServeMux对象的对应方法，其内部实现如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">HandleFunc</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler <span class="token keyword">func</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>DefaultServeMux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的方法可以看出，<code>http.HandleFunc()</code> 函数将处理器注册到多路复用器中。用默认多路复用器还可以指定多个处理器，其使用方法如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// The HandlerFunc type is an adapter to allow the use of</span><span class="token comment">// ordinary functions as HTTP handlers. If f is a function</span><span class="token comment">// with the appropriate signature, HandlerFunc(f) is a</span><span class="token comment">// Handler that calls f.</span><span class="token keyword">type</span> HandlerFunc <span class="token keyword">func</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span><span class="token comment">// ServeHTTP calls f(w, r).</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f HandlerFunc<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">f</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面的代码中，自定义了两个Handle，都实现了http.Handler接口，因为他们都实现了ServeHTTP方法</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token comment">// 定义Handle1结构体，</span><span class="token keyword">type</span> Handle1 <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// Handle1 实现了http.Handler接口</span><span class="token comment">/*源码：type Handler interface &#123;ServeHTTP(ResponseWriter, *Request)&#125;*/</span><span class="token comment">// 实现了Handle1 的ServerHTTP方法，用于处理HTTP请求</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h1 <span class="token operator">*</span>Handle1<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"这是handle1"</span><span class="token punctuation">)</span> <span class="token comment">// 向相应写入内容</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义类型 Handle2，同样实现了 http.Handler 接口</span><span class="token keyword">type</span> Handle2 <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 实现 Handle2 的 ServeHTTP 方法，用于处理 HTTP 请求</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h2 <span class="token operator">*</span>Handle2<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"这是handle2"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义一个函数 Hello，用于处理根路径的 HTTP 请求</span><span class="token keyword">func</span> <span class="token function">Hello</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>RemoteAddr<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Method<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Host<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">)</span>    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"这是测试页面"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义一个函数 Test，用于处理 "/test" 路径的 HTTP 请求</span><span class="token keyword">func</span> <span class="token function">Test</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"testtesttest"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建Handle1和Handle2的实例</span>    handle1 <span class="token operator">:=</span> Handle1<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    handle2 <span class="token operator">:=</span> Handle2<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 创建一个HTTP服务器配置</span>    server <span class="token operator">:=</span> http<span class="token punctuation">.</span>Server<span class="token punctuation">&#123;</span>        Addr<span class="token punctuation">:</span>    <span class="token string">"0.0.0.0:8085"</span><span class="token punctuation">,</span>        Handler<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 注册Handle1和Handle2 为不同路径的处理器</span>    http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/handle1"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>handle1<span class="token punctuation">)</span>    http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/handle2"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>handle2<span class="token punctuation">)</span>    <span class="token comment">// 注册函数 Hello为根路径的处理器</span>    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> Hello<span class="token punctuation">)</span>    <span class="token comment">// 启动HTTP服务器监听</span>    server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码中，直接用<code>http.Handle()</code> 函数来指定多个处理器。Handle()函数的代码如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Handle</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler Handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> DefaultServeMux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到在<code>http.Handle()</code> 函数中调用了<code>DefaultServeMux.Handle()</code> 方法来处理请求。服务器收到的每个请求都会调用对应多路复用器的<code>ServeHTTP()</code> 方法。该方法的代码如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>sh serverHandler<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>rw ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>handler <span class="token operator">:=</span> sh<span class="token punctuation">.</span>srv<span class="token punctuation">.</span>Handler<span class="token keyword">if</span> handler <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>handler <span class="token operator">=</span> DefaultServeMux<span class="token punctuation">&#125;</span>handler<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在ServeMux对象的ServeHTTP()方法中，会根据URL查找我们注册的处理器，然后将请求交由它处理。</p><p>虽然默认的多路复用器用起来很方便，但是生产环境不建议使用。因为DefaultServeMux是一个全局变量，所有代码（包括第三方代码）都可以修改它。有些第三方代码会在DefaultServeMux中注册一些处理器，可能会与自己注册的处理器冲突。比较推荐的做法是自定义多路复用器。</p><p>自定义多路复用器直接调用<code>http.NewServeMux()</code> 函数即可。然后再新创建的多路复用器上注册处理器。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">mux <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span>hi<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 定义一个函数 Hello，用于处理根路径的 HTTP 请求</span><span class="token keyword">func</span> <span class="token function">Hello</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>RemoteAddr<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Method<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Host<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">)</span>    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"这是测试页面"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义一个函数 Test，用于处理 "/test" 路径的 HTTP 请求</span><span class="token keyword">func</span> <span class="token function">Test</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"testtesttest"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建新的ServeMux（路由器）</span>    mux <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> Hello<span class="token punctuation">)</span>    mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">,</span> Test<span class="token punctuation">)</span>    <span class="token comment">// 创建一个HTTP服务器配置</span>    server <span class="token operator">:=</span> http<span class="token punctuation">.</span>Server<span class="token punctuation">&#123;</span>        Addr<span class="token punctuation">:</span>    <span class="token string">"0.0.0.0:8085"</span><span class="token punctuation">,</span> <span class="token comment">// 监听的地址和端口</span>        Handler<span class="token punctuation">:</span> mux<span class="token punctuation">,</span>  <span class="token comment">// 使用自定义的ServeMux</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 启动HTTP服务器监听</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 上面例子中与默认多路复用器的功能相同，都是启动一个HTTP服务器端。<strong>这里还创建了服务器对象Server。通过指定服务器的参数</strong>，可以创建定制化的服务器，如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 创建一个HTTP服务器配置</span>server <span class="token operator">:=</span> http<span class="token punctuation">.</span>Server<span class="token punctuation">&#123;</span>    Addr<span class="token punctuation">:</span>    <span class="token string">"0.0.0.0:8085"</span><span class="token punctuation">,</span>    Handler<span class="token punctuation">:</span> mux<span class="token punctuation">,</span>    ReadTimeout<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>    WriteTimeout<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码，创建了一个读超时和写超时都为10s的服务器，下面是源码中定义的一些相关服务器配置的参数：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Server <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token comment">// Addr optionally specifies the TCP address for the server to listen on,</span><span class="token comment">// in the form "host:port". If empty, ":http" (port 80) is used.</span><span class="token comment">// The service names are defined in RFC 6335 and assigned by IANA.</span><span class="token comment">// See net.Dial for details of the address format.</span>Addr <span class="token builtin">string</span>Handler Handler <span class="token comment">// handler to invoke, http.DefaultServeMux if nil</span><span class="token comment">// TLSConfig optionally provides a TLS configuration for use</span><span class="token comment">// by ServeTLS and ListenAndServeTLS. Note that this value is</span><span class="token comment">// cloned by ServeTLS and ListenAndServeTLS, so it's not</span><span class="token comment">// possible to modify the configuration with methods like</span><span class="token comment">// tls.Config.SetSessionTicketKeys. To use</span><span class="token comment">// SetSessionTicketKeys, use Server.Serve with a TLS Listener</span><span class="token comment">// instead.</span>TLSConfig <span class="token operator">*</span>tls<span class="token punctuation">.</span>Config<span class="token comment">// ReadTimeout is the maximum duration for reading the entire</span><span class="token comment">// request, including the body. A zero or negative value means</span><span class="token comment">// there will be no timeout.</span><span class="token comment">//</span><span class="token comment">// Because ReadTimeout does not let Handlers make per-request</span><span class="token comment">// decisions on each request body's acceptable deadline or</span><span class="token comment">// upload rate, most users will prefer to use</span><span class="token comment">// ReadHeaderTimeout. It is valid to use them both.</span>ReadTimeout time<span class="token punctuation">.</span>Duration<span class="token comment">// ReadHeaderTimeout is the amount of time allowed to read</span><span class="token comment">// request headers. The connection's read deadline is reset</span><span class="token comment">// after reading the headers and the Handler can decide what</span><span class="token comment">// is considered too slow for the body. If ReadHeaderTimeout</span><span class="token comment">// is zero, the value of ReadTimeout is used. If both are</span><span class="token comment">// zero, there is no timeout.</span>ReadHeaderTimeout time<span class="token punctuation">.</span>Duration<span class="token comment">// WriteTimeout is the maximum duration before timing out</span><span class="token comment">// writes of the response. It is reset whenever a new</span><span class="token comment">// request's header is read. Like ReadTimeout, it does not</span><span class="token comment">// let Handlers make decisions on a per-request basis.</span><span class="token comment">// A zero or negative value means there will be no timeout.</span>WriteTimeout time<span class="token punctuation">.</span>Duration<span class="token comment">// IdleTimeout is the maximum amount of time to wait for the</span><span class="token comment">// next request when keep-alives are enabled. If IdleTimeout</span><span class="token comment">// is zero, the value of ReadTimeout is used. If both are</span><span class="token comment">// zero, there is no timeout.</span>IdleTimeout time<span class="token punctuation">.</span>Duration<span class="token comment">// MaxHeaderBytes controls the maximum number of bytes the</span><span class="token comment">// server will read parsing the request header's keys and</span><span class="token comment">// values, including the request line. It does not limit the</span><span class="token comment">// size of the request body.</span><span class="token comment">// If zero, DefaultMaxHeaderBytes is used.</span>MaxHeaderBytes <span class="token builtin">int</span><span class="token comment">// TLSNextProto optionally specifies a function to take over</span><span class="token comment">// ownership of the provided TLS connection when an ALPN</span><span class="token comment">// protocol upgrade has occurred. The map key is the protocol</span><span class="token comment">// name negotiated. The Handler argument should be used to</span><span class="token comment">// handle HTTP requests and will initialize the Request's TLS</span><span class="token comment">// and RemoteAddr if not already set. The connection is</span><span class="token comment">// automatically closed when the function returns.</span><span class="token comment">// If TLSNextProto is not nil, HTTP/2 support is not enabled</span><span class="token comment">// automatically.</span>TLSNextProto <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Server<span class="token punctuation">,</span> <span class="token operator">*</span>tls<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> Handler<span class="token punctuation">)</span><span class="token comment">// ConnState specifies an optional callback function that is</span><span class="token comment">// called when a client connection changes state. See the</span><span class="token comment">// ConnState type and associated constants for details.</span>ConnState <span class="token keyword">func</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> ConnState<span class="token punctuation">)</span><span class="token comment">// ErrorLog specifies an optional logger for errors accepting</span><span class="token comment">// connections, unexpected behavior from handlers, and</span><span class="token comment">// underlying FileSystem errors.</span><span class="token comment">// If nil, logging is done via the log package's standard logger.</span>ErrorLog <span class="token operator">*</span>log<span class="token punctuation">.</span>Logger<span class="token comment">// BaseContext optionally specifies a function that returns</span><span class="token comment">// the base context for incoming requests on this server.</span><span class="token comment">// The provided Listener is the specific Listener that's</span><span class="token comment">// about to start accepting requests.</span><span class="token comment">// If BaseContext is nil, the default is context.Background().</span><span class="token comment">// If non-nil, it must return a non-nil context.</span>BaseContext <span class="token keyword">func</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span>Listener<span class="token punctuation">)</span> context<span class="token punctuation">.</span>Context<span class="token comment">// ConnContext optionally specifies a function that modifies</span><span class="token comment">// the context used for a new connection c. The provided ctx</span><span class="token comment">// is derived from the base context and has a ServerContextKey</span><span class="token comment">// value.</span>ConnContext <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> c net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> context<span class="token punctuation">.</span>ContextinShutdown atomicBool <span class="token comment">// true when server is in shutdown</span>disableKeepAlives <span class="token builtin">int32</span>     <span class="token comment">// accessed atomically.</span>nextProtoOnce     sync<span class="token punctuation">.</span>Once <span class="token comment">// guards setupHTTP2_* init</span>nextProtoErr      <span class="token builtin">error</span>     <span class="token comment">// result of http2.ConfigureServer if used</span>mu         sync<span class="token punctuation">.</span>Mutexlisteners  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token operator">*</span>net<span class="token punctuation">.</span>Listener<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>activeConn <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token operator">*</span>conn<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>doneChan   <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>onShutdown <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>listenerGroup sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>Addr</code>: 指定服务器监听的 TCP 地址和端口。如果留空，则默认使用 <code>&quot;:http&quot;</code>（端口 80）。</li><li><code>Handler</code>: 指定用于处理 HTTP 请求的处理器。如果为 <code>nil</code>，则使用 <code>http.DefaultServeMux</code>。</li><li><code>TLSConfig</code>: 提供 TLS 配置，用于在使用 <code>ServeTLS</code> 和 <code>ListenAndServeTLS</code> 时使用。注意，该值会被 <code>ServeTLS</code> 和 <code>ListenAndServeTLS</code> 克隆，因此无法通过诸如 <code>tls.Config.SetSessionTicketKeys</code> 之类的方法修改配置。</li><li><code>ReadTimeout</code>: 读取整个请求（包括请求体）的最大持续时间。零或负值表示没有超时。</li><li><code>ReadHeaderTimeout</code>: 读取请求头的最大持续时间。在读取完请求头后，连接的读取截止时间会重置，处理程序可以决定请求体的速度。如果为零，则使用 <code>ReadTimeout</code> 的值。如果两者都为零，则没有超时。</li><li><code>WriteTimeout</code>: 写入响应的最大持续时间。在读取新请求的头部时，会重置这个时间。与 <code>ReadTimeout</code> 类似，它不允许处理程序对每个请求进行超时设置。零或负值表示没有超时。</li><li><code>IdleTimeout</code>: 在启用了 Keep-Alive 时等待下一个请求的最大持续时间。如果 <code>IdleTimeout</code> 为零，则使用 <code>ReadTimeout</code> 的值。如果两者都为零，则没有超时。</li><li><code>MaxHeaderBytes</code>: 控制服务器解析请求头键和值的最大字节数，包括请求行。不限制请求体的大小。如果为零，则使用 <code>DefaultMaxHeaderBytes</code>。</li><li><code>TLSNextProto</code>: 可选地指定一个函数，用于在 ALPN 协议升级发生时接管提供的 TLS 连接。映射键是协议名称。处理程序参数用于处理 HTTP 请求，并将初始化请求的 TLS 和 RemoteAddr（如果尚未设置）。函数返回时，连接会自动关闭。如果 <code>TLSNextProto</code> 不为 <code>nil</code>，则不会自动启用 HTTP&#x2F;2 支持。</li><li><code>ConnState</code>: 指定一个可选的回调函数，在客户端连接状态发生变化时调用。</li><li><code>ErrorLog</code>: 指定一个可选的错误记录器，用于记录连接接受错误、处理程序的意外行为以及底层文件系统错误。如果为 <code>nil</code>，则使用 <code>log</code> 包的标准记录器。</li><li><code>BaseContext</code>: 可选地指定一个函数，用于为该服务器上的传入请求返回基本上下文。</li><li><code>ConnContext</code>: 可选地指定一个函数，用于修改新连接的上下文。提供的 <code>ctx</code> 是从基本上下文派生的，具有 <code>ServerContextKey</code> 值。</li><li><code>inShutdown</code>: 标志，当服务器正在关闭时为 <code>true</code>。</li><li><code>disableKeepAlives</code>: 禁用 Keep-Alive 的标志，通过原子方式访问。</li><li><code>nextProtoOnce</code>: 用于保护 <code>setupHTTP2_*</code> 初始化的 <code>sync.Once</code> 互斥锁。</li><li><code>nextProtoErr</code>: 如果使用了 <code>http2.ConfigureServer</code>，则为该函数的结果，表示 HTTP&#x2F;2 的初始化结果。</li><li><code>mu</code>: 用于保护以下字段的 <code>sync.Mutex</code> 互斥锁。</li><li><code>listeners</code>: 跟踪服务器正在监听的网络连接。</li><li><code>activeConn</code>: 跟踪服务器中当前活动的连接。</li><li><code>doneChan</code>: 在服务器关闭时发送信号的通道。</li><li><code>onShutdown</code>: 在服务器关闭时执行的回调函数列表。</li><li><code>listenerGroup</code>: 等待活动监听器完成的 <code>sync.WaitGroup</code>。</li></ol><p>*<em>简单总结：ServeMux 实现了</em><em><strong>http.Handler</strong></em><em>接口的</em><em>*<em>ServeHTTP(ResponseWriter,*Request)<strong><strong>方法。在创建Server时，如果设置Handler为空，则使用默认的</strong></strong>DefaultServeMux</em>*</em><em>作为默认的处理器，而</em><em><strong>DefaultServeMux</strong></em><em>是</em><em><strong>ServeMux</strong></em><em>的一个全局变量。</em>*</p><p>####### <strong>2、ServeMux的URL路由匹配</strong><br>实际应用中，一个web服务器会有很多的URL绑定，不同的URL对应不同的处理器。</p><p>如果现在绑定了3个URL，分别是&#x2F;、&#x2F;user、&#x2F;role</p><ul><li>如果请求的URL为&#x2F;，则调用&#x2F;对应的处理器。</li><li>如果请求的URL为&#x2F;user，则调用&#x2F;user对应的处理器。</li><li>如果请求的URL为&#x2F;role，则调用&#x2F;role对应的处理器。</li></ul><blockquote><p>如果注册的URL不是以／结尾的,则它只能精确匹配请求的URL。反之,即使请求的URL只有前缀与被绑定的URL相同,则ServeMux也认为它们是匹配的。例如′如果请求的URL为&#x2F;user&#x2F; 则不能匹配到&#x2F;user因为&#x2F;user不以&#x2F;结尾，必须精确匹配。如果我们绑定的URL为&#x2F;user&#x2F;，则当服务器找不到与&#x2F;user&#x2F;others完全匹配的处理器时，就会退而求其次，开始寻找能够与&#x2F;user&#x2F;匹配的处理器。</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">indexHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"欢迎来到Go Web首页！处理器为：indexHandler"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">userHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"欢迎来到Go Web用户页！处理器为：userHandler"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">roleHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"欢迎来到Go Web权限页！处理器为：roleHandler"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    mux <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> indexHandler<span class="token punctuation">)</span>    mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span> userHandler<span class="token punctuation">)</span>    mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/role/web"</span><span class="token punctuation">,</span> roleHandler<span class="token punctuation">)</span>    <span class="token comment">// 创建一个HTTP服务器配置</span>    server <span class="token operator">:=</span> http<span class="token punctuation">.</span>Server<span class="token punctuation">&#123;</span>        Addr<span class="token punctuation">:</span>         <span class="token string">"0.0.0.0:8085"</span><span class="token punctuation">,</span>        Handler<span class="token punctuation">:</span>      mux<span class="token punctuation">,</span>        ReadTimeout<span class="token punctuation">:</span>  <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>        WriteTimeout<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 启动HTTP服务器监听</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/7S0BLT5M_pHphocDPiOZMGnDg2nKU8_qoATFiQZg66E.png" alt="image"></p><p><img src="/images/xLBNIVYLG-AcXxWFv1hmKTRmdzwGiXmMTF_dRmoz-NQ.png" alt="image"></p><p>输入<a href="http://127.0.0.1:8085/role/%EF%BC%8C%E5%B0%86%E8%BF%94%E5%9B%9E%E9%A6%96%E9%A1%B5%E7%9A%84%E5%A4%84%E7%90%86%E5%99%A8">http://127.0.0.1:8085/role/，将返回首页的处理器</a>:indexHandler，因为绑定的&#x2F;role需要精确匹配，而请求的&#x2F;role&#x2F;不能与之精确匹配所以向上查找到&#x2F;</p><p>处理器和处理器函数都可以进行URL路由匹配。通常情况下，可以使用处理器和处理器函数中的一种或同时使用两者，</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 定义类型 Handle2，同样实现了 http.Handler 接口</span><span class="token keyword">type</span> Handle2 <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 实现 Handle2 的 ServeHTTP 方法，用于处理 HTTP 请求</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h2 <span class="token operator">*</span>Handle2<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"这是handle2"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义一个函数 Hello，用于处理根路径的 HTTP 请求</span><span class="token keyword">func</span> <span class="token function">Hello</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>RemoteAddr<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Method<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Host<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">)</span>    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"这是测试页面"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">indexHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"欢迎来到Go Web首页！处理器为：indexHandler"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">userHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"欢迎来到Go Web用户页！处理器为：userHandler"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">roleHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"欢迎来到Go Web权限页！处理器为：roleHandler"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    handler2 <span class="token operator">:=</span> Handle2<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    mux <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> indexHandler<span class="token punctuation">)</span>    mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span> userHandler<span class="token punctuation">)</span>    mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/role/web"</span><span class="token punctuation">,</span> roleHandler<span class="token punctuation">)</span>    <span class="token comment">// 注册处理器</span>    mux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/test/"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>handler2<span class="token punctuation">)</span>    <span class="token comment">// 创建一个HTTP服务器配置</span>    server <span class="token operator">:=</span> http<span class="token punctuation">.</span>Server<span class="token punctuation">&#123;</span>        Addr<span class="token punctuation">:</span>         <span class="token string">"0.0.0.0:8085"</span><span class="token punctuation">,</span>        Handler<span class="token punctuation">:</span>      mux<span class="token punctuation">,</span>        ReadTimeout<span class="token punctuation">:</span>  <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>        WriteTimeout<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 启动HTTP服务器监听</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>####### <strong>3、HttpRouter简介</strong><br>ServeMux一个缺陷是：无法使用变量实现URL模式匹配。而HttpRouter则可以。HttpRouter是一个高性能、可扩展的第三方HTTP路由包。HttpRouter包弥补了net&#x2F;http 包中默认路由不足的问题</p><p>（1）、安装HttpRouter</p><p><a href="https://github.com/julienschmidt/httprouter">https://github.com/julienschmidt/httprouter</a></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>julienschmidt<span class="token operator">/</span>httprouter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(2)、HttpRouter使用方法如下：首先使用<code>httprouter.New()</code>函数生成了一个*Router 路由对象，然后使用**GET()*<em>方法注册一个适配&#x2F;路径的index函数，最后将</em>Router对象作为参数传给<code>ListenAndServe()</code>函数即可启动HTTP服务</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Index</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> <span class="token boolean">_</span> httprouter<span class="token punctuation">.</span>Params<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"首页Index"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    router <span class="token operator">:=</span> httprouter<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> Index<span class="token punctuation">)</span>    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HttpRouter包为常用的HTTP方法提供了快捷的使用方式。常用请求方法定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// GET is a shortcut for router.Handle(http.MethodGet, path, handle)</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Router<span class="token punctuation">)</span> <span class="token function">GET</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> handle Handle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>r<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>MethodGet<span class="token punctuation">,</span> path<span class="token punctuation">,</span> handle<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// HEAD is a shortcut for router.Handle(http.MethodHead, path, handle)</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Router<span class="token punctuation">)</span> <span class="token function">HEAD</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> handle Handle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>r<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>MethodHead<span class="token punctuation">,</span> path<span class="token punctuation">,</span> handle<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// OPTIONS is a shortcut for router.Handle(http.MethodOptions, path, handle)</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Router<span class="token punctuation">)</span> <span class="token function">OPTIONS</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> handle Handle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>r<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>MethodOptions<span class="token punctuation">,</span> path<span class="token punctuation">,</span> handle<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// POST is a shortcut for router.Handle(http.MethodPost, path, handle)</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Router<span class="token punctuation">)</span> <span class="token function">POST</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> handle Handle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>r<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>MethodPost<span class="token punctuation">,</span> path<span class="token punctuation">,</span> handle<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// PUT is a shortcut for router.Handle(http.MethodPut, path, handle)</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Router<span class="token punctuation">)</span> <span class="token function">PUT</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> handle Handle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>r<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>MethodPut<span class="token punctuation">,</span> path<span class="token punctuation">,</span> handle<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// PATCH is a shortcut for router.Handle(http.MethodPatch, path, handle)</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Router<span class="token punctuation">)</span> <span class="token function">PATCH</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> handle Handle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>r<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>MethodPatch<span class="token punctuation">,</span> path<span class="token punctuation">,</span> handle<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// DELETE is a shortcut for router.Handle(http.MethodDelete, path, handle)</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Router<span class="token punctuation">)</span> <span class="token function">DELETE</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> handle Handle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>r<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>MethodDelete<span class="token punctuation">,</span> path<span class="token punctuation">,</span> handle<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HttpRouter包提供了对命名参数的支持，可以很方便的开发RestfulAPI。比如，设计example&#x2F;user&#x2F;dujie这样一个URL，可以查看dujie这个用户的信息。如果要查看其他用户（比如zhangsan）的信息，则只需要访问example&#x2F;user&#x2F;zhangsan</p><p>在HttpRouter包中对URL使用两种匹配模式：</p><ol><li>形如&#x2F;user&#x2F;:name 的精确匹配</li><li>形如&#x2F;user&#x2F;*name 的匹配所有的模式</li></ol><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    router <span class="token operator">:=</span> httprouter<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/default"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>writer http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> params httprouter<span class="token punctuation">.</span>Params<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"default get"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/default"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>writer http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> params httprouter<span class="token punctuation">.</span>Params<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"default post"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 精确匹配</span>    <span class="token comment">//router.GET("/user/zhangsan", func(writer http.ResponseWriter, request *http.Request, params httprouter.Params) &#123;</span>    <span class="token comment">//    fmt.Println(params)</span>    <span class="token comment">//    // fmt.Println(request.URL.Query().Get("name"))</span>    <span class="token comment">//    writer.Write([]byte("user name:" + params.ByName("name")))</span>    <span class="token comment">//&#125;)</span>    router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/*name"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>writer http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> params httprouter<span class="token punctuation">.</span>Params<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>        rawName <span class="token operator">:=</span> params<span class="token punctuation">.</span><span class="token function">ByName</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>        <span class="token comment">// 去掉params对应name 前面的/</span>        name <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">TrimLeft</span><span class="token punctuation">(</span>rawName<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"user name:"</span> <span class="token operator">+</span> params<span class="token punctuation">.</span><span class="token function">ByName</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// params的值： "user/*names" * 后面的names对应 params中的names</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>names <span class="token operator">/</span>张三<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ServeMux、httprouter&quot;&gt;&lt;a href=&quot;#ServeMux、httprouter&quot; class=&quot;headerlink&quot; title=&quot;ServeMux、httprouter&quot;&gt;&lt;/a&gt;ServeMux、httprouter&lt;/h1&gt;&lt;h3 i</summary>
      
    
    
    
    <category term="golang" scheme="http://dycloud.fun/categories/golang/"/>
    
    
    <category term="云原生" scheme="http://dycloud.fun/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    <category term="golang" scheme="http://dycloud.fun/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Sync包实现并发</title>
    <link href="http://dycloud.fun/2023/06/01/Sync%E5%8C%85%E5%AE%9E%E7%8E%B0%E5%B9%B6%E5%8F%91/"/>
    <id>http://dycloud.fun/2023/06/01/Sync%E5%8C%85%E5%AE%9E%E7%8E%B0%E5%B9%B6%E5%8F%91/</id>
    <published>2023-06-01T06:32:00.000Z</published>
    <updated>2023-08-30T03:08:45.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sync包实现并发"><a href="#Sync包实现并发" class="headerlink" title="Sync包实现并发"></a>Sync包实现并发</h1><h3 id="一、静态"><a href="#一、静态" class="headerlink" title="一、静态"></a>一、静态</h3><p>Go语言以构建高并发容易、性能优异而文明，但是随着并发的使用，可能发生数据争用的静态问题。由于不知道什么时候发生，所以讲产生难以发现和调试的错误。</p><p>例子：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i <span class="token operator">=</span> <span class="token number">6</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> i<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上例，<code>getNumber()</code> 函数先声明一个变量i，之后在goroutine中单独对i进行设置。而这时程序也正在从函数中返回i，由于不知道goroutine是否已经完成对i值的修改，所以将有两种操作发生：</p><ol><li>如果goroutine已完成对i值的修改，则最后返回的i值为6；</li><li>如果goroutine未完成对i值的修改，则变量i的值从函数返回，为默认值0</li></ol><p>现在根据这两个操作中的哪一个先完成，输出的记过将是0（默认整数值）或6。这就是为什么将其称为数据竟态：从<code>getNumber()</code> 函数返回的值会根据1、或2哪个操作先完成而得名。</p><p>解决方法：通道阻塞、互斥锁等。</p><h3 id="二、互斥锁"><a href="#二、互斥锁" class="headerlink" title="二、互斥锁"></a>二、互斥锁</h3><h5 id="1、什么是互斥锁"><a href="#1、什么是互斥锁" class="headerlink" title="1、什么是互斥锁"></a>1、什么是互斥锁</h5><p><strong>（1）sync.Mutex的定义</strong></p><p><code>sync.Mutex</code> 是一个结构体对象，用于实现互斥锁，适用于读写不确定的场景（即读写次数没有明显区别，并且只允许有一个写或读的场景）。所以该锁也称为“全局锁”。</p><p><code>sync.Mutex</code> 结构体由两个字段state和sema组成，其中state表示当前互斥锁的状态，而sema用于控制锁状态的信号量。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Mutex <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>state <span class="token builtin">int32</span>sema  <span class="token builtin">uint32</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（2）sync.Mutex的方法</strong></p><p><code>sync.Mutex</code> 结构体对象有<code>Lock()</code> 、<code>Unlock()</code> 两个方法。<code>Lock()</code> 方法用于加锁，<code>Unlock()</code> 方法用于解锁。</p><p>在使用<code>Lock()</code> 加锁后，就不能再次对其进行加速（如果再次加锁，会造成死锁）。直到利用<code>Unlock()</code> 对其解锁才能再次加锁。</p><p>在用<code>Unlock()</code> 解锁Mutex时，如果未加锁，会导致运行时错误</p><blockquote><p>Lock()和Unlock() 使用注意：</p></blockquote><blockquote></blockquote><blockquote><ul><li>在一个goroutine获得Mutex后，其他goroutine只能等到这个goroutine释放该Mutex</li><li>在使用Lock()方法加锁后，不能再继续对其加锁，直到利用Unlock()解锁才能再次加锁</li><li>在Lock()方法之前使用Unlock() 会导致panic异常</li><li>已经锁定的Mutex并不与特定的goroutine关联，可以利用一个goroutine对其加锁，再利用其他goroutine对其解锁。</li><li>在同一个goroutine中的Mutex被解锁前再次进行加锁，会导致死锁。</li><li>该方法适用于读写不确定，并且只有一个读或写的场景。</li></ul></blockquote><blockquote></blockquote><h5 id="2、互斥锁的使用"><a href="#2、互斥锁的使用" class="headerlink" title="2、互斥锁的使用"></a>2、互斥锁的使用</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> mutex sync<span class="token punctuation">.</span>Mutex    wait <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"锁定主协程"</span><span class="token punctuation">)</span>    mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        wait<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d 协程还未锁定:\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>            mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d 协程已锁定\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d 协程已解锁:\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>            mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">defer</span> wait<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"解锁主协程"</span><span class="token punctuation">)</span>    mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    wait<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">锁定主协程<span class="token number">0</span> 协程还未锁定<span class="token punctuation">:</span><span class="token number">3</span> 协程还未锁定<span class="token punctuation">:</span><span class="token number">2</span> 协程还未锁定<span class="token punctuation">:</span><span class="token number">4</span> 协程还未锁定<span class="token punctuation">:</span><span class="token number">1</span> 协程还未锁定<span class="token punctuation">:</span>解锁主协程<span class="token number">0</span> 协程已锁定<span class="token number">0</span> 协程已解锁<span class="token punctuation">:</span><span class="token number">3</span> 协程已锁定<span class="token number">3</span> 协程已解锁<span class="token punctuation">:</span><span class="token number">2</span> 协程已锁定<span class="token number">2</span> 协程已解锁<span class="token punctuation">:</span><span class="token number">4</span> 协程已锁定<span class="token number">4</span> 协程已解锁<span class="token punctuation">:</span><span class="token number">1</span> 协程已锁定<span class="token number">1</span> 协程已解锁<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、读写互斥锁"><a href="#三、读写互斥锁" class="headerlink" title="三、读写互斥锁"></a>三、读写互斥锁</h3><h5 id="1、什么是读写互斥锁"><a href="#1、什么是读写互斥锁" class="headerlink" title="1、什么是读写互斥锁"></a>1、什么是读写互斥锁</h5><p><strong>（1）读写互斥锁的定义</strong></p><p>读写互斥锁（sync.RWMutex）是一个控制goroutine访问的读写锁。该锁可以加多个读锁或写锁，<strong>其经常用于读次数远远多于写次数的场景。</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> RWMutex <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>w           Mutex  <span class="token comment">// held if there are pending writers</span>writerSem   <span class="token builtin">uint32</span> <span class="token comment">// semaphore for writers to wait for completing readers</span>readerSem   <span class="token builtin">uint32</span> <span class="token comment">// semaphore for readers to wait for completing writers</span>readerCount <span class="token builtin">int32</span>  <span class="token comment">// number of pending readers</span>readerWait  <span class="token builtin">int32</span>  <span class="token comment">// number of departing readers</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（2）读写互斥锁的方法</strong></p><p>有4个方法进行读写操作</p><ul><li>写操作的Lock()和Unlock()方法</li></ul><p><code>func (*RWMutex) Lock()</code> </p><p><code>func (*RWMutex) Unlock()</code></p><p>对于写锁，如果在添加写锁之前已经有其他的读锁和写锁，则Lock()方法会阻塞，直到该写锁可写。写锁权限高于读锁，有写锁时有限进行写锁定。</p><ul><li>读操作的RLock()和RUnlock()方法</li></ul><p><code>func (*RWMutex) RLock()</code> </p><p><code>func (*RWMutex) RUnlock()</code></p><p>如果已有写锁，则无法加载读锁。在只有读锁或者没有锁时，才可以加载读锁。读锁可以加载多个，所以适用于“读多写少”的场景。</p><p>读写互斥锁在读锁占用的情况下，会阻止写，但不阻止读。即多个goroutine可以同时获取读锁（读锁调用RLock()方法，而写锁调用Lock()方法），会阻止任何其他goroutine（无论读和写）进来，整个锁相当于该goroutine独占。</p><p><code>sync.RWMutex</code> 用于读锁和写锁分开的情况</p><h5 id="2、读写互斥锁使用"><a href="#2、读写互斥锁使用" class="headerlink" title="2、读写互斥锁使用"></a>2、读写互斥锁使用</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> count <span class="token builtin">int</span><span class="token keyword">var</span> rw sync<span class="token punctuation">.</span>RWMutex<span class="token keyword">func</span> <span class="token function">ReadCount</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> ch <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    rw<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"goroutine %d 进入读操作...\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    v <span class="token operator">:=</span> count    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"goroutine %d 读取结束，值为%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    rw<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    ch <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">WriteCount</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> ch <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    rw<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"goroutine %d 进入写操作\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    v <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    count <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"goroutine %d 写入结束，新值为%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> count<span class="token punctuation">)</span>    rw<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    ch <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">go</span> <span class="token function">ReadCount</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> ch<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">go</span> <span class="token function">WriteCount</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> ch<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        <span class="token operator">&lt;-</span>ch    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多个读操作可以同时读一个数据，虽然加了锁，但读都是不受影响的，即“读和写都是互斥的，读和读不互斥”。多个读操作同时操作一个数据的实例如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> m sync<span class="token punctuation">.</span>RWMutex<span class="token keyword">func</span> <span class="token function">Reading</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"reading start"</span><span class="token punctuation">)</span>    m<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"reading"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    m<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"reading over"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//m = new(sync.RWMutex)</span>    <span class="token keyword">go</span> <span class="token function">Reading</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">Reading</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到协程1和协程2 同时开始读，不互斥</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 下面4行同时输出</span><span class="token number">2</span> reading start<span class="token number">1</span> reading start<span class="token number">1</span> reading<span class="token number">2</span> reading<span class="token number">2</span> reading over<span class="token number">1</span> reading over<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于读写互斥，所以在写开始后，读必须等写进行完才能继续。读写互斥锁示例如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> m sync<span class="token punctuation">.</span>RWMutex<span class="token keyword">func</span> <span class="token function">Reading</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    m<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"reading start"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"reading"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"reading over"</span><span class="token punctuation">)</span>    m<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">Writeing</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    m<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"writing start"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"writing"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"writing over"</span><span class="token punctuation">)</span>    m<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//m = new(sync.RWMutex)</span>    <span class="token keyword">go</span> <span class="token function">Writeing</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">Reading</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">Writeing</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出，可以看到在写完成后读才开始操作</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">0</span> writing start<span class="token number">0</span> writing<span class="token number">0</span> writing over<span class="token number">1</span> reading start<span class="token number">1</span> reading<span class="token number">1</span> reading over<span class="token number">2</span> writing start<span class="token number">2</span> writing<span class="token number">2</span> writing over<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、sync-Once结构体"><a href="#四、sync-Once结构体" class="headerlink" title="四、sync.Once结构体"></a>四、sync.Once结构体</h3><h5 id="1、sync-Once结构体定义"><a href="#1、sync-Once结构体定义" class="headerlink" title="1、sync.Once结构体定义"></a>1、sync.Once结构体定义</h5><p><code>sync.Once</code> 用于解决一次性初始化问题。它的作用与<code>init()</code>函数类似，使方法只执行一次</p><p><code>sync.Once</code> 和<code>init()</code> 也有所不同：<code>init()</code> 是在文件包首次被加载时才执行，且只执行一次；而<code>sync.Once</code> 结构体是在代码运行中有需要才执行，且只执行一次。</p><p>在很多高并发的场景中需要确保某些操作只执行一次’例如只加载一次配置文件、只关闭一次通道等。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Once <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token comment">// done indicates whether the action has been performed.</span><span class="token comment">// It is first in the struct because it is used in the hot path.</span><span class="token comment">// The hot path is inlined at every call site.</span><span class="token comment">// Placing done first allows more compact instructions on some architectures (amd64/386),</span><span class="token comment">// and fewer instructions (to calculate offset) on other architectures.</span>done <span class="token builtin">uint32</span>m    Mutex<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>sync.Once</code> 结构体包括一个互斥锁和一个布尔值。互斥锁保证布尔值和数据的安全，布尔值用来记录初始化是否完成。这样就能保证初始化操作时是并发安全的，并且初始化操作也不会被执行多次。</p><h5 id="2、sync-Once的使用"><a href="#2、sync-Once的使用" class="headerlink" title="2、sync.Once的使用"></a>2、sync.Once的使用</h5><p>sync.Once结构体只有一个<code>Do()</code>方法</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//m = new(sync.RWMutex)</span>    <span class="token keyword">var</span> once sync<span class="token punctuation">.</span>Once    <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    onceBody <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"这里只打印一次"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            once<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>onceBody<span class="token punctuation">)</span>            flag <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面通过一个关闭通道例子可以看到。调用<code>close()</code>方法来关闭通道，但如果关闭一个已经关闭的通道，则会使程序宕掉，可以借助<code>sync.Once.Do()</code> 方法来保证通道在运行的过程中只被关闭一次。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup<span class="token keyword">var</span> once sync<span class="token punctuation">.</span>Once<span class="token comment">// 只写通道</span><span class="token keyword">func</span> <span class="token function">func1</span><span class="token punctuation">(</span>ch1 <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        ch1 <span class="token operator">&lt;-</span> i    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>ch1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">func2</span><span class="token punctuation">(</span>ch1 <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> ch2 <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>        x<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch1        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span>        <span class="token punctuation">&#125;</span>        ch2 <span class="token operator">&lt;-</span> <span class="token number">2</span> <span class="token operator">*</span> x    <span class="token punctuation">&#125;</span>    once<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">close</span><span class="token punctuation">(</span>ch2<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ch1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    ch2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">func1</span><span class="token punctuation">(</span>ch1<span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">func2</span><span class="token punctuation">(</span>ch1<span class="token punctuation">,</span> ch2<span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">func2</span><span class="token punctuation">(</span>ch1<span class="token punctuation">,</span> ch2<span class="token punctuation">)</span>    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> ret <span class="token operator">:=</span> <span class="token keyword">range</span> ch2 <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出结果</span><span class="token number">2</span><span class="token number">10</span><span class="token number">12</span><span class="token number">14</span><span class="token number">16</span><span class="token number">18</span><span class="token number">0</span><span class="token number">4</span><span class="token number">6</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码解析：</p><ol><li>声明一个 <code>sync.WaitGroup</code> 变量 <code>wg</code>，用于等待所有协程完成。</li><li>声明一个 <code>sync.Once</code> 变量 <code>once</code>，用于确保在关闭 <code>ch2</code> 通道时只执行一次操作。</li><li>定义 <code>func1</code> 函数，该函数接受一个只写通道 <code>ch1</code>。在该函数内部，一个循环将整数从 0 到 9 写入通道 <code>ch1</code>，然后关闭 <code>ch1</code> 通道，表示写入操作已完成。<code>defer wg.Done()</code> 在函数结束时标记协程已完成。</li><li>定义 <code>func2</code> 函数，该函数接受一个只读通道 <code>ch1</code> 和一个只写通道 <code>ch2</code>。在该函数内部，一个无限循环从 <code>ch1</code> 读取数据并将其乘以 2 后写入 <code>ch2</code>。当 <code>ch1</code> 关闭后，循环会退出，然后 <code>once.Do</code> 保证关闭 <code>ch2</code> 通道只执行一次。<code>defer wg.Done()</code> 在函数结束时标记协程已完成。</li><li>在 <code>main</code> 函数中，创建两个通道 <code>ch1</code> 和 <code>ch2</code>，分别用于协程之间的通信。</li><li>通过 <code>wg.Add(3)</code> 增加等待组的计数器，因为后续会启动 3 个协程。</li><li>启动一个协程运行 <code>func1(ch1)</code>，这个协程会将 0 到 9 的整数写入 <code>ch1</code>，然后关闭通道。</li><li>启动两个协程运行 <code>func2(ch1, ch2)</code>，这两个协程会并发地从 <code>ch1</code> 中读取数据，将数据乘以 2 后写入 <code>ch2</code>。</li><li><code>wg.Wait()</code> 阻塞主协程，等待所有的协程（包括 <code>func1</code> 和两个 <code>func2</code>）都完成后继续执行。</li><li>在主协程中，使用 <code>range ch2</code> 循环从 <code>ch2</code> 通道中读取数据，直到 <code>ch2</code> 通道被关闭。这时，从 <code>ch2</code> 中读取的数据是 <code>func2</code> 处理后的结果，然后通过 <code>fmt.Println(ret)</code> 打印输出。</li></ol><p>总的来说，这段代码通过并发地使用多个协程，实现了将 0 到 9 的整数通过通道传递给 <code>func2</code> 处理，并将处理后的结果输出到控制台。两个 <code>func2</code> 协程可以并发地从 <code>ch1</code> 中读取数据，但由于通道的关闭，每个协程在读取完数据后会退出。主协程等待所有协程完成后，循环从 <code>ch2</code> 中读取并打印处理结果。同时，<code>once.Do</code> 确保通道 <code>ch2</code> 仅被关闭一次。</p><p>上面代码中，开启了两个goroutine 去执行func2 函数，当func2函数执行完后，会掉用close方法关闭参数所指的ch2通道。为了防止多个goroutine同时关闭同一个通道而产生错误，可以调用<code>sync.Once.Do()</code>方法来关闭通道，这样就不会产生多次关闭通道而使得程序崩溃的错误。</p><h3 id="五、同步等待组sync-WaitGroup"><a href="#五、同步等待组sync-WaitGroup" class="headerlink" title="五、同步等待组sync.WaitGroup"></a>五、同步等待组sync.WaitGroup</h3><h5 id="1、同步等待组sync-WaitGroup简介"><a href="#1、同步等待组sync-WaitGroup简介" class="headerlink" title="1、同步等待组sync.WaitGroup简介"></a>1、同步等待组sync.WaitGroup简介</h5><p><code>sync.WaitGroup</code> 是一个结构体对象，用于等待一组线程的结束</p><p><code>sync.WaitGroup</code> 结构体对象只有3个方法：<code>Add()</code> 、<code>Done()</code> 、<code>Wait()</code> </p><ul><li>Add()：向内部计数器加上delta，delta可以是负数。如果内部计数器为0，则Wait()方法会将处于阻塞等待的所有goroutine释放。如果计数器小于0，则调用panic函数。Add()方法加上正数的调用应在<code>Wait()</code>方法之前，否则<code>Wait()</code>方法可能只会等待很少的goroutine。</li><li>Done()方法：会减少WaitGroup计数器的值，一般在goroutine的最后执行。</li><li>Wait()方法：会阻塞，直到WaitGroup计数器减为0</li></ul><p>在以上3个方法中<code>Done()</code>是<code>Add(-1)</code>方法的别名。简单来说’使用<code>Add()</code>方法添加计数; 使用<code>Done()</code>方法减掉一个计数’如果计数不为0则会阻塞<code>Wait()</code>方法的运行。一个goroutine调用方法<code>Add()</code> 来设定应等待的goroutine的数量。每个被等待的goroutine在结束时应该调用<code>Done()</code>方法。同时，在主goroutine里可以调用<code>Wait()</code>方法阻塞至所有goroutine结束</p><h5 id="2、同步等待组sync-WaitGroup使用示例"><a href="#2、同步等待组sync-WaitGroup使用示例" class="headerlink" title="2、同步等待组sync.WaitGroup使用示例"></a>2、同步等待组sync.WaitGroup使用示例</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"1 goroutine sleep"</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"1 goroutine exit"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2 goroutine sleep"</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2 goroutine exit"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"waiting for all goroutine"</span><span class="token punctuation">)</span>    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"All goroutine finished"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出</span>waiting <span class="token keyword">for</span> all goroutine<span class="token number">2</span> goroutine sleep<span class="token number">1</span> goroutine sleep<span class="token number">1</span> goroutine exit<span class="token number">2</span> goroutine exitAll goroutine finished<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Add()</code>和<code>Done()</code>方法的使用一定要配对，否则可能发生死锁。所报的错误信息如下</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">waiting <span class="token keyword">for</span> all goroutine<span class="token number">2</span> goroutine sleep<span class="token number">1</span> goroutine sleep<span class="token number">1</span> goroutine exit<span class="token number">2</span> goroutine exitfatal <span class="token builtin">error</span><span class="token punctuation">:</span> all goroutines are asleep <span class="token operator">-</span> deadlock<span class="token operator">!</span>goroutine <span class="token number">1</span> <span class="token punctuation">[</span>semacquire<span class="token punctuation">]</span><span class="token punctuation">:</span>sync<span class="token punctuation">.</span><span class="token function">runtime_Semacquire</span><span class="token punctuation">(</span><span class="token number">0x0</span>?<span class="token punctuation">)</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>runtime<span class="token operator">/</span>sema<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">62</span> <span class="token operator">+</span><span class="token number">0x28</span>sync<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>WaitGroup<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token number">0x140000a4010</span><span class="token punctuation">)</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>sync<span class="token operator">/</span>waitgroup<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">139</span> <span class="token operator">+</span><span class="token number">0x80</span>main<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>Users<span class="token operator">/</span>dujie<span class="token operator">/</span>GolangProjects<span class="token operator">/</span>mysql<span class="token operator">-</span>csv<span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">172</span> <span class="token operator">+</span><span class="token number">0x110</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Sync包实现并发&quot;&gt;&lt;a href=&quot;#Sync包实现并发&quot; class=&quot;headerlink&quot; title=&quot;Sync包实现并发&quot;&gt;&lt;/a&gt;Sync包实现并发&lt;/h1&gt;&lt;h3 id=&quot;一、静态&quot;&gt;&lt;a href=&quot;#一、静态&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="golang" scheme="http://dycloud.fun/categories/golang/"/>
    
    
    <category term="云原生" scheme="http://dycloud.fun/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    <category term="golang" scheme="http://dycloud.fun/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Go文件处理</title>
    <link href="http://dycloud.fun/2023/05/26/Go%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <id>http://dycloud.fun/2023/05/26/Go%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</id>
    <published>2023-05-26T06:32:00.000Z</published>
    <updated>2023-08-30T03:08:09.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go文件处理"><a href="#Go文件处理" class="headerlink" title="Go文件处理"></a>Go文件处理</h1><h3 id="一、操作目录"><a href="#一、操作目录" class="headerlink" title="一、操作目录"></a>一、操作目录</h3><p>Go语言对文件和目录操作，主要通过os包和path包实现。</p><h5 id="1、创建目录"><a href="#1、创建目录" class="headerlink" title="1、创建目录"></a>1、创建目录</h5><p>Go语言创建目录，主要使用<code>Mkdir()</code> 、<code>MkdirAll()</code> 两个函数。其中<code>Mkdir()</code> 函数的定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Mkdir</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> perm FileMode<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中，name是需要创建的目录名字，perm 为权限设置码。比如perm为0700，表示该目录对所有用户都可读写及可执行</p><p>例如，创建一个名为”test”的目录，perm权限为0700的示例如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"log"</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 创建一个名为"test"的目录，权限为777</span>err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Mkdir</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MkdirAll()函数的定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">MkdirAll</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> perm FileMode<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中path为目录的路径（例如 “dir1&#x2F;dir2&#x2F;dir3”），perm为权限设置码</p><p>用MkdirAll()函数创建目录的示例如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"log"</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 根据path创建多级子目录</span>err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">MkdirAll</span><span class="token punctuation">(</span><span class="token string">"test1/test2/test3"</span><span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多级目录一般用的比较多的地方是上传文件，例如可以创建一个目录结构为”static&#x2F;upload&#x2F;2020&#x2F;10&#x2F;1”的多级目录来保存上传的文件。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"log"</span><span class="token string">"os"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        uploadPath <span class="token operator">:=</span> <span class="token string">"static/upload/"</span> <span class="token operator">+</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006/01/02"</span><span class="token punctuation">)</span>err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">MkdirAll</span><span class="token punctuation">(</span>uploadPath<span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建成功后可以查看目录结构</span><span class="token punctuation">[</span>root@newperiodical ~<span class="token punctuation">]</span># ll static<span class="token operator">/</span>total <span class="token number">0</span>dr<span class="token operator">--</span><span class="token operator">--</span>x<span class="token operator">--</span>x <span class="token number">3</span> root root <span class="token number">18</span> Aug <span class="token number">25</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">10</span> upload<span class="token punctuation">[</span>root@newperiodical ~<span class="token punctuation">]</span># ll static<span class="token operator">/</span>upload<span class="token operator">/</span>total <span class="token number">0</span>dr<span class="token operator">--</span><span class="token operator">--</span>x<span class="token operator">--</span>x <span class="token number">3</span> root root <span class="token number">16</span> Aug <span class="token number">25</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">10</span> <span class="token number">2023</span><span class="token punctuation">[</span>root@newperiodical ~<span class="token punctuation">]</span># <span class="token punctuation">[</span>root@newperiodical ~<span class="token punctuation">]</span># ll static<span class="token operator">/</span>upload<span class="token operator">/</span><span class="token number">2023</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span>total <span class="token number">0</span>dr<span class="token operator">--</span><span class="token operator">--</span>x<span class="token operator">--</span>x <span class="token number">2</span> root root <span class="token number">6</span> Aug <span class="token number">25</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">10</span> <span class="token number">25</span><span class="token punctuation">[</span>root@newperiodical ~<span class="token punctuation">]</span># ll static<span class="token operator">/</span>upload<span class="token operator">/</span><span class="token number">2023</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">25</span><span class="token operator">/</span>total <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、重命名目录"><a href="#2、重命名目录" class="headerlink" title="2、重命名目录"></a>2、重命名目录</h5><p>在Go中的os包邮一个<code>Rename()</code>函数用来对目录和文件进行重命名。该函数也可以用于移动一个文件。该函数定义为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Rename</span><span class="token punctuation">(</span>oldpath<span class="token punctuation">,</span> newpath <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">rename</span><span class="token punctuation">(</span>oldpath<span class="token punctuation">,</span> newpath<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中，参数oldpath 为旧的目录名或多级目录的路径，参数newpath为新目录的路径。如果newpath已经存在，则替换它。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"log"</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建一个名为"dir_name1" 的目录，权限为777</span>err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Mkdir</span><span class="token punctuation">(</span><span class="token string">"dir_name1"</span><span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>oldName <span class="token operator">:=</span> <span class="token string">"dir_name1"</span>newName <span class="token operator">:=</span> <span class="token string">"dir_new"</span>        <span class="token comment">// 将dir_name1 重命名为dir_new</span>err <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">Rename</span><span class="token punctuation">(</span>oldName<span class="token punctuation">,</span> newName<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mac电脑可能会报权限错误</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">2023</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">25</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">40</span><span class="token punctuation">:</span><span class="token number">13</span> rename dir_name1 dir_new<span class="token punctuation">:</span> permission denied<span class="token builtin">panic</span><span class="token punctuation">:</span> rename dir_name1 dir_new<span class="token punctuation">:</span> permission denied<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以使用exec包来执行命令</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"log"</span><span class="token string">"os"</span><span class="token string">"os/exec"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span><span class="token string">"dir_name1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"原目录已存在不需要创建"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Mkdir</span><span class="token punctuation">(</span><span class="token string">"dir_name1"</span><span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>oldName <span class="token operator">:=</span> <span class="token string">"dir_name1"</span>newName <span class="token operator">:=</span> <span class="token string">"dir_new"</span>cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">"sudo"</span><span class="token punctuation">,</span> <span class="token string">"mv"</span><span class="token punctuation">,</span> oldName<span class="token punctuation">,</span> newName<span class="token punctuation">)</span>cmd<span class="token punctuation">.</span>Stdin <span class="token operator">=</span> os<span class="token punctuation">.</span>Stdincmd<span class="token punctuation">.</span>Stdout <span class="token operator">=</span> os<span class="token punctuation">.</span>Stdoutcmd<span class="token punctuation">.</span>Stderr <span class="token operator">=</span> os<span class="token punctuation">.</span>Stderrerr <span class="token operator">:=</span> cmd<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、删除目录"><a href="#3、删除目录" class="headerlink" title="3、删除目录"></a>3、删除目录</h5><p>go删除目录的函数定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Remove</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中，参数name为目录的名字。Remove()函数有一个局限性：当目录下有文件或其他目录时会出错。如下</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">2023</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">25</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span><span class="token number">46</span> remove dir<span class="token punctuation">:</span> directory not empty<span class="token builtin">panic</span><span class="token punctuation">:</span> remove dir<span class="token punctuation">:</span> directory not empty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果要删除多级目录，则可以使用RemoveAll()函数</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">RemoveAll</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">removeAll</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中，参数path为要删除的多级子目录。如果path是单个名称，则该目录下的子目录将<strong>全部被删除</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go">err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">RemoveAll</span><span class="token punctuation">(</span><span class="token string">"dir"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、遍历目录"><a href="#4、遍历目录" class="headerlink" title="4、遍历目录"></a>4、遍历目录</h5><p>在go语言的path&#x2F;filepath包中，提供了Walk()函数来遍历目录</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Walk</span><span class="token punctuation">(</span>root <span class="token builtin">string</span><span class="token punctuation">,</span> fn WalkFunc<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>info<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Lstat</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>err <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>err <span class="token operator">=</span> <span class="token function">walk</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> info<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> err <span class="token operator">==</span> SkipDir <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，参数root为遍历的初始根目录，参数walkFn为自定义函数（例如，显示所有文件夹、文件、子文件）用Walk()函数遍历目录的示例如下:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"io/fs"</span><span class="token string">"path/filepath"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">scan</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> info fs<span class="token punctuation">.</span>FileInfo<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Scan:%s\n"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>     fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">IsDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// 是否是目录</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 文件或目录名</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">Mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 文件或目录权限</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">ModTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 创建时间</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>root <span class="token operator">:=</span> <span class="token string">"./test_walk"</span>err <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Walk</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> scan<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"filepath.Walk() returned %v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出</span>Scan<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token operator">/</span>test_walk<span class="token boolean">true</span>test_walkdrwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x<span class="token number">2023</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">48</span><span class="token punctuation">:</span><span class="token number">38.415947217</span> <span class="token operator">+</span><span class="token number">0800</span> CST<span class="token number">96</span>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Scan<span class="token punctuation">:</span>test_walk<span class="token operator">/</span>dir2<span class="token boolean">true</span>dir2drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x<span class="token number">2023</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">48</span><span class="token punctuation">:</span><span class="token number">43.947354911</span> <span class="token operator">+</span><span class="token number">0800</span> CST<span class="token number">96</span>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Scan<span class="token punctuation">:</span>test_walk<span class="token operator">/</span>dir2<span class="token operator">/</span>dir3<span class="token boolean">true</span>dir3drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x<span class="token number">2023</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">55</span><span class="token punctuation">:</span><span class="token number">53.152220343</span> <span class="token operator">+</span><span class="token number">0800</span> CST<span class="token number">96</span>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Scan<span class="token punctuation">:</span>test_walk<span class="token operator">/</span>dir2<span class="token operator">/</span>dir3<span class="token operator">/</span>test<span class="token boolean">false</span>test<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span><span class="token number">2023</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">55</span><span class="token punctuation">:</span><span class="token number">53.152114752</span> <span class="token operator">+</span><span class="token number">0800</span> CST<span class="token number">665464</span>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将需要遍历的目录下的所有文件移动到static目录中</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"io/fs"</span><span class="token string">"os"</span><span class="token string">"os/exec"</span><span class="token string">"path/filepath"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">scan</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> info fs<span class="token punctuation">.</span>FileInfo<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Scan:%s\n"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">IsDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// 是否是目录</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 文件或目录名</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">Mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 文件或目录权限</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">ModTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 创建时间</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>        <span class="token comment">// 判断是否是目录，如果不是则将文件移动</span><span class="token keyword">if</span> <span class="token operator">!</span>info<span class="token punctuation">.</span><span class="token function">IsDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">"mv"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token string">"static"</span><span class="token punctuation">)</span>cmd<span class="token punctuation">.</span>Stdout <span class="token operator">=</span> os<span class="token punctuation">.</span>Stdincmd<span class="token punctuation">.</span>Stderr <span class="token operator">=</span> os<span class="token punctuation">.</span>Stderrcmd<span class="token punctuation">.</span>Stdin <span class="token operator">=</span> os<span class="token punctuation">.</span>Stdinerr <span class="token operator">=</span> cmd<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>root <span class="token operator">:=</span> <span class="token string">"./test_walk"</span>err <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Walk</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> scan<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"filepath.Walk() returned %v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、文件操作"><a href="#二、文件操作" class="headerlink" title="二、文件操作"></a>二、文件操作</h3><h5 id="2-1、创建文件"><a href="#2-1、创建文件" class="headerlink" title="2.1、创建文件"></a>2.1、创建文件</h5><p>Go语言os包中提供了Create()函数来创建文件，其定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Create</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>File<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">OpenFile</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> O_RDWR<span class="token operator">|</span>O_CREATE<span class="token operator">|</span>O_TRUNC<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中，参数name为文件名字的字符串，返回值为指针型文件描述符</p><p>用Create()函数创建一个名为name的文件，默认采用666.如果文件存在，则他会被重置为空文件，如果成功，则返回文件描述符对象，可用于文件的读写</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建文件，Create()函数会根据传入的文件名创建文件，默认权限是666</span>    file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"./demo.test"</span><span class="token punctuation">)</span> <span class="token comment">// 如果已经存在则将文件清空</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建文件失败的原因有：</span>        <span class="token comment">// 1、路径不存在，2、权限不足 3、打开文件数量超过上限 4、磁盘空间不足等</span>        log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>    <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 关闭文件，释放资源</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-2、打开与关闭文件"><a href="#2-2、打开与关闭文件" class="headerlink" title="2.2、打开与关闭文件"></a>2.2、打开与关闭文件</h5><p>在go语言的os包中提供了<code>Open()</code>函数和<code>OpenFile()</code>函数用来打开文件。在<code>Open()</code>、<code>OpenFile()</code> 函数使用完毕后，必须调用Close()方法来关闭文件</p><p>####### <strong>1、Open()函数</strong><br>文件的打开使用os包中的<code>Open()</code> 函数，其定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Open</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>File<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">OpenFile</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中参数name为文件名字的字符串，返回值为文件描述符对象。</p><p>文件关闭用Close()方法</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>FIle<span class="token punctuation">)</span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中，参数f为文件描述符指针；Close() 方法可使文件不能用于读写，他的返回值为可能出现的错误。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"demo.test"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"打开文件出错%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果在代码所在文件夹中没有名为demo.test的文件，则报如下错误：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">打开文件出错open demo<span class="token punctuation">.</span>tests<span class="token punctuation">:</span> no such file or directory<span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="2、OpenFile-函数"><a href="#2、OpenFile-函数" class="headerlink" title="2、OpenFile()函数"></a><strong>2、OpenFile()函数</strong></h6><p><code>OpenFile()</code>函数比<code>Open()</code>函数更加强大，可以定义文件的名字、文件打开方式，以及文件权限设置，其定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"demo.test"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_APPEND<span class="token operator">|</span>os<span class="token punctuation">.</span>O_CREATE<span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"文件打开失败"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 所有权限</span><span class="token keyword">const</span> <span class="token punctuation">(</span><span class="token comment">// Exactly one of O_RDONLY, O_WRONLY, or O_RDWR must be specified.</span>O_RDONLY <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_RDONLY <span class="token comment">// open the file read-only.  // 只读</span>O_WRONLY <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_WRONLY <span class="token comment">// open the file write-only. // 只写</span>O_RDWR   <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_RDWR   <span class="token comment">// open the file read-write.  // 读写</span><span class="token comment">// The remaining values may be or'ed in to control behavior.  </span>O_APPEND <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_APPEND <span class="token comment">// append data to the file when writing.   // 追加</span>O_CREATE <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_CREAT  <span class="token comment">// create a new file if none exists.  // 如果不存在则创建</span>O_EXCL   <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_EXCL   <span class="token comment">// used with O_CREATE, file must not exist.  // 和create搭配使用，文件必须不存在</span>O_SYNC   <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_SYNC   <span class="token comment">// open for synchronous I/O.  </span>O_TRUNC  <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_TRUNC  <span class="token comment">// truncate regular writable file when opened.   // 清空文件</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3、读写文件"><a href="#3、读写文件" class="headerlink" title="3、读写文件"></a><strong>3、读写文件</strong></h6><p>####### 3.1、读文件<br>读文件有如下两种函数</p><ol><li><strong>用带缓冲方式读取</strong></li></ol><p>这种方式使用<code>bufio</code>包中的<code>NewReader()</code>函数</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewReader</span><span class="token punctuation">(</span>rd io<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span> <span class="token operator">*</span>Reader <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">NewReaderSize</span><span class="token punctuation">(</span>rd<span class="token punctuation">,</span> defaultBufSize<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 打开文件</span>file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"demo.test"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_APPEND<span class="token operator">|</span>os<span class="token punctuation">.</span>O_CREATE<span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"文件打开失败"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>line<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span> <span class="token comment">// 读取一个换行符就结束</span><span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">&#123;</span>                   <span class="token comment">// io.EOF 表示文件的末尾</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出每行内容</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>直接读取到内存(ioutil.ReadFile)</strong></li></ol><p>如果想将文件直接读取到内存中，则可以使用<code>io/ioutil</code> 包中的<code>ReadFile()</code> 函数，其定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ReadFile</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go">filePath <span class="token operator">:=</span> <span class="token string">"demo.test"</span>content<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 输出</span><span class="token punctuation">[</span><span class="token number">231</span> <span class="token number">172</span> <span class="token number">172</span> <span class="token number">228</span> <span class="token number">184</span> <span class="token number">128</span> <span class="token number">232</span> <span class="token number">161</span> <span class="token number">140</span> <span class="token number">97</span> <span class="token number">98</span> <span class="token number">99</span> <span class="token number">10</span> <span class="token number">231</span> <span class="token number">172</span> <span class="token number">172</span> <span class="token number">228</span> <span class="token number">186</span> <span class="token number">140</span> <span class="token number">232</span> <span class="token number">161</span> <span class="token number">140</span> <span class="token number">100</span> <span class="token number">101</span> <span class="token number">114</span> <span class="token number">10</span> <span class="token number">231</span> <span class="token number">172</span> <span class="token number">172</span> <span class="token number">228</span> <span class="token number">184</span> <span class="token number">137</span> <span class="token number">232</span> <span class="token number">161</span> <span class="token number">140</span> <span class="token number">99</span> <span class="token number">99</span> <span class="token number">99</span> <span class="token number">10</span> <span class="token number">100</span> <span class="token number">100</span> <span class="token number">100</span> <span class="token number">10</span><span class="token punctuation">]</span>第一行abc第二行der第三行cccddd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>####### <strong>3.2、写文件</strong><br>Go语言中os包中提供了一个名为File的对象来处理文件，该对象有<code>Write()</code>、<code>WriteAt()</code>、<code>WriteString()</code> 3种方法可以用于写文件</p><ol><li><strong>Write()方法</strong></li></ol><p><code>Write()</code> 方法用于写入<code>[]byte</code> 类型的信息到文件中，其定义如下</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"demo.test"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_WRONLY<span class="token operator">|</span>os<span class="token punctuation">.</span>O_APPEND<span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>n<span class="token punctuation">,</span> err <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"你好世界！"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>WriteAt()方法</strong></li></ol><p>WriteAt()方法用于在指定位置开始写入[]byte 类型的信息，其定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"demo.test"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_WRONLY<span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>n<span class="token punctuation">,</span> err <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">WriteAt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"测试一下"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法表示从基本输入源的偏移量off处开始，将len(p)个字节读取到p中。他返回读取的字节数n(0&lt;&#x3D; n &lt;&#x3D;len(p))，以及任何遇到的错误</p><ol start="3"><li><strong>WriteString()方法</strong></li></ol><p>WriteString()方法用于将字符串写入文件，其定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>File<span class="token punctuation">)</span> <span class="token function">WriteString</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中参数s为string类型的字符串。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"demo.test"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_WRONLY<span class="token operator">|</span>os<span class="token punctuation">.</span>O_TRUNC<span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>n<span class="token punctuation">,</span> err <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">"我擦擦擦擦擦擦"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>WriteString()</code> 方法的本质上是对 <code>Write()</code> 方法的调用。<code>WriteString()</code>方法的返回值就是<code>Write()</code>的返回值。<code>WriteString()</code>的方法体如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>File<span class="token punctuation">)</span> <span class="token function">WriteString</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>hdr <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>unsafeheader<span class="token punctuation">.</span>Slice<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>hdr<span class="token punctuation">.</span>Data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>unsafeheader<span class="token punctuation">.</span>String<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Datahdr<span class="token punctuation">.</span>Cap <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>hdr<span class="token punctuation">.</span>Len <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>WriteString() </code>方法和 <code>Write() </code>方法的区别是参数形式：<code>WriteString()</code> 方法的参数是字符串，<code>Write()</code>方法的参数是<code>[]byte(s)</code> </p><pre class="line-numbers language-go" data-language="go"><code class="language-go">fout<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"demo.test"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> fout<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>outstr <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s:%d\r\n"</span><span class="token punctuation">,</span> <span class="token string">"Hello Go"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>  <span class="token comment">// sprintf格式化</span>fout<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>outstr<span class="token punctuation">)</span> <span class="token comment">// string 信息</span>fout<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"i love go \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// byte 类型</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-3、移动与重命名文件"><a href="#2-3、移动与重命名文件" class="headerlink" title="2.3、移动与重命名文件"></a>2.3、移动与重命名文件</h5><p>Go语言的移动和重命名可以通过Rename()函数实现，其参数既可以是目录也可以是文件。</p><p>定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 创建一个名为demo.test 的文件</span>fout<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"demo.test"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> fout<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 创建一个名为fuck的目录，权限为777</span>err <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">Mkdir</span><span class="token punctuation">(</span><span class="token string">"fuck"</span><span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 将demo.test 文件移动到fuck目录下，并改名为demo.txt</span>err <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">Rename</span><span class="token punctuation">(</span><span class="token string">"demo.test"</span><span class="token punctuation">,</span> <span class="token string">"fuck/demo.txt"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-4、删除文件"><a href="#2-4、删除文件" class="headerlink" title="2.4、删除文件"></a>2.4、删除文件</h5><p>和删除目录一样，在Go语言中删除文件也可以通过<code>Remove()</code>函数和<code>RemoveAll()</code>函数来实现</p><ol><li>Remove()函数</li></ol><p>Remove()函数用于删除指定的文件或目录，如果出错，则返回*PathError类型的错误，其定义为</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Remove</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>RemoveAll()函数</li></ol><p><code>RemoveAll()</code> 函数用于删除指定的文件或目录及它的所有下级对象。他会尝试删除所有内容，除非遇到错误并返回。如果参数path指定的对象不存在，则<code>RemoveAll()</code> 会返回nil，而不返回错误</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">RemoveAll</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">removeAll</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 创建一个名为demo.test 的文件</span>fout<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"demo.test"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> fout<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 创建一个名为fuck的目录，权限为777</span>err <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">Mkdir</span><span class="token punctuation">(</span><span class="token string">"fuck"</span><span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 将demo.test 文件移动到fuck目录下，并改名为demo.txt</span>err <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">Rename</span><span class="token punctuation">(</span><span class="token string">"demo.test"</span><span class="token punctuation">,</span> <span class="token string">"fuck/demo.txt"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>err <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">RemoveAll</span><span class="token punctuation">(</span><span class="token string">"fuck/demo.txt"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-5、复制文件"><a href="#2-5、复制文件" class="headerlink" title="2.5、复制文件"></a>2.5、复制文件</h5><p>在Go语言中，可以使用io包的Copy() 函数来实现文件复制功能，定义如下</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Copy</span><span class="token punctuation">(</span>dst Writer<span class="token punctuation">,</span> src Reader<span class="token punctuation">)</span> <span class="token punctuation">(</span>written <span class="token builtin">int64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">copyBuffer</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> src<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中，参数dst为源文件指针，参数src为目标文件指针。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">src<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"test.zip"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_WRONLY<span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> src<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>dst<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"test.zip.bak"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_WRONLY<span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> dst<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"复制成功，复制的字节数为："</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token comment">// 这里用exec</span><span class="token punctuation">[</span>root@newperiodical ~<span class="token punctuation">]</span># cat test<span class="token punctuation">.</span><span class="token keyword">go</span> <span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"log"</span>    <span class="token string">"os"</span>    <span class="token string">"fmt"</span>    <span class="token string">"os/exec"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                src<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_WRONLY<span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        dst<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"test.txt.bak"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_WRONLY<span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">"cp"</span><span class="token punctuation">,</span> <span class="token string">"-rp"</span><span class="token punctuation">,</span> <span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test.txt.bak"</span><span class="token punctuation">)</span>        cmd<span class="token punctuation">.</span>Stdout <span class="token operator">=</span> os<span class="token punctuation">.</span>Stdout        cmd<span class="token punctuation">.</span>Stdin <span class="token operator">=</span> os<span class="token punctuation">.</span>Stdin        cmd<span class="token punctuation">.</span>Stderr <span class="token operator">=</span> os<span class="token punctuation">.</span>Stderr        err <span class="token operator">=</span> cmd<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token keyword">defer</span> dst<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">defer</span> src<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除此之外，还可以自己封装成一个函数：先通过使用os包中的<code>os.Open()</code>和<code>os.Create()</code> 函数获取文件句柄（文件指针），然后通过文件指针的<code>Read()</code>和<code>Write()</code>方法，按照字节读取和写入来实现复制文件的功能。</p><p>把复制文件封装成一个公共函数，以便在以后每次需要用到该功能时，直接调用封装好的函数。对于较大文件，可以自定义一个名为DoCopy()的函数，如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">DoCopy</span><span class="token punctuation">(</span>srcFileName<span class="token punctuation">,</span> dstFileName <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>srcFile<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>srcFileName<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"源文件读取失败，err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>err <span class="token operator">=</span> srcFile<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"源文件关闭失败,err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>distFile<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>dstFileName<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"目标文件创建失败,err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>err <span class="token operator">:=</span> distFile<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"目标文件关闭失败,err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 指定长度的字节切片，每次最多读取指定长度</span><span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">// 循环读取并写入</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>n<span class="token punctuation">,</span> err <span class="token operator">:=</span> srcFile<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>n<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> distFile<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"复制过程发生错误，错误err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">DoCopy</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"shit.txt"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">FileCopy</span><span class="token punctuation">(</span>dstStr<span class="token punctuation">,</span> srcStr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>dst<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span>dstStr<span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_RDWR<span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token keyword">defer</span> dst<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>src<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>srcStr<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token keyword">defer</span> src<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>str<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>n<span class="token punctuation">,</span> err <span class="token operator">:=</span> src<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"已更新%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>err <span class="token operator">:=</span> <span class="token function">FileCopy</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"fuck.txt"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-6、修改文件权限"><a href="#2-6、修改文件权限" class="headerlink" title="2.6、修改文件权限"></a>2.6、修改文件权限</h5><h6 id="1、Linux中的文件权限"><a href="#1、Linux中的文件权限" class="headerlink" title="1、Linux中的文件权限"></a>1、Linux中的文件权限</h6><ol><li><p><strong>linux中的文件权限有以下设定</strong></p><ul><li>文件的权限类型一般包括读、写、执行(对应字母为r、w、x)</li><li>权限的属组拥有者、群组、其他组这3种。每个文件都可以针对这3个属组（粒度），设置不同的r、w、x(读、写、执行)权限</li><li>通常情况下，一个文件只能归属与一个用户和组。如果其他的用户想具有这个文件的权限，则可以将用户加入具备权限的群组。一个用户可以同时归属与多个组。</li></ul></li><li><p><strong>十位二进制表示法</strong></p></li></ol><p><code>-rwxrwxrwx(777)</code> </p><p>以上权限表示所有用户（拥有者、所在群组的用户、其他组的用户）都有这个文件的读、写、执行权限。</p><p>**① **<strong>：</strong>在十位二进制表示法中，第一位表示的是文件的类型，类型可以是下面几个中的一个</p><ul><li>d：目录(directory)</li><li>-：文件(regular file)</li><li>s：套接字(socket)</li><li>p：管道文件(pipe)或命名管道文件(named pipe)</li><li>l：符号链接文件(symbolic link)</li><li>b：该文件是面向块的设备文件</li><li>c：该文件是面向字符的设备文件</li></ul><p>②：在十位二进制表示法中，后9位每个位置的意义（代表某个属组的某个权限）都是固定的。如果将各个位置权限的有无用二进制数1和0来代替，则只读、只写、只执行权限可以用3位二进制数表示：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">r<span class="token operator">--</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token number">100</span>  <span class="token number">4</span><span class="token operator">-</span>w<span class="token operator">-</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token number">010</span>  <span class="token number">2</span><span class="token operator">--</span>x  <span class="token operator">=</span><span class="token operator">></span> <span class="token number">001</span>  <span class="token number">1</span><span class="token operator">--</span><span class="token operator">-</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token number">000</span>  <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>转换成八进制数，则为r&#x3D;4，w&#x3D;2，x&#x3D;1 （这也就是在用数字设置权限时，为何4代表读，2代表写，1代表执行）</p><p>可以将所有的权限用二进制形式表现出来，并进一步转换成八进制数字</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">rwx <span class="token operator">=</span> <span class="token number">111</span>  <span class="token operator">=</span> <span class="token number">7</span>rw<span class="token operator">-</span> <span class="token operator">=</span> <span class="token number">110</span>  <span class="token operator">=</span> <span class="token number">6</span>r<span class="token operator">-</span>x <span class="token operator">=</span> <span class="token number">101</span>  <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">-</span>wx <span class="token operator">=</span> <span class="token number">011</span>  <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">-</span>w<span class="token operator">-</span> <span class="token operator">=</span> <span class="token number">010</span>  <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">--</span>x <span class="token operator">=</span> <span class="token number">001</span>  <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token operator">=</span> <span class="token number">000</span>  <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由上可以看出，每个属组的所有的权限都可以用1位八进制数表示，每个数字都代表不同的权限。如最高的权限是7，则代表可读、可写、可执行。</p><h6 id="2、修改文件权限"><a href="#2、修改文件权限" class="headerlink" title="2、修改文件权限"></a>2、修改文件权限</h6><p>在Go语言中，可使用os.Chmod()方法来修改文件的权限，该方法是对操作系统权限控制的一种封装。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Chmod</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> mode FileMode<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">chmod</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> mode<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中参数f为文件指针。如果出错，则返回底层错误类型*PathError。用Chmod()方法修改文件权限的实例如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"chmod1.txt"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>info<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>mode <span class="token operator">:=</span> info<span class="token punctuation">.</span><span class="token function">Mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span>os<span class="token punctuation">.</span><span class="token function">Chmod</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">)</span>fileinfo<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>filemode <span class="token operator">:=</span> fileinfo<span class="token punctuation">.</span><span class="token function">Mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>filemode<span class="token punctuation">)</span><span class="token comment">//输出</span><span class="token operator">-</span>r<span class="token operator">--</span><span class="token operator">--</span>x<span class="token operator">--</span>x<span class="token operator">-</span>rwxrwxrwx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Go文件处理&quot;&gt;&lt;a href=&quot;#Go文件处理&quot; class=&quot;headerlink&quot; title=&quot;Go文件处理&quot;&gt;&lt;/a&gt;Go文件处理&lt;/h1&gt;&lt;h3 id=&quot;一、操作目录&quot;&gt;&lt;a href=&quot;#一、操作目录&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="golang" scheme="http://dycloud.fun/categories/golang/"/>
    
    
    <category term="云原生" scheme="http://dycloud.fun/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    <category term="golang" scheme="http://dycloud.fun/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Channel通道</title>
    <link href="http://dycloud.fun/2023/05/20/Channel%E9%80%9A%E9%81%93/"/>
    <id>http://dycloud.fun/2023/05/20/Channel%E9%80%9A%E9%81%93/</id>
    <published>2023-05-20T12:32:00.000Z</published>
    <updated>2023-08-30T03:10:16.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Channel通道"><a href="#Channel通道" class="headerlink" title="Channel通道"></a>Channel通道</h1><h3 id="通道的定义"><a href="#通道的定义" class="headerlink" title="通道的定义"></a>通道的定义</h3><p>通道（channel）是用来传递数据的一个数据结构。go语言提倡使用通信来代替共享内存。当一个资源需要在goroutine之间共享时，通道在goroutine之间架起了一个管道，并提供了确保同步交换数据的机制。</p><p>在声明通道时，需要指定要被共享的数据的类型。可以通过通道共享内置类型、命名类型、结构类型和引用类型的值或指针。</p><p>Go语言中的通道在任何时候，同时只能有一个goroutine访问通到进行发送和接受数据。</p><p><img src="/images/8d4B0AZilXjz-ObG8hrQHiEqgqMYnOD0pndKK3I-7l4.png" alt="image"></p><p><img src="/images/pBJqm0jtt8R1VWcFHS1DD8m9PWDQ7X4_7UnpXpYouCc.png" alt="image"></p><p>Channel底层是一个先进先出的环形队列（固定大小环形数组实现）</p><ul><li>full或empty就会阻塞</li><li>send发送</li><li>recv接受并移除</li><li>sendx表示最后一次插入的元素的index</li><li>recvx表示最后一次接受元素的index</li><li>发送、接受的操作符号都是&lt;-</li></ul><h3 id="通道构造"><a href="#通道构造" class="headerlink" title="通道构造"></a>通道构造</h3><p>源码runtime&#x2F;chan.go&#x2F;makechan</p><h5 id="nil通道"><a href="#nil通道" class="headerlink" title="nil通道"></a>nil通道</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> c1 <span class="token keyword">chan</span> <span class="token builtin">int</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c1: %d, %d, %v\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span> <span class="token comment">// c1: 0, 0, &lt;nil></span>c1 <span class="token operator">&lt;-</span> <span class="token number">111</span> <span class="token comment">// 阻塞，不报错。由于没有初始化容器，111塞不进去</span><span class="token operator">&lt;-</span> c1 <span class="token comment">// 也阻塞，不报错，什么都拿不出来</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>nil通道：chan零值是nil，即可以理解为未被初始化通道这个容器。nil通道可以认为是一个只要操作就阻塞当前协程的容器。这种通道不要创建和使用，阻塞后无法解除，底层源码中写明了无法解除。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> c1 <span class="token keyword">chan</span> <span class="token builtin">int</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c1: %d, %d, %v\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"准备发送数据111"</span><span class="token punctuation">)</span> c1 <span class="token operator">&lt;-</span> <span class="token number">111</span> <span class="token comment">// 往c1里面发送，阻塞在这一句，无法解除，显示本程序死锁</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"发送数据111结束"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上例就算开新的协程来读取c1也没用，对nil通道读写都会阻塞。</p><h5 id="非缓冲通道"><a href="#非缓冲通道" class="headerlink" title="非缓冲通道"></a>非缓冲通道</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> c2 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c2 : %d %d %v\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token keyword">var</span> c3 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c3 : %d %d %v\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">,</span> c3<span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    c2 <span class="token operator">&lt;-</span> <span class="token number">300</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//fmt.Println(&lt;-c2)</span>a <span class="token operator">:=</span> <span class="token operator">&lt;-</span>c2 <span class="token comment">// 这里读取会阻塞，因为通道内没有任何数据</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：容量为0的通道，也叫同步通道。这中通道发送第一个元素时，如果没有接受操作就立即阻塞，直到被接受。同样接受时，如果没有数据被发送就立即阻塞，直到通道内有数据发送</p><h5 id="缓冲通道"><a href="#缓冲通道" class="headerlink" title="缓冲通道"></a>缓冲通道</h5><p>通道可以设置缓冲区——通过<code>make()</code>函数的第2个参数指定缓冲区大小</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>带缓冲区的通道，允许发送方的数据发送和接收端的数据获取处于异步状态。就是说发送方发送的数据可以放在缓冲区中，等待接收端去接受数据，而不是立即需要接收端去接受数据。</p><p>不过由于缓冲区的大小是有限的，所以还是必须有接收端来接受数据的，否则缓冲区一满，数据发送方就无法再 发送数据了。</p><p>如果通道不带缓冲，则发送方会阻塞，直到接收方从通道中接受了数据。如果通道带缓冲，则发送方会阻塞，直到发送的值被复制到缓冲区中；如果缓冲区已满，则意味着需要的等待直到某个接受方接受了数据。接收方在有值可以接受之前，会一直阻塞</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment">// 因为ch是带缓冲的通道，所以可以同时发送多个数据，而不用立刻去同步接受数据</span>    ch <span class="token operator">&lt;-</span> <span class="token number">6</span>    ch <span class="token operator">&lt;-</span> <span class="token number">7</span>    ch <span class="token operator">&lt;-</span> <span class="token number">8</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go">    c4 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment">// 缓冲通道，容量为8，长度为0</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c4 %d %d %v\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">,</span> c4<span class="token punctuation">)</span>    c4 <span class="token operator">&lt;-</span> <span class="token number">111</span>    c4 <span class="token operator">&lt;-</span> <span class="token number">222</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c4 %d %d %v\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">,</span> c4<span class="token punctuation">)</span>    <span class="token operator">&lt;-</span>c4    t <span class="token operator">:=</span> <span class="token operator">&lt;-</span>c4    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c4 %d %d %v\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">,</span> c4<span class="token punctuation">)</span>  <span class="token comment">// 拿出来两个之后len变成0</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T %[1]v"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token comment">// 输出</span>c4 <span class="token number">0</span> <span class="token number">8</span> <span class="token number">0x1400017a000</span>c4 <span class="token number">2</span> <span class="token number">8</span> <span class="token number">0x1400017a000</span>c4 <span class="token number">0</span> <span class="token number">8</span> <span class="token number">0x1400017a000</span><span class="token builtin">int</span> <span class="token number">222</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：容量不为0的通道。通道已满，再往该通道发送数据的操作会被阻塞；通道为空，再从该通道接受数据的操作会被阻塞</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token comment">// 构建一个通道</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"开始goroutine"</span><span class="token punctuation">)</span>        ch <span class="token operator">&lt;-</span> <span class="token string">"signal"</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"退出goroutine"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"等待goroutine"</span><span class="token punctuation">)</span>    <span class="token operator">&lt;-</span>ch <span class="token comment">// 这里会阻塞，直到往通道里写入数据</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"完成"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出</span>等待goroutine开始goroutine退出goroutine完成<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单向通道"><a href="#单向通道" class="headerlink" title="单向通道"></a>单向通道</h3><ul><li><code>&lt;- chan type</code>  这种定义表示只从一个channel里面拿，说明这是只读的</li><li><code>chan &lt;- type</code> 这种定义标识只往一个channel里面写，说明这是只写的。</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">produce</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 生产者，只写，只要该通道具有写的能力就行</span>    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>        r <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ch <span class="token operator">&lt;-</span> r<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">consume</span><span class="token punctuation">(</span>ch <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 消费者，只读。只要该通道有读的能力就行</span>    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>        t <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"正在消费%d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>        <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token number">9</span> <span class="token punctuation">&#123;</span>            wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"消费完成"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token comment">// 创建可读/写非缓冲通道</span>    <span class="token keyword">go</span> <span class="token function">produce</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">consume</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wg<span class="token punctuation">)</span>    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通道关闭"><a href="#通道关闭" class="headerlink" title="通道关闭"></a>通道关闭</h3><ul><li>使用<code>close(ch)</code>关闭一个通道</li><li>只有发送方才能关闭通道，一旦通道关闭，发送者不能再往其中发送数据，否则panic</li><li>通道关闭作用：告诉接受者再无新数据可以到达了</li><li>通道关闭<ul><li><code>t,ok := &lt;-ch</code>  或<code>t :=&lt;-ch</code>  从通道中读取数据</li><li>正在阻塞等待通道中的数据的接受者，由于通道被关闭，接受者不再阻塞，获取数据失败ok位false，返回零值</li><li>接受者依然可以访问关闭的通道而不阻塞<ul><li>如果通道内还有剩余数据，ok为true，接受数据</li><li>如果通道内剩余的数据被拿完了，继续接受不阻塞，ok为false，返回零值</li></ul></li></ul></li><li>已经关闭的通道，若再次关闭则panic，因此不要重复关闭</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">produce</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token builtin">int</span><span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 生产者，只写，只要该通道具有写的能力就行</span>    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>        r <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        a <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">4</span> <span class="token punctuation">&#123;</span>            wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            ch <span class="token operator">&lt;-</span> a            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">consume</span><span class="token punctuation">(</span>ch <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 消费者，只读。只要该通道有读的能力就行</span>    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>        t<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"生产者遇到瓶颈，已关闭"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"正在消费%d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">produce</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wg<span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">consume</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wg<span class="token punctuation">)</span>    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通道遍历"><a href="#通道遍历" class="headerlink" title="通道遍历"></a>通道遍历</h3><p>1、nil通道</p><p>发送、接受、遍历都阻塞</p><p>2、缓冲的、未关闭的通道</p><p>相当于一个无限元素的通道，迭代不完，阻塞在等下一个元素到达。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> data <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通道是可以被遍历的，遍历的结果就是接收到的数据，数据类型的就是通道的数据类型。通过for遍历获得变量只有一个，就是上面例子的data</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">6</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>            ch <span class="token operator">&lt;-</span> i            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> receive <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>receive<span class="token punctuation">)</span>        <span class="token keyword">if</span> receive <span class="token operator">==</span> <span class="token number">8</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通道可用于在两个goroutine之间通过传递一个指定类型的值来同步运行和通信。操作符 <code>&lt;-</code> 用于指定通道的方向、发送和接受。如果未指定方向，则为双向通道</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">ch <span class="token operator">&lt;-</span> v v <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>默认情况，通道是不带缓冲区的。在发送方发送数据的同时必须有接收方相应的接受数据。</p></blockquote><blockquote></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Sum</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sum <span class="token operator">:=</span> <span class="token number">0</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> v    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>    ch <span class="token operator">&lt;-</span> sum<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span>    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">Sum</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">Sum</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span>    a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">,</span> <span class="token operator">&lt;-</span>ch    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出结果为</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">9</span> <span class="token number">1</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token number">0</span><span class="token punctuation">[</span><span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token number">21</span><span class="token number">0</span> <span class="token number">21</span> <span class="token number">21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><ul><li><code>time.NewTicker</code>  每xx（时间）秒调用一次</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>t<span class="token punctuation">.</span>C<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>time.NewTimer</code> xx秒后调用</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTimer</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>t<span class="token punctuation">.</span>C<span class="token punctuation">)</span> <span class="token comment">// 通道阻塞2秒后只能接受一次</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通道死锁"><a href="#通道死锁" class="headerlink" title="通道死锁"></a>通道死锁</h3><p>channel满了，就阻塞写；channel空了，就阻塞读。容量为0的通道可以理解为0个元素就满了</p><p>阻塞了当前协程之后就会交出cpu，去执行其他协程，希望其他协程帮助自己解除阻塞。</p><p>main函数结束了，整个进程就结束了</p><p>如果在main协程中，执行语句阻塞时，如果没有其他字写成可以执行，就剩主协程自己了，无法解锁，就自己把自己杀掉，报错fatal error deadlock</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> c1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// 非缓冲，未关闭通道</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c1: %d, %d, %v\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span> c1 <span class="token operator">&lt;-</span> <span class="token number">111</span> <span class="token comment">// 当前协程阻塞，无人能解，死锁</span><span class="token punctuation">&#125;</span>运行结果如下$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>c1<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xc00001a120</span>fatal <span class="token builtin">error</span><span class="token punctuation">:</span> all goroutines are asleep <span class="token operator">-</span> deadlock<span class="token operator">!</span>goroutine <span class="token number">1</span> <span class="token punctuation">[</span><span class="token keyword">chan</span> send<span class="token punctuation">]</span><span class="token punctuation">:</span>main<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        O<span class="token punctuation">:</span><span class="token operator">/</span>pros<span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">10</span> <span class="token operator">+</span><span class="token number">0xea</span>exit status <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果通道阻塞不在main协程中发生，而是发生在子协程中，子协程会继续阻塞着，也可能发生死锁。但是由于至少main协程是一个值得等待的希望，编译器不能帮你识别出死锁。如果真的无任何协程帮助该协程解除阻塞状态，那么事实上该子协程解锁无望，已经死锁了。</p><p>死锁的危害可能会导致进程活着，但实际上某些协程未真正工作而阻塞，应该有良好的编码习惯，来减少死锁的出现。</p><h3 id="struct-型通道"><a href="#struct-型通道" class="headerlink" title="struct{}型通道"></a>struct{}型通道</h3><p>如果一个结构体类型就是struct{} ，说明该结构体的实例没有数据成员，也就是实例内存占用为0</p><p>这种类型构成的通道，非常借阅内存，仅仅只是为了传递一个信号标志</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    flag <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>        flag <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"等到信号了%T %[1]v\n"</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="select-多路复用"><a href="#select-多路复用" class="headerlink" title="select 多路复用"></a>select 多路复用</h3><p>在Unix中，select() 函数用来监控一组描述符，该机制常用语实现高并发的Socket服务器程序。go语言直接在语言级别支持select关键字，用于处理异步I&#x2F;O问题</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span> ch1<span class="token punctuation">:</span>    <span class="token comment">// 如果ch1通道发送成功，则该case会接收到数据 </span><span class="token keyword">case</span> ch2 <span class="token operator">&lt;-</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token comment">// 如果ch2接受数据成功，则该case会收到数据</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token comment">// 默认分支</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>select 默认是阻塞的，只有当监听的通道中有发送或接受可以进行时才会运行。当多个通道都准备好后，select会随机的选择一个操作（发送或接受）来执行。</p><p>Go语言没有对通道提供直接的超时处理机制，但可以利用select来间接实现：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> wh sync<span class="token punctuation">.</span>WaitGroup    wh<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    timeout <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span>        ch <span class="token operator">&lt;-</span> <span class="token number">111</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>        timeout <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>timeout<span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"已超时，无法收到消息"</span><span class="token punctuation">)</span>            wh<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> s <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"成功收到消息："</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>            <span class="token function">close</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>            <span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>            wh<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    wh<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    count <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>    flag <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> flag <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>            count <span class="token operator">&lt;-</span> i            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> n <span class="token operator">:=</span> <span class="token operator">&lt;-</span>count<span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"count= "</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>flag<span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"结束了"</span><span class="token punctuation">)</span>            <span class="token keyword">goto</span> END        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>END<span class="token punctuation">:</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    count <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>    flag <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    newBase <span class="token operator">:=</span> <span class="token number">1000</span>    t1 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    t2 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> flag <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>            count <span class="token operator">&lt;-</span> i        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"~~~~@@@"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>t1<span class="token punctuation">.</span>C<span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"每一秒看看长度"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>t2<span class="token punctuation">.</span>C<span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"每隔5秒取一次"</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span>count<span class="token punctuation">)</span>        <span class="token keyword">case</span> count <span class="token operator">&lt;-</span> newBase<span class="token punctuation">:</span> <span class="token comment">// 发送数据成功进入通道执行该case</span>            newBase<span class="token operator">++</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通道并发"><a href="#通道并发" class="headerlink" title="通道并发"></a>通道并发</h3><p>Go语言采用并发同步模型叫做Communication Sequential Process 通讯顺序进程，这是一种消息传递模型，在goroutine间传递消息，而不是对数据进行加锁来实现同步访问。在goroutine之间使用channel来同步和传递数据。</p><ul><li>多个协程之间通讯的管道</li><li>一端推入数据，一端拿走数据</li><li>同一时间，只有一个协程可以访问通道的数据</li><li>协调协程的执行顺序</li></ul><p>如果多个线程都使用了同一个数据，就会出现竞争问题。因为线程的切换不会听从程序员的意志，时间片用完就切换了。解决办法往往需要加锁，让其他线程不能对共享数据进行修改，从而保证逻辑正确。</p><p>但锁的引入严重影响并行效率。</p><p>需求：</p><p>1、有一个全局数count，初始为0。编写一个函数inc，能够对count增加10万次。执行5次inc函数，请问最终count值是多少？</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">func</span> <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        count<span class="token operator">++</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Go协程数："</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"执行时长:"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Microseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"count="</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出</span>Go协程数： <span class="token number">1</span>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~执行时长<span class="token punctuation">:</span> <span class="token number">1531</span>count<span class="token operator">=</span> <span class="token number">500000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是串行，一条一条执行，没有并发</p><p>2、如果并发执行inc函数，该怎么做呢，请问最终count值是多少？</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">var</span> sw sync<span class="token punctuation">.</span>WaitGroup<span class="token keyword">func</span> <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">defer</span> sw<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        count<span class="token operator">++</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    sw<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Go协程数："</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>    sw<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"执行时长:"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Microseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"count="</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出</span>Go协程数： <span class="token number">6</span>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~执行时长<span class="token punctuation">:</span> <span class="token number">559</span>count<span class="token operator">=</span> <span class="token number">159255</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开了5个协程并发，count结果不为50万了。为什么？count随机了吗？</p><p>在上面代码中设置<code>runtime.GOMAXPROCS(1)</code>，输出会怎么样？</p><p><code>runtime.GOMAXPROCS(1)</code>  表示只使用一个CPU核心来并发执行go程序，设置为1会降低并发性能，大多数情况，go会自动管理并发的核心数，获得最佳的性能，最好不要手动设置该参数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">runtime<span class="token punctuation">.</span><span class="token function">GOMAXPROCS</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原因在于count++不是原子操作，会被打断。所以，即使使用goroutine也会有竞争，一样会有并发安全问题。换成下句试一试</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">defer</span> sw<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//count++</span>        atomic<span class="token punctuation">.</span><span class="token function">AddInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>count<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出</span>Go协程数： <span class="token number">6</span>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~执行时长<span class="token punctuation">:</span> <span class="token number">25306</span>count<span class="token operator">=</span> <span class="token number">500000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果正确了，但是这种共享内存的方式执行时长明显增加。</p><p>也可以使用互斥锁来保证count++的原子性操作</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> count <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">var</span> sw sync<span class="token punctuation">.</span>WaitGroup<span class="token keyword">var</span> lock sync<span class="token punctuation">.</span>Mutex<span class="token keyword">func</span> <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">defer</span> sw<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//count++</span>        lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        count<span class="token operator">++</span>        lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、能否使用通道，来同步多个协程</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> count <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">var</span> sw sync<span class="token punctuation">.</span>WaitGroup<span class="token keyword">var</span> lock sync<span class="token punctuation">.</span>Mutex<span class="token keyword">var</span> ch <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">defer</span> sw<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//count++</span>        t <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch        t<span class="token operator">++</span>        ch <span class="token operator">&lt;-</span> t    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    ch <span class="token operator">&lt;-</span> <span class="token number">0</span>    sw<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Go协程数："</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>    sw<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"执行时长:"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Microseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"count="</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出</span>Go协程数： <span class="token number">6</span>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~执行时长<span class="token punctuation">:</span> <span class="token number">78612</span>count<span class="token operator">=</span> <span class="token number">500000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上例是计算密集型，对同一个数据进行争抢，不是能发挥并行计算优势的例子，也不适合通道，用锁实现更有效率，更有优势。</p><p>通道适合数据流动的场景</p><ul><li>如同管道一样，一级一级处理，一个协程处理完，发给其他协程</li><li>生产者、消费者模型</li></ul><h3 id="协程泄露"><a href="#协程泄露" class="headerlink" title="协程泄露"></a>协程泄露</h3><p>原因：</p><ul><li>协程阻塞，未能如期结束，之后就会有大量累积</li><li>协程阻塞最常见的原因都跟通道有关</li><li>由于每个协程都要占用内存，所以携程泄露也会导致内存泄露</li></ul><p>因此，如果你不知道你创建的协程何时能够结束，就不要使用它。否则可能协程泄露。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Channel通道&quot;&gt;&lt;a href=&quot;#Channel通道&quot; class=&quot;headerlink&quot; title=&quot;Channel通道&quot;&gt;&lt;/a&gt;Channel通道&lt;/h1&gt;&lt;h3 id=&quot;通道的定义&quot;&gt;&lt;a href=&quot;#通道的定义&quot; class=&quot;header</summary>
      
    
    
    
    <category term="golang" scheme="http://dycloud.fun/categories/golang/"/>
    
    
    <category term="云原生" scheme="http://dycloud.fun/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    <category term="golang" scheme="http://dycloud.fun/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang协程</title>
    <link href="http://dycloud.fun/2023/05/15/Golang%E5%8D%8F%E7%A8%8B/"/>
    <id>http://dycloud.fun/2023/05/15/Golang%E5%8D%8F%E7%A8%8B/</id>
    <published>2023-05-15T06:32:00.000Z</published>
    <updated>2023-08-30T03:06:13.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><p>协程是一种比线程更加轻量级的一种函数，正如一个进程可以拥有多个线程一样，一个线程可以拥有多个协程。协程不是被操作系统内核管理的，而是完全由程序所控制的，即在用户态执行，这样的好处是，性能有大幅度的提升，因为不会像线程切换那样消耗资源。</p><blockquote><p>协程不是进程也不是线程，而是一个特殊的函数。这个函数可以在某个地方被“挂起”，并且可以重新再挂起处继续运行</p></blockquote><p>一个进程可以有多个线程，一个线程也可以有多个协程运行。在一个线程内可以有多个这样的特殊函数在运行，但是必须明确一点：一个线程中的多个协程的运行是串行的。如果是多核CPU，那多个进程或一个进程内的多个线程是可以并行运行的。但是在一个线程内的多个协程之间运行绝对是串行的，无论CPU有多少核。<strong>当一个协程被运行时，其他协程必须被挂起</strong></p><h5 id="进程、线程、协程对比"><a href="#进程、线程、协程对比" class="headerlink" title="进程、线程、协程对比"></a>进程、线程、协程对比</h5><ul><li>协程既不是进程也不是线程，协程仅是一个特殊的函数。协程、进程和线程不是一个维度的。</li><li>一个进程可以包含多个线程，一个线程可以包含多个协程。</li><li>虽然一个线程内的多个协程可以切换，但是这多个协程是串行执行的，某个时刻只能有一个线程在运行，没法利用CPU的多核能力。</li><li>协程与进程一样，也存在上下文切换问题</li><li>进程的切换者是操作系统，切换时机是根据操作系统自己的切换策略决定的，用户是无感的，进程的切换内容包括页全局目录、内核栈与硬件上下文，切换内容被保存在内存中，进程切换过程采用的是“从用户态到内核态，再到用户态”，切换效率低。</li><li>线程的切换者是操作系统，切换时间是根据操作系统自己的切换策略决定的，用户是无感的。线程的切换内容包括内核栈和硬件上下文。线程切换内容被保存在内核栈中。线程切换采用的是“从用户态到内核态再到用户态”，切换效率中等</li><li>协程的切换者是用户，切换时间是用户自己的程序决定的。协程的切换内容是硬件上下文，切换内存被保存在用户自己的变量（用户栈或堆）中。协程的切换过程只有用户态（即没有陷入内核态），因此切换效率高。</li></ul><blockquote><h3 id="协程Coroutine本质"><a href="#协程Coroutine本质" class="headerlink" title="协程Coroutine本质"></a>协程Coroutine本质</h3></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>c <span class="token operator">+=</span> <span class="token number">1</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"@@@"</span><span class="token punctuation">)</span>运行结果<span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span class="token number">5</span>@@@<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上例中，代码在同一个线程中运行，第7行是函数调用，必须等其调用结束后返回了，才能执行第8行代码，否则要一直等count函数执行。</p><p>在count函数中增加一个yield语句</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">yield</span> cc <span class="token operator">+=</span> <span class="token number">1</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"@@@"</span><span class="token punctuation">)</span>运行结果@@@<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现count()没有了输出，能打印@@@，说明count()确实执行过了。这是因为在Python中含有yield关键字的函数是一种特殊函数，称为生成器函数。count()调用返回的将不再是执行到函数return的结果，而是返回一个生成器对象即迭代器对象。</p><p>生成器对象</p><ul><li>就是迭代器对象，不过是特殊语法构造出的迭代器对象</li><li>也可以使用next函数驱动它执行，但执行到yield就暂停函数执行</li><li>可以使用for循环迭代它，相当于连续的next，直到不可迭代为止</li><li>只能单向向后迭代，不可以重头开始</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token keyword">yield</span> c        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"###"</span><span class="token punctuation">)</span>        c <span class="token operator">+=</span> <span class="token number">1</span>t <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 迭代器对象</span><span class="token builtin">next</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"@@@"</span><span class="token punctuation">)</span>输出结果<span class="token number">1</span>@@@<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行第10行输出结果为1，说明函数在第5行处暂停执行了（实际上count函数没有执行完），且能继续向下执行到11行，打印了3个@。</p><p>如果有2个生成器函数，试着分析一下，代码如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> string<span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token keyword">yield</span> c        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"###"</span><span class="token punctuation">)</span>        c <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">char</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_lowercase    <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token keyword">yield</span> ct1 <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 迭代器对象</span>t2 <span class="token operator">=</span> char<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 迭代器对象</span><span class="token builtin">next</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token builtin">next</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token builtin">next</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token builtin">next</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"@@@"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出代码在yield出暂停，通过next来驱动各个函数执行，可以由程序员在合适的地方通过yield来暂停一个函数执行，让另外一个函数执行。</p><p>问题：</p><p>1. 请问目前代码中有几个线程？</p><p>2. 有没有实现和线程切换导致函数切换执行的效果？</p><p>暂停是一种非常重要的能力，以前函数正常要执行到return后，现在可以由开发者控制暂停执行的时机。而线程时间片用完导致的函数切换对开发人员来说是不可控的，而且线程控制能力是内核的功能，是在内核态完成的，而上例（协程）的控制是在用户态完成的。</p><p>如何才能让上例中所有任务反复交替执行呢？</p><p>1. 构建一个循环</p><p>2. 构建一个任务列表，循环执行其中的任务们</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> string<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token keyword">yield</span> c        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"###"</span><span class="token punctuation">)</span>        c <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">char</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_lowercase    <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token keyword">yield</span> ct1 <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 迭代器对象</span>t2 <span class="token operator">=</span> char<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 迭代器对象</span>tasks <span class="token operator">=</span> <span class="token punctuation">[</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">]</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    pops <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># 待移除的已经完成的任务</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> task <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">next</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> <span class="token comment"># 如果迭代到头了，返回给定的缺省值</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"task &#123;&#125; finished."</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span>            pops<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment"># 记住索引</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span>pops<span class="token punctuation">)</span><span class="token punctuation">:</span>        tasks<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">,</span> tasks<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 如果任务列表为0，就等待</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"@@@"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过上面的代码看到2个任务交替进行，而这个函数的交替，完全是靠程序员的代码实现的，而不是靠多线程的时间片用完操作系统强行切换，而且这种切换是在同一个线程中完成的。</p><p>最重要的是，协程的切换是在用户态完成，而不是像线程那样在内核态完成。所以，Coroutine是可以在用户态通过控制在适当的时机让出执行权的多任务切换技术。</p><p>上例中，交替执行任务是可以由程序员在一个线程内完成，这个任务如果再被按照Python语法封装后就是Python的协程。核心点是，在适当的时候要暂停一个正在运行的任务，让出来去执行另外一个任务。</p><p>注意：只要是代码就要在线程中执行，协程也不例外。</p><p>问题：有了协程，还会不会出现线程的切换？</p><p>协程弊端</p><ul><li>一旦一个协程阻塞，阻塞了什么？阻塞当前所在线程？那么该线程代码被阻塞不能向下继续执行了</li><li>协程必须主动让出，才能轮到该线程中另外一个协程运行</li></ul><p>能否让协程自由的在不同线程中移动，这样就不会因为协程阻塞了某一个线程而导致该线程中其他协程得不到执行？</p><p>Go语言对Coroutine做了非常多的优化，提出了Goroutine。</p><h3 id="GMP模型"><a href="#GMP模型" class="headerlink" title="GMP模型"></a>GMP模型</h3><p>Robert Griesemer、Rob Pike、Ken Thompson三位Go语言创始人，对新语言商在讨论时，就决定了要让Go语言成为面向未来的语言。当时多核CPU已经开始普及，但是众多“古老”编程语言却不能很好的适应新的硬件进步，Go语言诞生之初就为多核CPU并行而设计。</p><p>GO语言协程中，非常重要的就是<strong>协程调度器scheduler</strong>和<strong>网络轮训器netpoller</strong></p><p>Go协程调度中，有三个重要角色：</p><ul><li>M：Machine Thread，对系统线程抽象、封装。所有代码最终都要在系统线程上运行，协程最终也是代码，不例外</li><li>G：Goroutine，Go协程。存储了协程的执行栈信息、状态和任务函数等。初始栈大小约为2~4k，理论上开启百万个Goroutine不是问题</li><li>P：Go1.1版本引入，Processor，虚拟处理器<ul><li>可以通过环境变量<code>GOMAXPROCS</code>或<code>runtime.GOMAXPROCS()</code>设置，默认为CPU核心数</li><li>P的数量决定着最大可并行的G的数量</li><li>P有自己的队列（长度256），里面放着待执行的G</li><li>M和P需要绑定在一起，这样P队列中的G才能真正在线程上执行</li></ul></li></ul><p><img src="/images/k0DZ3gJOew5snaPaeFgWCU-I5o67oWWlNhFROQZsvk0.png" alt="image"></p><ol><li>使用go func 创建一个Goroutine g1</li><li>当前p为p1，将g1加入当前p的本地队列LRQ（local Run Queue）。如果LRQ满了，就加入到GRQ（global run queue）</li><li>p1和m1绑定，m1先尝试从p1的LRQ中请求G。如果没有，就从GRQ中请求G，如果还没有就随机从别的P的LRQ中偷（work stealing）一部分G到本地的LRQ中</li><li>假设m1最终拿到了g1</li><li>执行，让g1的代码在m1线程上运行<br>5.1、g1正常执行完了（函数调用完成了），g1和m1解绑，执行第三部的获取下一个可执行的g<br>5.2、g1中代码主动让出控制权，g1和m1解绑，将g1加入到GRQ中，执行第三步的获取下一个可执行的g<br>5.3、g1中进行channel、互斥锁等操作进入阻塞态，g1和m1解绑，执行第三部的获取下一个可执行的g，如果阻塞态的g1被其他协程g唤醒后，就尝试加入到唤醒者的LRQ中，如果LRQ满了，就连同g和LRQ中一半转移到GRQ中<br>5.4、系统调用</li></ol><ul><li>同步系统调用时，执行如下：</li></ul><p>如果遇到了同步阻塞系统调用，g1阻塞，m1也被阻塞了，m1和p1解绑。</p><p>从休眠线程队列中获取一个空闲线程，和p1绑定，并从p1队列中获取下一个可执行的g来执行；如果休眠队列中无空闲线程，就创建一个线程提供给p1。</p><p>如果m1阻塞结束，需要和一个空闲的p绑定，优先和原来的p1绑定。如果没有空闲的p，g1会放到GRQ中，m1加入到休眠线程队列中。</p><ul><li>异步网络io调用时如下：</li></ul><p><img src="/images/FNuqQSg-6IBBsbPSr1xWr2TRRRITNmSaXPfRqfggvuI.png" alt="image"></p><p>网络IO代码会被Go在底层变成非阻塞IO，这样就可以使用IO多路复用了。</p><p>m1执行g1，执行过程中发生了非阻塞IO调用（读&#x2F;写）时，g1和m1解绑，g1会被网络轮询器Netpoller接手。m1再从p1的LRQ中获取下一个Goroutine g2执行。注意，m1和p1不解绑。</p><p>g1等待的IO就绪后，g1从网络轮询器移回P的LRQ（本地运行队列）或全局GRQ中，重新进入可执行状态。</p><p>就大致相当于网络轮询器Netpoller内部就是使用了IO多路复用和非阻塞IO，类似我们课件代码中的</p><p>select的循环。GO对不同操作系统MAC（kqueue）、Linux（epoll）、Windows（iocp）提供了支持。</p><p>问题：如果GOMAXPROCS为1，说明什么？</p><h3 id="GO-TCP编程"><a href="#GO-TCP编程" class="headerlink" title="GO TCP编程"></a>GO TCP编程</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"log"</span> <span class="token string">"net"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> laddr<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ResolveTCPAddr</span><span class="token punctuation">(</span><span class="token string">"tcp4"</span><span class="token punctuation">,</span> <span class="token string">"0.0.0.0:9999"</span><span class="token punctuation">)</span> <span class="token comment">// 解析地址</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment">// Panicln会打印异常，程序退出</span> <span class="token punctuation">&#125;</span> server<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ListenTCP</span><span class="token punctuation">(</span><span class="token string">"tcp4"</span><span class="token punctuation">,</span> laddr<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token keyword">defer</span> server<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 保证一定关闭</span> conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 接收连接，分配socket</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 保证一定关闭</span> buffer <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span> <span class="token comment">// 设置缓冲区</span> n<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span>  <span class="token comment">// 成功返回接收了多少字节</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> data <span class="token operator">:=</span> buffer<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span> conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">// 原样写回客户端</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Goroutine"><a href="#Goroutine" class="headerlink" title="Goroutine"></a>Goroutine</h3><h5 id="协程创建"><a href="#协程创建" class="headerlink" title="协程创建"></a>协程创建</h5><p>使用go关键字就可以把一个函数定义为一个协程</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> c <span class="token builtin">int</span> <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"1 return %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>              <span class="token comment">// 打印的c是什么？</span> <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"2 return %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 打印的c是什么？</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"add called: x=%d, y=%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> c <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token keyword">return</span> c<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main end"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>执行结果如下main startadd called<span class="token punctuation">:</span> x<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">5</span><span class="token number">2</span> <span class="token keyword">return</span> <span class="token number">9</span><span class="token number">1</span> <span class="token keyword">return</span> <span class="token number">0</span>main end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 add(4, 5) 改为 go add(4, 5) ，运行结果会怎么样呢？</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span> <span class="token string">"runtime"</span> <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> c <span class="token builtin">int</span> <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"1 return %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>              <span class="token comment">// 打印的c是什么？</span> <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"2 return %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 打印的c是什么？</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"add called: x=%d, y=%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> c <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token keyword">return</span> c<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span> <span class="token keyword">go</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 协程</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// time.Sleep(2 * time.Second) // 放开这一句，看看效果</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main end"</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果没有 time.Sleep(2) ，结果如下</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">1</span>main start<span class="token number">2</span>main end<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>放开了 time.Sleep(2) ，结果如下</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">1</span>main start<span class="token number">2</span>add called<span class="token punctuation">:</span> x<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">5</span><span class="token number">2</span> <span class="token keyword">return</span> <span class="token number">9</span><span class="token number">1</span> <span class="token keyword">return</span> <span class="token number">0</span>main end<span class="token number">1</span> 注意这里是<span class="token number">1</span>了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为会启动协程来运行add，那么go add(4, 5)这一句没有必要等到函数返回才结束，所以程序执行下一行打印Main Exit。这时main函数无事可做，Go程序启动时也创建了一个协程，main函数运行其中，可以称为main goroutine（主协程）。但是主协程一旦执行结束，则进程结束，根本不会等待未执行完的其它协程。</p><p>那么，除了像 time.Sleep(2) 这样一直等，如何才能让主线程优雅等待协程执行结束呢？等待组</p><h3 id="等待组"><a href="#等待组" class="headerlink" title="等待组"></a>等待组</h3><p>使用参考 <a href="https://pkg.go.dev/sync#WaitGroup">https://pkg.go.dev/sync#WaitGroup</a></p><p>使用等待组修改上例</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span> <span class="token string">"runtime"</span> <span class="token string">"sync"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// add执行完后计数器减1</span> <span class="token keyword">var</span> c <span class="token builtin">int</span> <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"1 return %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>              <span class="token comment">// 打印的c是什么？</span> <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"2 return %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 打印的c是什么？</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"add called: x=%d, y=%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> c <span class="token operator">=</span> x <span class="token operator">+</span> y fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"add called: c=%d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token keyword">return</span> c<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup <span class="token comment">// 定义等待组</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span> wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>         <span class="token comment">// 计数加1</span> <span class="token keyword">go</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>wg<span class="token punctuation">)</span> <span class="token comment">// 协程</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// time.Sleep(2 * time.Second) // 这一句不需要了</span> wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 阻塞到wg的计数为0</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main end"</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="父子协程"><a href="#父子协程" class="headerlink" title="父子协程"></a>父子协程</h3><p>一个协程A中创建了另外一个协程B，A称作父协程，B称为子协程。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span> <span class="token string">"sync"</span> <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup <span class="token comment">// 定义等待组</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span> count <span class="token operator">:=</span> <span class="token number">6</span> wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"父协程开始，准备启动子协程"</span><span class="token punctuation">)</span> <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 注意wg的作用域</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"父协程结束了~~~~"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span> <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>id <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"子协程 %d 运行中\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span> time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"子协程 %d 结束\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 阻塞到wg的计数为0</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main end"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 注：上例协程最好协程独立的函数，而不是这样嵌套，只是为了演示。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>父协程结束执行，子协程不会有任何影响。当然子协程结束执行，也不会对父协程有什么影响。父子协程没有什么特别的依赖关系，各自独立运行。</p><p>只有主协程特殊，它结束程序结束。</p><h3 id="实战：实现WEB服务器——Goroutine版"><a href="#实战：实现WEB服务器——Goroutine版" class="headerlink" title="实战：实现WEB服务器——Goroutine版"></a>实战：实现WEB服务器——Goroutine版</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span> <span class="token string">"log"</span> <span class="token string">"net"</span><span class="token punctuation">)</span><span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">`&lt;!DOCTYPE html>&lt;html lang="en">&lt;head>    &lt;meta charset="UTF-8">    &lt;title>magedu&lt;/title>&lt;/head>&lt;body>    &lt;h1>马哥教育www.magedu.com -- Goroutine&lt;/h1>&lt;/body>&lt;/html>`</span><span class="token keyword">var</span> head <span class="token operator">=</span> <span class="token string">`HTTP/1.1 200 OKDate: Mon, 24 Oct 2022 20:04:23 GMTContent-Type: text/htmlContent-Length: %dConnection: keep-aliveServer: wayne.magedu.com%s`</span><span class="token keyword">var</span> response <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> laddr<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ResolveTCPAddr</span><span class="token punctuation">(</span><span class="token string">"tcp4"</span><span class="token punctuation">,</span> <span class="token string">"0.0.0.0:9999"</span><span class="token punctuation">)</span> <span class="token comment">// 解析地址</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment">// Panicln会打印异常，程序退出</span> <span class="token punctuation">&#125;</span> server<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ListenTCP</span><span class="token punctuation">(</span><span class="token string">"tcp4"</span><span class="token punctuation">,</span> laddr<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token keyword">defer</span> server<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 保证一定关闭</span> <span class="token keyword">for</span> <span class="token punctuation">&#123;</span> conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 接收连接，分配socket</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 保证一定关闭</span> buffer <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span> <span class="token comment">// 设置缓冲区</span> n<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span>  <span class="token comment">// 成功返回接收了多少字节</span> <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"客户端%s主动断开"</span><span class="token punctuation">,</span> conn<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">&#125;</span> conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 大家可以自行抽取成协程函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码是goroutine per connection模式，看似使用的同步方式开发，这大大减少了开发人员的心智负担。</p><h3 id="二、用goroutine-和通道实现并发"><a href="#二、用goroutine-和通道实现并发" class="headerlink" title="二、用goroutine 和通道实现并发"></a>二、用goroutine 和通道实现并发</h3><h5 id="1、goroutine"><a href="#1、goroutine" class="headerlink" title="1、goroutine"></a>1、goroutine</h5><p>go只需要使用go的关键字来开启goroutine。</p><p>开启一个goroutine的形式如下</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在函数foo(a,b,c)之前加上go关键字，就开启了一个新的goroutine。函数名可以是包含func关键字的匿名函数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 创建一个匿名函数并开启goroutine</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>parme1<span class="token punctuation">,</span>parm2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span>val1<span class="token punctuation">,</span>val2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Echo</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">go</span> <span class="token function">Echo</span><span class="token punctuation">(</span><span class="token string">"go"</span><span class="token punctuation">)</span>    <span class="token function">Echo</span><span class="token punctuation">(</span><span class="token string">"web program"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行以上代码后会看到，输出的”go”和”web progarm”没有固定先后顺序，因为它们是两个goroutine在并发执行</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span>web programweb program<span class="token keyword">go</span>web program<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面示例可以看到，利用go关键字很方便的实现并发编程。多个goroutine运行在同一个进程中，共享内存数据。</p><h5 id="2、gorouine的调度"><a href="#2、gorouine的调度" class="headerlink" title="2、gorouine的调度"></a>2、gorouine的调度</h5><p>goroutine的调度方式是协同的。在协同式调度中没有“时间片”的概念。为了并行执行goroutine，调度器会在一下几个时刻对其进行切换：</p><ul><li>在通道发送或接受数据且造成阻塞时</li><li>在一个新的goroutine被创建时。</li><li>在可以造成系统调用被阻塞时，如进行文件操作时。</li></ul><p>goroutine在多核cpu环境下是并行的。如果代码在多个goroutine中执行，则会实现代码的并行。在被调用的函数返回时，这个goroutine也自动结束。需要注意：如果这个函数有返回值，会被丢弃。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    c <span class="token operator">:=</span> a <span class="token operator">+</span> b    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">go</span> <span class="token function">Add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;协程&quot;&gt;&lt;a href=&quot;#协程&quot; class=&quot;headerlink&quot; title=&quot;协程&quot;&gt;&lt;/a&gt;协程&lt;/h1&gt;&lt;p&gt;协程是一种比线程更加轻量级的一种函数，正如一个进程可以拥有多个线程一样，一个线程可以拥有多个协程。协程不是被操作系统内核管理的，而是完全由程</summary>
      
    
    
    
    <category term="golang" scheme="http://dycloud.fun/categories/golang/"/>
    
    
    <category term="云原生" scheme="http://dycloud.fun/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    <category term="golang" scheme="http://dycloud.fun/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>TCP编程</title>
    <link href="http://dycloud.fun/2023/05/12/TCP%E7%BC%96%E7%A8%8B/"/>
    <id>http://dycloud.fun/2023/05/12/TCP%E7%BC%96%E7%A8%8B/</id>
    <published>2023-05-12T06:32:00.000Z</published>
    <updated>2023-08-30T03:05:05.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TCP编程"><a href="#TCP编程" class="headerlink" title="TCP编程"></a>TCP编程</h1><h3 id="Socket编程"><a href="#Socket编程" class="headerlink" title="Socket编程"></a>Socket编程</h3><p>Python中提供了socket标准库，非常底层的接口库。 Socket是一种通用的网络编程接口，和网络层次没有一一对应的关系。</p><p>协议族 AF表示Address Family，用于socket()第一个参数</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>AF_INET</td><td>IPV4</td></tr><tr><td>AF_INET6</td><td>IPV6</td></tr><tr><td>AF_UNIX</td><td>Unix Domain Socket，windows没有</td></tr></tbody></table><h5 id="Socket类型"><a href="#Socket类型" class="headerlink" title="Socket类型"></a>Socket类型</h5><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>SOCK_STREAM</td><td>面向连接的流套接字。默认值，TCP协议</td></tr><tr><td>SOCK_DGRAM</td><td>无连接的数据报文套接字。UDP协议</td></tr></tbody></table><p>TCP协议是流协议，也就是一大段数据看做字节流，一段段持续发送这些字节。</p><p>UDP协议是数据报协议，每一份数据封在一个单独的数据报中，一份一份发送数据。</p><p>注意：一开始学习网络编程，不要陷入协议的细节中。</p><h3 id="CS编程"><a href="#CS编程" class="headerlink" title="CS编程"></a>CS编程</h3><p>Socket编程，是完成一端和另一端通信的，注意一般来说这两端分别处在不同的进程中，也就是说网络通信是一个进程发消息到另外一个进程。</p><p>我们写代码的时候，每一个socket对象只表示了其中的一端。</p><p>从业务角度来说，这两端从角色上分为：</p><ul><li>主动发送请求的一端，称为客户端Client</li><li>被动接受请求并回应的一端，称为服务端Server</li></ul><p>这种编程模式也称为C&#x2F;S编程。</p><h3 id="TCP服务端编程"><a href="#TCP服务端编程" class="headerlink" title="TCP服务端编程"></a>TCP服务端编程</h3><h5 id="服务器端编程步骤"><a href="#服务器端编程步骤" class="headerlink" title="服务器端编程步骤"></a>服务器端编程步骤</h5><ul><li>创建Socket对象</li><li>绑定IP地址Address和端口Port。bind()方法IPV4地址为一个二元组(‘ip地址字符串’,port)</li><li>开始监听，将在指定的ip的端口上监听<ul><li>listen([backlog])方法。未完成连接队列和完成连接队列长度不能超过backlog，如果accept不拿走就满了，就会直接拒绝连接请求。backlog可以不写，默认为5</li></ul></li><li>获取用于传送数据的新的Socket对象 socket.accept() -&gt; (socket object, address info) accept方法阻塞等待客户端建立连接，返回一个新的Socket对象和客户端地址的二元组 地址是远程客户端的地址，IPv4中它是一个二元组(clientaddr, port)<ul><li>接收数据 recv(bufsize[, flags]) 使用缓冲区接收数据</li><li>发送数据 send(bytes)发送数据</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Server端开发socket对象 <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> bind<span class="token punctuation">(</span><span class="token punctuation">(</span>IP<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> listen <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> accept <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> close                                                 <span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> recv <span class="token keyword">or</span> send <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> close<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/erWveWtSLzT8lPZIU8GSBLSppOGETeHJSadxKbvM8fM.png" alt="image"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token comment"># TCP服务端编程</span>server <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建socket对象</span>laddr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span>  <span class="token comment"># 地址和端口的元组</span>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>laddr<span class="token punctuation">)</span>  <span class="token comment"># 绑定</span>server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>  <span class="token comment"># 监听</span><span class="token comment"># 等待建立连接的客户端</span>conn<span class="token punctuation">,</span> raddr <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 阻塞</span><span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>  <span class="token comment"># 负责客户端连接的socket对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>raddr<span class="token punctuation">)</span> <span class="token comment"># 对方IP地址和端口</span><span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>getpeername<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> conn<span class="token punctuation">.</span>getsockname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 通过socket获取对端地址或本地地址</span>data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>  <span class="token comment"># 接收客户端信息</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b"Hello magedu.com"</span><span class="token punctuation">)</span>  <span class="token comment"># 回应客户端，使用字节数组</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'~'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>想一想，上例的面临的问题是什么？如何解决？</p><p>socket很多函数都是同步阻塞函数，也就说一旦阻塞，可能会把当前线程阻塞住，这样就没法为其它客户端服务了。可以采用多线程来解决这个问题。</p><h3 id="实战：实现web服务器——多线程阻塞IO版"><a href="#实战：实现web服务器——多线程阻塞IO版" class="headerlink" title="实战：实现web服务器——多线程阻塞IO版"></a>实战：实现web服务器——多线程阻塞IO版</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">import</span> sockethtml <span class="token operator">=</span> <span class="token triple-quoted-string string">"""\&lt;!DOCTYPE html>&lt;html lang="en">&lt;head>   &lt;meta charset="UTF-8">   &lt;title>magedu&lt;/title>&lt;/head>&lt;body>   &lt;h1>马哥教育www.magedu.com -- Multithread + Blocking IO&lt;/h1>&lt;/body>&lt;/html>\"""</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>response <span class="token operator">=</span> <span class="token triple-quoted-string string">"""\HTTP/1.1 200 OKDate: Mon, 24 Oct 2022 20:04:23 GMTContent-Type: text/htmlContent-Length: &#123;&#125;Connection: keep-aliveServer: wayne.magedu.com"""</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">'\r\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> html<span class="token keyword">def</span> <span class="token function">accept</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        conn<span class="token punctuation">,</span> raddr <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>recv<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"recv-&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> raddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">recv</span><span class="token punctuation">(</span>conn<span class="token punctuation">:</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">,</span> raddr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>raddr<span class="token punctuation">,</span> <span class="token string">'bye~~~~'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token comment"># print(data)</span>        conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">'~~~~~~~~~~~~~'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> <span class="token comment"># 表示主模块运行，等效为main函数执行</span>    server <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>    laddr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span>    server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>laddr<span class="token punctuation">)</span>    server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>     threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>accept<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"accept"</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> daemon<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>active_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>daemon属性</p><ul><li>设置线程的daemon属性为True，则成该线程为daemon线程</li><li>主线程退出时<ul><li>如果还有至少一个non-daemon线程，则主线程等待</li><li>如果没有一个non-daemon线程，不管还有多少daemon线程，都会杀掉这些线程，程序退出</li></ul></li></ul><p>阻塞的IO导致该线程进入阻塞态，就该让出CPU，这对性能影响不大。此多线程程序最大的问题在于，当高并发到来，连接非常多，多线程的频繁地创建和销毁，以及管理线程的成本太高了。线程太多，每个线程分配的总内存也很可观。</p><p>接下来，我们用线程池来简单优化一下，看看能否提升性能？IO多路复用又是什么东西，它能提高多少性能？</p><h3 id="实战：实现WEB服务器——线程池版"><a href="#实战：实现WEB服务器——线程池版" class="headerlink" title="实战：实现WEB服务器——线程池版"></a>实战：实现WEB服务器——线程池版</h3><p>上例实现了多线程加阻塞IO版本</p><ul><li>一个客户端请求到达后端，开启一个线程为之服务</li><li>线程内运行函数代码，接收HTTP请求并解析，返回HTTP响应报文</li></ul><p>问题</p><ul><li>大量的线程为HTTP连接服务，用完就断，而创建和销毁线程的代价太高<ul><li>解决的方案就是利用线程池</li></ul></li><li>如果拥有海量线程来处理并发客户端请求，线程调度时上下文切换将给系统造成巨大的性能消耗<ul><li>程序层面解决不了</li><li>操作系统解决：非阻塞IO、IO多路复用</li></ul></li></ul><p>下面用Python高级异步线程池ThreadPoolExecutor来改造代码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">import</span> sockethtml <span class="token operator">=</span> <span class="token triple-quoted-string string">"""\&lt;!DOCTYPE html>&lt;html lang="en">&lt;head>   &lt;meta charset="UTF-8">   &lt;title>magedu&lt;/title>&lt;/head>&lt;body>   &lt;h1>马哥教育www.magedu.com -- Multithread Pool&lt;/h1>&lt;/body>&lt;/html>\"""</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>response <span class="token operator">=</span> <span class="token triple-quoted-string string">"""\HTTP/1.1 200 OKDate: Mon, 24 Oct 2022 20:04:23 GMTContent-Type: text/htmlContent-Length: &#123;&#125;Connection: keep-aliveServer: wayne.magedu.com"""</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">'\r\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> html<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutorcount <span class="token operator">=</span> <span class="token number">10</span>executor <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token comment"># executor = ThreadPoolExecutor(max_workers=count)</span><span class="token keyword">def</span> <span class="token function">accept</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># i = 1</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        conn<span class="token punctuation">,</span> raddr <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># threading.Thread(target=recv, name="recv-&#123;&#125;".format(i), args=</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> raddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># i += 1</span>        executor<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>recv<span class="token punctuation">,</span> conn<span class="token punctuation">,</span> raddr<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">recv</span><span class="token punctuation">(</span>conn<span class="token punctuation">:</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">,</span> raddr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>raddr<span class="token punctuation">,</span> <span class="token string">'bye~~~~'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token comment"># print(data)</span>        conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">'~~~~~~~~~~~~~'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    server <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>    laddr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span>    server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>laddr<span class="token punctuation">)</span>    server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token comment"># threading.Thread(target=accept, name="accept", args=(server,), </span>daemon<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    executor<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>accept<span class="token punctuation">,</span> server<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>active_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TCP编程&quot;&gt;&lt;a href=&quot;#TCP编程&quot; class=&quot;headerlink&quot; title=&quot;TCP编程&quot;&gt;&lt;/a&gt;TCP编程&lt;/h1&gt;&lt;h3 id=&quot;Socket编程&quot;&gt;&lt;a href=&quot;#Socket编程&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="golang" scheme="http://dycloud.fun/categories/golang/"/>
    
    
    <category term="云原生" scheme="http://dycloud.fun/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    <category term="golang" scheme="http://dycloud.fun/tags/golang/"/>
    
    <category term="python" scheme="http://dycloud.fun/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>进程和线程</title>
    <link href="http://dycloud.fun/2023/05/10/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/"/>
    <id>http://dycloud.fun/2023/05/10/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/</id>
    <published>2023-05-10T06:32:00.000Z</published>
    <updated>2023-08-30T03:03:56.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进程线程"><a href="#进程线程" class="headerlink" title="进程线程"></a>进程线程</h1><h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><p><strong>并发Concurrency：</strong> 是指同一时刻在CPU中只能有一条指令执行，多个进程指令被快速的轮换执行。从宏观来看，是多个进程同时执行。但从微观来看，这些进程并不是同时执行的，只是吧时间分成若干段，多个进程快速交替的执行。</p><p>在操作系统中，进程的并发就是：CPU把一个时间段划分成几个时间片，进程在这几个时间区间之间来回切换处理的过程。CPU处理的速度非常快，只要时间间隔处理得当，就可以让用户感觉是多个进程同时在执行。如下图</p><p><img src="/images/QdAIibaNl6zjCAfjw3l-AdIqVvp4gnV1c7dNfBesKrA.png" alt="image"></p><p><strong>并行parallelism</strong>：同一时刻有多条执行在多个处理器上同时执行。如果系统有一个以上CPU，当一个CPU在执行一个进程时，另一个CPU可以执行另一个进程，两个进程互不抢占cpu资源，可以同时进行。</p><p>决定进程并行的因素不是CPU数量，而是CPU的核心数。比如一个CPU多核也可以并行</p><p><img src="/images/F8abdMJNV7fdb01bhGVMyxod76mnv9YwmbiuGqVrbak.png" alt="image"></p><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><h5 id="早期工作模式"><a href="#早期工作模式" class="headerlink" title="早期工作模式"></a>早期工作模式</h5><p>最早计算机很巨大笨重，得把程序转换成某种编码对应的纸带或卡片上的孔（类似2B铅笔涂答题卡），输入设备再读取打孔纸带把程序和数据装入计算机，程序在计算机上运行完，在通过打印机输出。整个过程一个程序从输入到输出在所有环节都是独占资源，实际上输入、输出环节非常慢，而且此时CPU没有计算任务，处于忙等待。再一个，如果下一个程序需要运行，整个过程将再走一遍，这是一个接一个运行的串行方式。</p><p>计算机处理IO时，会让CPU处于忙等待，能否设计一套控制程序运行的技术，来充分利用CPU资源？</p><h5 id="多道处理程序"><a href="#多道处理程序" class="headerlink" title="多道处理程序"></a>多道处理程序</h5><p>计算机内存中常驻一个监管程序，把多个程序一并加载到计算机内存中。</p><p>例如有A、B两个程序，它们在内存中有各自独立的内存空间。</p><p>先运行A，A遇到IO时，让出CPU使用权，监管程序调用B运行，B遇到IO时，让出控制权，监管程序让A运行。</p><p>需要注意的是，A、B实际上是交替运行，而不是串行执行。</p><p>这种控制方式减少了CPU空闲时间，提高了CPU运行效率。</p><p>Version:0.9 StartHTML:0000000105 EndHTML:0000003196 StartFragment:0000000141 EndFragment:0000003156</p><h5 id="分时系统"><a href="#分时系统" class="headerlink" title="分时系统"></a>分时系统</h5><p>随着电子管、晶体管、大规模集成电路技术的突飞猛进，计算机硬件技术进步日新月异，CPU的运算单元和运行频率也越来越高。</p><p>可以将CPU运行时间分成非常小的时间片，把时间片分给不同的作业使用。如果某个作业不能完成计算，则暂时中断执行，让出CPU时间给另一个作业执行，等待下一轮轮询到自己。由于计算机运行速度已经很快了，且时间片较短，产生了所有作业在并行的错觉。每个作业也似乎都独占着计算机资源。分时的好处，使得每个作业在很短的时间内都有执行的机会，就可以和用户终端有很好的及时的交互。</p><p>以上所讲，都影响着后来出现的操作系统的并发工作方式。现在CPU已进入多核时代，促使了协程被更多编程语言支持。</p><p>协程，不过就是把当年的设计思想真正实现罢了。</p><blockquote><p>Go语言推荐使用协程来解决并发。但是其底层利用了多线程、IO多路复用，协程又是要解决多线程的一些弊端，如果不能很好的理解多线程运行模型、IO多路复用模型，就很难理解Goroutine的精髓。</p></blockquote><blockquote><p>所以，我们的第一步从多线程及阻塞IO模型说起。</p></blockquote><blockquote></blockquote><h3 id="进程和线程概念"><a href="#进程和线程概念" class="headerlink" title="进程和线程概念"></a>进程和线程概念</h3><p>我们现在接触到的多是多任务、分时的现代操作系统，其内部包含进程管理模块。</p><p>作业就是运行的任务，这些任务被称为进程process。每个进程要占据一块内存空间存放指令、数据等。进程工作时，如果被阻塞，那么当前进程就只能什么都干不了，怎样才能提高单个进程工作效率，又可以使用进程内存空间呢？线程thread。</p><p>一个进程内可以创建很多线程，让不同线程干活，即使是阻塞了一个线程，还有其他线程可以干活。这样提高了进程运行效率，同时进程就变成了一个资源和线程的容器。</p><p>在实现了线程的操作系统中，线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一个程序的执行实例就是一个进程。</p><p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。</p><p>进程和程序的关系：程序是源代码编译后的文件，而这些文件存放在硬盘上。当程序被操作系统加载到内存中，就是进程，进程中存放着指令和数据（资源），它也是线程的容器。</p><h5 id="形象化理解"><a href="#形象化理解" class="headerlink" title="形象化理解"></a>形象化理解</h5><ul><li>现代操作系统提出进程的概念，每一个进程都认为自己独占所有的计算机硬件资源</li><li>进程就是独立的王国，进程间不可以随便的共享数据</li><li>线程就是省份，同一个进程内的线程可以共享进程的资源，每一个线程拥有自己独立的堆栈</li></ul><h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><table><thead><tr><th><strong>状态</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>就绪(Ready)</td><td>线程能够运行，但在等待被调度。可能线程刚刚创建启动，或者刚刚从阻塞中恢复，或者被其他线程抢占</td></tr><tr><td>运行(Running)</td><td>线程正在运行</td></tr><tr><td>阻塞(Blocked)</td><td>线程等待外部事件发生而无法运行，如I&#x2F;O操作</td></tr><tr><td>终止(Terminated)</td><td>线程完成，或退出，或被取消</td></tr></tbody></table><p><img src="/images/227umIkj9ueakAlc6D0TMhuymUnQnccKjWbdwT7c8v4.png" alt="image"></p><h5 id="Python中的进程和线程"><a href="#Python中的进程和线程" class="headerlink" title="Python中的进程和线程"></a>Python中的进程和线程</h5><p>运行程序会启动一个解释器进程，多个线程共享这一个解释器进程。</p><h4 id="Python的线程开发"><a href="#Python的线程开发" class="headerlink" title="Python的线程开发"></a>Python的线程开发</h4><p>python的线程开发使用标准库threading</p><p>进程靠线程执行代码，进程中至少有一个<strong>主线程</strong>，其他线程称为工作线程。主线程是第一个启动的线程。</p><p>父线程：如果线程A中启动了一个线程B，A称为B的父线程。子线程：B称为A的子线程。</p><h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"># 签名def <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> group<span class="token operator">=</span>None<span class="token punctuation">,</span> target<span class="token operator">=</span>None<span class="token punctuation">,</span> name<span class="token operator">=</span>None<span class="token punctuation">,</span>                 args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> kwargs<span class="token operator">=</span>None<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> daemon<span class="token operator">=</span>None<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数名</th><th>含义</th></tr></thead><tbody><tr><td>target</td><td>线程调用的对象，就是目标函数</td></tr><tr><td>name</td><td>为线程起个名字</td></tr><tr><td>args</td><td>为目标函数传递实参，元组</td></tr><tr><td>kwargs</td><td>为目标函数关键字传参，字典</td></tr></tbody></table><h5 id="线程启动"><a href="#线程启动" class="headerlink" title="线程启动"></a>线程启动</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> threading# 最简单的线程程序def <span class="token function">worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"I'm working"</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token char">'Done'</span><span class="token punctuation">)</span>t <span class="token operator">=</span> threading<span class="token punctuation">.</span><span class="token function">Thread</span><span class="token punctuation">(</span>target<span class="token operator">=</span>worker<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'worker'</span><span class="token punctuation">)</span> # 线程对象# target<span class="token operator">=</span>worker方式为关键字传参，按名称对应# Python中还有按照位置对应传参，按照顺序依次对应t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> # 启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过threading.Thread创建一个线程对象，target是目标函数，可以使用name为线程指定名称。 但是线程没有启动，需要调用start方法。</p><p>线程之所以执行函数，是因为线程中就是要执行代码的，而最简单的代码封装就是函数，所以还是函数调用。 函数执行完，线程也就退出了。 那么，如果不让线程退出，或者让线程一直工作怎么办呢？</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> threading<span class="token keyword">import</span> timedef <span class="token function">worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    while True<span class="token punctuation">:</span> # <span class="token keyword">for</span> i in <span class="token keyword">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"I'm working"</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token char">'Done'</span><span class="token punctuation">)</span>t <span class="token operator">=</span> threading<span class="token punctuation">.</span><span class="token function">Thread</span><span class="token punctuation">(</span>target<span class="token operator">=</span>worker<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'worker'</span><span class="token punctuation">)</span> # 线程对象t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> # 启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="线程退出"><a href="#线程退出" class="headerlink" title="线程退出"></a>线程退出</h5><p>Python没有提供线程退出的方法，线程在下面情况时退出 1、线程函数内语句执行完毕 2、线程函数中抛出未处理的异常</p><h5 id="线程传参"><a href="#线程传参" class="headerlink" title="线程传参"></a>线程传参</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> threading<span class="token keyword">import</span> timedef <span class="token function">worker</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string">"&#123;&#125; + &#123;&#125; = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> threading<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ident<span class="token punctuation">)</span>t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span><span class="token function">Thread</span><span class="token punctuation">(</span>target<span class="token operator">=</span>worker<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'worker'</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h3><p>顾名思义，多个线程，一个进程中如果有多个线程运行，就是多线程，实现一种并发。</p><p>想想下面有几个线程运行？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> string<span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"count = "</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>        c <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">char</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_lowercase    <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"char = "</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>count<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"count"</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>char<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"char"</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># print('~' * 30)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3个线程，count、char、主线程。</p><p>调整time.sleep(2)为20或更大，请问这个函数所在的执行线程怎么了？请问谁卡住（阻塞）了？谁又在运行？这和线程状态有什么关系？</p><p>注：Python中有一个GIL全局解释器锁，大家初学可以忽略它，它对阻塞性IO其实影响不大。</p><p>重点：大家要从例子中找到并发执行的感觉，这对理解并发包括Goroutine都大有益处。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;进程线程&quot;&gt;&lt;a href=&quot;#进程线程&quot; class=&quot;headerlink&quot; title=&quot;进程线程&quot;&gt;&lt;/a&gt;进程线程&lt;/h1&gt;&lt;h3 id=&quot;并发和并行&quot;&gt;&lt;a href=&quot;#并发和并行&quot; class=&quot;headerlink&quot; title=&quot;并发和并行&quot;&gt;</summary>
      
    
    
    
    <category term="golang" scheme="http://dycloud.fun/categories/golang/"/>
    
    
    <category term="云原生" scheme="http://dycloud.fun/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    <category term="golang" scheme="http://dycloud.fun/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang 操作MongoDB</title>
    <link href="http://dycloud.fun/2023/05/09/Go%E6%93%8D%E4%BD%9CMongoDB/"/>
    <id>http://dycloud.fun/2023/05/09/Go%E6%93%8D%E4%BD%9CMongoDB/</id>
    <published>2023-05-09T06:32:00.000Z</published>
    <updated>2023-08-30T03:02:58.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><p>MongoDB属于非关系型数据库，是由C++编写的分布式文档数据库。内部使用类似于Json的bson二进制格式。</p><p>中文手册</p><p><a href="https://www.w3cschool.cn/mongodb/">https://www.w3cschool.cn/mongodb/</a></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></p><p>自行下载对应操作系统的MongoDB，并运行它。</p><p>windows可以下载官方zip，解压即可使用。</p><table><thead><tr><th>组件</th><th>文件名</th></tr></thead><tbody><tr><td>Server</td><td>mongod.exe</td></tr><tr><td>Router</td><td>mongos.exe，Query Router,Sharding Cluster</td></tr><tr><td>Client</td><td>mongo.exe</td></tr><tr><td>MonitoringTools</td><td>mongostat.exe，mongotop.exe</td></tr><tr><td>ImportExportTools</td><td>mongostat.exe，mongotop.exe</td></tr><tr><td>MiscellaneousTools</td><td>bsondump.exe，mongofiles.exe，mongooplog.exe，mongoperf.exe</td></tr></tbody></table><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">$ cd <span class="token operator">/</span>o<span class="token operator">/</span>mongodb3<span class="token punctuation">.</span><span class="token number">6</span><span class="token operator">/</span>bin$ <span class="token punctuation">.</span><span class="token operator">/</span>mongod<span class="token punctuation">.</span>exe<span class="token number">2019</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span>02T03<span class="token punctuation">:</span><span class="token number">26</span><span class="token punctuation">:</span><span class="token number">13.234</span><span class="token operator">-</span><span class="token number">0700</span> I STORAGE <span class="token punctuation">[</span>initandlisten<span class="token punctuation">]</span> exception ininitAndListen<span class="token punctuation">:</span> NonExistentPath<span class="token punctuation">:</span> Data directory O<span class="token punctuation">:</span>\data\db\ not found<span class="token punctuation">.</span><span class="token punctuation">,</span> terminating启动服务出错，原因在于找不到数据目录。默认是<span class="token operator">/</span>data<span class="token operator">/</span>dbwindows下在当前盘符根目录下创建目录即可<span class="token string">`o:/data/db`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选项说明</p><ul><li>--bind_ip  ip逗号分隔IP地址。默认为localhost</li><li>--bind_ip_all  绑定所有本地ip地址</li><li>--port port端口，默认27017</li><li>--dbpath  数据路径，却省委&#x2F;data&#x2F;db</li><li>--logpath 指定日志路径，代替stdout，默认是控制台打印日志</li><li>-f file 指定配置文件，yaml格式</li><li>注册windows服务<ul><li>--install 注册windows服务</li><li>--serviceName name服务名称</li><li>--serviceDisplayName name 服务显示名</li></ul></li></ul><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>mongodb配置使用Yaml格式</p><ul><li>嵌套使用缩进完成，不支持Tab等制表符，支持空格<ul><li>缩进空格数不限制，只要同一级元素对齐就行</li></ul></li><li>冒号后要有空格</li><li>大小写敏感</li><li>#表示注释</li><li>字符串不需要引号，有特殊字符串时可以使用引号</li><li>布尔<ul><li>true、True、TRUE、yes、YES都是真</li><li>false、False、FALSE、no、NO都是假</li></ul></li><li>null、Null、~波浪线都是空，不指定值默认也是空</li></ul><p>Yaml参考<a href="https://www.w3cschool.cn/iqmrhf/dotvpozt.html"> https://www.w3cschool.cn/iqmrhf/dotvpozt.html</a></p><p>配置 <a href="http://mongoing.com/docs/reference/configuration-options.html">http://mongoing.com/docs/reference/configuration-options.html</a></p><pre class="line-numbers language-go" data-language="go"><code class="language-go">systemLog<span class="token punctuation">:</span>   destination<span class="token punctuation">:</span> file   path<span class="token punctuation">:</span> 'o<span class="token punctuation">:</span><span class="token operator">/</span>mongodb3<span class="token punctuation">.</span><span class="token number">6</span><span class="token operator">/</span>logs<span class="token operator">/</span>mongod<span class="token punctuation">.</span>log'   logAppend<span class="token punctuation">:</span>  <span class="token boolean">true</span>storage<span class="token punctuation">:</span>   dbPath<span class="token punctuation">:</span> <span class="token string">"o:/mongodb3.6/db"</span>net<span class="token punctuation">:</span>   bindIp<span class="token punctuation">:</span> <span class="token string">"127.0.0.1"</span>   port<span class="token punctuation">:</span> <span class="token number">27017</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选项</p><ul><li>systemLog<ul><li>destination，缺省是输出日志到std，file表示输出到文件</li><li>path，日志文件路径。文件目录必须存在</li><li>logAppend，true表示在已存在的日志文件追加。默认为false，每次启动服务创建新的日志</li></ul></li><li>storage<ul><li>dbPath，必须指定mongodb的数据目录，目录必须存在</li></ul></li><li>net<ul><li>bindIp ，缺省绑定到127.0.0.1</li><li>port 端口，缺省27017，客户端连接用的</li></ul></li></ul><p>Windows下注册为服务的命令如下，使用了配置文件：</p><p><code>$ mongod.exe -f &quot;o:/mongodb3.6/bin/mongod.yml&quot; --serviceName mongod --serviceDisplayName mongo --install</code></p><p>注意，注册服务得需要管理员权限。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">storage<span class="token punctuation">:</span>   dbPath<span class="token punctuation">:</span> <span class="token string">"o:/mongodb3.6/db"</span>net<span class="token punctuation">:</span>   bindIp<span class="token punctuation">:</span> <span class="token string">"127.0.0.1"</span>   port<span class="token punctuation">:</span> <span class="token number">27017</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有配置日志，信息将显示在控制台中</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">$ pwd<span class="token operator">/</span>o<span class="token operator">/</span>mongodb3<span class="token punctuation">.</span><span class="token number">6</span>$ mongod<span class="token punctuation">.</span>exe <span class="token operator">-</span>f <span class="token punctuation">.</span><span class="token operator">/</span>mongod<span class="token punctuation">.</span>yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><h5 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go">$ bin<span class="token operator">/</span>mongo<span class="token punctuation">.</span>exeMongoDB shell version v3<span class="token punctuation">.</span><span class="token number">6.13</span>help 打开帮助show dbs     查看当前有哪些库use blog     有就切换过去，没有就创建后切换过去。刚创建的并不在数据库列表中，需要写入数据后才能看到db           查看当前数据库db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>user<span class="token punctuation">:</span><span class="token string">"tom"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> db指代当前数据库；users集合名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以使用官方的可视化工具Compass。<a href="https://www.mongodb.com/products/compass">https://www.mongodb.com/products/compass</a></p><h5 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h5><p>驱动链接：<a href="https://www.mongodb.com/docs/drivers/">https://www.mongodb.com/docs/drivers/</a></p><p>Go驱动：<a href="https://www.mongodb.com/docs/drivers/go/current/"> https://www.mongodb.com/docs/drivers/go/current/</a></p><p>驱动安装：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">$ <span class="token keyword">go</span> get <span class="token keyword">go</span><span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>org<span class="token operator">/</span>mongo<span class="token operator">-</span>driver<span class="token operator">/</span>mongo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h5><p><a href="https://www.mongodb.com/docs/manual/reference/connection-string/#examples">https://www.mongodb.com/docs/manual/reference/connection-string/#examples</a></p><pre class="line-numbers language-go" data-language="go"><code class="language-go">mongodb<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">[</span>username<span class="token punctuation">:</span>password@<span class="token punctuation">]</span>host1<span class="token punctuation">[</span><span class="token punctuation">:</span>port1<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token operator">...</span>hostN<span class="token punctuation">[</span><span class="token punctuation">:</span>portN<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">/</span><span class="token punctuation">[</span>defaultauthdb<span class="token punctuation">]</span><span class="token punctuation">[</span>?options<span class="token punctuation">]</span><span class="token punctuation">]</span>mongodb<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>wayne<span class="token punctuation">:</span>wayne@mongodb0<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token punctuation">:</span><span class="token number">27017</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>链接例子<a href="https://www.mongodb.com/docs/drivers/go/current/fundamentals/connection/#connection-example">https://www.mongodb.com/docs/drivers/go/current/fundamentals/connection/#connection-example</a></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"context"</span><span class="token string">"fmt"</span><span class="token string">"go.mongodb.org/mongo-driver/bson"</span><span class="token string">"go.mongodb.org/mongo-driver/mongo"</span><span class="token string">"go.mongodb.org/mongo-driver/mongo/options"</span><span class="token punctuation">)</span><span class="token comment">// Replace the placeholder with your Atlas connection string</span><span class="token keyword">const</span> uri <span class="token operator">=</span> <span class="token string">"&lt;connection string>"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Use the SetServerAPIOptions() method to set the Stable API version to 1</span>serverAPI <span class="token operator">:=</span> options<span class="token punctuation">.</span><span class="token function">ServerAPI</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>ServerAPIVersion1<span class="token punctuation">)</span>opts <span class="token operator">:=</span> options<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ApplyURI</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetServerAPIOptions</span><span class="token punctuation">(</span>serverAPI<span class="token punctuation">)</span><span class="token comment">// Create a new client and connect to the server</span>client<span class="token punctuation">,</span> err <span class="token operator">:=</span> mongo<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Disconnect</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Send a ping to confirm a successful connection</span><span class="token keyword">var</span> result bson<span class="token punctuation">.</span>M<span class="token keyword">if</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RunCommand</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">"ping"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Pinged your deployment. You successfully connected to MongoDB!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>连接副本集</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">mongodb<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>host1<span class="token punctuation">:</span><span class="token number">27017</span><span class="token punctuation">,</span>host2<span class="token punctuation">:</span><span class="token number">27017</span><span class="token punctuation">,</span>host3<span class="token punctuation">:</span><span class="token number">27017</span><span class="token operator">/</span>?replicaSet<span class="token operator">=</span>myRS<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="账号密码认证连接"><a href="#账号密码认证连接" class="headerlink" title="账号密码认证连接"></a>账号密码认证连接</h5><p>官网：<a href="https://www.mongodb.com/docs/drivers/go/current/fundamentals/auth/">https://www.mongodb.com/docs/drivers/go/current/fundamentals/auth/</a></p><h6 id="支持的机制"><a href="#支持的机制" class="headerlink" title="支持的机制"></a>支持的机制</h6><p>Go驱动程序支持以下身份验证机制</p><ul><li><a href="https://www.mongodb.com/docs/drivers/go/current/fundamentals/auth/#std-label-golang_sha_256">SCRAM-SHA-256</a></li><li><a href="https://www.mongodb.com/docs/drivers/go/current/fundamentals/auth/#std-label-golang-sha-1">SCRAM-SHA-1</a></li><li><a href="https://www.mongodb.com/docs/drivers/go/current/fundamentals/auth/#std-label-golang-mongodb-cr">MONGODB-CR</a></li><li><a href="https://www.mongodb.com/docs/drivers/go/current/fundamentals/auth/#std-label-golang-mongodb-aws">MongoDB-AWS</a></li><li><a href="https://www.mongodb.com/docs/drivers/go/current/fundamentals/auth/#std-label-golang-x509">X.509</a></li></ul><p>Go Driver通过身份验证机制建立连接<a href="https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.12.1/mongo#Client">客户</a>类型。该Client类型指定用作连接选项的机制和凭据。<a href="https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.12.1/mongo/options#Credential">凭据</a>类型。要配置这些选项，请将Credential类型传递给<a href="https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.12.1/mongo/options#ClientOptions.SetAuth">设置验证()</a> 的方法客户<a href="https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.12.1/mongo/options#ClientOptions">选项类型</a>。</p><h6 id="约定示例"><a href="#约定示例" class="headerlink" title="约定示例"></a>约定示例</h6><p>每个身份验证机制都包括以下占位符：</p><ul><li><code>username</code> mongodb用户名</li><li><code>password</code> mongodb密码</li><li><code>hostname</code> mongodb服务器ip地址</li><li><code>port</code> 端口</li><li><code>authenticationDb</code> 包含用户身份验证数据的mongodb数据库。如果省略此选项，驱动程序将使用默认值admin</li></ul><h5 id="默认方式"><a href="#默认方式" class="headerlink" title="默认方式"></a>默认方式</h5><p>默认机制使用以下身份验证机制之一，具体取决于服务器支持的mongodb版本</p><table><thead><tr><th>机制</th><th>版本</th></tr></thead><tbody><tr><td><code>SCRAM-SHA-256</code></td><td>Mongodb4.0及更高版本</td></tr><tr><td><code>SCRM-SHA-1</code></td><td>MongoDB3.0、3.2、3.4和3.6</td></tr><tr><td><code>MONGODB-CR</code></td><td>MongoDB及更早版本</td></tr></tbody></table><pre class="line-numbers language-go" data-language="go"><code class="language-go">credential <span class="token operator">:=</span> options<span class="token punctuation">.</span>Credential<span class="token punctuation">&#123;</span>   AuthSource<span class="token punctuation">:</span> <span class="token string">"&lt;authenticationDb>"</span><span class="token punctuation">,</span>   Username<span class="token punctuation">:</span> <span class="token string">"&lt;username>"</span><span class="token punctuation">,</span>   Password<span class="token punctuation">:</span> <span class="token string">"&lt;password>"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>clientOpts <span class="token operator">:=</span> options<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ApplyURI</span><span class="token punctuation">(</span><span class="token string">"mongodb://&lt;hostname>:&lt;port>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>   <span class="token function">SetAuth</span><span class="token punctuation">(</span>credential<span class="token punctuation">)</span>client<span class="token punctuation">,</span> err <span class="token operator">:=</span> mongo<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clientOpts<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="SCRAM-SHA-256"><a href="#SCRAM-SHA-256" class="headerlink" title="SCRAM-SHA-256"></a>SCRAM-SHA-256</h5><blockquote><p><strong>SCRAM-SHA-256****是从 MongoDB 4.0 开始的 MongoDB 默认身份验证方法。</strong></p></blockquote><p><code>SCRAM-SHA-256</code>是一种加盐质询-响应身份验证机制 (SCRAM)，它使用您的用户名和密码（通过算法加密）<code>SHA-256</code> 来对您的用户进行身份验证。</p><p>要指定<code>SCRAM-SHA-256</code>身份验证机制，请为 <code>AuthMechanism</code>选项分配值<code>&quot;SCRAM-SHA-256&quot;</code>：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">credential <span class="token operator">:=</span> options<span class="token punctuation">.</span>Credential<span class="token punctuation">&#123;</span>   AuthMechanism<span class="token punctuation">:</span> <span class="token string">"SCRAM-SHA-256"</span><span class="token punctuation">,</span>   AuthSource<span class="token punctuation">:</span> <span class="token string">"&lt;authenticationDb>"</span><span class="token punctuation">,</span>   Username<span class="token punctuation">:</span> <span class="token string">"&lt;username>"</span><span class="token punctuation">,</span>   Password<span class="token punctuation">:</span> <span class="token string">"&lt;password>"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>clientOpts <span class="token operator">:=</span> options<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ApplyURI</span><span class="token punctuation">(</span><span class="token string">"mongodb://&lt;hostname>:&lt;port>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>   <span class="token function">SetAuth</span><span class="token punctuation">(</span>credential<span class="token punctuation">)</span>client<span class="token punctuation">,</span> err <span class="token operator">:=</span> mongo<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clientOpts<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="SCRAM-SHA-1"><a href="#SCRAM-SHA-1" class="headerlink" title="SCRAM-SHA-1"></a>SCRAM-SHA-1</h5><blockquote><p><strong>SCRAM-SHA-1****是 MongoDB 版本 3.0、3.2、3.4 和 3.6 的默认身份验证方法。</strong></p></blockquote><p><code>SCRAM-SHA-1</code>是一种加盐质询响应机制 (SCRAM)，它使用您的用户名和密码（通过算法加密）<code>SHA-1</code>来验证您的用户。</p><p>要指定<code>SCRAM-SHA-1</code>身份验证机制，请为 <code>AuthMechanism</code>选项分配值<code>&quot;SCRAM-SHA-1&quot;</code>：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">credential <span class="token operator">:=</span> options<span class="token punctuation">.</span>Credential<span class="token punctuation">&#123;</span>   AuthMechanism<span class="token punctuation">:</span> <span class="token string">"SCRAM-SHA-1"</span><span class="token punctuation">,</span>   AuthSource<span class="token punctuation">:</span> <span class="token string">"&lt;authenticationDb>"</span><span class="token punctuation">,</span>   Username<span class="token punctuation">:</span> <span class="token string">"&lt;username>"</span><span class="token punctuation">,</span>   Password<span class="token punctuation">:</span> <span class="token string">"&lt;password>"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>clientOpts <span class="token operator">:=</span> options<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ApplyURI</span><span class="token punctuation">(</span><span class="token string">"mongodb://&lt;hostname>:&lt;port>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>   <span class="token function">SetAuth</span><span class="token punctuation">(</span>credential<span class="token punctuation">)</span>client<span class="token punctuation">,</span> err <span class="token operator">:=</span> mongo<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clientOpts<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"context"</span> <span class="token comment">// 用于在函数之间传递上下文信息，以支持控制连接和请求的声明周期</span>    <span class="token string">"fmt"</span>    <span class="token string">"go.mongodb.org/mongo-driver/bson"</span>           <span class="token comment">// 用于处理mongodb的bson数据</span>    <span class="token string">"go.mongodb.org/mongo-driver/bson/primitive"</span> <span class="token comment">// 用于处理mongodb的objectid类型</span>    <span class="token string">"go.mongodb.org/mongo-driver/mongo"</span>          <span class="token comment">// mongodb官方go驱动</span>    <span class="token string">"go.mongodb.org/mongo-driver/mongo/options"</span>  <span class="token comment">// 用于设置mongodb连接选项</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">var</span> client <span class="token operator">*</span>mongo<span class="token punctuation">.</span>Client     <span class="token comment">// 定义客户端连接</span><span class="token keyword">var</span> database <span class="token operator">*</span>mongo<span class="token punctuation">.</span>Database <span class="token comment">// 数据库实例</span><span class="token keyword">var</span> users <span class="token operator">*</span>mongo<span class="token punctuation">.</span>Collection  <span class="token comment">// 集合实例</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//const uri = "mongodb://dujie:123456@localhost:27017"</span>    <span class="token comment">// mongodb连接字符串</span>    <span class="token keyword">const</span> uri <span class="token operator">=</span> <span class="token string">"mongodb://localhost:27017"</span>    <span class="token comment">// 创建凭据对象，用于身份验证</span>    credential <span class="token operator">:=</span> options<span class="token punctuation">.</span>Credential<span class="token punctuation">&#123;</span>        AuthSource<span class="token punctuation">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>        Username<span class="token punctuation">:</span>   <span class="token string">"dujie"</span><span class="token punctuation">,</span>        Password<span class="token punctuation">:</span>   <span class="token string">"123456"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//  options.Client().ApplyURI(uri) 创建一个连接选项，SetAuth(credential) 设置身份验证，  SetConnectTimeout设置连接超时时间</span>    opts <span class="token operator">:=</span> options<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ApplyURI</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetAuth</span><span class="token punctuation">(</span>credential<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetConnectTimeout</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment">//opts := options.Client().ApplyURI(uri).SetConnectTimeout(time.Second * 3)</span>    <span class="token keyword">var</span> err <span class="token builtin">error</span>    <span class="token comment">// mongo.Connect 连接到mongodb数据库，返回客户端实例</span>    client<span class="token punctuation">,</span> err <span class="token operator">=</span> mongo<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> opts<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"1 ~~~~"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 测试与数据库的连接是否正常</span>    err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ping  ~~~~"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获取数据库实例</span>    database <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>    <span class="token comment">// 获取集合（表）实例</span>    users <span class="token operator">=</span> database<span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>database<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// `bson:"_id,omitempty" 表示在BSON序列化和反序列化时将该字段映射到数据库中的_id字段，</span>    Id    primitive<span class="token punctuation">.</span>ObjectID <span class="token string">`bson:"_id,omitempty"`</span>    Name  <span class="token builtin">string</span>    Age   <span class="token builtin">int</span>    Score <span class="token builtin">float64</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> u User    err <span class="token operator">:=</span> users<span class="token punctuation">.</span><span class="token function">FindOne</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Disconnect</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2 ~~~~"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>MongoDB中可以创建使用多个库，但是有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。</p><ul><li><p>admin：从权限的角度来看，这是”root”数据库。要是将一个用户添加到这个数据库中，这个用户自动继承所有数据库的权限，一些特定的服务器端命令也只能从这个数据库运行，比如列出所有数据库或者关闭服务器。</p><ul><li><code>admin</code>数据库是MongoDB的管理数据库，只有具有管理员权限的用户才能访问它。</li><li>在<code>admin</code>数据库中，可以进行用户管理、权限设置、数据库备份和还原等操作。</li><li>通常，管理员会在<code>admin</code>数据库下创建其他数据库的用户，并为这些用户分配相应的权限。</li></ul></li><li><p>local：这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合。</p><ul><li><code>local</code>数据库也是与分片相关的数据库，但它只在每个分片节点上存在。</li><li><code>local</code>数据库用于存储分片节点的复制集信息和本地操作日志。</li><li>当一个节点作为分片副本集的成员时，它会在<code>local</code>数据库中记录与副本集相关的信息。</li></ul></li><li><p>config：当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</p><ul><li><code>config</code>数据库是用于支持MongoDB的分片（Sharding）功能的配置数据库。</li><li>当MongoDB部署为分片集群时，<code>config</code>数据库中会存储与分片有关的配置信息，如分片键、分片节点等。</li><li>分片配置服务器会维护<code>config</code>数据库中的信息，用于管理数据的分片和迁移。</li></ul></li></ul><table><thead><tr><th>RDBMS</th><th>MongoDB</th></tr></thead><tbody><tr><td>Database</td><td>Database</td></tr><tr><td>Table</td><td>Collection</td></tr><tr><td>Row</td><td>Document</td></tr><tr><td>Column</td><td>Field</td></tr><tr><td>Join</td><td>Embedded Document嵌入文档或Reference引入</td></tr><tr><td>Primary Key</td><td>主键（MongoDB提供了key为_id）</td></tr></tbody></table><p>Go Driver使用，官方博客：<a href="https://www.mongodb.com/blog/post/mongodb-go-driver-tutorial">https://www.mongodb.com/blog/post/mongodb-go-driver-tutorial</a></p><h4 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h4><p>结构体定义<a href="https://www.mongodb.com/docs/drivers/go/current/usage-examples/findOne/#find-a-document">https://www.mongodb.com/docs/drivers/go/current/usage-examples/findOne/#find-a-document</a></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Restaurant <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>ID           primitive<span class="token punctuation">.</span>ObjectID <span class="token string">`bson:"_id"`</span>Name         <span class="token builtin">string</span>RestaurantId <span class="token builtin">string</span> <span class="token string">`bson:"restaurant_id"`</span>Cuisine      <span class="token builtin">string</span>Address      <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>Borough      <span class="token builtin">string</span>Grades       <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> ID   primitive<span class="token punctuation">.</span>ObjectID <span class="token string">`bson:"_id,omitempty"`</span> Name <span class="token builtin">string</span> Age  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>u User<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"&lt;%s: %s,%d>"</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> u<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> u<span class="token punctuation">.</span>Age<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结构体Tag 参考：<a href="https://www.mongodb.com/docs/drivers/go/current/fundamentals/bson/#struct-tags"> https://www.mongodb.com/docs/drivers/go/current/fundamentals/bson/#struct-tags</a></p><table><thead><tr><th>结构体标签</th><th>描述</th></tr></thead><tbody><tr><td><code>omitempty</code></td><td>如果将字段设置为与字段类型对应的零值，则不会对字段进行编辑，一般用于设置_id</td></tr><tr><td><code>minsize</code></td><td>如果字段类型为<code>int64</code> 、<code>uint32</code> 或<code>uint64</code> 类型，并且该字段的值可以放入有符号<code>int32</code> 中，则该字段将被序列化为<code>BSON int32</code> ，而不是<code>BSON int64</code> 。如果该值无法容纳有符号的<code>int32</code> 则忽略此标记</td></tr><tr><td><code>truncate</code></td><td>如果字段类型是非浮点数字类型，则解组到该字段的BSON双精度将在小数点处被截断。</td></tr><tr><td><code>inline</code></td><td>如果字段类型是结构体或映射字段，则该字段在编组时展平，并在解组时取消展平。</td></tr></tbody></table><p>User结构体中ID一定要使用omitempty，新增结构体时，如果ID不设置则为零值提交，数据库中_id字段就是一串0。如果设置忽略零值，ID为0提交时会被忽略，数据库则自动生成_id中的id。</p><p>ObjectId有12字节组成，参考<code>bson/primitive/objectid.go/NewObjectID()函数</code> </p><ul><li>4字节时间戳</li><li>5字节进程唯一值</li><li>3字节随机数，每次加1</li></ul><h5 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h5><p>操作参考：<a href="https://www.mongodb.com/docs/drivers/go/current/usage-examples/">https://www.mongodb.com/docs/drivers/go/current/usage-examples/</a></p><p>####### 插入单条文档</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Restaurant <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Name         <span class="token builtin">string</span>RestaurantId <span class="token builtin">string</span>        <span class="token string">`bson:"restaurant_id,omitempty"`</span>Cuisine      <span class="token builtin">string</span>        <span class="token string">`bson:"cuisine,omitempty"`</span>Address      <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token string">`bson:"address,omitempty"`</span>Borough      <span class="token builtin">string</span>        <span class="token string">`bson:"borough,omitempty"`</span>Grades       <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token string">`bson:"grades,omitempty"`</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当结构<code>omitempty</code> 标记留空时，它会缺省插入文档中的相应字段。</p><p>以下示例将新文档插入到<code>restaurants</code> 集合中</p><blockquote><p><strong>不存在的数据库和集合</strong></p></blockquote><blockquote><p>如果执行写入操作时所需的数据库和集合不存在，服务器会隐式创建它们</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go">coll <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">"sample_restaurants"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">"restaurants"</span><span class="token punctuation">)</span>newRestaurant <span class="token operator">:=</span> Restaurant<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"8282"</span><span class="token punctuation">,</span> Cuisine<span class="token punctuation">:</span> <span class="token string">"Korean"</span><span class="token punctuation">&#125;</span>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> coll<span class="token punctuation">.</span><span class="token function">InsertOne</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newRestaurant<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">&#123;</span>  <span class="token string">"_id"</span><span class="token punctuation">:</span> <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"8282"</span><span class="token punctuation">,</span>  <span class="token string">"cuisine"</span><span class="token punctuation">:</span> <span class="token string">"Korean"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>####### 插入多条<br>可以使用该<code>InsertMany()</code> 方法将多个文档插入到集合中。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Restaurant <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Name         <span class="token builtin">string</span>RestaurantId <span class="token builtin">string</span>        <span class="token string">`bson:"restaurant_id,omitempty"`</span>Cuisine      <span class="token builtin">string</span>        <span class="token string">`bson:"cuisine,omitempty"`</span>Address      <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token string">`bson:"address,omitempty"`</span>Borough      <span class="token builtin">string</span>        <span class="token string">`bson:"borough,omitempty"`</span>Grades       <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token string">`bson:"grades,omitempty"`</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当结构<code>omitempty</code> <a href="https://www.mongodb.com/docs/drivers/go/current/fundamentals/bson/#std-label-golang-struct-tags">标记</a>留空时，它会省略插入文档中的相应字段。</p><p>以下示例将两个新文档插入到<code>restaurants</code> 集合中：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">coll <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">"sample_restaurants"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">"restaurants"</span><span class="token punctuation">)</span>newRestaurants <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>Restaurant<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Rule of Thirds"</span><span class="token punctuation">,</span> Cuisine<span class="token punctuation">:</span> <span class="token string">"Japanese"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>Restaurant<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Madame Vo"</span><span class="token punctuation">,</span> Cuisine<span class="token punctuation">:</span> <span class="token string">"Vietnamese"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> coll<span class="token punctuation">.</span><span class="token function">InsertMany</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newRestaurants<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="BSON"><a href="#BSON" class="headerlink" title="BSON"></a>BSON</h5><p><a href="https://www.mongodb.com/docs/drivers/go/current/fundamentals/bson/">https://www.mongodb.com/docs/drivers/go/current/fundamentals/bson/</a></p><p>将Go类型转换为BSON的过程称为编组，而相反的过程称为解组</p><p>MongoDB的Go库提供的构建BSON的数据分为4种</p><p>MongoDB以二进制表示形式存储文档，称为BSON允许轻松灵活的数据处理。</p><ul><li>D : An ordered representation of a BSON document (slice)，表示有序的，切片且元素是二元的</li><li>M : An unordered representation of a BSON document (map)，表示无序的，map且元素是kv对</li><li>A : An ordered representation of a BSON array  BSON数组的有序表示</li><li>E : A single element inside a D type  D类型内的单个元素</li></ul><p>以下示例演示如何使用 <code>bson.D</code>类型构造查询过滤器来匹配<code>quantity</code>字段值大于 100 的文档</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">"quantity"</span><span class="token punctuation">,</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">"$gt"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h5><p>####### 单条查询<br><code>bson.D&#123;&#123;"name","tom"&#125;&#125;</code> </p><ul><li>bson.D 是切片，D后的{}表示切片字面量定义</li><li>{“name”,”tom”} 表示一个结构体实例字面量定义<ul><li>“name” 是结构体的Key属性，类型是string</li><li>“tom”是结构体的value属性，类型是any</li></ul></li></ul><p><code>bson.M&#123;&quot;name&quot;:&quot;tom&quot;&#125;</code></p><ul><li>bson.M是map，M后的{} 表示该map的字面量定义</li><li>map类型为map[string]interface{}</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 找一条</span><span class="token keyword">func</span> <span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 条件</span> <span class="token comment">// filter := bson.D&#123;&#123;"name", "tom"&#125;&#125; // slice</span> <span class="token comment">// filter := bson.D&#123;&#123;"name", bson.D&#123;&#123;"$eq", "tom"&#125;&#125;&#125;&#125;</span> filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"tom"</span><span class="token punctuation">&#125;</span> <span class="token comment">// map</span> <span class="token comment">// filter := bson.M&#123;"name": bson.M&#123;"$ne": "jerry"&#125;&#125;</span> <span class="token comment">// filter := bson.D&#123;&#125; // 没有条件全部都符合</span> <span class="token keyword">var</span> u User err <span class="token operator">:=</span> users<span class="token punctuation">.</span><span class="token function">FindOne</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span> err <span class="token operator">==</span> mongo<span class="token punctuation">.</span>ErrNoDocuments <span class="token punctuation">&#123;</span> <span class="token comment">// 说明没有任何匹配文档</span> log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"没有匹配的文档"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">&#125;</span> log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>####### 多条查询</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 查多条，遍历结果</span><span class="token keyword">func</span> <span class="token function">findMany1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 无条件，全部符合</span> cursor<span class="token punctuation">,</span> err <span class="token operator">:=</span> users<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">defer</span> cursor<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 关闭游标</span>     <span class="token keyword">var</span> results <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>User <span class="token keyword">for</span> cursor<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> u User err <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> results <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>results<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">)</span> <span class="token comment">// 装入容器</span> <span class="token punctuation">&#125;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token comment">// 查多条，成批装入容器</span><span class="token keyword">func</span> <span class="token function">findMany2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 无条件，全部符合</span> <span class="token keyword">var</span> results <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>User cursor<span class="token punctuation">,</span> err <span class="token operator">:=</span> users<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token keyword">defer</span> cursor<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 关闭游标</span> err <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>results<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token keyword">range</span> results <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="查询条件"><a href="#查询条件" class="headerlink" title="查询条件"></a>查询条件</h5><p>改造上面的findMany2函数，可以使用下面表格中不同的filter</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">findByFilter</span><span class="token punctuation">(</span>filter <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> results <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>User cursor<span class="token punctuation">,</span> err <span class="token operator">:=</span> users<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">defer</span> cursor<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 关闭游标</span> err <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>results<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th><strong>比较符号</strong></th><th><strong>含义</strong></th><th><strong>filter示例</strong></th></tr></thead><tbody><tr><td>$gt</td><td>大于</td><td><code>bson.M&#123;&quot;age&quot;:bson.M&#123;&quot;$gt&quot;:32&#125;&#125;</code></td></tr><tr><td>$lt</td><td>小于</td><td><code>bson.M&#123;&quot;age&quot;:bson.M&#123;&quot;$lt&quot;:32&#125;&#125;</code></td></tr><tr><td>$lte</td><td>小于等于</td><td><code>bson.M&#123;&quot;age&quot;:bson.M&#123;&quot;$lte&quot;:32&#125;&#125;</code></td></tr><tr><td>$gte</td><td>大于等于</td><td><code>bson.M&#123;&quot;age&quot;:bson.M&#123;&quot;$gte&quot;:32&#125;&#125;</code></td></tr><tr><td>$ne</td><td>不等于</td><td><code>bson.M&#123;&quot;age&quot;:bson.M&#123;&quot;$ne&quot;:32&#125;&#125;</code></td></tr><tr><td>$eq</td><td>等于，可以不用这个符号</td><td><code>bson.M&#123;&quot;age&quot;: bson.M&#123;&quot;$eq&quot;: 20&#125;&#125;</code><br><code>bson.M&#123;&quot;age&quot;: 20&#125;</code></td></tr><tr><td>$in</td><td>在范围内</td><td><code>bson.M&#123;&quot;age&quot;:bson.M&#123;&quot;$in&quot;:[]int&#123;1,3,4&#125;&#125;&#125;</code></td></tr><tr><td>$nin</td><td>不在范围内</td><td><code>bson.M&#123;&quot;age&quot;:bson.M&#123;&quot;$nin&quot;:[]int&#123;1,3,4&#125;&#125;&#125;</code></td></tr></tbody></table><p><a href="https://www.mongodb.com/docs/manual/reference/operator/query/and/">https://www.mongodb.com/docs/manual/reference/operator/query/and/</a></p><table><thead><tr><th><strong>逻辑符号</strong></th><th><strong>含义</strong></th><th><strong>filter示例</strong></th></tr></thead><tbody><tr><td>$and</td><td>与</td><td><code>bson.M&#123;&quot;$and&quot;:[]bson.M&#123;&#123;"name":"tom"&#125;,&#123;"age":33&#125;&#125;&#125;</code> <br><code>bson.M&#123;&quot;$and&quot;:[]bson.M&#123;&#123;"name":"tom"&#125;,&#123;"age":bson.M&#123;"$gt":32&#125;&#125;&#125;&#125;</code></td></tr><tr><td>$or</td><td>或</td><td><code>bson.M&#123;&quot;$or&quot;: []bson.M&#123;&#123;"name": "tom"&#125;, &#123;"age": bson.M&#123;"$lt":20&#125;&#125;&#125;&#125;</code></td></tr><tr><td>$not</td><td>非</td><td><code>bson.M&#123;&quot;age&quot;: bson.M&#123;&quot;$not&quot;:bson.M&#123;&quot;$gte&quot;:20&#125;&#125;&#125;</code></td></tr></tbody></table><p><code>bson.M&#123;&quot;age&quot;: bson.M&#123;&quot;$gte&quot;:20&#125;&#125;</code> 取反为<code>bson.M&#123;&quot;age&quot;:bson.M&#123;&quot;$not&quot;:bson.M&#123;&quot;$gte&quot;:20&#125;&#125;&#125;</code> </p><table><thead><tr><th>元素</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>$exists</td><td>文档中是否有这个字段</td><td><code>bson.M&#123;&quot;Name&quot;:bson.M&#123;&quot;$exists&quot;:true&#125;&#125;</code></td></tr><tr><td>$type</td><td>字段是否是指定的类型</td><td><code>bson.M&#123;&quot;age&quot;:bson.M&#123;&quot;$type&quot;:16&#125;&#125;</code></td></tr></tbody></table><p><code>bson.M&#123;&quot;name&quot;:bson.M&#123;&quot;$exists&quot;:true&#125;&#125;</code> 标识所有具有Name字段的文档，注意Name和name不一样</p><p>常用类型，参考：<a href="https://www.mongodb.com/docs/manual/reference/operator/query/type/#op._S_type">https://www.mongodb.com/docs/manual/reference/operator/query/type/#op._S_type</a></p><ul><li>字符串类型编码为2，别名为string</li><li>整型编码为16，别名为int</li><li>长整型编码为18，别名为long</li></ul><p>改造函数findByFilter为findAll</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">findAll</span><span class="token punctuation">(</span>filter <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> opt <span class="token operator">*</span>options<span class="token punctuation">.</span>FindOptions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> results <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>User cursor<span class="token punctuation">,</span> err <span class="token operator">:=</span> users<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">,</span> opt<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">defer</span> cursor<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 关闭游标</span>     err <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>results<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token function">findAll</span><span class="token punctuation">(</span>filter<span class="token punctuation">,</span> options<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetLimit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"age"</span><span class="token punctuation">:</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"$gt"</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>opt <span class="token operator">:=</span> options<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>opt<span class="token punctuation">.</span><span class="token function">SetProjection</span><span class="token punctuation">(</span>bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// name、age字段不投影，都显示为零值</span><span class="token function">findAll</span><span class="token punctuation">(</span>filter<span class="token punctuation">,</span> opt<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go">opt<span class="token punctuation">.</span><span class="token function">SetProjection</span><span class="token punctuation">(</span>bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// name投影，age字段零值显示</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">opt<span class="token punctuation">.</span><span class="token function">SetSort</span><span class="token punctuation">(</span>bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 升序</span>opt<span class="token punctuation">.</span><span class="token function">SetSort</span><span class="token punctuation">(</span>bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 降序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">opt<span class="token punctuation">.</span><span class="token function">SetSkip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// offset</span>opt<span class="token punctuation">.</span><span class="token function">SetLimit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// limit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><table><thead><tr><th>更新操作符</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>$inc</td><td>对给定字段数字值增减</td><td><code>bson.M&#123;&quot;$inc&quot;:bson.M&#123;&quot;age&quot;: -5&#125;&#125;</code></td></tr><tr><td>$set</td><td>设置字段值，如果字段不存在则创建</td><td><code>bson.M&#123;&quot;$set&quot;:bson.M&#123;&quot;gender&quot;:&quot;M&quot;&#125;&#125;</code></td></tr><tr><td>$unset</td><td>移除字段</td><td><code>&#123;&#39;$unset&#39;:&#123;&#39;Name&#39;:&quot;&quot;&#125;&#125;</code></td></tr></tbody></table><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 更新一个</span><span class="token keyword">func</span> <span class="token function">updateOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"age"</span><span class="token punctuation">:</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"$exists"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 所有有age字段的文档</span> update <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"$inc"</span><span class="token punctuation">:</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token comment">// age字段减5</span> ur<span class="token punctuation">,</span> err <span class="token operator">:=</span> users<span class="token punctuation">.</span><span class="token function">UpdateOne</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">,</span> update<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ur<span class="token punctuation">.</span>MatchedCount<span class="token punctuation">,</span> ur<span class="token punctuation">.</span>ModifiedCount<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 更新多个</span><span class="token keyword">func</span> <span class="token function">updateMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"age"</span><span class="token punctuation">:</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"$exists"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 所有有age字段的文档</span> update <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"$set"</span><span class="token punctuation">:</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"M"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 为符合条件的文档设置gender字段</span> users<span class="token punctuation">.</span><span class="token function">UpdateMany</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">,</span> update<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go">update <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"$unset"</span><span class="token punctuation">:</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 为符合条件的文档移除gender字 段</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 找到一批更新第一个，ReplaceOne更新除ID以外所有字段</span>filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"age"</span><span class="token punctuation">:</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"$exists"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 所有有age字段的文档</span>replacement <span class="token operator">:=</span> User<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Sam"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">48</span><span class="token punctuation">&#125;</span>ur<span class="token punctuation">,</span> err <span class="token operator">:=</span> users<span class="token punctuation">.</span><span class="token function">ReplaceOne</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">,</span> replacement<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ur<span class="token punctuation">.</span>MatchedCount<span class="token punctuation">,</span> ur<span class="token punctuation">.</span>ModifiedCount<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 删除一个</span><span class="token keyword">func</span> <span class="token function">deleteOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 没有条件，匹配所有文档</span> dr<span class="token punctuation">,</span> err <span class="token operator">:=</span> users<span class="token punctuation">.</span><span class="token function">DeleteOne</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>dr<span class="token punctuation">.</span>DeletedCount<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token comment">// 删除多个</span><span class="token keyword">func</span> <span class="token function">deleteMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 没有条件，匹配所有文档</span> dr<span class="token punctuation">,</span> err <span class="token operator">:=</span> users<span class="token punctuation">.</span><span class="token function">DeleteMany</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>dr<span class="token punctuation">.</span>DeletedCount<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>users.DeleteMany(context.TODO(), bson.M&#123;&#125;)</code> 删除所有文档，危险！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MongoDB&quot;&gt;&lt;a href=&quot;#MongoDB&quot; class=&quot;headerlink&quot; title=&quot;MongoDB&quot;&gt;&lt;/a&gt;MongoDB&lt;/h1&gt;&lt;p&gt;MongoDB属于非关系型数据库，是由C++编写的分布式文档数据库。内部使用类似于Json的bson</summary>
      
    
    
    
    <category term="golang" scheme="http://dycloud.fun/categories/golang/"/>
    
    
    <category term="云原生" scheme="http://dycloud.fun/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    <category term="golang" scheme="http://dycloud.fun/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang GORM使用</title>
    <link href="http://dycloud.fun/2023/05/06/Golang%E4%B8%AD%E7%9A%84GORM/"/>
    <id>http://dycloud.fun/2023/05/06/Golang%E4%B8%AD%E7%9A%84GORM/</id>
    <published>2023-05-06T06:32:00.000Z</published>
    <updated>2023-08-30T03:01:51.741Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GORM"><a href="#GORM" class="headerlink" title="GORM"></a>GORM</h1><h3 id="SQLBuilder"><a href="#SQLBuilder" class="headerlink" title="SQLBuilder"></a>SQLBuilder</h3><p>SQLBuilder是一个用于生成SQL语句的库。</p><p>项目地址：</p><ul><li><a href="https://gitee.com/iRainIoT/go-sqlbuilder%E3%80%81https://github.com/parkingwang/go-sqlbuilder">https://gitee.com/iRainIoT/go-sqlbuilder、https://github.com/parkingwang/go-sqlbuilder</a><ul><li>目前已支持MySQL基本Select&#x2F;Update&#x2F;Insert&#x2F;Delete&#x2F;Where 等语法</li><li>目前只支持MySQL语法</li><li>未支持多表查询</li><li><code> go get -u github.com/parkingwang/go-sqlbuilder</code></li></ul></li><li><a href="https://github.com/huandu/go-sqlbuilder">https://github.com/huandu/go-sqlbuilder</a>，功能更强<ul><li><code>go get github.com/huandu/go-sqlbuilder </code></li></ul></li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"database/sql"</span> <span class="token string">"fmt"</span> <span class="token string">"log"</span> <span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span> <span class="token string">"github.com/huandu/go-sqlbuilder"</span><span class="token punctuation">)</span><span class="token keyword">var</span> db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> err <span class="token builtin">error</span> db<span class="token punctuation">,</span> err <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> <span class="token string">"wayne:wayne@/test"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 3 定义结构体</span><span class="token keyword">type</span> Emp <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 和字段对应的变量或结构体定义，最好和数据库中字段顺序对应</span> emp_no     <span class="token builtin">int</span> first_name <span class="token builtin">string</span> last_name  <span class="token builtin">string</span> gender     <span class="token builtin">byte</span> birth_date <span class="token builtin">string</span> <span class="token comment">// hire_date string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> query <span class="token operator">:=</span> sqlbuilder<span class="token punctuation">.</span> <span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"emp_no"</span><span class="token punctuation">,</span> <span class="token string">"first_name"</span><span class="token punctuation">,</span> <span class="token string">"last_name"</span><span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token punctuation">,</span> <span class="token string">"birth_date"</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">From</span><span class="token punctuation">(</span><span class="token string">"employees"</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"emp_no > 10015"</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token comment">// 试一试Where("emp_no > ?")</span> <span class="token function">Offset</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">OrderBy</span><span class="token punctuation">(</span><span class="token string">"emp_no"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Desc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token comment">// 按照什么字段排序，降序</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment">// 输出为字符串，底层调用Build()</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> emp Emp err <span class="token operator">=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>emp<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> <span class="token operator">&amp;</span>emp<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>emp<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>emp<span class="token punctuation">.</span>gender<span class="token punctuation">,</span> <span class="token operator">&amp;</span>emp<span class="token punctuation">.</span>birth_date<span class="token punctuation">)</span> <span class="token comment">// 字段顺序和select的字段投影顺序一致</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>SELECT emp_no<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> birth_date FROM employeesWHERE emp_no <span class="token operator">></span> <span class="token number">10015</span> ORDER BY emp_no DESC LIMIT <span class="token number">2</span> OFFSET <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本质上sqlbuilder就是在生成SQL语句字符串。</p><p><strong>args参数化</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go">builder <span class="token operator">:=</span> sqlbuilder<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"emp_no"</span><span class="token punctuation">,</span> <span class="token string">"first_name"</span><span class="token punctuation">,</span> <span class="token string">"last_name"</span><span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token punctuation">,</span> <span class="token string">"birth_date"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">From</span><span class="token punctuation">(</span><span class="token string">"employees"</span><span class="token punctuation">)</span>builder<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>    builder<span class="token punctuation">.</span><span class="token function">In</span><span class="token punctuation">(</span><span class="token string">"emp_no"</span><span class="token punctuation">,</span> <span class="token number">10008</span><span class="token punctuation">,</span> <span class="token number">10010</span><span class="token punctuation">,</span> <span class="token number">10020</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 参数化</span><span class="token punctuation">)</span>query<span class="token punctuation">,</span> args <span class="token operator">:=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s\n%v\n"</span><span class="token punctuation">,</span> query<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token comment">// args是参数</span>SELECT emp_no<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> birth_date FROM employeesWHERE emp_no IN <span class="token punctuation">(</span>?<span class="token punctuation">,</span> ?<span class="token punctuation">,</span> ?<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">10008</span> <span class="token number">10010</span> <span class="token number">10020</span><span class="token punctuation">]</span>rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment">// 这样使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><p>对象关系映射，值得是对象和关系之间的银蛇，使用面相对象的方式操作数据库。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">关系模型和Go对象之间的映射table <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">struct</span>   ，表映射为结构体row   <span class="token operator">=</span><span class="token operator">></span> object   ，行映射为实例column <span class="token operator">=</span><span class="token operator">></span> property ，字段映射为属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>举例，有表student，字段为id  int 、name varchar、age int</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> id   <span class="token builtin">int</span> name <span class="token builtin">string</span> age  <span class="token builtin">int</span><span class="token punctuation">&#125;</span>Student<span class="token punctuation">&#123;</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">&#125;</span>Student<span class="token punctuation">&#123;</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">"Jerry"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以认为ORM是一种高级抽象，对象的操作最终还是会转换成对应关系数据库操作的SQL语句，数据库操作的结构会被封装成对象</p><h3 id="GORM-1"><a href="#GORM-1" class="headerlink" title="GORM"></a>GORM</h3><p>GORM是一个友好的、功能全面的、性能不错的基于GO语言实现的ORM库。</p><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><p>gorm.io&#x2F;dirver&#x2F;mysql 依赖github.com&#x2F;go-sql-driver&#x2F;mysql，可以认为它是对驱动的再封装。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">$ <span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>sql<span class="token operator">-</span>driver<span class="token operator">/</span>mysql$ <span class="token keyword">go</span> get <span class="token operator">-</span>u gorm<span class="token punctuation">.</span>io<span class="token operator">/</span>gorm$ <span class="token keyword">go</span> get <span class="token operator">-</span>u gorm<span class="token punctuation">.</span>io<span class="token operator">/</span>driver<span class="token operator">/</span>mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h6><ul><li>英文<a href="https://gorm.io/docs/"> https://gorm.io/docs/</a></li><li>中文 <a href="https://gorm.io/zh_CN/docs/index.html">https://gorm.io/zh_CN&#x2F;docs&#x2F;index.html</a></li></ul><h6 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h6><p><a href="https://gorm.io/zh_CN/docs/connecting_to_the_database.html#MySQL">https://gorm.io/zh_CN&#x2F;docs&#x2F;connecting_to_the_database.html#MySQL</a></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span> <span class="token string">"log"</span> <span class="token comment">// _ "github.com/go-sql-driver/mysql" // 不要驱动了吗？</span> <span class="token string">"gorm.io/driver/mysql"</span> <span class="token string">"gorm.io/gorm"</span><span class="token punctuation">)</span><span class="token keyword">var</span> db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> err <span class="token builtin">error</span> <span class="token comment">// dsn := "wayne:wayne@/test"</span> dsn <span class="token operator">:=</span> <span class="token string">"wayne:wayne@tcp(localhost:3306)/test?charset=utf8mb4"</span> db<span class="token punctuation">,</span> err <span class="token operator">=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>dsn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 不要用:=</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码其实还是需要驱动的</p><p>在<code>gorm.io/driver/mysql/mysql.go</code>中</p><ul><li><code>import了&quot;github.com/go-sql-driver/mysql&quot;</code> 也就是说驱动也导入了</li><li>Dialector的Initalize方法中使用了<code>sql.Open</code></li></ul><p><img src="/images/R4_Pj04NJNofQjeP7O098UvyH3-7Mt--bCCv4P-wxa0.png" alt="image"></p><p><img src="/images/oYugO6NnOV-fb0qJlsGlfiB7E0wLvwedWxg3qS4kubQ.png" alt="image"></p><h5 id="模型定义"><a href="#模型定义" class="headerlink" title="模型定义"></a>模型定义</h5><p><a href="https://gorm.io/zh_CN/docs/models.html">https://gorm.io/zh_CN&#x2F;docs&#x2F;models.html</a></p><p>模型是标准的struct，由Go的基本数据类型、实现了Scanner和Valuer接口的自定义类型及其指针或别名组成</p><p>例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  ID           <span class="token builtin">uint</span>  Name         <span class="token builtin">string</span>  Email        <span class="token operator">*</span><span class="token builtin">string</span>  Age          <span class="token builtin">uint8</span>  Birthday     <span class="token operator">*</span>time<span class="token punctuation">.</span>Time  MemberNumber sql<span class="token punctuation">.</span>NullString  ActivatedAt  sql<span class="token punctuation">.</span>NullTime  CreatedAt    time<span class="token punctuation">.</span>Time  UpdatedAt    time<span class="token punctuation">.</span>Time<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>GORM倾向于约定优先配置</p><ul><li>约定使用名为ID的属性会作为主键</li><li>约定使用snake_cases作为表名<ul><li>结构体命名为employee，那么数据库表名就是employees</li></ul></li><li>约定使用snake_case作为字段名，字段首字母大写采用大驼峰<ul><li>属性名为FirstName，默认对应数据库表的字段名为first_name</li></ul></li></ul><p>如果不遵循以上约定就要自定义配置</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 不符合约定的定义，很多都需要配置，直接用不行</span><span class="token keyword">type</span> Emp <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 默认表名emps</span> emp_no     <span class="token builtin">int</span>    <span class="token comment">// 不是ID为主键，需要配置</span> first_name <span class="token builtin">string</span> <span class="token comment">// 首字母未大写，也需要配置</span> last_name  <span class="token builtin">string</span> gender     <span class="token builtin">byte</span> birth_date <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token comment">// 符合约定的定义如下</span><span class="token keyword">type</span> student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 默认表名students</span> ID   <span class="token builtin">int</span>    <span class="token comment">// Id也可以</span> Name <span class="token builtin">string</span> <span class="token comment">// 字段首字母要大写</span> Age  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="gorm-Model"><a href="#gorm-Model" class="headerlink" title="gorm.Model"></a>gorm.Model</h5><p>GORM定义一个<code>gorm.Model </code>结构体，其包括字段<code>ID、CreateAt、UpdateAt、DeleteAt</code> </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// gorm.Model 的定义</span><span class="token keyword">type</span> Model <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  ID        <span class="token builtin">uint</span>           <span class="token string">`gorm:"primaryKey"`</span>  CreatedAt time<span class="token punctuation">.</span>Time  UpdatedAt time<span class="token punctuation">.</span>Time  DeletedAt gorm<span class="token punctuation">.</span>DeletedAt <span class="token string">`gorm:"index"`</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="表名配置"><a href="#表名配置" class="headerlink" title="表名配置"></a>表名配置</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 表名并没有遵守约定</span><span class="token keyword">func</span> <span class="token punctuation">(</span>Emp<span class="token punctuation">)</span> <span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">"employees"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="字段配置"><a href="#字段配置" class="headerlink" title="字段配置"></a>字段配置</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span> <span class="token string">"log"</span> <span class="token string">"gorm.io/driver/mysql"</span> <span class="token string">"gorm.io/gorm"</span> <span class="token string">"gorm.io/gorm/logger"</span><span class="token punctuation">)</span><span class="token keyword">var</span> db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> err <span class="token builtin">error</span> <span class="token comment">// dsn := "wayne:wayne@/test"</span> dsn <span class="token operator">:=</span> <span class="token string">"wayne:wayne@tcp(localhost:3306)/test?charset=utf8mb4"</span> db<span class="token punctuation">,</span> err <span class="token operator">=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>dsn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">&#123;</span> Logger<span class="token punctuation">:</span> logger<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">LogMode</span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span>Info<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 日志级别，默认为Silent</span>即打印慢SQL和错误 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 不要用:=</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token keyword">type</span> Emp <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 默认表名emps</span> EmpNo     <span class="token builtin">int</span>    <span class="token string">`gorm:"primaryKey"`</span> <span class="token comment">// 默认约束是id为主键，而这里将EmpNo设置为主键，对应库里的字段为emp_no</span> FirstName <span class="token builtin">string</span> <span class="token comment">// 首字母大写，对应字段first_name</span> LastName  <span class="token builtin">string</span> Gender    <span class="token builtin">byte</span> BirthDate <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token comment">// 表名并没有遵守约定</span><span class="token keyword">func</span> <span class="token punctuation">(</span>Emp<span class="token punctuation">)</span> <span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">"employees"</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> e Emp result <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token comment">// 等价于Limit 1，取1条</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Error<span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>gorm:&quot;primaryKey&quot;</code> 来指定字段为主键，默认使用名为ID的属性作为主键。primaryKey是tag名，大小写不敏感，但建议小驼峰</p><h5 id="列名"><a href="#列名" class="headerlink" title="列名"></a>列名</h5><p>如果未按照约定定义字段，需要定义结构体属性时指定数据库字段名称是什么</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">BirthDate <span class="token builtin">string</span> <span class="token string">`gorm:"column:birth_date"`</span> <span class="token comment">// 可以使用column指定数据库表中的对应字段名</span>Xyz <span class="token builtin">string</span> <span class="token string">`gorm:"column:birth_date"`</span> <span class="token comment">// 字段名可以不符合约定，但字段名首字母一定要大写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h5><p><a href="https://gorm.io/zh_CN/docs/migration.html#%E8%A1%A8">https://gorm.io/zh_CN&#x2F;docs&#x2F;migration.html#%E8%A1%A8</a></p><p>下面，新建一个students表，来看看结构体中属性类型和数据库表中字段类型的对应关系</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 迁移后，主键默认不为空，其他字段默认都是能为空的</span><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> ID       <span class="token builtin">int</span>       <span class="token comment">// 缺省主键bigint AUTO_INCREMENT</span> Name     <span class="token builtin">string</span>    <span class="token string">`gorm:"not null;type:varchar(48);comment:姓名"`</span> Age      <span class="token builtin">byte</span>      <span class="token comment">// byte=>tinyint unsigned</span> Birthday time<span class="token punctuation">.</span>Time <span class="token comment">// datetime</span> Gender   <span class="token builtin">byte</span>      <span class="token string">`gorm:"type:tinyint"`</span><span class="token punctuation">&#125;</span><span class="token comment">// db.Migrator().DropTable(&amp;Student&#123;&#125;)</span>db<span class="token punctuation">.</span><span class="token function">Migrator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateTable</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>CREATE TABLE <span class="token string">`students`</span> <span class="token punctuation">(</span>    <span class="token string">`id`</span> bigint AUTO_INCREMENT<span class="token punctuation">,</span>    <span class="token string">`name`</span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span> NOT NULL COMMENT <span class="token char">'姓名'</span><span class="token punctuation">,</span>    <span class="token string">`age`</span> tinyint unsigned<span class="token punctuation">,</span>    <span class="token string">`birthday`</span> <span class="token function">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> NULL<span class="token punctuation">,</span>    <span class="token string">`gender`</span> tinyint<span class="token punctuation">,</span>    PRIMARY KEY <span class="token punctuation">(</span><span class="token string">`id`</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于int &#x3D;&gt; bigint、string &#x3D;&gt; longtext，这些默认转换不符合我们的要求，所以，在tag中使用type指定字段类型。</p><p>属性是用来构建结构体实例的，生成的SQL语句也要使用这些数据。而tag是用来生成迁移</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">Name    <span class="token builtin">string</span>     <span class="token string">`gorm:"size:48"`</span> 定义为<span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span>Age     <span class="token builtin">int</span>       <span class="token string">`gorm:"size:32"`</span> 定义为<span class="token number">4</span>字节的<span class="token builtin">int</span>Age     <span class="token builtin">int</span>       <span class="token string">`gorm:"size:64"`</span> 定义为<span class="token number">8</span>字节的bigint<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>迁移功能用的较少。</p><p>结构体属性类型用来封装实例的属性数据，Tag中类型指定迁移到数据库表中字段的类型</p><h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><p>参考 <a href="https://gorm.io/zh_CN/docs/create.html#%E5%88%9B%E5%BB%BA%E8%AE%B0%E5%BD%95">https://gorm.io/zh_CN&#x2F;docs&#x2F;create.html#%E5%88%9B%E5%BB%BA%E8%AE%B0%E5%BD%95</a></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> ID       <span class="token builtin">int</span>        <span class="token comment">// 缺省主键bigint AUTO_INCREMENT</span> Name     <span class="token builtin">string</span>     <span class="token string">`gorm:"size:48"`</span> <span class="token comment">//`gorm:"not null;type:varchar(48);comment:姓名"`</span> Age      <span class="token builtin">byte</span>       <span class="token comment">// byte=>tinyint unsigned</span> Birthday <span class="token operator">*</span>time<span class="token punctuation">.</span>Time <span class="token comment">// datetime</span> Gender   <span class="token builtin">byte</span>       <span class="token comment">//`gorm:"type:tinyint"`</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Student<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d: %s %d"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> s<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>Age<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="新增一条"><a href="#新增一条" class="headerlink" title="新增一条"></a>新增一条</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go">t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s <span class="token operator">:=</span> Student<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> Birthday<span class="token punctuation">:</span> <span class="token operator">&amp;</span>t<span class="token punctuation">&#125;</span>result <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>RowsAffected<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="新增多条"><a href="#新增多条" class="headerlink" title="新增多条"></a>新增多条</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 新增多条</span>n <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s <span class="token operator">:=</span> Student<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> Birthday<span class="token punctuation">:</span> <span class="token operator">&amp;</span>n<span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>result <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Student<span class="token punctuation">&#123;</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 传入指针的切片</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Error<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>RowsAffected<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="查询一条"><a href="#查询一条" class="headerlink" title="查询一条"></a>查询一条</h5><p>Take 被转换为Limit 1</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> s Studentfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// 零值</span>r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token comment">// LIMIT 1</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// 被填充</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go">r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token comment">// ORDER BY `students`.`id` LIMIT 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go">r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Last</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token comment">// ORDER BY `students`.`id` DESC LIMIT 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据id查，可以使用下面的方式</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a <span class="token operator">=</span> Student<span class="token punctuation">&#123;</span>Id<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">&#125;</span>results <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>results<span class="token punctuation">.</span>RowsAffected<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="时间相关错误"><a href="#时间相关错误" class="headerlink" title="时间相关错误"></a>时间相关错误</h5><p>1、时间类型字段</p><p>上例错误如下，主要是使用了*time.Time，而不是string</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">sql<span class="token punctuation">:</span> Scan <span class="token builtin">error</span> on column index <span class="token number">3</span><span class="token punctuation">,</span> name <span class="token string">"birthday"</span><span class="token punctuation">:</span> unsupported Scan<span class="token punctuation">,</span> storing driver<span class="token punctuation">.</span>Value <span class="token keyword">type</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> into <span class="token keyword">type</span> <span class="token operator">*</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> 转 <span class="token operator">*</span>time<span class="token punctuation">.</span>Time失败了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解决方案</p><ul><li>在连接字符串中增加parseTime&#x3D;true ，这样时间类型就会自动转化为time.Time类型<ul><li><code>dsn := &quot;wayne:wayne@tcp(localhost:3306)/test?charset=utf8mb4&amp;parseTime=true&quot;</code></li></ul></li><li>也可以<code>Birthday string</code> ，拿到Birthday字符串后，必要时，转换成时间类型,time.Parse()</li></ul><p><strong>2、UTC时间</strong></p><p>Create写入的时间，也就是说time.Now()取当前时区时间，但是存入数据库的时间是UTC时间。</p><p>Take拿回的时间也是UTC时间，可以通过<code>s.Birthday.Local()</code>转换成当前时区时间。</p><p>如果想要存入的时间或读取的时间直接是当前时区时间，可以使用loc参数loc&#x3D;Local</p><p>如果使用了loc&#x3D;Local</p><ul><li>存入时，数据库字段中的时间就是当前时区的时间值</li><li>读取时，数据库字段中的时间就被解读为当前时区</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go">dsn <span class="token operator">:=</span> "wayne<span class="token punctuation">:</span>wayne@<span class="token function">tcp</span><span class="token punctuation">(</span>localhost<span class="token punctuation">:</span><span class="token number">3306</span><span class="token punctuation">)</span><span class="token operator">/</span>test?charset<span class="token operator">=</span>utf8mb4<span class="token operator">&amp;</span>parseTime<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>loc<span class="token operator">=</span>Local"<span class="token comment">// time/zoneinfo.go</span><span class="token keyword">func</span> <span class="token function">LoadLocation</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Location<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">||</span> name <span class="token operator">==</span> <span class="token string">"UTC"</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> UTC<span class="token punctuation">,</span> <span class="token boolean">nil</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"Local"</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> Local<span class="token punctuation">,</span> <span class="token boolean">nil</span> <span class="token punctuation">&#125;</span> <span class="token operator">...</span>省略<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>千万不要存入数据库时采用Local存入，却使用UTC解读时间，会造成时间时区的混乱。应该保证时间存入、读取时时区一致</strong></p><p>一定要统一项目中数据库中时间类型字段的时区。可以考虑统一采用UTC，为了本地化显示转换为当前时区即可。</p><h5 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> students <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Studentr <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Error<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> students <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Studentr <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Distinct</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span> <span class="token comment">// 投影的字段是什么？</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span> <span class="token comment">// 容器里每个实例是什么样子？</span><span class="token comment">// 输出</span><span class="token number">2023</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">14</span><span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">:</span><span class="token number">13</span> <span class="token operator">/</span>Users<span class="token operator">/</span>dujie<span class="token operator">/</span>Desktop<span class="token operator">/</span>go12<span class="token operator">/</span>goproject<span class="token operator">/</span>mysql<span class="token operator">-</span>test<span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">75</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">.</span>602ms<span class="token punctuation">]</span> <span class="token punctuation">[</span>rows<span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span> SELECT DISTINCT <span class="token string">`name`</span> FROM <span class="token string">`students`</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">0</span> Tom <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">0</span> 张三 <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">0</span> 李四 <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">0</span> 收到 <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">0</span> 陈飞 <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">0</span> 周正 <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">0</span> Tom1 <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">0</span> Tom2 <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">0</span> Tom3 <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h5><p>投影是关系模型的操作，就是选择哪些字段</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> students <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Studentr <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span> r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token comment">// 输出</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">.</span>580ms<span class="token punctuation">]</span> <span class="token punctuation">[</span>rows<span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">]</span> SELECT <span class="token string">`id`</span><span class="token punctuation">,</span><span class="token string">`name`</span><span class="token punctuation">,</span><span class="token string">`age`</span> FROM <span class="token string">`students`</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">1</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">2</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">3</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">4</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">5</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">6</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">7</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">8</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">9</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">10</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">11</span> Tom <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">12</span> Tom <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">13</span> Tom <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">14</span> 张三 <span class="token number">33</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">15</span> 李四 <span class="token number">39</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">16</span> 李四 <span class="token number">39</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">17</span> 李四 <span class="token number">39</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">18</span> 李四 <span class="token number">39</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">19</span> 收到 <span class="token number">39</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">20</span> 陈飞 <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">21</span> 周正 <span class="token number">18</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">22</span> 周正 <span class="token number">18</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">23</span> 周正 <span class="token number">18</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">24</span> Tom <span class="token number">20</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">25</span> Tom1 <span class="token number">201</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">26</span> Tom2 <span class="token number">202</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">27</span> Tom3 <span class="token number">203</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Limit和Offset"><a href="#Limit和Offset" class="headerlink" title="Limit和Offset"></a>Limit和Offset</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go">    <span class="token keyword">var</span> students <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Student    db<span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Offset</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span> <span class="token comment">// 容器里每个实例是什么样子？</span><span class="token comment">// 输出</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span>534ms<span class="token punctuation">]</span> <span class="token punctuation">[</span>rows<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> SELECT <span class="token operator">*</span> FROM <span class="token string">`students`</span> LIMIT <span class="token number">2</span> OFFSET <span class="token number">2</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">3</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">1</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">4</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><p><strong>1、字符串条件</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> stu <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Studentdb<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name = ?"</span><span class="token punctuation">,</span> <span class="token string">"陈飞"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name &lt;> ?"</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>                              <span class="token comment">// 不等于</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name in (?)"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"陈飞"</span><span class="token punctuation">,</span> <span class="token string">"周正"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span> <span class="token comment">//  在...中</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name like ?"</span><span class="token punctuation">,</span> <span class="token string">"周%"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span> <span class="token comment">// 模糊查询</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name like binary ?"</span><span class="token punctuation">,</span> <span class="token string">"T%"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name like ? or name like ?"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name like ? or id = ?"</span><span class="token punctuation">,</span> <span class="token string">"陈飞"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"id between ? and ?"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2、struct或map条件</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> stu <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Studentdb<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name = ?"</span><span class="token punctuation">,</span> <span class="token string">"陈飞"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name &lt;> ?"</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>                              <span class="token comment">// 不等于</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name in (?)"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"陈飞"</span><span class="token punctuation">,</span> <span class="token string">"周正"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span> <span class="token comment">//  在...中</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name like ?"</span><span class="token punctuation">,</span> <span class="token string">"周%"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>                            <span class="token comment">// 模糊查询</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name like binary ?"</span><span class="token punctuation">,</span> <span class="token string">"T%"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name like ? or name like ?"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name like ? or id = ?"</span><span class="token punctuation">,</span> <span class="token string">"陈飞"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"id between ? and ?"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span>Id<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span>Id<span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span> Name<span class="token punctuation">:</span> <span class="token string">"陈飞"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>                   <span class="token comment">// And</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"陈飞"</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span> <span class="token comment">// And</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>struct条件中出现了零值，例如<code>db.Where(&amp;Student&#123;Name:&quot;tom&quot;,Age: 0&#125;)</code> ，Age是零值，就不会出现在条件中。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span> <span class="token comment">// 指定使用结构体里面的name和age字段作为条件，and</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>3、Not</strong></p><p>将Where换成Not即可，表示条件取反</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">db<span class="token punctuation">.</span><span class="token function">Not</span><span class="token punctuation">(</span><span class="token string">"id =? or id in (?)"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>4、Or</strong></p><p>Or的用法和Where一样</p><p>Where().Where() 是And关系，Where().Or()是Or关系</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name=?"</span><span class="token punctuation">,</span> <span class="token string">"周正"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span><span class="token string">"name=?"</span><span class="token punctuation">,</span> <span class="token string">"陈飞"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name=?"</span><span class="token punctuation">,</span> <span class="token string">"周正"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Tom"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go">r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Order</span><span class="token punctuation">(</span><span class="token string">"id desc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span> <span class="token comment">// ORDER BY id desc</span>r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Order</span><span class="token punctuation">(</span><span class="token string">"name, id desc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span>         <span class="token comment">// ORDER BY name,id desc</span>r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Order</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Order</span><span class="token punctuation">(</span><span class="token string">"id desc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span> <span class="token comment">// ORDER BY name,id desc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go">r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span> <span class="token comment">// GROUP BY `id`</span>r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span> <span class="token comment">// GROUP BY `name`</span>r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span> <span class="token comment">// GROUP BY `id`,`name`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// SELECT name, count(id) as c FROM `students` GROUP BY `name`</span>r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"name, count(id) as c"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span><span class="token comment">// 但是students中没有属性来保存count的值</span><span class="token comment">// 使用Rows()返回所有行，自行获取字段值，但是要用Table指定表名</span><span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    name  <span class="token builtin">string</span>    count <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> r <span class="token operator">=</span> Result<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">"students"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>"name<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> as c<span class="token string">").Group("</span>name"<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token comment">// 遍历每一行，填充2个属性的结构体实例</span><span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>r<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">.</span>count<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"@@@"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 和Select的投影字段对应</span>    Name  <span class="token builtin">string</span>    Count <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> r <span class="token operator">=</span> Result<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">"students"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"name, count(id) as c"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Having</span><span class="token punctuation">(</span><span class="token string">"c > 3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token comment">// 遍历每一行，填充2个属性的结构体实例</span><span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>r<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">.</span>Count<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"@@@"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token comment">// 使用Scan填充容器，注意字段名要大写开头</span><span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    Name <span class="token builtin">string</span>    C    <span class="token builtin">int</span> <span class="token comment">// 或Count int `gorm:"column:c"`</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> rows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Result<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">"students"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"name, count(id) as c"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Having</span><span class="token punctuation">(</span><span class="token string">"c > 3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rows<span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token keyword">range</span> rows <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d, %T %#[2]v\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go">SELECT employees<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span>  employees<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>  employees<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>  salaries<span class="token punctuation">.</span>salaryFROM employees INNER JOIN salaries ON employees<span class="token punctuation">.</span>emp_no <span class="token operator">=</span> salaries<span class="token punctuation">.</span>emp_no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    EmpNo     <span class="token builtin">int</span>    FirstName <span class="token builtin">string</span>    LastName  <span class="token builtin">string</span>    Salary    <span class="token builtin">int</span><span class="token punctuation">&#125;</span>rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">"employees as e"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>"e<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> salary"<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Joins</span><span class="token punctuation">(</span><span class="token string">"join salaries as s on e.emp_no = s.emp_no"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">var</span> r Result<span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>r<span class="token punctuation">.</span>EmpNo<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">.</span>FirstName<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">.</span>LastName<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">.</span>Salary<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"###"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> EmpNo     <span class="token builtin">int</span> FirstName <span class="token builtin">string</span> LastName  <span class="token builtin">string</span> Salary    <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Result<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">"employees as e"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>"e<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> salary"<span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">Joins</span><span class="token punctuation">(</span><span class="token string">"join salaries on e.emp_no = salaries.emp_no"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>results<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Error<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>RowsAffected<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> row <span class="token operator">:=</span> <span class="token keyword">range</span> results <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> row<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    EmpNo     <span class="token builtin">int</span>    FirstName <span class="token builtin">string</span>    LastName  <span class="token builtin">string</span>    Salary    <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Result<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">"employees as e"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>"e<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> salary"<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Joins</span><span class="token punctuation">(</span><span class="token string">"join salaries as s on e.emp_no = s.emp_no"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>results<span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token keyword">range</span> results <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h5><p><a href="https://gorm.io/zh_CN/docs/update.html">https://gorm.io/zh_CN&#x2F;docs&#x2F;update.html</a></p><p>先查后改：先查到一个实例，对这个实例属性进行修改，然后调用db.Save()方法保存。</p><p>db.Save()方法会保存所有字段，对于没有主键的实例相当于Insert into，有主键的实例相当于Update。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 先查</span><span class="token keyword">var</span> student Studentdb<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>student<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span>student<span class="token punctuation">.</span>Age <span class="token operator">+=</span> <span class="token number">10</span>student<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Sam"</span><span class="token comment">// 后修改</span>db<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>student<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Update 单个字段</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span>ID<span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment">// 更新符合条件的所有记录的一个</span>字段<span class="token comment">// UPDATE `students` SET `age`=11 WHERE `id` = 13</span>r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment">// 没有指定ID或Where条件，是全表更新</span>age字段，这是非常危险的fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Error<span class="token punctuation">)</span> <span class="token comment">// 会报WHERE conditions required错误，更新失败，这是一种保护</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Update更新多列</p><p>多个键值对，使用map或结构体实例传参</p><p>同样，没有指定ID或where条件，是全表更新age字段，这是非常危险的，报WHERE conditions required错误</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"age &lt; ?"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Updates</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go">r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"age &lt; ?"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Updates</span><span class="token punctuation">(</span>Student<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><p><a href="https://gorm.io/zh_CN/docs/delete.html">https://gorm.io/zh_CN&#x2F;docs&#x2F;delete.html</a></p><p>删除操作是危险的，慎重操作！</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">result <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span class="token comment">// 报WHERE conditions required错误，这是全表删除，危险</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go">result <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token comment">// 指定主键</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Error<span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// DELETE FROM `students` WHERE `students`.`id` IN (15,16,18)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go">result <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"id > ?"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 删除符合条件的一批</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GORM&quot;&gt;&lt;a href=&quot;#GORM&quot; class=&quot;headerlink&quot; title=&quot;GORM&quot;&gt;&lt;/a&gt;GORM&lt;/h1&gt;&lt;h3 id=&quot;SQLBuilder&quot;&gt;&lt;a href=&quot;#SQLBuilder&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="golang" scheme="http://dycloud.fun/categories/golang/"/>
    
    
    <category term="云原生" scheme="http://dycloud.fun/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    <category term="golang" scheme="http://dycloud.fun/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang 数据库标准开发</title>
    <link href="http://dycloud.fun/2023/05/03/Golang%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A0%87%E5%87%86%E5%BC%80%E5%8F%91/"/>
    <id>http://dycloud.fun/2023/05/03/Golang%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A0%87%E5%87%86%E5%BC%80%E5%8F%91/</id>
    <published>2023-05-03T06:32:00.000Z</published>
    <updated>2023-08-30T03:00:39.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库标准开发"><a href="#数据库标准开发" class="headerlink" title="数据库标准开发"></a>数据库标准开发</h1><h3 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a><strong>驱动</strong></h3><p>连接数据库是典型的CS变成，服务器端被动等待客户端建立TCP连接，并在此连接上进行特定的应用层协议。但是一般用户并不需要了解这些细节，这些都被打包到了驱动库中，只需要简单的调用打开就可以指定协议连接到指定的数据库中</p><p>数据库的种类和产品太多，协议太多，Go官方很难提供针对不同数据库的驱动程序，往往由各数据库官方或第三方给出不同开发语言的驱动库。但是，为了Go语言可以提前定义操作一个数据库的所有行为（接口）和数据（结构体）的规范，<strong>这些定义在databasq&#x2F;sql下。</strong></p><p>mysql驱动：</p><ul><li><a href="https://github.com/go-sql-driver/mysql">https://github.com/go-sql-driver/mysql</a> 支持database&#x2F;sql，<strong>推荐</strong></li><li><a href="https://github.com/ziutek/mymysql">https://github.com/ziutek/mymysql</a> 支持database&#x2F;sql，支持自定义接口</li><li><a href="https://github.com/Philio/GoMySQL">https://github.com/Philio/GoMySQL</a> 不支持database&#x2F;sql，支持自定义接口</li></ul><p>安装mysql的驱动</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">$ <span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>sql<span class="token operator">-</span>driver<span class="token operator">/</span>mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>导入</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"database/sql"</span><span class="token string">"fmt"</span><span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册驱动</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// github.com/go-sql-driver/mysql/mysql/driver.go 代码中有注册驱动</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 83 行</span>sql<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>MySQLDriver<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="连接"><a href="#连接" class="headerlink" title="连接"></a><strong>连接</strong></h5><p>DSN 例子 ：<a href="https://github.com/go-sql-driver/mysql#Examples">https://github.com/go-sql-driver/mysql#Examples</a></p><p><code>[username[:password]@][protocol[(address)]]/dbname[?param1=value1&amp;...&amp;paramN=valueN]</code></p><p><code>username:password@protocol(address)/dbname?param=value</code> </p><pre class="line-numbers language-go" data-language="go"><code class="language-go">connstr <span class="token operator">:=</span> <span class="token string">"root:123456@tcp(127.0.0.1:3306)/test"</span>connstr <span class="token operator">:=</span> <span class="token string">"root:123456@tcp/test"</span>connstr <span class="token operator">:=</span> <span class="token string">"root:123456@/test"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"database/sql"</span><span class="token string">"fmt"</span><span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">var</span> db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>connect <span class="token operator">:=</span> <span class="token string">"root:123456@tcp(127.0.0.1:3306)/test"</span><span class="token keyword">var</span> err <span class="token builtin">error</span>db<span class="token punctuation">,</span> err <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> connect<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>db<span class="token punctuation">.</span><span class="token function">SetConnMaxLifetime</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">//最大连接存活时间</span>db<span class="token punctuation">.</span><span class="token function">SetMaxOpenConns</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                  <span class="token comment">// 最大连接数</span>db<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                  <span class="token comment">// 最大闲置连接</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>db类型是*sql.DB， 是一个操作数据库的句柄，底层是一个多协程安全的连接池。</p><h5 id="操作"><a href="#操作" class="headerlink" title="操作"></a><strong>操作</strong></h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"database/sql"</span><span class="token string">"fmt"</span><span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span><span class="token string">"log"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">var</span> db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>connect <span class="token operator">:=</span> <span class="token string">"root:123456@tcp(127.0.0.1:3306)/test"</span><span class="token keyword">var</span> err <span class="token builtin">error</span>db<span class="token punctuation">,</span> err <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> connect<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>db<span class="token punctuation">.</span><span class="token function">SetConnMaxLifetime</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">//最大连接存活时间</span>db<span class="token punctuation">.</span><span class="token function">SetMaxOpenConns</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                  <span class="token comment">// 最大连接数</span>db<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                  <span class="token comment">// 最大闲置连接</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Emp <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>emp_no     <span class="token builtin">int</span>birth_date <span class="token builtin">string</span>first_name <span class="token builtin">string</span>last_name  <span class="token builtin">string</span>gender     <span class="token builtin">int</span>hire_date  <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//fmt.Println(db)</span><span class="token keyword">var</span> e Emprow <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span><span class="token string">"select * from employees where emp_no = 10013"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>err <span class="token operator">:=</span> row<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>birth_date<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>gender<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>hire_date<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"select * from employees where emp_no > ?"</span><span class="token punctuation">,</span> <span class="token number">10017</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> e Emperr <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>birth_date<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>gender<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>hire_date<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>驱动安装和导入，例如<code>import _ &quot;github.com/go-sql-driver/mysql&quot;</code></li><li>连接数据库并返回数据库操作句柄，例如 <code>sql.Open(&quot;mysql&quot;,&quot;dujie:123456@tcp(localhost:3306)/test&quot;)</code> </li><li>使用db提供的接口函数</li><li>使用db.Prepare预编译并使用参数化查询<ul><li>对预编译的SQL语句进行缓存，省去了每次解析优化该SQL语句的过程</li><li>防止注入攻击</li><li>使用返回的sql.Stmt操作数据库</li></ul></li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"database/sql"</span><span class="token string">"fmt"</span><span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span><span class="token string">"log"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">var</span> db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>connect <span class="token operator">:=</span> <span class="token string">"root:123456@tcp(127.0.0.1:3306)/test"</span><span class="token keyword">var</span> err <span class="token builtin">error</span>db<span class="token punctuation">,</span> err <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> connect<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>db<span class="token punctuation">.</span><span class="token function">SetConnMaxLifetime</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">//最大连接存活时间</span>db<span class="token punctuation">.</span><span class="token function">SetMaxOpenConns</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                  <span class="token comment">// 最大连接数</span>db<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                  <span class="token comment">// 最大闲置连接</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Emp <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>emp_no     <span class="token builtin">int</span>birth_date <span class="token builtin">string</span>first_name <span class="token builtin">string</span>last_name  <span class="token builtin">string</span>gender     <span class="token builtin">int</span>hire_date  <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//fmt.Println(db)</span><span class="token keyword">var</span> e Emprow <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span><span class="token string">"select * from employees where emp_no = 10013"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>err <span class="token operator">:=</span> row<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>birth_date<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>gender<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>hire_date<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>stmt<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span><span class="token string">"select * from employees where emp_no > ?"</span><span class="token punctuation">)</span>rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> stmt<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token number">10017</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> e Emprows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>birth_date<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>gender<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>hire_date<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="插入、修改、删除"><a href="#插入、修改、删除" class="headerlink" title="插入、修改、删除"></a><strong>插入、修改、删除</strong></h5><p>增删改其实操作都一样，都是通过exec来控制</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"database/sql"</span><span class="token string">"fmt"</span><span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span><span class="token string">"log"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">var</span> db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>connect <span class="token operator">:=</span> <span class="token string">"root:123456@tcp(127.0.0.1:3306)/test"</span><span class="token keyword">var</span> err <span class="token builtin">error</span>db<span class="token punctuation">,</span> err <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> connect<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>db<span class="token punctuation">.</span><span class="token function">SetConnMaxLifetime</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">//最大连接存活时间</span>db<span class="token punctuation">.</span><span class="token function">SetMaxOpenConns</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                  <span class="token comment">// 最大连接数</span>db<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                  <span class="token comment">// 最大闲置连接</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Emp <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>emp_no     <span class="token builtin">int</span>birth_date <span class="token builtin">string</span>first_name <span class="token builtin">string</span>last_name  <span class="token builtin">string</span>gender     <span class="token builtin">int</span>hire_date  <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 增加</span><span class="token comment">//var e Emp</span>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"insert into employees(emp_no,birth_date,first_name,last_name,gender,hire_date) values(10023,'1980-01-01','John','tom',1,'2006-01-02')"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token comment">// 删除</span>    stmt<span class="token punctuation">,</span> errs <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span><span class="token string">"delete from titles where emp_no=?"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>errs<span class="token punctuation">)</span>    <span class="token keyword">if</span> errs <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>errs<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    result<span class="token punctuation">,</span> errd <span class="token operator">:=</span> stmt<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token number">10016</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> errd <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>errd<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token comment">// 修改</span>    result<span class="token punctuation">,</span> erra <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"update titles set title = ? where emp_no=?"</span><span class="token punctuation">,</span> <span class="token string">"dujie"</span><span class="token punctuation">,</span> <span class="token number">10014</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> erra <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>erra<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据库标准开发&quot;&gt;&lt;a href=&quot;#数据库标准开发&quot; class=&quot;headerlink&quot; title=&quot;数据库标准开发&quot;&gt;&lt;/a&gt;数据库标准开发&lt;/h1&gt;&lt;h3 id=&quot;驱动&quot;&gt;&lt;a href=&quot;#驱动&quot; class=&quot;headerlink&quot; title=&quot;驱</summary>
      
    
    
    
    <category term="golang" scheme="http://dycloud.fun/categories/golang/"/>
    
    
    <category term="云原生" scheme="http://dycloud.fun/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    <category term="golang" scheme="http://dycloud.fun/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang日志管理</title>
    <link href="http://dycloud.fun/2023/05/01/Golang%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/"/>
    <id>http://dycloud.fun/2023/05/01/Golang%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/</id>
    <published>2023-05-01T06:32:00.000Z</published>
    <updated>2023-08-30T02:59:55.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h3 id="标准库的log包"><a href="#标准库的log包" class="headerlink" title="标准库的log包"></a><strong>标准库的log包</strong></h3><p>Go标准库中有log包，提供了简单的日志功能。</p><table><thead><tr><th><strong>输出</strong></th><th><strong>格式输出</strong></th><th><strong>换行输出</strong></th><th></th></tr></thead><tbody><tr><td>log.Print()</td><td>log.Printf()</td><td>log.Pringln()</td><td>类似fmt.print*</td></tr><tr><td>log.Fatal()</td><td>log.Fatalf()</td><td>log.Fatalln()</td><td>相当于log.Print* + os.Exit(1)</td></tr><tr><td>log.Panic()</td><td>log.Panicf()</td><td>log.Panicln()</td><td>相当于log.Print* + panic(0</td></tr></tbody></table><p>日志输出需要使用日志记录器Logger。</p><p>log包提供了一个缺省的Logger即std。std是小写的，包外不可见，所以提供了Default()方法返回std给包外使用。如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 这里就是使用缺省的logger对象，可以点进Println查看源码</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"这是缺省的logger"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源码如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// go源码</span><span class="token comment">// Println calls Output to print to the standard logger.</span><span class="token comment">// Arguments are handled in the manner of fmt.Println.</span><span class="token keyword">func</span> <span class="token function">Println</span><span class="token punctuation">(</span>v <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> std<span class="token punctuation">.</span>isDiscard<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>std<span class="token punctuation">.</span><span class="token function">Output</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintln</span><span class="token punctuation">(</span>v<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 再点击std可以查看到，这里有一个默认的std，他的输出是os.Stderr标准错误输出到控制台，flag为LstdFlags</span><span class="token keyword">var</span> std <span class="token operator">=</span> <span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> LstdFlags<span class="token punctuation">)</span><span class="token comment">// Default returns the standard logger used by the package-level output functions.</span><span class="token keyword">func</span> <span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Logger <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> std <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标准库的flag如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 源码41行左右</span><span class="token comment">//2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message</span><span class="token keyword">const</span> <span class="token punctuation">(</span>Ldate         <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token boolean">iota</span>     <span class="token comment">// 1 当前时区日期: 2009/01/23</span>Ltime                         <span class="token comment">// 2 当前时区时间: 01:23:23</span>Lmicroseconds                 <span class="token comment">// 4 微秒: 01:23:23.123123.  assumes Ltime.</span>Llongfile                     <span class="token comment">// 8 绝对路径和行号: /a/b/c/d.go:23</span>Lshortfile                    <span class="token comment">// 16 文件名和行号: d.go:23. overrides Llongfile</span>LUTC                          <span class="token comment">// 32 使用UTC(GMT)，而不是本地时区</span>Lmsgprefix                    <span class="token comment">// 64 默认前缀是放在行首的，这个标记为把前缀prefix放到消息message之前</span>LstdFlags     <span class="token operator">=</span> Ldate <span class="token operator">|</span> Ltime <span class="token comment">// 3 initial values for the standard logger  位或，二进制的01 | 10 = 11 =》十进制3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上表列出的方法底层都使用std.Output输出日志内容。而std本质上是使用了<strong>标准错误输出</strong>、<strong>无前缀</strong>、<strong>LstdFlags 标准标记</strong>的记录器Logger实例</p><h5 id="std使用"><a href="#std使用" class="headerlink" title="std使用"></a><strong>std使用</strong></h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 使用缺省Logger</span>log<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"abcde\n"</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span><span class="token string">"abcd"</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"xyz"</span><span class="token punctuation">)</span> <span class="token comment">// 等价于 log.Print("xyz");os.Exit(1)</span>log<span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span><span class="token string">"xyz"</span><span class="token punctuation">)</span> <span class="token comment">// 等价于 log.Print("xyz");panic()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="自定义Logger"><a href="#自定义Logger" class="headerlink" title="自定义Logger"></a><strong>自定义Logger</strong></h5><p>Go源码</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// multiple goroutines; it guarantees to serialize access to the Writer.</span><span class="token keyword">type</span> Logger <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>mu        sync<span class="token punctuation">.</span>Mutex  <span class="token comment">// ensures atomic writes; protects the following fields</span>prefix    <span class="token builtin">string</span>      <span class="token comment">// prefix on each line to identify the logger (but see Lmsgprefix)</span>flag      <span class="token builtin">int</span>         <span class="token comment">// properties</span>out       io<span class="token punctuation">.</span>Writer   <span class="token comment">// destination for output</span>buf       <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>      <span class="token comment">// for accumulating text to write</span>isDiscard atomic<span class="token punctuation">.</span>Bool <span class="token comment">// whether out == io.Discard</span><span class="token punctuation">&#125;</span><span class="token comment">// New creates a new Logger. The out variable sets the</span><span class="token comment">// destination to which log data will be written.</span><span class="token comment">// The prefix appears at the beginning of each generated log line, or</span><span class="token comment">// after the log header if the Lmsgprefix flag is provided.</span><span class="token comment">// The flag argument defines the logging properties.</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>out io<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> prefix <span class="token builtin">string</span><span class="token punctuation">,</span> flag <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Logger <span class="token punctuation">&#123;</span>l <span class="token operator">:=</span> <span class="token operator">&amp;</span>Logger<span class="token punctuation">&#123;</span>out<span class="token punctuation">:</span> out<span class="token punctuation">,</span> prefix<span class="token punctuation">:</span> prefix<span class="token punctuation">,</span> flag<span class="token punctuation">:</span> flag<span class="token punctuation">&#125;</span><span class="token keyword">if</span> out <span class="token operator">==</span> io<span class="token punctuation">.</span>Discard <span class="token punctuation">&#123;</span>l<span class="token punctuation">.</span>isDiscard<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> l<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果觉得缺省Logger std不满意，可以New构建一个自定义Logger并指定前缀、Flags。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"log"</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"这是缺省的logger"</span><span class="token punctuation">)</span>        infologger <span class="token operator">:=</span> log<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">"Info："</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">|</span>log<span class="token punctuation">.</span>Lmsgprefix<span class="token punctuation">)</span>infologger<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"这是自定义的普通消息"</span><span class="token punctuation">)</span>errLogger <span class="token operator">:=</span> log<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">"Error:"</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span>LstdFlags<span class="token punctuation">)</span>errLogger<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span><span class="token string">"这是一个自定义的错误消息"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>log.New 参数详解：</strong></p><ul><li>1、<code>out io.Writer</code> ：er结尾说明是一个接口，out应该有自己的类型，同时其类型又实现了Writer的所有方法，所以out也可以看做为io.Writer类型的实例，out主要用于写入设备</li><li>2、<code>prefix string</code> ：前缀，用于在日志前面增加一串字符串，可以通过flag参数设置为<code>log.Lmsgprefix</code>将它设置为在message前面</li><li>3、<code>flag int</code> ：确定Logger的工作方式如下：</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 源码41行左右</span><span class="token comment">//2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message</span><span class="token keyword">const</span> <span class="token punctuation">(</span>  <span class="token comment">// 可以做位与、为或</span>Ldate         <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token boolean">iota</span>     <span class="token comment">// 1 当前时区日期: 2009/01/23</span>Ltime                         <span class="token comment">// 2 当前时区时间: 01:23:23</span>Lmicroseconds                 <span class="token comment">// 4 微秒: 01:23:23.123123.  assumes Ltime.</span>Llongfile                     <span class="token comment">// 8 绝对路径和行号: /a/b/c/d.go:23</span>Lshortfile                    <span class="token comment">// 16 文件名和行号: d.go:23. overrides Llongfile</span>LUTC                          <span class="token comment">// 32 使用UTC(GMT)，而不是本地时区</span>Lmsgprefix                    <span class="token comment">// 64 默认前缀是放在行首的，这个标记为把前缀prefix放到消息message之前</span>LstdFlags     <span class="token operator">=</span> Ldate <span class="token operator">|</span> Ltime <span class="token comment">// 3 initial values for the standard logger  位或，二进制的01 | 10 = 11 =》十进制3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/BDP-9YI67K64UgUIaM4LFXWCdmzzRjGhBWuxyga9jSo.png" alt="image"></p><h5 id="写日志文件"><a href="#写日志文件" class="headerlink" title="写日志文件"></a><strong>写日志文件</strong></h5><p>New方法签名<code>func New(out io.Writer, prefix string, flag int) *Logger</code> 中out参数提供Writer接口即可，那么就可以提供一个可写文件对象</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"log"</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// os.Open为只读打开，OpenFile按照指定方式打开文件</span>file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Administrator\\Desktop\\test.txt"</span><span class="token punctuation">,</span>         os<span class="token punctuation">.</span>O_APPEND<span class="token operator">|</span>os<span class="token punctuation">.</span>O_WRONLY<span class="token punctuation">,</span> <span class="token comment">// 追加| 只写</span>         <span class="token number">777</span><span class="token punctuation">)</span>  <span class="token comment">// 权限为777</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 使用结束关闭文件句柄</span>logger <span class="token operator">:=</span> log<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">"Info："</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"这是一条测试的日志"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ZeroLog"><a href="#ZeroLog" class="headerlink" title="ZeroLog"></a><strong>ZeroLog</strong></h3><p>log模块太简陋了，实际使用并不方便。</p><ul><li>logrus有日志级别、Hook机制、日志输出格式，很好用</li><li>zap是Uber的开源高性能日志库</li><li>zerolog更注重开发体验，高性能、有日志级别、链式API，json格式记录，号称0内存分配</li></ul><p>官网： <a href="https://zerolog.io/">https://zerolog.io/</a></p><p>安装 </p><pre class="line-numbers language-Plain" data-language="Plain"><div class="caption"><span>Text</span></div><code class="language-Plain">go get -u github.com&#x2F;rs&#x2F;zerolog&#x2F;log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="缺省Logger"><a href="#缺省Logger" class="headerlink" title="缺省Logger"></a><strong>缺省Logger</strong></h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"github.com/rs/zerolog"</span><span class="token string">"github.com/rs/zerolog/log"</span><span class="token string">"os"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>zerolog<span class="token punctuation">.</span>TimeFieldFormat <span class="token operator">=</span> <span class="token string">"2006/01/02 15:04:05 -0700"</span>log<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"这是zerolog的默认消息"</span><span class="token punctuation">)</span> <span class="token comment">// 使用全局缺省logger</span><span class="token comment">// 输出&#123;"level":"debug","time":"2023/07/23 13:55:05 +0800","message":"这是zerolog的默认消息"&#125;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>log.Print 产生debug级别的消息，zerolog源码117行左右</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Print sends a log event using debug level and no extra field.</span><span class="token comment">// Arguments are handled in the manner of fmt.Print.</span><span class="token keyword">func</span> <span class="token function">Print</span><span class="token punctuation">(</span>v <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Logger<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CallerSkipFrame</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprint</span><span class="token punctuation">(</span>v<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 源码13行左右，定义了一个全局导出的缺省Logger，使用链式调用，缺省Logger使用标准错误输出</span><span class="token keyword">var</span> Logger <span class="token operator">=</span> zerolog<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>log.Print()、log.Printf()方法使用方式和标准库log模块类似</p><h5 id="级别"><a href="#级别" class="headerlink" title="级别"></a><strong>级别</strong></h5><p>zerolog提供以下级别，tracelevel级别最低-1</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// zerolog源码112行</span><span class="token keyword">type</span> Level <span class="token builtin">int8</span><span class="token keyword">const</span> <span class="token punctuation">(</span><span class="token comment">// DebugLevel defines debug log level.</span>DebugLevel Level <span class="token operator">=</span> <span class="token boolean">iota</span>     <span class="token number">0</span><span class="token comment">// InfoLevel defines info log level.</span>InfoLevel    <span class="token number">1</span><span class="token comment">// WarnLevel defines warn log level.</span>WarnLevel    <span class="token number">2</span><span class="token comment">// ErrorLevel defines error log level.</span>ErrorLevel   <span class="token number">3</span><span class="token comment">// FatalLevel defines fatal log level.</span>FatalLevel   <span class="token number">4</span><span class="token comment">// PanicLevel defines panic log level.</span>PanicLevel   <span class="token number">5</span><span class="token comment">// NoLevel defines an absent log level.</span>NoLevel      <span class="token number">6</span><span class="token comment">// Disabled disables the logger.</span>Disabled     <span class="token number">7</span><span class="token comment">// TraceLevel defines trace log level.</span>TraceLevel Level <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token comment">// Values less than TraceLevel are handled as numbers.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>级别有</p><ul><li>gLevel全局级别<ul><li><code>zerolog.SetGlobalLevel(级别数字或常量)</code> 来设置全局级别</li><li><code>zerolog.GlobalLevel()</code> 获取当前全局级别</li></ul></li><li>每个Logger的级别</li><li>消息的级别</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"github.com/rs/zerolog"</span><span class="token string">"github.com/rs/zerolog/log"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"全局级别的glevel为："</span><span class="token punctuation">,</span> zerolog<span class="token punctuation">.</span><span class="token function">GlobalLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"缺省logger的级别为："</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">GetLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log1 <span class="token operator">:=</span> log<span class="token punctuation">.</span><span class="token function">Level</span><span class="token punctuation">(</span>zerolog<span class="token punctuation">.</span>WarnLevel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"log1的级别为"</span><span class="token punctuation">,</span> log1<span class="token punctuation">.</span><span class="token function">GetLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"缺省logger输出trace级别消息"</span><span class="token punctuation">)</span> <span class="token comment">// 可以输出</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"缺省logger输出info级别消息"</span><span class="token punctuation">)</span> <span class="token comment">// 可以输出</span>log<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"缺省logger输出warn级别消息"</span><span class="token punctuation">)</span> <span class="token comment">// 可以输出</span>log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"缺省logger输出error级别消息"</span><span class="token punctuation">)</span> <span class="token comment">// 可以输出</span><span class="token comment">//log.Fatal().Msg("缺省logger输出fatal级别消息") </span><span class="token comment">//log.Panic().Msg("缺省logger输出panic级别消息")</span>log1<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"log1输出debug级别消息"</span><span class="token punctuation">)</span> <span class="token comment">// 输出不了，因为log1的消息级别为debug，小于log1的级别warn</span>log1<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"log1输出error级别消息"</span><span class="token punctuation">)</span> <span class="token comment">// 可以输出，因为log1的消息级别为error，大于log1的级别warn</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，使用缺省logger，全部可以输出日志消息，而log1的24行可以输出，23行不能输出，<strong>因为有消息级别和Logger级别</strong></p><p>log1的级别为warn，而log1.Debug()输出的消息级别为debug级别0，消息级别小于log1级别，所以消息不能输出。log1.Error()产生error消息，消息级别 大于等于log1级别的warn，因此可以输出消息。</p><p>而缺省的Logger级别为trace，任何消息级别都大于等于缺省的logger的级别，因此都可以输出</p><p>下面可以调整全局级别看一看</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"github.com/rs/zerolog"</span><span class="token string">"github.com/rs/zerolog/log"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>zerolog<span class="token punctuation">.</span><span class="token function">SetGlobalLevel</span><span class="token punctuation">(</span>zerolog<span class="token punctuation">.</span>ErrorLevel<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"全局级别的glevel为："</span><span class="token punctuation">,</span> zerolog<span class="token punctuation">.</span><span class="token function">GlobalLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"缺省logger的级别为："</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">GetLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log1 <span class="token operator">:=</span> log<span class="token punctuation">.</span><span class="token function">Level</span><span class="token punctuation">(</span>zerolog<span class="token punctuation">.</span>WarnLevel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 创建一个子logger</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"log1的级别为"</span><span class="token punctuation">,</span> log1<span class="token punctuation">.</span><span class="token function">GetLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"缺省logger输出trace级别消息"</span><span class="token punctuation">)</span> <span class="token comment">// 不能输出</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"缺省logger输出info级别消息"</span><span class="token punctuation">)</span>   <span class="token comment">// 不能输出</span>log<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"缺省logger输出warn级别消息"</span><span class="token punctuation">)</span>   <span class="token comment">// 不能输出</span>log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"缺省logger输出error级别消息"</span><span class="token punctuation">)</span> <span class="token comment">// 可以输出</span><span class="token comment">//log.Fatal().Msg("缺省logger输出fatal级别消息")</span><span class="token comment">//log.Panic().Msg("缺省logger输出panic级别消息")</span>log1<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"log1输出warn级别消息"</span><span class="token punctuation">)</span> <span class="token comment">// 输出不了，因为log1的消息级别为debug，虽然等于log1的级别warn，但是小于全局的glevel的error级别，所以还是输出不了</span>log1<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"log1输出error级别消息"</span><span class="token punctuation">)</span> <span class="token comment">// 可以输出，因为log1的消息级别为error，大于log1的级别warn，且等于全局的glevel的error级别，所以可以输出</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出</span>全局级别的glevel为： <span class="token builtin">error</span>缺省logger的级别为： tracelog1的级别为 warn~~~~~~~~~~~~~~~~<span class="token punctuation">&#123;</span><span class="token string">"level"</span><span class="token punctuation">:</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"time"</span><span class="token punctuation">:</span><span class="token string">"2023-07-23T14:22:39+08:00"</span><span class="token punctuation">,</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"缺省logger输出error级别消息"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">"level"</span><span class="token punctuation">:</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"time"</span><span class="token punctuation">:</span><span class="token string">"2023-07-23T14:22:39+08:00"</span><span class="token punctuation">,</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"log1输出error级别消息"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缺省logger和log1都只有error级别的输出，说明将glevel调整到error级别后，所有logger输出消息必须大于等于glevel。</p><p><strong>特别注意：zerolog.SetGlobalLevel()设置的是全局变量gLevel，它影响所有的Logger</strong></p><p>所以我们得出以下公式：</p><p>日志消息是否能够输出，应当满足下面的要求：<code>消息级别 &gt;= max(全局glevel,当前logger的level)</code></p><pre class="line-numbers language-go" data-language="go"><code class="language-go">zerolog<span class="token punctuation">.</span><span class="token function">SetGlobalLevel</span><span class="token punctuation">(</span>zerolog<span class="token punctuation">.</span>Disabled<span class="token punctuation">)</span><span class="token comment">// zerolog.Disabled 为7，没有消息级别可以大于等于7，相当于禁用所有的Logger，自然不能够输出。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a><strong>上下文</strong></h5><p>zerolog是以Json对象格式输出的，还可以自定义一些键值对字段增加到上下文中以输出</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"github.com/rs/zerolog"</span><span class="token string">"github.com/rs/zerolog/log"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Name <span class="token builtin">string</span> <span class="token string">`json:"name"`</span>Age  <span class="token builtin">int</span>    <span class="token string">`json:"age"`</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> all <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>all <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>all<span class="token punctuation">,</span> Person<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"name%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>zerolog<span class="token punctuation">.</span><span class="token function">SetGlobalLevel</span><span class="token punctuation">(</span>zerolog<span class="token punctuation">.</span>InfoLevel<span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Bool</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Str</span><span class="token punctuation">(</span><span class="token string">"Reason"</span><span class="token punctuation">,</span> <span class="token string">"File Not Found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"文件没有找到"</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Str</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Floats32</span><span class="token punctuation">(</span><span class="token string">"Scores"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float32</span><span class="token punctuation">&#123;</span><span class="token number">62.3</span><span class="token punctuation">,</span> <span class="token number">99.3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> all<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> all<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"测试啊啊啊"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a><strong>错误日志</strong></h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"errors"</span><span class="token string">"github.com/rs/zerolog"</span><span class="token string">"github.com/rs/zerolog/log"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Name <span class="token builtin">string</span> <span class="token string">`json:"name"`</span>Age  <span class="token builtin">int</span>    <span class="token string">`json:"age"`</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>zerolog<span class="token punctuation">.</span>TimeFieldFormat <span class="token operator">=</span> zerolog<span class="token punctuation">.</span>TimeFormatUnix <span class="token comment">// 自定义time字段时间的格式，TimeFormatUnix时间戳</span>zerolog<span class="token punctuation">.</span>ErrorFieldName <span class="token operator">=</span> <span class="token string">"err"</span>                   <span class="token comment">// 修改日志Json中的缺省字段名error</span><span class="token comment">// 错误日志</span>err <span class="token operator">:=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"自定义错误"</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token comment">// err 字段，错误消息内容</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 有错误消息了，message可以省略</span><span class="token comment">//log.Fatal().Err(err).Send()</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出</span><span class="token punctuation">&#123;</span><span class="token string">"level"</span><span class="token punctuation">:</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"err"</span><span class="token punctuation">:</span><span class="token string">"自定义错误"</span><span class="token punctuation">,</span><span class="token string">"time"</span><span class="token punctuation">:</span><span class="token number">1690095612</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">"level"</span><span class="token punctuation">:</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token string">"time"</span><span class="token punctuation">:</span><span class="token number">1690095612</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="全局Logger"><a href="#全局Logger" class="headerlink" title="全局Logger"></a><strong>全局Logger</strong></h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 全局Logger定义如下</span><span class="token keyword">var</span> Logger <span class="token operator">=</span> zerolog<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以覆盖全局Logger</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">log<span class="token punctuation">.</span>Logger <span class="token operator">=</span> log<span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Str</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">,</span> <span class="token string">"2020-01-02 15:04"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="自定义Logger-1"><a href="#自定义Logger-1" class="headerlink" title="自定义Logger"></a><strong>自定义Logger</strong></h5><pre class="line-numbers language-go" data-language="go"><code class="language-go">zerolog<span class="token punctuation">.</span>TimeFieldFormat <span class="token operator">=</span> <span class="token string">"2006-01-02 15:04:05"</span>logger <span class="token operator">:=</span> log<span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Str</span><span class="token punctuation">(</span><span class="token string">"School"</span><span class="token punctuation">,</span> <span class="token string">"magedu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Caller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token comment">// 增加日志调用的位置信息字段</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 返回logger</span>logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 输出</span><span class="token punctuation">&#123;</span><span class="token string">"level"</span><span class="token punctuation">:</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token string">"School"</span><span class="token punctuation">:</span><span class="token string">"magedu"</span><span class="token punctuation">,</span><span class="token string">"time"</span><span class="token punctuation">:</span><span class="token string">"2023-07-23 15:05:23"</span><span class="token punctuation">,</span><span class="token string">"caller"</span><span class="token punctuation">:</span><span class="token string">"C:/Users/Administrator/GolandProjects/awesomeProject/hello.go:29"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">"level"</span><span class="token punctuation">:</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token string">"time"</span><span class="token punctuation">:</span><span class="token string">"2023-07-23 15:05:23"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go">zerolog<span class="token punctuation">.</span>TimeFieldFormat <span class="token operator">=</span> <span class="token string">"2006-01-02 15:04:05"</span>logger <span class="token operator">:=</span> zerolog<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Caller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Level</span><span class="token punctuation">(</span>zerolog<span class="token punctuation">.</span>InfoLevel<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">GetLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="写日志文件-1"><a href="#写日志文件-1" class="headerlink" title="写日志文件"></a><strong>写日志文件</strong></h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"github.com/rs/zerolog"</span><span class="token string">"github.com/rs/zerolog/log"</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>zerolog<span class="token punctuation">.</span>TimeFieldFormat <span class="token operator">=</span> zerolog<span class="token punctuation">.</span>TimeFormatUnix <span class="token comment">// 自定义time字段时间的格式，TimeFormatUnix时间戳</span>zerolog<span class="token punctuation">.</span>ErrorFieldName <span class="token operator">=</span> <span class="token string">"err"</span>                   <span class="token comment">// 修改日志Json中的缺省字段名error</span>file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"fuck.log"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_APPEND<span class="token operator">|</span>os<span class="token punctuation">.</span>O_WRONLY<span class="token punctuation">,</span> os<span class="token punctuation">.</span>ModePerm<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"open file error"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>levelwrite <span class="token operator">:=</span> zerolog<span class="token punctuation">.</span><span class="token function">MultiLevelWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> os<span class="token punctuation">.</span>Stderr<span class="token punctuation">)</span>logger <span class="token operator">:=</span> zerolog<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>levelwrite<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"日志写入到文件同时在控制台打印"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果只输出到文件可以使用<code>zerolog.New(f).With().Timestamp().Logger()</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;日志&quot;&gt;&lt;a href=&quot;#日志&quot; class=&quot;headerlink&quot; title=&quot;日志&quot;&gt;&lt;/a&gt;日志&lt;/h1&gt;&lt;h3 id=&quot;标准库的log包&quot;&gt;&lt;a href=&quot;#标准库的log包&quot; class=&quot;headerlink&quot; title=&quot;标准库的log包&quot;</summary>
      
    
    
    
    <category term="golang" scheme="http://dycloud.fun/categories/golang/"/>
    
    
    <category term="云原生" scheme="http://dycloud.fun/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    <category term="golang" scheme="http://dycloud.fun/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang包管理</title>
    <link href="http://dycloud.fun/2023/04/25/golang%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    <id>http://dycloud.fun/2023/04/25/golang%E5%8C%85%E7%AE%A1%E7%90%86/</id>
    <published>2023-04-25T06:32:00.000Z</published>
    <updated>2023-08-30T03:21:51.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h1><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>用任何语言来开发，如果软件规模扩大，会编写大量的函数、结构体、接口等代码。这些代码不可能写在一个文件中，这就会产生大量的文件。如果这些文件杂乱无章，就会造成名称冲突、重复定义、难以检索、无法引用、共享不便、版本管理等一系列问题。有一些功能模块如何复用，如何共享方便其他项目使用。所以，一定要有模块化管理，解决以上诸多问题。</p><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><ul><li>包由多个文件和目录组成</li><li>使用<code>package&lt;包名&gt;</code> 来定义包名</li><li>包名一般采用小写，符合标识符要求</li><li>当前目录名和<code>package&lt;包名&gt;</code> 中的包名不需要一致，但最好保持一致</li><li><strong>同级文件归属一个包</strong>，就是说每个包目录中，只能统一使用同一个package的包名，否则编译出错</li></ul><p>一般来说，开发项目时，可以吧相关功能的代码集中放在某几个包里面。例如在main包目录中新建一个calc包，将所有计算函数都放在其中，以供别的代码调用。</p><p>同一个目录就是同一个包，该包内go文件里面的变量、函数、结构体互相可见，可以直接调用。</p><p>跨目录就是跨包，使用时需要导入别的包，导入需要指定该包的路径，</p><h3 id="包管理-1"><a href="#包管理-1" class="headerlink" title="包管理"></a>包管理</h3><h5 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h5><p>Go 1.11版本之前，项目依赖包存于GOPATH。GOPATH是一个环境变量，指向一个目录，其中存放项目依赖包的源码。</p><p>GOPATH缺省值是 <code>家目录/go </code>。</p><p>开发的代码放在 <code>GOPATH/src </code>目录中，编译这个目录的代码，生成的二进制文件放到 <code>GOPATH/bin</code> 目录下。</p><p>这会有以下问题</p><ul><li><p>GOPATH不区分项目，代码中任何import的路径均从GOPATH作为根目录开始。如果有多个项目，不同项目依赖不同库的不同版本，这就很难解决了</p></li><li><p>所有项目的依赖都放在GOPATH中，很难知道当前项目的依赖项是哪些</p></li></ul><h5 id="GOPATH-vendor机制"><a href="#GOPATH-vendor机制" class="headerlink" title="GOPATH + vendor机制"></a>GOPATH + vendor机制</h5><p>Go 1.5引入vendor机制。</p><p>vendor：将项目依赖包复制到项目下的vendor目录，在编译时使用项目下的vendor目录的包进行编译。</p><p>依然不能解决不同项目依赖不同包版本问题</p><p>包搜索顺序</p><ul><li>在当前包vendor目录查找</li><li>向上级目录查找，直到GOPATH&#x2F;src&#x2F;vendor目录</li><li>在GOPATH目录查找</li><li>在GOROOT目录查找标准库</li></ul><h5 id="Go-Modules"><a href="#Go-Modules" class="headerlink" title="Go Modules"></a>Go Modules</h5><p>Go Modules是从Go 1.11版本引入，到1.13版本之后已经成熟，Go Modules成为官方的依赖包管理解决方案。</p><p>优势：</p><ul><li>不受GOPATH限制，代码可放在任意目录</li><li>自动管理和下载依赖，且可以控制使用版本</li><li>不允许使用相对导入</li></ul><p>####### GO111MODULE配置<br>GO111MODULE控制Go Module模式是否开启，有off、on、auto（默认）三个值，auto是默认值。</p><ul><li>GO111MODULE&#x3D;on ，支持模块，Go会忽略GOPATH和vendor目录，只根据go.mod下载依赖，在<code>$GOPATH/pkg/mod</code>目录搜索依赖包。<ul><li>Go 1.13后默认开启</li><li>目前开发已经使用了1.17+版本，可以不配置，默认直接开启</li></ul></li><li>GO111MODULE&#x3D;off ，不支持模块，Go会从GOPATH和vendor目录寻找包</li><li>GO111MODULE&#x3D;auto ，在 $GOPATH&#x2F;src 外面构建项目且根目录有go.mod文件时，开启模块支持。否则使用GOPATH和vendor机制</li></ul><p>GOPROXY环境变量可以指定包下载镜像（镜像地址有时会变化，请参照官方最新文档）</p><ul><li>GOPROXY&#x3D;<a href="https://goproxy.cn,direct/">https://goproxy.cn,direct</a></li><li>GOPROXY&#x3D;<a href="https://mirrors.aliyun.com/goproxy/">https://mirrors.aliyun.com/goproxy/</a></li><li>GOPROXY&#x3D;<a href="https://mirrors.cloud.tencent.com/go/">https://mirrors.cloud.tencent.com/go/</a></li><li>GOPROXY&#x3D;<a href="https://repo.huaweicloud.com/repository/goproxy/">https://repo.huaweicloud.com/repository/goproxy/</a></li></ul><h3 id="Module-模式"><a href="#Module-模式" class="headerlink" title="Module 模式"></a>Module 模式</h3><h6 id="go-mod命令"><a href="#go-mod命令" class="headerlink" title="go mod命令"></a>go mod命令</h6><p>在Go1.11开始引入，可以在任何目录使用go.mod 构建项目</p><ul><li>init当前文件夹下初始化一个新的module，创建go.mod文件</li><li>tidy自动分析依赖，下载缺失的模块，移除未使用的模块，并更新go.mod 文件</li></ul><p><code>go mod vendor</code> 把第三方依赖包复制到项目的vendor目录中，就可以离线使用该依赖包编译</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> mod init test <span class="token keyword">go</span> mod tidy <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="构建Module模式项目"><a href="#构建Module模式项目" class="headerlink" title="构建Module模式项目"></a>构建Module模式项目</h6><p>构建项目根目录magtools，并初始化模块<code> go mod init magedu.com/tools</code>，会产生go.mod 文件，内容如下</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">module magedu<span class="token punctuation">.</span>com<span class="token operator">/</span>tools<span class="token keyword">go</span> <span class="token number">1.19</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>module指定模块名称</li><li>go 指定当前模块使用的go版本</li></ul><p>根目录下新建main.go ，内容如下</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello magedu.com"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>package 指定包名，同一个目录包名必须相同</li><li>import导入包。这里要使用绝对导入，且fmt是标准库中的包<ul><li>标准库搜索<code>$GOROOT/src</code></li></ul></li><li>main函数，必须在main包中，且只能有一个main函数。如果要编译成可执行文件，必须要有main函数</li></ul><h5 id="导入子包"><a href="#导入子包" class="headerlink" title="导入子包"></a>导入子包</h5><p>构建本地子包calc，其下创建calc.go</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> calc<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x and y in calc. Add:%d %d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如何在main.go中使用子包的函数Add呢？</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"./calc"</span> <span class="token comment">// 相对导入，不推荐，会发生错误</span><span class="token keyword">import</span> <span class="token string">"magedu.com/tools/calc"</span> <span class="token comment">// 正确，Local Package本地包需要使用Module名/子包路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果在calc下再创建minux&#x2F;minus.go</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> minus<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">Minus</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x and y in calc/minus.Minus: %d, %d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">return</span> x <span class="token operator">-</span> y <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么main.go中就要如下导入</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span> <span class="token string">"magedu.com/tools/calc"</span>    <span class="token string">"magedu.com/tools/calc/minus"</span>    <span class="token comment">// m "magedu.com/tools/calc/minus"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>calc<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>minus<span class="token punctuation">.</span><span class="token function">Minus</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// fmt.Println(m.Minus(22, 33))</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello magedu.com"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>项目目录结构</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">📦magtools┣ 📂calc┃ ┣ 📂minus┃ ┃ ┗ 📜minus<span class="token punctuation">.</span><span class="token keyword">go</span>┃ ┗ 📜calc<span class="token punctuation">.</span><span class="token keyword">go</span>┣ 📜<span class="token keyword">go</span><span class="token punctuation">.</span>mod┗ 📜main<span class="token punctuation">.</span><span class="token keyword">go</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="import关键字"><a href="#import关键字" class="headerlink" title="import关键字"></a>import关键字</h5><p>1、绝对导入</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span> <span class="token string">"magedu.com/tools/calc"</span> <span class="token string">"magedu.com/tools/calc/minus"</span><span class="token punctuation">)</span><span class="token comment">// 使用举例</span>calc<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>minus<span class="token punctuation">.</span><span class="token function">Minus</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、别名导入</p><p>如果有两个导入的包冲突时，可以重命名包来避免冲突’</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> m <span class="token string">"magedu.com/tools/calc/minus"</span><span class="token comment">// 使用举例</span>m<span class="token punctuation">.</span><span class="token function">Minus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、相对导入</p><p>不建议使用</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"./calc"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、点导入</p><p>不推荐使用</p><p>把包内所有导出的成员直接导入到本地，很少使用，很有可能导入的标识符导致冲突。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">.</span> <span class="token string">"magedu.com/tools/calc/minus"</span><span class="token comment">// 使用举例</span><span class="token function">Minus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>go-staticcheck对于点导入会有警告， <code>should not use dot imports (ST1001)go-staticcheck</code> 。参看 should not use dot imports (ST1001)go-staticcheck。</p><p>5、匿名导入</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token boolean">_</span> <span class="token string">"magedu.com/tools/calc/minus"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用下划线作为别名，就意味着无法使用了，那其目的所在？</p><p>这种情况下，只能执行导入的保内的所有init函数了。主要作用是做包的初始化用。</p><h5 id="init函数"><a href="#init函数" class="headerlink" title="init函数"></a>init函数</h5><ul><li>init函数，无参无返回值，不能被其他函数调用</li><li>包中的init函数将在main函数之前自动执行</li><li>每个包中init函数可以有多个，且可以位于不同的文件中</li><li>一个文件中至多有一个init函数</li><li>同一个包中的init函数没有明确的执行顺序，不可预期</li><li>不同包的init函数的执行顺序由导入顺序决定</li></ul><p>init函数主要是做一些初始化工作。但是由于同一个包里面init函数执行顺序不可预期，所以除非有必要，不要在同一个包里面定义多个init。init和main函数不一定在同一个文件中。</p><p><code>import _ &quot;xxx&quot;</code> 作用是什么？只执行该包的init函数，无法使用包内资源。</p><p><code>import &quot;xxx&quot;</code> 作用是什么？也会执行该包的init函数，也可以使用包内资源</p><h5 id="导入第三方包"><a href="#导入第三方包" class="headerlink" title="导入第三方包"></a>导入第三方包</h5><p>在 <a href="https://pkg.go.dev/">https://pkg.go.dev/ </a>查找包Beego</p><p>下载</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u  github<span class="token punctuation">.</span>com<span class="token operator">/</span>astaxie<span class="token operator">/</span>beego<span class="token keyword">go</span> mod tidy  <span class="token comment">// 自动下载缺失的包，并清除不使用的包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>main.go</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span> <span class="token string">"magedu.com/tools/calc"</span> m <span class="token string">"magedu.com/tools/calc/minus"</span>  <span class="token string">"github.com/astaxie/beego"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello magedu"</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>calc<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">Minus</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> beego<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三方依赖包搜索 <code>$GOPATH/pkg/mod</code> </p><p>go.mod中</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">require github<span class="token punctuation">.</span>com<span class="token operator">/</span>astaxie<span class="token operator">/</span>beego v1<span class="token punctuation">.</span><span class="token number">12.3</span>省略很多的间接依赖<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>拉取模块依赖后，会发现多出了一个 go.sum 文件，其详细罗列了当前项目直接或间接依赖的所有模块版本，并写明了那些模块版本的 SHA-256 哈希值以备 Go 在今后的操作中保证项目所依赖的那些模块版本不会被篡改</p><p>指令说明</p><ul><li>参考：<a href="https://golang.google.cn/ref/mod#go-mod-file-require"> https://golang.google.cn/ref/mod#go-mod-file-require</a></li><li>require：用于设置一个特定的模块版本<ul><li>&#x2F;&#x2F; indirect：该注释表示该模块为间接依赖，也就是在当前应用程序中的import语句中，并没有发现这个模块的明确引用，有可能是你先手动go get拉取下来的，也有可能是你所依赖的模块依赖的</li></ul></li><li>exclude：用于从使用中排除一个特定的模块版本</li><li>replace：用于将一个模块版本替换为另一个模块版本</li></ul><h5 id="导入本地其他项目"><a href="#导入本地其他项目" class="headerlink" title="导入本地其他项目"></a>导入本地其他项目</h5><p>把calc挪到本地其他目录中，如何导入呢？例如把calc包挪到0:&#x2F;callc，同时在calc目录使用<code>go mod init ccc</code> ，打开增加的go.mod ，内容如下</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">module ccc<span class="token keyword">go</span> <span class="token number">1.19</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>main.go中的导入和使用如下</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span> c <span class="token string">"tools/ttt"</span> <span class="token comment">// 故意随便写了一个包路径</span> <span class="token comment">// 由于包路径的最后一段是ttt，而calc/calc.go里面是package calc，路径和包名不一</span>样，所以要用别名 <span class="token string">"tools/ttt/minus"</span> <span class="token comment">// 上面的子包</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>minus<span class="token punctuation">.</span><span class="token function">Minus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello magedu.com"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还需要手动在go.mod 中增加</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">module magedu<span class="token punctuation">.</span>com<span class="token operator">/</span>tools<span class="token keyword">go</span> <span class="token number">1.19</span>require <span class="token punctuation">(</span>    tools<span class="token operator">/</span>ttt v0<span class="token punctuation">.</span><span class="token number">0.0</span> <span class="token comment">// 指定伪版本号，满足格式要求</span><span class="token punctuation">)</span>replace  tools<span class="token operator">/</span>ttt <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"o:/calc"</span> <span class="token comment">// replace指令指定包搜索路径，而不是去GOPATH/pkg/mod</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，如果报错 reading o:\calc\go.mod: open o:\calc\go.mod: The system cannot find</p><p>the file specified. ，说明calc中没有go.mod文件，只需要打开calc目录，使用 go mod init xxx即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;包管理&quot;&gt;&lt;a href=&quot;#包管理&quot; class=&quot;headerlink&quot; title=&quot;包管理&quot;&gt;&lt;/a&gt;包管理&lt;/h1&gt;&lt;h3 id=&quot;模块化&quot;&gt;&lt;a href=&quot;#模块化&quot; class=&quot;headerlink&quot; title=&quot;模块化&quot;&gt;&lt;/a&gt;模块化&lt;/h</summary>
      
    
    
    
    <category term="golang" scheme="http://dycloud.fun/categories/golang/"/>
    
    
    <category term="云原生" scheme="http://dycloud.fun/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    <category term="golang" scheme="http://dycloud.fun/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang时间操作</title>
    <link href="http://dycloud.fun/2023/04/22/Golang%E6%97%B6%E9%97%B4/"/>
    <id>http://dycloud.fun/2023/04/22/Golang%E6%97%B6%E9%97%B4/</id>
    <published>2023-04-22T06:32:00.000Z</published>
    <updated>2023-08-30T02:58:21.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h1><p>在Go语言中，时间定义为Time结构体。 </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> t <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token comment">// time.Time</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v %+[1]v\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token comment">// 2022-10-06 19:35:00.1963422 +0800 CST m=+0.001534601</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token comment">// time.Date(2022, time.October, 6, 19, 35, 0, </span><span class="token number">196342200</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Local<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T, %[1]v\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">UTC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// UTC时间</span><span class="token comment">// time.Time, 2022-10-06 11:35:00.1963422 +0000 UTC</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>m&#x3D;+0.001530201为单调时间，利用的是晶体振荡器的间隔时间，很多时间函数计算都舍弃了它。如果不是非常精准的时间间隔计算，请忽略它。</p><h3 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> t <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T, %[1]v\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"0102 030405 06 pm -0700"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">UTC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"0102 030405 06 pm"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>记住一个字符串”010203040506pm-0700”，即 1月2日下午3点4分5秒06年西7区 ，改成我们习惯的格式符 2006&#x2F;01&#x2F;02 15:04:05 -0700 ，也不是特别好记，那就背吧。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>pkg<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">.</span>dev<span class="token operator">/</span>time#pkg<span class="token operator">-</span>constantsYear<span class="token punctuation">:</span> <span class="token string">"2006"</span> <span class="token string">"06"</span>Month<span class="token punctuation">:</span> <span class="token string">"Jan"</span> <span class="token string">"January"</span> <span class="token string">"01"</span> <span class="token string">"1"</span>Day of the week<span class="token punctuation">:</span> <span class="token string">"Mon"</span> <span class="token string">"Monday"</span>Day of the month<span class="token punctuation">:</span> <span class="token string">"2"</span> <span class="token string">"_2"</span> <span class="token string">"02"</span> <span class="token number">2</span>不补位；_2补空格；<span class="token number">02</span>不够补<span class="token number">0</span>Day of the year<span class="token punctuation">:</span> <span class="token string">"__2"</span> <span class="token string">"002"</span>Hour<span class="token punctuation">:</span> <span class="token string">"15"</span> <span class="token string">"3"</span> <span class="token string">"03"</span> <span class="token punctuation">(</span>PM or AM<span class="token punctuation">)</span> 如果写<span class="token number">3</span>或<span class="token number">03</span>显示为<span class="token number">12</span>小时制；<span class="token number">15</span>显示为<span class="token number">24</span>小时制Minute<span class="token punctuation">:</span> <span class="token string">"4"</span> <span class="token string">"04"</span>Second<span class="token punctuation">:</span> <span class="token string">"5"</span> <span class="token string">"05"</span>AM<span class="token operator">/</span>PM mark<span class="token punctuation">:</span> <span class="token string">"PM"</span><span class="token string">"-0700"</span> ±hhmm 时区<span class="token number">0</span>或<span class="token number">9</span>匹配小数部分 格式化时，<span class="token number">0</span>或<span class="token number">9</span>表示小数部分位数，<span class="token number">0</span>超出部分补<span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span>超出部分不补<span class="token number">0</span><span class="token keyword">var</span> t <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T, %[1]v\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006/01/02 15:04:05 -0700"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 带时区</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">UTC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006/01/02 15:04:05.0000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 不带时区</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="时间解析"><a href="#时间解析" class="headerlink" title="时间解析"></a>时间解析</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> t<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span> <span class="token string">"2006/01/02 15:04:05 -0700"</span><span class="token punctuation">,</span> <span class="token comment">// 格式字符串</span> <span class="token string">"2008/09/08 20:36:50 +0800"</span><span class="token punctuation">,</span> <span class="token comment">// 时间字符串</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token comment">// 2008-09-08 20:36:50 +0800 CST</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带小数部分解析</p><ul><li><code>.0</code> 解析时，0的位数必须和字符串中的小数部分完全一致，否则失败</li><li><code>.9</code> 解析时，可以匹配任意位数小数部分，包括没有小数部分</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go">time<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span> <span class="token string">"2006/01/02 15:04:05.000000 -0700"</span><span class="token punctuation">,</span> <span class="token comment">// 格式字符串</span> <span class="token string">"2008/09/08 20:36:50.123456 +0800"</span><span class="token punctuation">,</span> <span class="token comment">// 时间字符串</span> <span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span> <span class="token string">"2006/01/02 15:04:05.9 -0700"</span><span class="token punctuation">,</span>      <span class="token comment">// 格式字符串</span> <span class="token string">"2008/09/08 20:36:50.123456 +0800"</span><span class="token punctuation">,</span> <span class="token comment">// 时间字符串</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="时间属性"><a href="#时间属性" class="headerlink" title="时间属性"></a>时间属性</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 月份的定义</span><span class="token keyword">type</span> Month <span class="token builtin">int</span><span class="token keyword">const</span> <span class="token punctuation">(</span> January Month <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token boolean">iota</span> February March April May June July August September October November December<span class="token punctuation">)</span><span class="token comment">// 可以看出月份是1到12的整数</span><span class="token keyword">type</span> Weekday <span class="token builtin">int</span><span class="token keyword">const</span> <span class="token punctuation">(</span> Sunday Weekday <span class="token operator">=</span> <span class="token boolean">iota</span> Monday Tuesday Wednesday Thursday Friday Saturday<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> t<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span> <span class="token string">"2006/01/02 15:04:05 -0700"</span><span class="token punctuation">,</span> <span class="token comment">// 格式字符串</span> <span class="token string">"2008/09/08 20:36:50 +0800"</span><span class="token punctuation">,</span> <span class="token comment">// 时间字符串</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 2008-09-08 20:36:50 +0800 CST</span> <span class="token comment">// 时间戳</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">UnixMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">UnixMicro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 年月日</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span> t<span class="token punctuation">.</span><span class="token function">Year</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Month</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Month</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Day</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">YearDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// YearDay本年的第几天</span> <span class="token punctuation">)</span> <span class="token comment">// 英文月份，默认走String方法int(t.Month()),       // 数字月份</span> <span class="token comment">// 时分秒</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Hour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Minute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Second</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Nanosecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Nanosecond纳秒</span> <span class="token comment">// 星期</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Weekday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">int</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Weekday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Weekday</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">ISOWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token comment">// 年的第几周</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> t<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span> <span class="token string">"2006/01/02 15:04:05"</span><span class="token punctuation">,</span> <span class="token comment">// 格式字符串</span> <span class="token string">"2008/09/08 20:36:50"</span><span class="token punctuation">,</span> <span class="token comment">// 时间字符串</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>         <span class="token comment">// 2008-09-08 20:36:50 +0000 UTC</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Local</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2008-09-09 04:36:50 +0800 CST</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果没有时区，表示UTC，可以简单认为是零时区时间。</p><p>注意，这里可能导致时间错误，给出的时间，心里想的是东八区的时间，但是Go语言却认为是零时区的，如果再转换到东八区，就差了8个小时了。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">tz<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">LoadLocation</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span> <span class="token comment">// 使用名字</span><span class="token keyword">if</span> t<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseInLocation</span><span class="token punctuation">(</span> <span class="token string">"2006/01/02 15:04:05"</span><span class="token punctuation">,</span> <span class="token comment">// 格式字符串</span> <span class="token string">"2008/09/08 20:36:50"</span><span class="token punctuation">,</span> <span class="token comment">// 时间字符串</span> tz<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>         <span class="token comment">// 2008-09-08 20:36:50 +0800 CST</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Local</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2008-09-08 20:36:50 +0800 CST</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="时间运算"><a href="#时间运算" class="headerlink" title="时间运算"></a>时间运算</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">时间 <span class="token operator">+</span> 时间 <span class="token operator">=</span> ？时间 <span class="token operator">-</span> 时间 <span class="token operator">=</span> 时间差、时间增量时间 ± 时间增量 <span class="token operator">=</span> 时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go">tz<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">LoadLocation</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span> <span class="token comment">// 使用名字</span>s1 <span class="token operator">:=</span> <span class="token string">"2022/09/08 20:36:50"</span>s2 <span class="token operator">:=</span> <span class="token string">"2022/09/08 21:40:51"</span>layout <span class="token operator">:=</span> <span class="token string">"2006/01/02 15:04:05"</span>t1<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseInLocation</span><span class="token punctuation">(</span>layout<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> tz<span class="token punctuation">)</span>t2<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseInLocation</span><span class="token punctuation">(</span>layout<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> tz<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 时间差</span>delta <span class="token operator">:=</span> t2<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span> <span class="token comment">// t2 - t1</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"delta: %v, %[1]T\n"</span><span class="token punctuation">,</span> delta<span class="token punctuation">)</span> <span class="token comment">// Duration类型</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>delta<span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 共差多少秒</span><span class="token comment">// 构造Duration</span>ns3 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>              <span class="token comment">// 3纳秒</span>s3 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span> <span class="token comment">// 3秒</span>h3 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Hour<span class="token punctuation">)</span>   <span class="token comment">// 3小时</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ns3<span class="token punctuation">,</span> s3<span class="token punctuation">,</span> h3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 时间偏移</span>t3 <span class="token operator">:=</span> t2<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>h3<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span>t4 <span class="token operator">:=</span> t2<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">-</span>h3<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t4<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t3<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>t4<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// t3是否在t4之后吗？true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;时间&quot;&gt;&lt;a href=&quot;#时间&quot; class=&quot;headerlink&quot; title=&quot;时间&quot;&gt;&lt;/a&gt;时间&lt;/h1&gt;&lt;p&gt;在Go语言中，时间定义为Time结构体。 &lt;/p&gt;
&lt;pre class=&quot;line-numbers language-go&quot; data-l</summary>
      
    
    
    
    <category term="golang" scheme="http://dycloud.fun/categories/golang/"/>
    
    
    <category term="云原生" scheme="http://dycloud.fun/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    <category term="golang" scheme="http://dycloud.fun/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang序列化和反序列化</title>
    <link href="http://dycloud.fun/2023/04/21/Golang%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://dycloud.fun/2023/04/21/Golang%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2023-04-21T06:32:00.000Z</published>
    <updated>2023-08-30T02:57:35.952Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h1><p>内存中的map、slice、array以及各种对象，如何保存到一个文件中？ 如果是自己定义的结构体的实例，如何保存到一个文件中？</p><p>如何从文件中读取数据，并让它们在内存中再次恢复成自己对应的类型的实例？要设计一套协议，按照某种规则，把内存中数据保存到文件中。文件是一个字节序列，所以必须把数据转换成字节序列，输出到文件。这就是序列化。 反之，从文件的字节序列恢复到内存并且还是原来的类型，就是反序列化。</p><p>序列化：将内存中的数据结构转换成字节序列</p><p>反序列化：将字节序列恢复到内存中并且还是之前的数据类型，就是反序列化</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>serialization序列化：将内存中对象存储下来，把他变成一个个字节。转为二进制数据</li><li>deserialization反序列化：将文件的一个个字节恢复成内存中对象。从二进制数据中恢复。</li></ul><p>序列化保存到文件就是持久化。</p><p>可以将数据序列化后持久化，或者网络传输；也可以将从文件中或网络中接收到的字节序列反序列化。</p><p>可以把数据和二进制序列之间的相互转换称为二进制序列化、反序列化，把数字和字符序列之间的相互转换称为字符序列化、反序列化</p><p><strong>字符序列化：JSON、XML等</strong></p><p><strong>二进制序列化：ProtocolBuffers、MessagePack等</strong></p><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>JSON是一种轻量级的数据交换格式。基于ES3的一个子集采用完全独立于编程语言的文本格式来存储和表示数据。应该说，目前JSON得到几乎所有浏览器的支持。参看 <a href="http://json.org/">http://json.org/</a></p><h5 id="值"><a href="#值" class="headerlink" title="值"></a>值</h5><p>双引号引起来的字符串、数值、true和false、null、对象、数组，这些都是值</p><p><img src="/images/2gLoMVUujOjJ4dq4WTPgFvIEpM0GN_3lWAxHCJWdu_s.png" alt="image"></p><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>由双引号包围起来的任意字符的组合，可以有转义字符。</p><h5 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h5><p>有正负，有整数、浮点数</p><h5 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h5><p>无序的键值对的集合 格式: {key1:value1, … ,keyn:valulen} <strong>key必须是一个字符串</strong>，需要双引号包围这个字符串。 value可以是任意合法的值。</p><p><img src="/images/k156_DyWGJAZDlSkdI262qdLwZaaCMonh90tGW0GSSk.png" alt="image"></p><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><p>有序的值的集合 格式：[val1,…,valn]</p><p><img src="/images/YMVJL_RZhGq7C_VVOv0uy-cajO5tUqc0EqWWQQA1A9g.png" alt="image"></p><p>实例</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">&#123;</span>  <span class="token string">"person"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span>      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"tom"</span><span class="token punctuation">,</span>      <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">18</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span>      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"jerry"</span><span class="token punctuation">,</span>      <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">16</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"total"</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特别注意：JSON是字符串，是文本。JavaScript引擎可以将这种字符串解析为某类型的数据。</p><h3 id="JSON包"><a href="#JSON包" class="headerlink" title="JSON包"></a>JSON包</h3><p>Go标准库中提供了 encoding&#x2F;json 包，内部使用了反射技术，效率较为低下。参看 <a href="https://go.dev/blog/json">https://go.dev/blog/json</a></p><ul><li><code>json.Marshal(v any) ([]byte, error)</code>，将v序列化成字符序列（本质上也是字节序列），这个过程称为Encode</li><li><code>json.Unmarshal(data []byte, v any) error</code>，将字符序列data反序列化为v，这个过程称为Decode</li></ul><h5 id="基本类型序列化"><a href="#基本类型序列化" class="headerlink" title="基本类型序列化"></a>基本类型序列化</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"encoding/json"</span> <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 序列化</span> <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">&#123;</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20.5</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token string">"aabb"</span><span class="token punctuation">,</span> <span class="token comment">// 基本类型</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// Go array => js array</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// Go slice => js array</span>        <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token string">"abc"</span><span class="token punctuation">:</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token string">"aa"</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// Go map => js object</span> <span class="token punctuation">&#125;</span> <span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> data <span class="token punctuation">&#123;</span> <span class="token comment">// 一个一个单独序列化，看变化</span> b<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span> <span class="token punctuation">&#125;</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d %T: %[2]v => %T %[3]v %s\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> target <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token comment">// fmt.Println(target)</span>    <span class="token comment">// 问题，json.Marshal(data)可以吗？</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>    <span class="token comment">// 反序列化</span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> target <span class="token punctuation">&#123;</span> <span class="token comment">// 一个一个单独反序列化，看变化</span> <span class="token keyword">var</span> t any err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span> <span class="token punctuation">&#125;</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d %T: %[2]v => %T %[3]v\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">0</span> <span class="token builtin">int</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token punctuation">[</span><span class="token number">49</span> <span class="token number">48</span> <span class="token number">48</span><span class="token punctuation">]</span> <span class="token number">100</span><span class="token number">1</span> <span class="token builtin">float64</span><span class="token punctuation">:</span> <span class="token number">20.5</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token punctuation">[</span><span class="token number">50</span> <span class="token number">48</span> <span class="token number">46</span> <span class="token number">53</span><span class="token punctuation">]</span> <span class="token number">20.5</span><span class="token number">2</span> <span class="token builtin">bool</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token punctuation">[</span><span class="token number">116</span> <span class="token number">114</span> <span class="token number">117</span> <span class="token number">101</span><span class="token punctuation">]</span> <span class="token boolean">true</span><span class="token number">3</span> <span class="token builtin">bool</span><span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token punctuation">[</span><span class="token number">102</span> <span class="token number">97</span> <span class="token number">108</span> <span class="token number">115</span> <span class="token number">101</span><span class="token punctuation">]</span> <span class="token boolean">false</span><span class="token number">4</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token punctuation">[</span><span class="token number">110</span> <span class="token number">117</span> <span class="token number">108</span> <span class="token number">108</span><span class="token punctuation">]</span> null<span class="token number">5</span> <span class="token builtin">string</span><span class="token punctuation">:</span> aabb <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token punctuation">[</span><span class="token number">34</span> <span class="token number">97</span> <span class="token number">97</span> <span class="token number">98</span> <span class="token number">98</span> <span class="token number">34</span><span class="token punctuation">]</span> <span class="token string">"aabb"</span><span class="token number">6</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">97</span> <span class="token number">98</span> <span class="token number">99</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token punctuation">[</span><span class="token number">91</span> <span class="token number">57</span> <span class="token number">55</span> <span class="token number">44</span> <span class="token number">57</span> <span class="token number">56</span> <span class="token number">44</span> <span class="token number">57</span> <span class="token number">57</span> <span class="token number">93</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token number">7</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">65</span> <span class="token number">66</span> <span class="token number">67</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token punctuation">[</span><span class="token number">91</span> <span class="token number">54</span> <span class="token number">53</span> <span class="token number">44</span> <span class="token number">54</span> <span class="token number">54</span> <span class="token number">44</span> <span class="token number">54</span> <span class="token number">55</span> <span class="token number">93</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token number">8</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span>aa<span class="token punctuation">:</span><span class="token number">50</span> abc<span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token punctuation">[</span><span class="token number">123</span> <span class="token number">34</span> <span class="token number">97</span> <span class="token number">97</span> <span class="token number">34</span> <span class="token number">58</span> <span class="token number">53</span> <span class="token number">48</span> <span class="token number">44</span> <span class="token number">34</span> <span class="token number">97</span> <span class="token number">98</span> <span class="token number">99</span> <span class="token number">34</span> <span class="token number">58</span> <span class="token number">52</span> <span class="token number">57</span> <span class="token number">125</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"aa"</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">&#125;</span>以上是序列化结果，说明各种类型数据被序列化成了字节序列，也可以说转换成了字符串。转换到这里就行了，下面的事是把字符串交给JavaScript引擎。<span class="token operator">*</span><span class="token operator">*</span>特别注意<span class="token operator">*</span><span class="token operator">*</span>，转换的结果都是字符串，但是这些字符串一旦交给JavaScript引擎，它能把它们转换成对应的数据类型。~~~~~~~~~~~~~~~~~~~~~~~~~~~<span class="token number">0</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">49</span> <span class="token number">48</span> <span class="token number">48</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token builtin">float64</span> <span class="token number">100</span><span class="token number">1</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">50</span> <span class="token number">48</span> <span class="token number">46</span> <span class="token number">53</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token builtin">float64</span> <span class="token number">20.5</span><span class="token number">2</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">116</span> <span class="token number">114</span> <span class="token number">117</span> <span class="token number">101</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token builtin">bool</span> <span class="token boolean">true</span><span class="token number">3</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">102</span> <span class="token number">97</span> <span class="token number">108</span> <span class="token number">115</span> <span class="token number">101</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token builtin">bool</span> <span class="token boolean">false</span><span class="token number">4</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">110</span> <span class="token number">117</span> <span class="token number">108</span> <span class="token number">108</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span><span class="token number">5</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">34</span> <span class="token number">97</span> <span class="token number">97</span> <span class="token number">98</span> <span class="token number">98</span> <span class="token number">34</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token builtin">string</span> aabb<span class="token number">6</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">91</span> <span class="token number">57</span> <span class="token number">55</span> <span class="token number">44</span> <span class="token number">57</span> <span class="token number">56</span> <span class="token number">44</span> <span class="token number">57</span> <span class="token number">57</span> <span class="token number">93</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">[</span><span class="token number">97</span> <span class="token number">98</span> <span class="token number">99</span><span class="token punctuation">]</span><span class="token number">7</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">91</span> <span class="token number">54</span> <span class="token number">53</span> <span class="token number">44</span> <span class="token number">54</span> <span class="token number">54</span> <span class="token number">44</span> <span class="token number">54</span> <span class="token number">55</span> <span class="token number">93</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">[</span><span class="token number">65</span> <span class="token number">66</span> <span class="token number">67</span><span class="token punctuation">]</span><span class="token number">8</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">123</span> <span class="token number">34</span> <span class="token number">97</span> <span class="token number">97</span> <span class="token number">34</span> <span class="token number">58</span> <span class="token number">53</span> <span class="token number">48</span> <span class="token number">44</span> <span class="token number">34</span> <span class="token number">97</span> <span class="token number">98</span> <span class="token number">99</span> <span class="token number">34</span> <span class="token number">58</span> <span class="token number">52</span> <span class="token number">57</span> <span class="token number">125</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">map</span><span class="token punctuation">[</span>aa<span class="token punctuation">:</span><span class="token number">50</span> abc<span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">]</span>以上是反序列化结果，从字符串（字节序列）反序列化为Go的某类型数据。因为从浏览器发来的数据都是字符串需要注意的是，JSON字符串中，数值被转换成了Go的<span class="token builtin">float64</span>类型；<span class="token boolean">true</span>、<span class="token boolean">false</span>转成了<span class="token builtin">bool</span>型；null转成了<span class="token boolean">nil</span>；字符串转成了<span class="token builtin">string</span>；数组转成了<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结构体序列化"><a href="#结构体序列化" class="headerlink" title="结构体序列化"></a>结构体序列化</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"encoding/json"</span> <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> Name <span class="token builtin">string</span> Age  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 序列化</span> <span class="token keyword">var</span> data <span class="token operator">=</span> Person<span class="token punctuation">&#123;</span> Name<span class="token punctuation">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span>  <span class="token number">20</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span> b<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>            <span class="token comment">// 这是Person的实例</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v, %s\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 这是字符串啦</span> <span class="token comment">// 反序列化</span> <span class="token keyword">var</span> b1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">`&#123;"Name": "Tom", "Age": 20&#125;`</span><span class="token punctuation">)</span> <span class="token comment">// 字符串，增加了些空格，js中的</span>对象也就是键值对 <span class="token keyword">var</span> p Person                                   <span class="token comment">// 知道目标的类型</span> err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>b1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span>                   <span class="token comment">// 填充成功，通过指针填充结构</span>体 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T %+[1]v\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>     <span class="token comment">// 不知道类型</span> <span class="token keyword">var</span> i <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>b1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T %+[1]v\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment">// 不知道类型，只能理解为键值对</span> <span class="token comment">// map[string]any map[Age:20 Name:Tom]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>切片序列化</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"encoding/json"</span> <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> Name <span class="token builtin">string</span> Age  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 序列化</span> <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"AAA"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span> b<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 请问序列化后的字符串中，还有类型吗？有什么？</span> <span class="token comment">// 反序列化</span> <span class="token comment">// 不知道类型</span> <span class="token keyword">var</span> i <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T: %+[1]v\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment">// i类型为[]interface&#123;&#125;，值为[map[Age:20 Name:AAA] map[Age:32 Name:aaa]]</span> <span class="token comment">// 知道目标类型</span> <span class="token keyword">var</span> b1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">`[&#123;"name":"AAA","Age":20&#125;,&#123;"name":"aaa","Age":32&#125;]`</span><span class="token punctuation">)</span> <span class="token keyword">var</span> j <span class="token punctuation">[</span><span class="token punctuation">]</span>Person err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>b1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>j<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T: %+[1]v\n"</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token comment">// j类型为[]Person，值为[&#123;Name:AAA Age:20&#125; &#123;Name:aaa Age:32&#125;]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="字段标签"><a href="#字段标签" class="headerlink" title="字段标签"></a>字段标签</h5><p>结构体的字段可以增加标签tag，用于序列化和反序列化时使用</p><ul><li>在字段类型后，可以跟反引号引起来的一个标签，用json为key，value用双引号引起来写，key与value直接使用冒号，这个标签中<strong>不要加入多余空格，否则语法错误</strong><ul><li>Name string `json:”name”`  这个例子序列化得到的属性名为name<ul><li>json表示json库使用</li><li>双引号内第一个参数用来指定字段转换使用的名称，多个参数使用逗号隔开</li></ul></li><li>Name string `json:”name,omitempty”` ，omitempty位序列化时忽略空值，也就是该字段不序列化<ul><li>空值为false、0、空数组、空切片、空map、空串、nil空指针、nil接口值</li><li>空数组、空切片、空串、空map，长度len为0，也就是容器没有元素</li></ul></li></ul></li><li>如果使用<code>-</code> ，该字段将被忽略<ul><li>Name string `json:”-“` ，序列化后没有该字段，反序列化也不会转换该字段</li><li>Name string `json:”-,”` ，序列化后该字段显示但名为<code>&quot;-&quot;</code> ，反序列化也会转换该字段</li></ul></li><li>多标签使用空格间隔<ul><li>Name string `json:”name,omitempty” msgpack:”myname”`</li></ul></li></ul><p>Version:0.9 StartHTML:0000000105 EndHTML:0000001898 StartFragment:0000000141 EndFragment:0000001858</p><p><strong>JSON序列化的Go实现效率较低，由此社区和某些公司提供大量开源的实现，例如easyjson、jsoniter、sonic等。对于各个Json序列化包的性能对比这里不列出来了，有兴趣的同学自己查看。基本使用方式都兼容官方实现。</strong></p><h4 id="Jsoniter"><a href="#Jsoniter" class="headerlink" title="Jsoniter"></a>Jsoniter</h4><p><img src="/images/LARO94NSUaanvTauyISES6dY_KIT6zNWycgjPYjLwWM.png" alt="image"></p><p>下载</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> get github<span class="token punctuation">.</span>com<span class="token operator">/</span>json<span class="token operator">-</span>iterator<span class="token operator">/</span><span class="token keyword">go</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go">p <span class="token operator">:=</span> Person<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"dujie"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">&#125;</span>c<span class="token punctuation">,</span> err <span class="token operator">:=</span> jsoniter<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">var</span> s Personjsoniter<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MessagePack"><a href="#MessagePack" class="headerlink" title="MessagePack"></a>MessagePack</h3><p>MessagePack是一个基于二进制高效的对象序列化类库，可用于跨语言通信。他可以像json那样，许多种语言之间交换结构对象。但是它比JSON更快速也更轻巧。 支持Python、Ruby、Java、C&#x2F;C++、Go等众多语言。宣称比Google Protocol Buffers还要快4倍。</p><p><a href="https://msgpack.org/">https://msgpack.org/</a></p><p>文档<a href="https://msgpack.uptrace.dev/"> https://msgpack.uptrace.dev/</a></p><p>安装</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> get github<span class="token punctuation">.</span>com<span class="token operator">/</span>vmihailenco<span class="token operator">/</span>msgpack<span class="token operator">/</span>v5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>基本使用方法和json包类似</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span> <span class="token string">"github.com/vmihailenco/msgpack/v5"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> Name <span class="token builtin">string</span> <span class="token string">`json:"name" msgpack:"myname"`</span> Age  <span class="token builtin">int</span>    <span class="token string">`json:"age" msgpack:"myage"`</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 序列化</span> <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Jerry"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span> b<span class="token punctuation">,</span> err <span class="token operator">:=</span> msgpack<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">// 方法都和json兼容</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 二进制</span> <span class="token comment">// 反序列化</span> <span class="token comment">// 知道目标类型</span> <span class="token keyword">var</span> j <span class="token punctuation">[</span><span class="token punctuation">]</span>Person err <span class="token operator">=</span> msgpack<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>j<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">&#125;</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T: %+[1]v\n"</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序列化和反序列化&quot;&gt;&lt;a href=&quot;#序列化和反序列化&quot; class=&quot;headerlink&quot; title=&quot;序列化和反序列化&quot;&gt;&lt;/a&gt;序列化和反序列化&lt;/h1&gt;&lt;p&gt;内存中的map、slice、array以及各种对象，如何保存到一个文件中？ 如果是自己定义的</summary>
      
    
    
    
    <category term="golang" scheme="http://dycloud.fun/categories/golang/"/>
    
    
    <category term="云原生" scheme="http://dycloud.fun/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    <category term="golang" scheme="http://dycloud.fun/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Go中的面向对象</title>
    <link href="http://dycloud.fun/2023/04/20/Go%E4%B8%AD%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://dycloud.fun/2023/04/20/Go%E4%B8%AD%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2023-04-20T06:32:00.000Z</published>
    <updated>2023-08-30T02:57:10.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go中的面向对象"><a href="#Go中的面向对象" class="headerlink" title="Go中的面向对象"></a>Go中的面向对象</h1><h3 id="面相对象三要素"><a href="#面相对象三要素" class="headerlink" title="面相对象三要素"></a>面相对象三要素</h3><ul><li>封装：将属性（数据）和方法（操作）封装，提供访问控制，隐藏实现细节，暴露该暴露的</li><li>继承：子类可以从父类直接获得属性和方法，减少重复定义。子类中如果与父类不同，可以自己定义新的属性和方法，也可以覆盖同名的属性和方法</li><li>多态：前提是继承和覆盖，使得子类中虽然使用同一个方法，但是不同子类表现不同，就是不同的态</li></ul><p>实现了以上特征的语言，才能称为面向对象编程范式语言。</p><p>严格意义上说，Go语言不想实现面向对象编程范式。但是面相对象又有一些不错的特征，Go语言通过组合的方式实现了类似的功能。</p><p>只能说，Go语言实现了一种非常有自我特征的面向对象。</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>通过结构体，可以把数据字段封装在内，还可以为结构体提供方法。</p><p>访问控制：</p><ul><li>属性、方法标识符首字母大写，实现了对包外可见的访问控制</li><li>属性、方法标识符首字母小写，仅包内可见</li><li>这些一定程度上实现了public、private的访问控制。</li></ul><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>Go没有提供类似C++、Java一样的构造函数、析构函数。在Go中，用构造结构体实例的函数，这个函数没有特别的要求，只要返回结构体实例或其指针即可（建议返回指针，不然返回值会拷贝）。习惯上，构造函数命名是New或new开头。如果有多个构造函数，可以使用不同命名函数，因为Go也没有函数重载。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Animal <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> name <span class="token builtin">string</span> age  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">NewDefaultAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Animal <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token operator">&amp;</span>Animal<span class="token punctuation">&#123;</span><span class="token string">"nobody"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">NewAnimal</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Animal <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token operator">&amp;</span>Animal<span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span> age<span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过不同的函数名来模拟构造函数重载</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>Go语言没有提供继承的语法，实际上需要通过匿名结构体嵌入（组合）来实现类似效果</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Animal <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> name <span class="token builtin">string</span> age  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>Animal<span class="token punctuation">)</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Animal run~~~"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token keyword">type</span> Cat <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> Animal <span class="token comment">// 匿名结构体嵌入</span> color  <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cat <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Cat<span class="token punctuation">)</span> cat<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    cat<span class="token punctuation">.</span>Animal<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过匿名结构体嵌入，子结构体就拥有了父结构体的属性name、age、和run方法</p><h3 id="覆盖"><a href="#覆盖" class="headerlink" title="覆盖"></a>覆盖</h3><p>覆盖override，也称为重写。注意不是重载overload</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>Cat<span class="token punctuation">)</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Cat run+++"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>为Cat增加一个run方法，这就是覆盖。特别注意<code>cat.run() </code>和 <code>cat.Animal.run()</code>的区别</p><p>上例增加run方法时完全覆盖，就是不依赖父结构体方法，重写功能。</p><p>如果是依赖父结构体方法，那就要在子结构体方法中显式调用它</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cat<span class="token punctuation">)</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> c<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 可以吗？ 不可以，无限递归了</span> c<span class="token punctuation">.</span>Animal<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 可以吗?</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Cat run+++"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>cat.run() </code>这是无限递归，不能这么用</p><p><code>c.Animal.run()</code>这是调用父结构体方法</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>Go语言不能像java语言一样使用多态，但是可以通过引入interface接口来解决</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Runner <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Animal <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> name <span class="token builtin">string</span> age  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>Animal<span class="token punctuation">)</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Animal run~~~"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token keyword">type</span> Cat <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> Animal <span class="token comment">// 匿名结构体嵌入</span> color  <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cat<span class="token punctuation">)</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> c<span class="token punctuation">.</span>Animal<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Cat run+++"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token keyword">type</span> Dog <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> Animal <span class="token comment">// 匿名结构体嵌入</span> color  <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Dog<span class="token punctuation">)</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> d<span class="token punctuation">.</span>Animal<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Dog run+++"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span>a Runner<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 多态</span> a<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// var a Animal = Cat&#123;&#125; // Go做不到这样赋值</span> <span class="token comment">// a.run() // Go无法写出这2行，用接口</span>     d <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span> d<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"snoopy"</span> <span class="token function">test</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> c <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Cat<span class="token punctuation">)</span> c<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Garfield"</span> <span class="token function">test</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test使用同一个类型的同一个接口却表现出不同的结果，这就是多态</p><h3 id="结构体排序"><a href="#结构体排序" class="headerlink" title="结构体排序"></a>结构体排序</h3><h5 id="排序接口"><a href="#排序接口" class="headerlink" title="排序接口"></a>排序接口</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// An implementation of Interface can be sorted by the routines in this package.</span><span class="token comment">// The methods refer to elements of the underlying collection by integer index.</span><span class="token keyword">type</span> Interface <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span> <span class="token comment">// Len is the number of elements in the collection.</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token comment">// Less reports whether the element with index i</span> <span class="token comment">// must sort before the element with index j.</span> <span class="token comment">//</span> <span class="token comment">// If both Less(i, j) and Less(j, i) are false,</span> <span class="token comment">// then the elements at index i and j are considered equal.</span> <span class="token comment">// Sort may place equal elements in any order in the final result,</span> <span class="token comment">// while Stable preserves the original input order of equal elements.</span> <span class="token comment">//</span> <span class="token comment">// Less must describe a transitive ordering:</span> <span class="token comment">// - if both Less(i, j) and Less(j, k) are true, then Less(i, k) must be true as well.</span> <span class="token comment">// - if both Less(i, j) and Less(j, k) are false, then Less(i, k) must be false as well.</span> <span class="token comment">//</span> <span class="token comment">// Note that floating-point comparison (the &lt; operator on float32 or </span><span class="token builtin">float64</span> values<span class="token punctuation">)</span> <span class="token comment">// is not a transitive ordering when not-a-number (NaN) values are involved.</span> <span class="token comment">// See Float64Slice.Less for a correct implementation for floating-point values.</span> <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token comment">// Swap swaps the elements with indexes i and j.</span> <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从接口定义来看，要实现某类型的排序</p><ul><li>要知道有多少元素</li><li>2个指定索引的元素怎么比较大小，索引i 的元素小于索引j 的值返回true，反之返回false</li><li>如何交换指定索引上的元素</li></ul><p>那么自定义类型，要想排序，就要实现sort包中该接口</p><h4 id="结构体实例排序"><a href="#结构体实例排序" class="headerlink" title="结构体实例排序"></a>结构体实例排序</h4><p>假设有N个学生，学生有姓名和年龄，按照年龄排序结构体实例。</p><p>学生使用结构体Student，多个学生就使用切片[ ]Student。</p><p>参照 sort.Ints() 的实现</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Ints</span><span class="token punctuation">(</span>x <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">Sort</span><span class="token punctuation">(</span><span class="token function">IntSlice</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> 观察这个方法，它依赖下面的定义<span class="token comment">// IntSlice attaches the methods of Interface to []int, sorting in increasing order.</span><span class="token keyword">type</span> IntSlice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">func</span> <span class="token punctuation">(</span>x IntSlice<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>           <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>x IntSlice<span class="token punctuation">)</span> <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>x IntSlice<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就是要在[]Student上实现interface接口的Len、Less、Swap方法。为了 方便可以定义一个新类型，好实现方法</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span> <span class="token string">"math/rand"</span> <span class="token string">"sort"</span> <span class="token string">"time"</span> <span class="token string">"strconv"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> Name <span class="token builtin">string</span> Age  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> StudentSlice <span class="token punctuation">[</span><span class="token punctuation">]</span>Student<span class="token keyword">func</span> <span class="token punctuation">(</span>x StudentSlice<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>           <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>x StudentSlice<span class="token punctuation">)</span> <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Age <span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>x StudentSlice<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 随机生成学生数据</span> r <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> students <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Student<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span> name <span class="token operator">:=</span> <span class="token string">"Tom"</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> age <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20</span> students <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> Student<span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span> age<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v, %[1]T\n"</span><span class="token punctuation">,</span> students<span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span> sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token function">StudentSlice</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 强制类型转化为StudentSlice后就可以应用接口方法排序了</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v, %[1]T\n"</span><span class="token punctuation">,</span> students<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="切片排序简化"><a href="#切片排序简化" class="headerlink" title="切片排序简化"></a>切片排序简化</h3><p>上例中，对于切片来说，Len、Swap实现其实都这么写，切片中元素排序，就是某种类型的元素之间如何比较大小不知道，能否只提出这一部分的逻辑单独提供？从而简化切片的排序。这就要靠<code>sort.Slice(待排序切片，less函数)</code> 了。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span> <span class="token string">"math/rand"</span> <span class="token string">"sort"</span> <span class="token string">"time"</span> <span class="token string">"strconv"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> Name <span class="token builtin">string</span> Age  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 随机生成学生数据</span> r <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> students <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Student<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span> name <span class="token operator">:=</span> <span class="token string">"Tom"</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> age <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20</span> students <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> Student<span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span> age<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v, %[1]T\n"</span><span class="token punctuation">,</span> students<span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span> sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> students<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Age <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v, %[1]T\n"</span><span class="token punctuation">,</span> students<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="map的排序"><a href="#map的排序" class="headerlink" title="map的排序"></a>map的排序</h3><p>map是键值对的集合，是无序的hash表。但是排序输出是序列，也就是排序所需的键或值要存入序列中，然后才能排序。</p><h5 id="key排序"><a href="#key排序" class="headerlink" title="key排序"></a>key排序</h5><p>思路：提取key为序列，排序后，用有序序列中的key映射value输出</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"sort"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// To create a map as input</span>    m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>    m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"a"</span>    m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"c"</span>    m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"b"</span>    <span class="token comment">// To store the keys in slice in sorted order</span>    <span class="token keyword">var</span> keys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    <span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">&#123;</span>        keys <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> k<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span>    <span class="token comment">// key排好序，就可以用key找到value了</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> k <span class="token operator">:=</span> <span class="token keyword">range</span> keys <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Key:"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token string">"Value:"</span><span class="token punctuation">,</span> m<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="value排序"><a href="#value排序" class="headerlink" title="value排序"></a>value排序</h5><p>不能使用key排序思路，想象每一个键值对就是一个{key:xxx, value:yyy}的结构体实例，就转换成了结构体序列排序了。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span> <span class="token string">"sort"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Entry <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> Key   <span class="token builtin">int</span> Value <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"a"</span> m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"c"</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"b"</span> entries <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Entry<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> i <span class="token operator">:=</span> <span class="token number">0</span> <span class="token comment">// 为什么用了i</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">&#123;</span> entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Entry<span class="token punctuation">&#123;</span>k<span class="token punctuation">,</span> v<span class="token punctuation">&#125;</span> i<span class="token operator">++</span> <span class="token punctuation">&#125;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span> sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>entries<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">&lt;</span> entries<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// Value升序</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Go中的面向对象&quot;&gt;&lt;a href=&quot;#Go中的面向对象&quot; class=&quot;headerlink&quot; title=&quot;Go中的面向对象&quot;&gt;&lt;/a&gt;Go中的面向对象&lt;/h1&gt;&lt;h3 id=&quot;面相对象三要素&quot;&gt;&lt;a href=&quot;#面相对象三要素&quot; class=&quot;header</summary>
      
    
    
    
    <category term="golang" scheme="http://dycloud.fun/categories/golang/"/>
    
    
    <category term="云原生" scheme="http://dycloud.fun/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    <category term="golang" scheme="http://dycloud.fun/tags/golang/"/>
    
  </entry>
  
</feed>
