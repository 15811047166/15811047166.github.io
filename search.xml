<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>kubernetes常用资源——configMap</title>
    <url>/2022/07/02/Configmap/</url>
    <content><![CDATA[<h1 id="Configmap"><a href="#Configmap" class="headerlink" title="Configmap"></a>Configmap</h1><p>configmap配置信息和镜像解耦，实现方式为将配置信息放到configmap对象中，然后在pod中作为volume挂载到pod中，从而实现导入配置的目的。</p>
<p>使用场景：</p>
<ul>
<li>通过configmap给pod定义全局环境变量</li>
<li>通过configmap给pod传递命令行参数，如mysql -u -p 中的账户名密码可以通过configmap传递</li>
<li>通过configmap给pod中的容器服务提供配置文件，配置文件以挂载到容器的形式使用</li>
</ul>
<p>注意：configmap需要在pod使用它之前创建。</p>
<ul>
<li>pod只能使用位于同一个namespace的configmap，即configmap不能跨namespace使用</li>
<li>通常用语非安全加密的配置场景</li>
<li>configmap通常是小于1MB的配置</li>
</ul>
<p>示例1：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 case10-configmap<span class="token punctuation">]</span><span class="token comment"># cat 1-deploy_configmap.yml </span>
<span class="token comment">#定义configmap资源</span>
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: dujie
data:
<span class="token comment">#default是key，value对应的是配置文件内容</span>
 default: <span class="token operator">|</span>
    server <span class="token punctuation">&#123;</span>
       listen       <span class="token number">80</span><span class="token punctuation">;</span>
       server_name  www.mysite.com<span class="token punctuation">;</span>
       index        index.html index.php index.htm<span class="token punctuation">;</span>

       location / <span class="token punctuation">&#123;</span>
           root /data/nginx/html<span class="token punctuation">;</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>-e <span class="token variable">$request_filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
               rewrite ^/<span class="token punctuation">(</span>.*<span class="token punctuation">)</span> /index.html last<span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
       <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


---
<span class="token comment">#apiVersion: extensions/v1beta1</span>
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: dujie
spec:
  replicas: <span class="token number">1</span>
  selector:
    matchLabels:
      app: ng-deploy-80
  template:
    metadata:
      labels:
        app: ng-deploy-80
    spec:
      containers:
      - name: ng-deploy-80
        image: nginx:1.20.0
        ports:
        - containerPort: <span class="token number">80</span>
        volumeMounts:
        - name: nginx-config
          mountPath:  /etc/nginx/conf.d/mysite
      volumes:
      <span class="token comment">#volumes指定类型为configmap</span>
      - name: nginx-config
        configMap:
          name: nginx-config
      <span class="token comment">#设置item，key为上面定义的，path为文件名</span>
          items:
             - key: default
               path: mysite.conf

---
apiVersion: v1
kind: Service
metadata:
  namespace: dujie
  name: ng-deploy-80
spec:
  ports:
  - name: http
    port: <span class="token number">81</span>
    targetPort: <span class="token number">80</span>
    nodePort: <span class="token number">30019</span>
    protocol: TCP
  type: NodePort
  selector:
    app: ng-deploy-80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>






































]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes常用资源——deployment</title>
    <url>/2022/07/01/Deployment%E5%89%AF%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
    <content><![CDATA[<h1 id="Deployment副本控制器"><a href="#Deployment副本控制器" class="headerlink" title="Deployment副本控制器"></a>Deployment副本控制器</h1><p>Deployment：比rs更高级的控制器，除了有rs的功能之外，还有很多高级的功能，比如最重要的滚动升级、回滚等</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 case3-controller<span class="token punctuation">]</span><span class="token comment"># cat deployment.yml </span>
<span class="token comment">#apiVersion: extensions/v1beta1</span>
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: <span class="token number">3</span>
  selector:
    <span class="token comment">#app: ng-deploy-80 #rc</span>
    matchLabels: <span class="token comment">#rs or deployment</span>
      app: ng-deploy-80
    
    <span class="token comment">#matchExpressions:</span>
    <span class="token comment">#  - &#123;key: app, operator: In, values: [ng-deploy-80,ng-rs-81]&#125;</span>
  template:
    metadata:
      labels:
        app: ng-deploy-80
    spec:
      containers:
      - name: ng-deploy-80
        image: nginx:1.16.0
        ports:
        - containerPort: <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#回滚</span>
<span class="token punctuation">[</span>root@haproxy1 case3-controller<span class="token punctuation">]</span><span class="token comment"># kubectl rollout undo deployment nginx-deployment</span>
deployment.apps/nginx-deployment rolled back<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins用户权限控制插件——Role-based Authorization Strategy</title>
    <url>/2022/08/16/Jenkins%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%E6%8F%92%E4%BB%B6%E2%80%94%E2%80%94Role-based%20Authorization%20Strategy/</url>
    <content><![CDATA[<blockquote>
<p>看了下公司的jenkins权限配置，发现公司用的是Role-based Authorization<br>Strategy插件做的权限控制（之前公司一直用的是安全矩阵的方式控制的） 这里就大概记录一下吧</p>
</blockquote>
<p>使用Role-based Authorization Strategy这个插件需要在jenkins插件里搜索并下载下载成功后重启jenkins，发现在jenkins管理中会多出一个Manage and Assign Roles，如下图：</p>
<p><img src="/images/73a87cb4c5f64aa1b9b2acbb76729524.png" alt="image"></p>
<blockquote>
<p><strong>点进去可以分别管理角色和给用户分配角色：</strong></p>
</blockquote>
<p><img src="/images/aab899006552425e8aa1e07edfb07aeb.png" alt="images"><br>我们首先看下Manage Roles：</p>
<blockquote>
<p>这里包括几个选项，<br>Global roles ：这个选项是添加一个角色，该角色对项目可以有哪些权限，一般会给开放分配build，cancel等权限，每个公司不太一样<br>Project roles：这个选项就是添加一个可以对哪些job进行操作的角色权限，Role是角色名，会在Assign Roles里展示的，Pattern是匹配项目，比如你的项目名是dys-web-prod，那么这里就要写dys-web-.*进行匹配（我个人测试的结果是这样的）<br>Slave roles：这个公司没用到，应该是对角色添加一个从角色</p>
</blockquote>
<p>权限说明：<strong>Overall</strong>是全局权限，job,run,view,scm是业务权限</p>
<p><strong>overall</strong>中的<strong>read</strong>要勾选，否则用户登陆后什么也看不到</p>
<p><img src="/images/5bc5731d8fa34df2859ac53ac2fbfc42.png" alt="image"></p>
<h3 id="2、配置完角色后，进行角色分配"><a href="#2、配置完角色后，进行角色分配" class="headerlink" title="2、配置完角色后，进行角色分配"></a>2、配置完角色后，进行角色分配</h3><p>点开Assign Roles </p>
<blockquote>
<p>这里也有几个选项<br>Global roles：这个是将用户绑定到刚才在Manage Roles中配置的全局角色<br>Item roles：这个就是将用户绑定到Pattern匹配的项目上，这样用户就只能对匹配的job进行操作了。<br>Node roles：没有使用</p>
</blockquote>
<p>以上配置完成后，就实现了用户只能访问某些job的权限控制了</p>
]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL MHA 高可用</title>
    <url>/2019/03/24/MySQL%20MHA%20%E9%AB%98%E5%8F%AF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="一、MHA架构结构"><a href="#一、MHA架构结构" class="headerlink" title="一、MHA架构结构"></a>一、MHA架构结构</h1><ol>
<li>Manager</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">masterha_manger             启动MHA 
masterha_check_ssh          检查MHA的SSH配置状况 
masterha_check_repl         检查MySQL复制状况 
masterha_master_monitor     检测master是否宕机 
masterha_check_status       检测当前MHA运行状态 
masterha_master_switch      控制故障转移（自动或者手动）
masterha_conf_host          添加或删除配置的server信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>Node</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">save_binary_logs            保存和复制master的二进制日志 
apply_diff_relay_logs       识别差异的中继日志事件并将其差异的事件应用于其他的
purge_relay_logs            清除中继日志（不会阻塞SQL线程）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1 id="二、MHA-Failover的过程"><a href="#二、MHA-Failover的过程" class="headerlink" title="二、MHA Failover的过程"></a>二、MHA Failover的过程</h1><ol>
<li><p>通过masterha_manager，启动MHA manager 节点程序</p>
</li>
<li><p>自动检查SSH 和repl:  masterha_check_ssh ，masterha_check_repl</p>
</li>
<li><p>通过masterha_master_monitor，监控主库，每（ping_interval&#x3D;2）时间间隔，探测一次心跳，一共给3次机会</p>
</li>
<li><p>主库宕机，触发选主和数据补偿</p>
</li>
<li><p>选主</p>
<ol>
<li>权重： candidate_master&#x3D;1，xxxx</li>
<li>日质量</li>
<li>配置文件顺序</li>
</ol>
</li>
<li><p>数据补偿</p>
<ol>
<li>ssh能连：调用save_binary_logs ，立即保存确实的binlog 到各个从库&#x2F;var&#x2F;tmp目录下，补偿数据</li>
<li>ssh不能连：调用apply_diff_relay_logs，计算从库差异并且补偿</li>
<li>Manager ，处理完所有操作后，自动退出，自动把故障节点剔除配置文件</li>
</ol>
<p> 			</p>
</li>
<li><p>应用透明：VIP</p>
<ol>
<li>准备好的脚本拷贝到&#x2F;usr&#x2F;local&#x2F;bin&#x2F;master_ip_failover</li>
<li>修改脚本内容<pre class="line-numbers language-none"><code class="language-none">vim [root@db03 bin]# vim master_ip_failover 
my $vip &#x3D; &#39;10.0.0.55&#x2F;24&#39;;
my $key &#x3D; &#39;1&#39;;
my $ssh_start_vip &#x3D; &quot;&#x2F;sbin&#x2F;ifconfig eth0:$key $vip&quot;;
my $ssh_stop_vip &#x3D; &quot;&#x2F;sbin&#x2F;ifconfig eth0:$key down&quot;;

转换格式
dos2unix master_ip_failover  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>修改配置文件 master_ip_failover_script&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;master_ip_failover<pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;mha&#x2F;app1.cnf
[server default]
master_ip_failover_script&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;master_ip_failover
manager_log&#x3D;&#x2F;var&#x2F;log&#x2F;mha&#x2F;app1&#x2F;manager
manager_workdir&#x3D;&#x2F;var&#x2F;log&#x2F;mha&#x2F;app1
master_binlog_dir&#x3D;&#x2F;data&#x2F;binlog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>脚本添加执行权限<pre class="line-numbers language-none"><code class="language-none">chmod + x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;master_ip_failover <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>在主节点手工添加vip<pre class="line-numbers language-none"><code class="language-none">&#x2F;sbin&#x2F;ifconfig eth0:1 10.0.0.55&#x2F;24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>重启mha<pre class="line-numbers language-none"><code class="language-none">[root@db03 bin]# masterha_stop --conf&#x3D;&#x2F;etc&#x2F;mha&#x2F;app1.cnf
Stopped app1 successfully.
[1]+  Exit 1                  nohup masterha_manager --conf&#x3D;&#x2F;etc&#x2F;mha&#x2F;app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; &#x2F;dev&#x2F;null &gt; &#x2F;var&#x2F;log&#x2F;mha&#x2F;app1&#x2F;manager.log 2&gt;&amp;1  (wd: ~)
[root@db03 bin]# nohup masterha_manager --conf&#x3D;&#x2F;etc&#x2F;mha&#x2F;app1.cnf --remove_dead_master_conf --ignore_last_failover  &lt; &#x2F;dev&#x2F;null&gt; &#x2F;var&#x2F;log&#x2F;mha&#x2F;app1&#x2F;manager.log 2&gt;&amp;1 &amp;
[1] 21612<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<strong>额外数据补偿：binlogserver</strong></li>
</ol>
</li>
<li><p>配置文件修改</p>
</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;mha&#x2F;app1.cnf
[binlog1]
no_master&#x3D;1
hostname&#x3D;10.0.0.53
master_binlog_dir&#x3D;&#x2F;data&#x2F;mysql&#x2F;binlog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>创建日志目录</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">mkdir -p &#x2F;data&#x2F;mysql&#x2F;binlog
chown -R mysql.mysql &#x2F;data&#x2F;*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="3">
<li>拉取主库binglog日志</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">cd &#x2F;data&#x2F;mysql&#x2F;binlog     -----》必须进入到自己创建好的目录
mysqlbinlog  -R --host&#x3D;10.0.0.51 --user&#x3D;mha --password&#x3D;mha --raw  --stop-never mysql-bin.000001 &amp;
注意：
拉取日志的起点，需要按照目前从库已经获取到的二进制日志点为起点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="4">
<li>重启MHA</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">masterha_stop --conf&#x3D;&#x2F;etc&#x2F;mha&#x2F;app1.cnf

nohup masterha_manager --conf&#x3D;&#x2F;etc&#x2F;mha&#x2F;app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; &#x2F;dev&#x2F;null &gt; &#x2F;var&#x2F;log&#x2F;mha&#x2F;app1&#x2F;manager.log 2&gt;&amp;1 &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>故障通知：send_report</strong></p>
<ol>
<li>解压</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">unzip email_2019-最新.zip 
[root@db03 ~&#x2F;email]# cp -a * &#x2F;usr&#x2F;local&#x2F;bin&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="2">
<li>脚本测试</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">[root@db03 ~&#x2F;email]# cd &#x2F;usr&#x2F;local&#x2F;bin&#x2F;
[root@db03 &#x2F;usr&#x2F;local&#x2F;bin]# chmod +x *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="3">
<li>改配置文件</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;mha&#x2F;app1.cnf
report_script&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;send<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="4">
<li>重启生效</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">masterha_stop --conf&#x3D;&#x2F;etc&#x2F;mha&#x2F;app1.cnf
nohup masterha_manager --conf&#x3D;&#x2F;etc&#x2F;mha&#x2F;app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; &#x2F;dev&#x2F;null &gt; &#x2F;var&#x2F;log&#x2F;mha&#x2F;app1&#x2F;manager.log 2&gt;&amp;1 &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>自愈：待开发<br>测试MHA(MHA+vip+binlogserver+send_report)高可用能力<br>1）停主库<br>看各种状态<br>修复MHA  架构<br>1）修复故障节点<br>2）修复主从</p>
<pre class="line-numbers language-none"><code class="language-none">change master to 
master_host&#x3D;&#39;10.0.0.52&#39;,
master_user&#x3D;&#39;repl&#39;,
master_password&#x3D;&#39;123&#39; ,
MASTER_AUTO_POSITION&#x3D;1;
start slave;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3）修改配置文件</p>
<pre class="line-numbers language-none"><code class="language-none">[server1]
hostname&#x3D;10.0.0.51
port&#x3D;3306

[server2]
hostname&#x3D;10.0.0.52
port&#x3D;3306

[server3]
hostname&#x3D;10.0.0.53
port&#x3D;3306<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>4）修复binlogserver</p>
<pre class="line-numbers language-none"><code class="language-none">cd &#x2F;data&#x2F;mysql&#x2F;binlog&#x2F;
rm -rf *
mysqlbinlog  -R --host&#x3D;10.0.0.52 --user&#x3D;mha --password&#x3D;mha --raw  --stop-never mysql-bin.000001 &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>5）启动mha</p>
<pre class="line-numbers language-none"><code class="language-none">[root@db03 &#x2F;data&#x2F;mysql&#x2F;binlog]# masterha_check_repl --conf&#x3D;&#x2F;etc&#x2F;mha&#x2F;app1.cnf

nohup masterha_manager --conf&#x3D;&#x2F;etc&#x2F;mha&#x2F;app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; &#x2F;dev&#x2F;null &gt; &#x2F;var&#x2F;log&#x2F;mha&#x2F;app1&#x2F;manager.log 2&gt;&amp;1 &amp;

[root@db03 &#x2F;data&#x2F;mysql&#x2F;binlog]# masterha_check_status  --conf&#x3D;&#x2F;etc&#x2F;mha&#x2F;app1.cnf
app1 (pid:5325) is running(0:PING_OK), master:10.0.0.52

mysqlbinlog  -R --host&#x3D;10.0.0.51 --user&#x3D;mha --password&#x3D;mha --raw  --stop-never mysql-bin.000001 &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>额外参数：</p>
<ol>
<li>ping_interval&#x3D;1</li>
</ol>
<p>#设置监控主库，发送ping包的时间间隔，尝试四次没有回应的时候自动进行failover<br>2. candidate_master&#x3D;1<br>#设置为候选master，如果设置该参数以后，发生主从切换以后将会将此从库提升为主库，即使这个主库不是集群中事件最新的slave<br>KeepAlive<br>3. check_repl_delay&#x3D;0<br>#默认情况下如果一个slave落后master 100M的relay logs的话，<br>MHA将不会选择该slave作为一个新的master，因为对于这个slave的恢复需要花费很长时间，通过设置check_repl_delay&#x3D;0,MHA触发切换在选择一个新的master的时候将会忽略复制延时，这个参数对于设置了candidate_master&#x3D;1的主机非常有用，因为这个候选主在切换的过程中一定是新的master</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 优化</title>
    <url>/2019/03/24/MySQL%20%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="一、优化工具"><a href="#一、优化工具" class="headerlink" title="一、优化工具"></a>一、优化工具</h1><h5 id="1-1-OS"><a href="#1-1-OS" class="headerlink" title="1.1 OS"></a>1.1 OS</h5><blockquote>
<p>CPU : top , htop, PS ,w ,glance<br>MEM : top , htop ,vmstat ,sar ,free<br>IO  : iotop ,iostat ,iftop<br>FS  : xfs_info ,df -Th , fdisk -l </p>
</blockquote>
<h5 id="1-2-数据库"><a href="#1-2-数据库" class="headerlink" title="1.2 数据库"></a>1.2 数据库</h5><blockquote>
<p>show status<br>show variables<br>show index<br>show processlist<br>show slave status<br>show engine innodb status\G<br>desc &#x2F;explain<br>slowlog<br>mysqladmin<br>扩展类深度优化:<br>pt系列<br>mysqlslap<br>sysbench<br>tpc-c<br>information_schema<br>performance_schema<br>sys</p>
</blockquote>
<h5 id="1-3-工具使用方法介绍"><a href="#1-3-工具使用方法介绍" class="headerlink" title="1.3 工具使用方法介绍"></a>1.3 工具使用方法介绍</h5><p>1）top</p>
<pre class="line-numbers language-none"><code class="language-none">H
zsc 
[root@db01 ~]# cat &#x2F;data&#x2F;mysql&#x2F;data&#x2F;db01.pid 
1856
[root@db01 ~]# top -p 1856

%Cpu(s): 
0.0 us  : 用户态程序运行占用的cpu时间百分比
0.0 sy  : 内核态和资源调度时应用到的时间百分比
死锁 , 锁等待严重 ,并发连接多, 高并发 
99.9 id : 空闲的时间.
0.0 wa  : IO , 锁 , 内存空间释放<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2）iotop，iostat，iftop<br>3）数据库层面</p>
<h1 id="二、优化思路分解"><a href="#二、优化思路分解" class="headerlink" title="二、优化思路分解"></a>二、优化思路分解</h1><h5 id="2-1-硬件优化"><a href="#2-1-硬件优化" class="headerlink" title="2.1 硬件优化"></a>2.1 硬件优化</h5><p>cpu：</p>
<pre class="line-numbers language-none"><code class="language-none">CPU 根据数据库类型
OLTP  IO密集型
OLAP  计算密集型

IO密集型：线上系统，OLTP主要是IO密集型的业务，高并发
CPU密集型：数据分析数据处理，OLAP，cpu密集型的，需要CPU高计算能力（i系列，IBM power系列）

CPU密集型： I 系列的，主频很高，核心少 
IO密集型：  E系列（至强），主频相对低，核心数量多<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>内存：</p>
<pre class="line-numbers language-none"><code class="language-none">建议2-3倍cpu核心数量 （ECC）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>磁盘：</p>
<pre class="line-numbers language-none"><code class="language-none">SATA-III   SAS    Fc    SSD（sata） pci-e  ssd  Flash
主机 RAID卡的BBU(Battery Backup Unit)关闭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>存储：</p>
<pre class="line-numbers language-none"><code class="language-none">根据存储数据种类的不同，选择不同的存储设备
配置合理的RAID级别(raid1,raid5、raid10、热备盘) 
r0 :条带化 ,性能高
r1 :镜像，安全
r5 :校验+条带化，安全较高+性能较高（读），写性能较低 （适合于读多写少）
r10：安全+性能都很高，最少四块盘，浪费一半的空间（高IO要求）

项目:    10T +  MySQL  +  raid10 , LVM 

IOPS <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>网络：</p>
<pre class="line-numbers language-none"><code class="language-none">1、硬件买好的（单卡单口）
2、网卡绑定（bonding）， 选择主备模式, 交换机堆叠
以上问题，提前规避掉。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="2-2-操作系统优化"><a href="#2-2-操作系统优化" class="headerlink" title="2.2 操作系统优化"></a>2.2 操作系统优化</h5><p>swap调整</p>
<pre class="line-numbers language-none"><code class="language-none">echo 0 &gt;&#x2F;proc&#x2F;sys&#x2F;vm&#x2F;swappiness的内容改成0（临时）

vim &#x2F;etc&#x2F;sysctl.conf

vm.swappiness&#x3D;0（永久）
sysctl -p
这个参数决定了Linux是倾向于使用swap，还是倾向于释放文件系统cache。在内存紧张的情况下，数值越低越倾向于释放文件系统cache。
当然，这个参数只能减少使用swap的概率，并不能避免Linux使用swap。
修改MySQL的配置参数innodb_flush_method，开启O_DIRECT模式

这种情况下，InnoDB的buffer pool会直接绕过文件系统cache来访问磁盘，但是redo log依旧会使用文件系统cache。
值得注意的是，Redo log是覆写模式的，即使使用了文件系统的cache，也不会占用太多
IO调度策略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">centos 7 默认是deadline
cat   &#x2F;sys&#x2F;block&#x2F;sda&#x2F;queue&#x2F;scheduler

#临时修改为deadline(centos6)
echo deadline &gt;&#x2F;sys&#x2F;block&#x2F;sda&#x2F;queue&#x2F;scheduler 
vi &#x2F;boot&#x2F;grub&#x2F;grub.conf
更改到如下内容:
kernel &#x2F;boot&#x2F;vmlinuz-2.6.18-8.el5 ro root&#x3D;LABEL&#x3D;&#x2F; elevator&#x3D;deadline rhgb quiet


IO ：
    raid
    no lvm
    ext4或xfs
    ssd
    IO调度策略

提前规划好以上所有问题，减轻MySQL优化的难度。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="2-3-应用端"><a href="#2-3-应用端" class="headerlink" title="2.3 应用端"></a>2.3 应用端</h5><pre class="line-numbers language-none"><code class="language-none">1. 开发过程规范,标准
2. 减少烂SQL:不走索引,复杂逻辑,切割大事务.
3. 避免业务逻辑错误,避免锁争用.
这个阶段,需要我们DBA深入业务,或者要和开发人员\业务人员配合实现<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="三、MySQL-参数优化测试"><a href="#三、MySQL-参数优化测试" class="headerlink" title="三、MySQL 参数优化测试"></a>三、MySQL 参数优化测试</h1><pre class="line-numbers language-none"><code class="language-none">虚拟机vm12.5，OS centos 6.9（系统已优化），cpu*4（I5 4440 3.1GHZ）,MEM*4GB ,HardDisk:SSD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>模拟数据库数据</p>
<pre class="line-numbers language-none"><code class="language-none">drop database if exists oldboy;
create database oldboy charset utf8mb4 collate utf8mb4_bin;
use oldboy;
create table t_100w (id int,num int,k1 char(2),k2 char(4),dt timestamp);
delimiter &#x2F;&#x2F;
create  procedure rand_data(in num int)
begin
declare str char(62) default &#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#39;;
declare str2 char(2);
declare str4 char(4);
declare i int default 0;
while i&lt;num do
set str2&#x3D;concat(substring(str,1+floor(rand()*61),1),substring(str,1+floor(rand()*61),1));
set str4&#x3D;concat(substring(str,1+floor(rand()*61),2),substring(str,1+floor(rand()*61),2));
set i&#x3D;i+1;
insert into t_100w values (i,floor(rand()*num),str2,str4,now());
end while;
end;
&#x2F;&#x2F;
delimiter ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>插入100w条数据</p>
<pre class="line-numbers language-none"><code class="language-none">call rand_data(1000000);
commit;

mysqlslap --defaults-file&#x3D;&#x2F;etc&#x2F;my.cnf \
--concurrency&#x3D;100 --iterations&#x3D;1 --create-schema&#x3D;&#39;test&#39; \
--query&#x3D;&quot;select * from test.t100w where k2&#x3D;&#39;FGCD&#39;&quot; engine&#x3D;innodb \
--number-of-queries&#x3D;2000 -uroot -p123 -verbose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="五、优化细节"><a href="#五、优化细节" class="headerlink" title="五、优化细节"></a>五、优化细节</h1><h5 id="5-1-参数优化"><a href="#5-1-参数优化" class="headerlink" title="5.1 参数优化"></a>5.1 参数优化</h5><h5 id="MAX-connections"><a href="#MAX-connections" class="headerlink" title="MAX_connections"></a>MAX_connections</h5><p>1）简介</p>
<blockquote>
<p>Mysql的最大连接数，如果服务器的并发请求量比较大，可以调高这个值，当然这是要建立在机器能够支撑的情况下，因为如果连接数越来越多，mysql会为每个连接提供缓冲区，就会开销的越多的内存，所以需要适当的调整该值，不能随便去提高设值。</p>
</blockquote>
<p>2）判断依据</p>
<pre class="line-numbers language-none"><code class="language-none">show variables like &#39;max_connections&#39;;
    +-----------------+-------+
    | Variable_name   | Value |
    +-----------------+-------+
    | max_connections | 151   |
    +-----------------+-------+
show status like &#39;Max_used_connections&#39;;
    +----------------------+-------+
    | Variable_name        | Value |
    +----------------------+-------+
    | Max_used_connections | 101   |
    +----------------------+-------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3）修改方式</p>
<pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;my.cnf 
Max_connections&#x3D;1024<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>1.开启数据库时，我们可以临时设置一个比较大的测试值</li>
<li>2.观察show  status  like  ‘Max_used_connections’； 变化、</li>
<li>3.如果max_used_connections跟max_connections 相同，那么就是max_used_connections 设置过低或者超过服务器的负载上限了，低于10%则设置过大</li>
</ul>
<h5 id="back-log"><a href="#back-log" class="headerlink" title="back_log"></a>back_log</h5><p>1）简介</p>
<blockquote>
<p>mysql能暂存的连接数量，当主要mysql线程在一个很短时间内得到非常多的连接请求时候它就会起作用，如果mysql的连接数据达到max_connections时候，新来的请求将会被存在堆栈中，等待某一连接释放资源，该推栈的数量及back_log,如果等待连接的数量超过back_log，将不被授予连接资源。<br>back_log值指出在mysql暂时停止回答新请求之前的短时间内有多少个请求可以被存在推栈中，只有如果期望在一个短时间内有很多连接的时候需要增加它</p>
</blockquote>
<p>2）依据</p>
<pre class="line-numbers language-none"><code class="language-none">show full processlist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>发现大量的待连接进程时，就需要加大back_log或者加大max_connections的值</p>
<p>3）修改方式</p>
<pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;my.cnf 
back_log&#x3D;1024<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h5 id="wait-timeout和interactive-timeout"><a href="#wait-timeout和interactive-timeout" class="headerlink" title="wait_timeout和interactive_timeout"></a>wait_timeout和interactive_timeout</h5><p>1）简介</p>
<blockquote>
<p>wait_timeout：指的是mysql在关闭一个非交互的连接之前所要等待的秒数</p>
</blockquote>
<blockquote>
<p>interactive_timeout：指的是mysql在关闭一个交互的连接之前所需要等待的秒数，比如我们在终端上进行mysql管理，使用的即使交互的连接，这时候，如果没有操作的时间超过了interactive_time设置的时间就会自动的断开，默认的是28800，可调优为720</p>
</blockquote>
<blockquote>
<p>wait_timeout:如果设置太小，那么连接关闭的就很快，从而使一些持久的连接不起作用</p>
</blockquote>
<p>2）设置建议<br>如果设置太大，容易造成连接打开时间过长，在show processlist时候，能看到很多的连接 ，一般希望wait_timeout尽可能低<br>3）修改方式</p>
<pre class="line-numbers language-none"><code class="language-none">wait_timeout&#x3D;60
interactive_timeout&#x3D;1200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>长连接的应用，为了不去反复的回收和分配资源，降低额外的开销。<br>一般我们会将wait_timeout设定比较小，interactive_timeout要和应用开发人员沟通长链接的应用是否很多。如果他需要长链接，那么这个值可以不需要调整。<br>另外还可以使用类外的参数弥补。</p>
</blockquote>
<h5 id="key-buffer-size"><a href="#key-buffer-size" class="headerlink" title="key_buffer_size"></a>key_buffer_size</h5><p>1）简介</p>
<blockquote>
<p>key_buffer_size指定索引缓冲区的大小，它决定索引处理的速度，尤其是索引读的速度<br>1.此参数与myisam表的索引有关<br>2.临时表的创建有关（多表连接、子查询中、union）</p>
</blockquote>
<blockquote>
<p>在有以上查询语句出现的时候，需要创建临时表，用完之后就会被丢弃<br>临时表有两种创建方式：<br>1.内存中————key_buffer_size<br>2.磁盘上————ibdata1(5.6)   ibtmp1(5.7)</p>
</blockquote>
<p>2）设置依据</p>
<p>注：key_buffer_size 支队myisam 表起作用，即使不适用myisam表，但是内部的临时磁盘表是myisam表，也要使用该值<br>可以使用检查状态值created_tmp_disk_tables得知：</p>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; show status like &quot;created_tmp%&quot;;

+-------------------------+-------+
| Variable_name           | Value |
+-------------------------+-------+
| Created_tmp_disk_tables | 0     |
| Created_tmp_files       | 6     |
| Created_tmp_tables      | 1     |
+-------------------------+-------+
3 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>通常的，我们习惯以Created_tmp_tables&#x2F;(Created_tmp_disk_tables + Created_tmp_tables)<br>Created_tmp_disk_tables&#x2F;(Created_tmp_disk_tables + Created_tmp_tables)<br>或者以各自的一个时段内的差额计算，来判断基于内存的临时表利用率。所以，我们会比较关注 Created_tmp_disk_tables<br>是否过多，从而认定当前服务器运行状态的优劣。<br>Created_tmp_disk_tables&#x2F;(Created_tmp_disk_tables + Created_tmp_tables)<br>控制在5%-10%以内</p>
</blockquote>
<p>看以下例子：<br>在调用mysqldump备份数据时，大概执行步骤如下：</p>
<pre class="line-numbers language-none"><code class="language-none">180322 17:39:33       7 Connect     root@localhost on
7 Query       &#x2F;*!40100 SET @@SQL_MODE&#x3D;&#39;&#39; *&#x2F;
7 Init DB     guo
7 Query       SHOW TABLES LIKE &#39;guo&#39;
7 Query       LOCK TABLES &#96;guo&#96; READ &#x2F;*!32311 LOCAL *&#x2F;
7 Query       SET OPTION SQL_QUOTE_SHOW_CREATE&#x3D;1
7 Query       show create table &#96;guo&#96;
7 Query       show fields from &#96;guo&#96;
7 Query       show table status like &#39;guo&#39;
7 Query       SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; * FROM &#96;guo&#96;
7 Query       UNLOCK TABLES
7 Quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中，有一步是：show fields from ‘guo’  从slow query记录的执行计划中，可以知道它也产生了Tmp_table_on_disk。<br>所以说，以上公式并不能真正反映到mysql里临时表的利用率，有些情况产生的Tmp_table_on_disk  我们完全不用担心，因此没必要过分关注<br>Created_tmp_disk_tables，但如果他的值大的离谱的话，那就好好查一下，你的服务器到底都在执行什么查询了。</p>
<p>3）配置方法</p>
<pre class="line-numbers language-none"><code class="language-none">key_buffer_size&#x3D;64M<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h5 id="max-connect-errors"><a href="#max-connect-errors" class="headerlink" title="max_connect_errors"></a>max_connect_errors</h5><blockquote>
<p>max_connect_errors 是一个mysql中与安全有关的计数器值，它负责阻止过多尝试失败的客户端以防止暴力破解密码等情况，当超过指定次数，mysql服务器将禁止host的连接请求，直到mysql服务器重启或者通过flush hosts命令清空此host的相关信息  max_connect_error 的值 与性能并无太大关系。</p>
</blockquote>
<p>修改&#x2F;etc&#x2F;my.cnf 文件，在[mysqld]下面添加如下内容</p>
<pre class="line-numbers language-none"><code class="language-none">max_connect_errors&#x3D;2000
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="sort-buffer-size"><a href="#sort-buffer-size" class="headerlink" title="sort_buffer_size"></a>sort_buffer_size</h5><p>1）简介<br>每个需要进行排序的 线程分配该大小的一个缓冲区，增加这值加速</p>
<pre class="line-numbers language-none"><code class="language-none">ORDER BY 
GROUP BY
distinct
union <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>2）配置<br>Sort_Buffer_Size 并不是越大越好，由于是connection级的参数，过大的设置+高并发可能会耗尽系统内存资源。<br>例如：500个连接将会消耗500*sort_buffer_size（2M）&#x3D;1G内存</p>
<blockquote>
<p>修改&#x2F;etc&#x2F;my.cnf问阿金，在[mysqld]下面添加如下：<br>sort_buffer_size&#x3D;1M</p>
</blockquote>
<h5 id="max-allowed-packet"><a href="#max-allowed-packet" class="headerlink" title="max_allowed_packet"></a>max_allowed_packet</h5><p>1）简介<br>myslq根据配置文件会限制，server接收的数据包大小。<br>2）配置<br>有时候大的插入和更新会受max_allowed_packet 参数限制，导致写入或者更新失败，更大值是1GB，必须设置1024的倍数</p>
<pre class="line-numbers language-none"><code class="language-none">max_allowed_packet&#x3D;32M
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="join-buffer-size"><a href="#join-buffer-size" class="headerlink" title="join_buffer_size"></a>join_buffer_size</h5><blockquote>
<p>select a.name,b.name from a join b on a.id&#x3D;b.id where xxxx<br>用于表间关联缓存的大小，和sort_buffer_size一样，该参数对应的分配内存也是每个连接独享。<br>尽量在SQL方法进行优化，效果较为明显。<br>优化的方法：在on条件列加索引，至少应当是有MUL索引</p>
</blockquote>
<h5 id="thread-cache-size"><a href="#thread-cache-size" class="headerlink" title="thread_cache_size"></a>thread_cache_size</h5><p>1）简介</p>
<blockquote>
<p>服务器线程缓存，这个值表示可以重新利用保存在缓存中线程的数量，当断开连接时，那么客户端的线程被放到缓存中以响应下一个客户而不是销毁（前提是缓存数未达上限），如果线程被重新请求，那么请求将从缓存中读取，如果缓存中是空的或者是新的请求，那么这个线程将被重新创建，如果有很多新的线程，增加这个值可以改善系统性能。</p>
</blockquote>
<p>2）配置依据</p>
<blockquote>
<p>通过比较connections和 threads_created状态的变量，可以看到这个变量的作用。<br>设置规则如下，1GB内存配置为8，2GB配置为16 ，3GB 配置为32 4GB 或者更高内存，可配置更大<br>服务器处理此用户的线程建辉缓存起来以响应下一个客户而不是销毁（前提是缓存数未达到上限）<br>试图连接到MySQL（不管是否连接成功）的连接数</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt;  show status like &#39;threads_%&#39;;
+-------------------+-------+
| Variable_name     | Value |
+-------------------+-------+
| Threads_cached    | 8     |
| Threads_connected | 2     |
| Threads_created   | 4783  |
| Threads_running   | 1     |
+-------------------+-------+
4 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Threads_cached：代表当前此时此刻线程缓存中有多少空闲线程。<br>Threads_connected：代表当前已建立连接的数量，因为一个连接就需要一个线程，所以也可以看成当前被使用的线程数。<br>Threads_created：带包从最近一次服务启动，已创建线程的数量，如果发现Threads_created值过大的话，表明MySQL服务器一直在创建线程，这也是比较耗cpuSYS资源，可以适当增加配置文件中thread_cache_size值。<br>Threads_running：代表当前激活的（非睡眠状态）线程数。并不是代表正在使用的线程数，有时候连接已建立，但是连接处于sleep的状态。</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">thread_cache_size&#x3D;32
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>整理：<br>Threads_created：一般在架构设计阶段，会设置一个测试值，做压力测试。<br>结合zabbix监控，看一段时间内此状态的变化。<br>如果在一段时间内，Threads_created邹于平稳，说明对应参数设定是ok<br>如果一直陡峭的增长，或者出现大量峰值，那么继续增加此值的大小，在系统资源够用的情况下（内存）</p>
</blockquote>
<h5 id="innodb-buffer-pool-size"><a href="#innodb-buffer-pool-size" class="headerlink" title="innodb_buffer_pool_size"></a>innodb_buffer_pool_size</h5><p>1）简介</p>
<blockquote>
<p>对于InnoDB表来说，innodb_buffer_pool_size 的作用就相当于key_buffer_size 对于MyISAM 表的作用一样。</p>
</blockquote>
<p>2）配置</p>
<blockquote>
<p>InnoDb使用该参数指定大小的内存来缓冲数据和索引。<br>对于单独的MySQL数据库服务器，最大可以把该值设置成物理内存的80%，一般建议不要超过物理内存的70%。</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">innodb_buffer_pool_size&#x3D;2048M<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="innodb-flush-log-at-trx-commit"><a href="#innodb-flush-log-at-trx-commit" class="headerlink" title="innodb_flush_log_at_trx_commit"></a>innodb_flush_log_at_trx_commit</h5><p>1）简介<br>主要控制了innodb 将logbuffer 中的数据写入日志文件并flush磁盘的时间点，取值分别为0、1、2三个</p>
<ul>
<li>0：表示当事务提交时，不做日志写入操作，而是每秒钟将log  buffer中的数据写入日志文件并flush磁盘一次</li>
<li>1：每次事务的提交都会引起redo日志文件写入、flush磁盘的操作，确保了事务的ACID；</li>
<li>2：每次事务提交引起写入日志文件的动作，但每秒钟完成一个flush磁盘操作<br>2）配置依据</li>
</ul>
<blockquote>
<p>实际测试发现，该值对插入数据的速度影响非常大，设置为2时，插入10000条记录只需要2秒，设置0时只需要1秒，而设置为1时则需要229秒。因此，MySQL手册也建议尽量将插入操作合并成一个事务，这样可以大幅度提升速度。<br>根据Mysql官方文档，在允许丢失最近部分事务的危险的前提下，可以吧该值设为0或2。</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">innodb_flush_log_at_trx_commit&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>双一标准的一个1</p>
<h3 id="安全相关参数"><a href="#安全相关参数" class="headerlink" title="安全相关参数"></a>安全相关参数</h3><p>Innodb_flush_method&#x3D;(O_DIRECT, fsync…..) </p>
<h5 id="1-fsync"><a href="#1-fsync" class="headerlink" title="1.fsync"></a>1.fsync</h5><ul>
<li>在数据页需要持久化时，首先将数据写入OS buffer中，然后由os决定什么时候写入磁盘</li>
<li>在redo buffuer需要持久化时，首先将数据写入OS buffer中，然后由os决定什么时候写入磁盘<br> 但如果innodb_flush_log_at_trx_commit&#x3D;1的话，日志还是直接每次commit直接写入磁盘</li>
</ul>
<h5 id="2-Innodb-flush-method-x3D-O-DIRECT"><a href="#2-Innodb-flush-method-x3D-O-DIRECT" class="headerlink" title="2.Innodb_flush_method&#x3D;O_DIRECT"></a>2.Innodb_flush_method&#x3D;O_DIRECT</h5><ul>
<li>在数据页需要持久化时，直接写入磁盘</li>
<li>在redo buffer 需要持久化时，首先将数据写入OS buffer 中，然后由os决定什么时候写入磁盘，但如果innodb_fiush_log_at_trx_commit&#x3D;1的话，日志还是直接每次ommit直接写入磁盘</li>
</ul>
<p>最安全模式：</p>
<pre class="line-numbers language-none"><code class="language-none">innodb_flush_log_at_trx_commit&#x3D;1
innodb_flush_method&#x3D;O_DIRECT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>最高性能：</p>
<pre class="line-numbers language-none"><code class="language-none">innodb_flush_log_at_trx_commit&#x3D;0
innodb_flush_method&#x3D;fsync<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>一般情况下，我们更偏于安全<br>“双一标准”</p>
<pre class="line-numbers language-none"><code class="language-none">innodb_flush_log_at_trx_commit&#x3D;1        ***************
sync_binlog&#x3D;1                                   ***************
innodb_flush_method&#x3D;O_DIRECT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="binary-log"><a href="#binary-log" class="headerlink" title="binary log"></a>binary log</h5><pre class="line-numbers language-none"><code class="language-none">log-bin&#x3D;&#x2F;data&#x2F;mysql-bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>binlog_cache_size &#x3D; 2M</li>
</ul>
<blockquote>
<p>&#x2F;&#x2F;为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存, 提高记录bin-log的效率。没有什么大事务，dml也不是很频繁的情况下可以设置小一点，如果事务大而且多，dml操作也频繁，则可以适当的调大一点。前者建议是–1M，后者建议是：即 2–4M</p>
</blockquote>
<ul>
<li>max_binlog_cache_size &#x3D; 8M</li>
</ul>
<blockquote>
<p>&#x2F;&#x2F;表示的是binlog 能够使用的最大cache 内存大小</p>
</blockquote>
<ul>
<li>max_binlog_size&#x3D; 512M</li>
</ul>
<blockquote>
<p>&#x2F;&#x2F;指定binlog日志文件的大小，如果当前的日志大小达到max_binlog_size，还会自动创建新的二进制日志。你不能将该变量设置为大于1GB或小于4096字节。默认值是1GB。在导入大容量的sql文件时，建议关闭sql_log_bin，否则硬盘扛不住，而且建议定期做删除。</p>
</blockquote>
<ul>
<li>expire_logs_days &#x3D; 7</li>
</ul>
<blockquote>
<p>   &#x2F;&#x2F;定义了mysql清除过期日志的时间。<br>   二进制日志自动删除的天数。默认值为0,表示“没有自动删除”</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">log-bin&#x3D;&#x2F;data&#x2F;mysql-bin
binlog_format&#x3D;row 
sync_binlog&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>双一标准（基于安全的控制）：</p>
<pre class="line-numbers language-none"><code class="language-none">sync_binlog&#x3D;1   什么时候刷新binlog到磁盘，每次事务commit
innodb_flush_log_at_trx_commit&#x3D;1
set sql_log_bin&#x3D;0;
show status like &#39;com_%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<ol>
<li>双一是两个参数</li>
<li>第一个参数是控制redo刷写策略的</li>
<li>第二参数是控制binlog</li>
<li>首先介绍下redo的刷写策略</li>
<li>redo的书写策略,一共提供了三种,分别是:0,1,2</li>
<li>所谓的双一就是参数设置为1.</li>
<li>在5.5中默认是0,从5.6.x 开始默认是1.</li>
<li>当参数为1时, 每次事务的提交都会引起redo日志文件写入OS buffer、立即fsync()磁盘的操作，确保了事务ACID的持久性；</li>
<li>当参数为0,2时:<br>0，表示当事务提交时，不做日志写入操作，而是每秒钟将log buffer中的数据写入日志文件并flush磁盘一次；<br>2，每次事务提交引起写入日志文件的动作,但每秒钟完成一次flush磁盘操作。</li>
<li>另外,redo的刷写,还会受到Innodb_flush_method&#x3D;(O_DIRECT, fsync) </li>
<li>我们核心业务1,0………</li>
<li>sync_binlog&#x3D;1 ……..</li>
</ol>
</blockquote>
<h5 id="innodb-thread-concurrency"><a href="#innodb-thread-concurrency" class="headerlink" title="innodb_thread_concurrency"></a>innodb_thread_concurrency</h5><p>1）简介</p>
<blockquote>
<p>次参数用来设置innodb线程的并发数量，默认值为0表示不限制。</p>
</blockquote>
<p>2）配置依据</p>
<blockquote>
<p>在官方doc上，对于innodb_thread_concurrency的使用，也给出了一些建议，如下：<br>如果一个工作负载中，并发用户线程的数量小于64，建议设置innodb_thread_concurrency&#x3D;0；<br>如果工作负载一直较为严重甚至偶尔达到顶峰，建议先设置innodb_thread_concurrency&#x3D;128，<br>并通过不断的降低这个参数，96, 80, 64等等，直到发现能够提供最佳性能的线程数，<br>例如，假设系统通常有40到50个用户，但定期的数量增加至60，70，甚至200。你会发现，<br>性能在80个并发用户设置时表现稳定，如果高于这个数，性能反而下降。在这种情况下，<br>建议设置innodb_thread_concurrency参数为80，以避免影响性能。<br>如果你不希望InnoDB使用的虚拟CPU数量比用户线程使用的虚拟CPU更多（比如20个虚拟CPU），<br>建议通过设置innodb_thread_concurrency 参数为这个值（也可能更低，这取决于性能体现），<br>如果你的目标是将MySQL与其他应用隔离，你可以l考虑绑定mysqld进程到专有的虚拟CPU。<br>但是需 要注意的是，这种绑定，在myslqd进程一直不是很忙的情况下，可能会导致非最优的硬件使用率。在这种情况下，<br>你可能会设置mysqld进程绑定的虚拟 CPU，允许其他应用程序使用虚拟CPU的一部分或全部。<br>在某些情况下，最佳的innodb_thread_concurrency参数设置可以比虚拟CPU的数量小。<br>定期检测和分析系统，负载量、用户数或者工作环境的改变可能都需要对innodb_thread_concurrency参数的设置进行调整。<br>128   —–&gt; top  cpu  </p>
</blockquote>
<p>设置标准：</p>
<ul>
<li>1.当前系统cpu使用情况，均不均匀</li>
<li>2.当前的连接数，有没有达到顶峰</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">show status like &#39;threads_%&#39;;
show processlist;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>3）配置</p>
<pre class="line-numbers language-none"><code class="language-none">innodb_thread_concurrency&#x3D;8
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>方法：</p>
<ul>
<li>1.看top，观察每个cpu的各自的负载情况</li>
<li>2.发现不平均，先设置参数为cpou个数，然后不断增加（一倍）这个数值</li>
<li>3.一直观察top状态，直到达到比较均匀的时候，书名已经到位了。</li>
</ul>
<blockquote>
<p>innodb_log_buffer_size<br>此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，对于较大的事务，可以增大缓存大小。<br>innodb_log_buffer_size&#x3D;128M</p>
</blockquote>
<p>设定依据：</p>
<ol>
<li>大事务： 存储过程调用 CALL</li>
<li>多事务</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">innodb_log_file_size &#x3D; 100M *****
设置 ib_logfile0  ib_logfile1 
此参数确定数据日志文件的大小，以M为单位，更大的设置可以提高性能.
innodb_log_file_size &#x3D; 100M

innodb_log_files_in_group &#x3D; 3 *****
为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">read_buffer_size &#x3D; 1M **<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>MySql读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能。和 sort_buffer_size一样，该参数对应的分配内存也是每个连接独享</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">read_rnd_buffer_size &#x3D; 1M **<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>MySql的随机读（查询操作）缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大。<br>注：顺序读是指根据索引的叶节点数据就能顺序地读取所需要的行数据。随机读是指一般需要根据辅助索引叶节点中的主键寻找实际行数据，而辅助索引和主键所在的数据段不同，因此访问方式是随机的。</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">bulk_insert_buffer_size &#x3D; 8M **
批量插入数据缓存大小，可以有效提高插入效率，默认为8M
tokuDB    percona
myrocks   
RocksDB
TiDB
MongoDB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="六、总体优化参数"><a href="#六、总体优化参数" class="headerlink" title="六、总体优化参数"></a>六、总体优化参数</h1><pre class="line-numbers language-none"><code class="language-none">[mysqld]
basedir&#x3D;&#x2F;data&#x2F;mysql
datadir&#x3D;&#x2F;data&#x2F;mysql&#x2F;data
socket&#x3D;&#x2F;tmp&#x2F;mysql.sock
log-error&#x3D;&#x2F;var&#x2F;log&#x2F;mysql.log
log_bin&#x3D;&#x2F;data&#x2F;binlog&#x2F;mysql-bin
binlog_format&#x3D;row
skip-name-resolve
server-id&#x3D;52
gtid-mode&#x3D;on
enforce-gtid-consistency&#x3D;true
log-slave-updates&#x3D;1
relay_log_purge&#x3D;0
max_connections&#x3D;1024
back_log&#x3D;128
wait_timeout&#x3D;60
interactive_timeout&#x3D;7200
key_buffer_size&#x3D;16M
query_cache_size&#x3D;64M
query_cache_type&#x3D;1
query_cache_limit&#x3D;50M
max_connect_errors&#x3D;20
sort_buffer_size&#x3D;2M
max_allowed_packet&#x3D;32M
join_buffer_size&#x3D;2M
thread_cache_size&#x3D;200
innodb_buffer_pool_size&#x3D;4096M
innodb_flush_log_at_trx_commit&#x3D;1
innodb_log_buffer_size&#x3D;32M
innodb_log_file_size&#x3D;128M
innodb_log_files_in_group&#x3D;3
binlog_cache_size&#x3D;2M
max_binlog_cache_size&#x3D;8M
max_binlog_size&#x3D;512M
expire_logs_days&#x3D;7
read_buffer_size&#x3D;2M
read_rnd_buffer_size&#x3D;2M
bulk_insert_buffer_size&#x3D;8M
[client]
socket&#x3D;&#x2F;tmp&#x2F;mysql.sock  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="七、主从优化"><a href="#七、主从优化" class="headerlink" title="七、主从优化"></a>七、主从优化</h1><ol>
<li>5.7以上的版本(忘记小版本)</li>
<li>必须开启GTID </li>
<li>binlog必须是row模式</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">gtid_mode&#x3D;ON
enforce_gtid_consistency&#x3D;ON
log_slave_updates&#x3D;ON
slave-parallel-type&#x3D;LOGICAL_CLOCK
slave-parallel-workers&#x3D;16
master_info_repository&#x3D;TABLE
relay_log_info_repository&#x3D;TABLE
relay_log_recovery&#x3D;ON<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>5.7</p>
<pre class="line-numbers language-none"><code class="language-none">slave-parallel-type&#x3D;LOGICAL_CLOCK
slave-parallel-workers&#x3D;8
cpu核心数作为标准
CHANGE MASTER TO
  MASTER_HOST&#x3D;&#39;10.0.0.128&#39;,
  MASTER_USER&#x3D;&#39;repl&#39;,
  MASTER_PASSWORD&#x3D;&#39;123&#39;,
  MASTER_PORT&#x3D;3307,
  MASTER_AUTO_POSITION&#x3D;1;
start slave;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 备份恢复(mysqldump)</title>
    <url>/2019/03/19/MySQL%20%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D%EF%BC%88mysqldump%EF%BC%89/</url>
    <content><![CDATA[<h1 id="一、mysqldump"><a href="#一、mysqldump" class="headerlink" title="一、mysqldump"></a>一、mysqldump</h1><pre class="line-numbers language-none"><code class="language-none">[root@db01 ~]# mkdir &#x2F;data&#x2F;backup -p
[root@db01 ~]# mysqldump -uroot -p123456 -S &#x2F;tmp&#x2F;mysql.sock  xxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p> <strong>1. 备份基础参数</strong><br> 1）全备 -A</p>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 ~]# mysqldump -uroot -p123456 -S &#x2F;tmp&#x2F;mysql.sock  -A &gt;&#x2F;data&#x2F;backup&#x2F;full.sql
mysqldump: [Warning] Using a password on the command line interface can be insecure.
Warning: A partial dump from a server that has GTIDs will by default include the GTIDs of all transactions, 
even those that changed suppressed parts of the database. 
If you don&#39;t want to restore GTIDs, pass --set-gtid-purged&#x3D;OFF. To make a complete dump, pass --all-database<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2）单库或多库备份 -B</p>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 ~]# mysqldump -uroot -p123456 -S &#x2F;tmp&#x2F;mysql.sock  -B world oldboy &gt;&#x2F;data&#x2F;backup&#x2F;db.sql  
mysqldump: [Warning] Using a password on the command line interface can be insecure.
Warning: A partial dump from a server that has GTIDs will by default include the GTIDs of all transactions,
even those that changed suppressed parts of the database. 
If you don&#39;t want to restore GTIDs, pass --set-gtid-purged&#x3D;OFF. To make a complete dump, pass --all-databases --triggers --routines --events. <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3）单表或多表备份</p>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 ~]# mysqldump -uroot -p123456 -S &#x2F;tmp&#x2F;mysql.sock  world city country &gt;&#x2F;data&#x2F;backup&#x2F;tub.sql
mysqldump: [Warning] Using a password on the command line interface can be insecure.
Warning: A partial dump from a server that has GTIDs will by default include the GTIDs of all transactions,
even those that changed suppressed parts of the database.
If you don&#39;t want to restore GTIDs, pass --set-gtid-purged&#x3D;OFF. To make a complete dump, pass --all-databases --triggers --routines --events.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>2. 特殊备份参数</strong><br>1）–master-data&#x3D;2<br>在备份时，自动记录二进制日志的文件和位置号<br>可以自动加锁和解锁<br>加了 –single-transaction 可以减少锁表时间</p>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 ~]# mysqldump -uroot -p123456 -S &#x2F;tmp&#x2F;mysql.sock  -A --master-data&#x3D;2 &gt;&#x2F;data&#x2F;backup&#x2F;tub.sql
mysqldump: [Warning] Using a password on the command line interface can be insecure.
Warning: A partial dump from a server that has GTIDs will by default include the GTIDs of all transactions,
even those that changed suppressed parts of the database.
If you don&#39;t want to restore GTIDs, pass --set-gtid-purged&#x3D;OFF. To make a complete dump, pass --all-databases --triggers --routines --events. <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">-- CHANGE MASTER TO MASTER_LOG_FILE&#x3D;&#39;mysql-bin.000006&#39;, MASTER_LOG_POS&#x3D;332;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>2）–single-transaction<br>在对于InnoDB表备份时，开启一个单独事务，备份所有表的一致性快照数据。<br>3） -R  -E –triggers</p>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 ~]#  mysqldump -uroot -p123456 -S &#x2F;tmp&#x2F;mysql.sock  -A --master-data&#x3D;2 --single-transaction -R -E --triggers   &gt;&#x2F;data&#x2F;backup&#x2F;full.sql
mysqldump: [Warning] Using a password on the command line interface can be insecure.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>4）–max-allowed-packet 最大的数据包大小 给128M就可以，不够再加<br>1153 - Got a packet bigger than ‘max_allowed_packet’ bytes</p>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 ~]#  mysqldump -uroot -p456 -S &#x2F;tmp&#x2F;mysql.sock -A --master-data&#x3D;2 --single-transaction -R -E --triggers --max-allowed-packet&#x3D;128M &gt;&#x2F;data&#x2F;backup&#x2F;full.sql
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>5）–set-gtid-purged&#x3D;OFF<br>使用场景：在构建主从复制时，千万不要OFF，在日常备份时，可以OFF</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 日志管理</title>
    <url>/2019/03/26/MySQL%20%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="一、工具日志管理"><a href="#一、工具日志管理" class="headerlink" title="一、工具日志管理"></a>一、工具日志管理</h1><h3 id="1-错误日志"><a href="#1-错误日志" class="headerlink" title="1. 错误日志"></a>1. 错误日志</h3><p>配置：<br>默认文件存放在数据目录下，HOSTNAME.err<br>手动指定路径：</p>
<pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;my.cnf
log_error&#x3D;&#x2F;data&#x2F;mysql&#x2F;data&#x2F;mysql.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="2-二进制日志"><a href="#2-二进制日志" class="headerlink" title="2. 二进制日志"></a>2. 二进制日志</h3><p>二进制形式，记录MySQL 工作过程中，所有变更类（除了select和show）的操作日志<br>可以理解为记录的是SQL语句，逻辑性质日志。<br>配置：</p>
<pre class="line-numbers language-none"><code class="language-none">server_id&#x3D;51
log_bin&#x3D;&#x2F;data&#x2F;binlog&#x2F;mysql-bin
binlog_format&#x3D;row
sync_binlog&#x3D;1
说明：&#x2F;data&#x2F;binglog  提前创建好，并且授权，和数据目录放在不同的位置 mysql-bin 叫做文件名前缀
binlog_format&#x3D;row    二进制日志记录格式
sync_binlog&#x3D;1          双一标准，每次事务提交立即刷写binlog
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">[root@db01 ~]# vim &#x2F;etc&#x2F;my.cnf 
[mysqld]
user&#x3D;mysql
basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql
datadir&#x3D;&#x2F;data&#x2F;mysql&#x2F;data
socket&#x3D;&#x2F;tmp&#x2F;mysql.sock
server_id&#x3D;51
log_bin&#x3D;&#x2F;data&#x2F;binlog&#x2F;mysql-bin
binlog_format&#x3D;row
sync_binlog&#x3D;1

---- 重启 mysql
[root@db01 ~]# &#x2F;etc&#x2F;init.d&#x2F;mysqld  restart 
Shutting down MySQL.... SUCCESS! 
Starting MySQL. SUCCESS! 

--- 可以看到&#x2F;data&#x2F;binlog 中多了文件
[root@db01 ~]# ll &#x2F;data&#x2F;binlog&#x2F;
total 8
-rw-r----- 1 mysql mysql 154 Sep 11 11:20 mysql-bin.000001
-rw-r----- 1 mysql mysql  30 Sep 11 11:20 mysql-bin.inde<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>2.1 binlog存储内容介绍</strong><br>DDL，DCL：create，drop，alter…..  记录方式为Statement(SQL语句)模式记录<br>DML ：insert  update   delete   记录已经提交的DML语句<br>记录模式：</p>
<ul>
<li>statement（SBR）：语句模式，记录的就是SQL 语句本身</li>
<li>ROW （RBR）：行模式，记录的是数据行的变化</li>
<li>Mixed（MBR）：混合模式，自动判断用什么模式存储日志<br>建议使用：RBR（&gt; &#x3D;5.7.7默认ROW）</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; select @@binlog_format;
+-----------------+
| @@binlog_format |
+-----------------+
| ROW             |
+-----------------+
1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>RBR和SBR 优缺点：<br>500w数据，<br>update t1 set name&#x3D;’zs’ where id&gt;400w;</p>
<ul>
<li>SBR：语句模式记录，可读性强，日志量小，记录数据不够严谨，有可能出现记录错误，比如存了个NOW()，恢复的时候并不是当时的时间</li>
<li>RBR：记录行变化，可读性差，日志量大，足够严谨。<br>MySQL一些新特性，必须要基于ROW模式，GTID, GZ, MTS</li>
</ul>
<p><strong>2.2 binlog的事件介绍</strong><br>event 事件，binlog 记录的最小单元<br>start    position（文件中的相对位置号），开始事件<br>事件内容<br>stop   position（文件中的相对位置号），结束事件</p>
<p><strong>2.3 binlog的查看</strong><br>1）日志文件位置：</p>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; select @@log_bin_basename;
+------------------------+
| @@log_bin_basename     |
+------------------------+
| &#x2F;data&#x2F;binlog&#x2F;mysql-bin |
+------------------------+
1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2）查看所有日志文件名</p>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; show binary logs;
+------------------+-----------+
| Log_name         | File_size |
+------------------+-----------+
| mysql-bin.000001 |       154 |
+------------------+-----------+
1 row in set (0.00 sec)

mysql&gt; 
mysql&gt; flush logs;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; show binary logs;
+------------------+-----------+
| Log_name         | File_size |
+------------------+-----------+
| mysql-bin.000001 |       201 |
| mysql-bin.000002 |       154 |
+------------------+-----------+
2 rows in set (0.00 sec)

mysql&gt; flush logs;      
Query OK, 0 rows affected (0.01 sec)

mysql&gt; show binary logs;
+------------------+-----------+
| Log_name         | File_size |
+------------------+-----------+
| mysql-bin.000001 |       201 |
| mysql-bin.000002 |       201 |
| mysql-bin.000003 |       154 |
+------------------+-----------+
3 rows in set (0.00 sec)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3）查看Mysql正在使用的binglog</p>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; show master status;
+------------------+----------+--------------+------------------+-------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+------------------+----------+--------------+------------------+-------------------+
| mysql-bin.000003 |      154 |              |                  |                   |
+------------------+----------+--------------+------------------+-------------------+
1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>4）查看正在使用的binlog事件信息</p>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; show binlog events in &#39;mysql-bin.000003&#39;;
+------------------+-----+----------------+-----------+-------------+---------------------------------------+
| Log_name         | Pos | Event_type     | Server_id | End_log_pos | Info                                  |
+------------------+-----+----------------+-----------+-------------+---------------------------------------+
| mysql-bin.000003 |   4 | Format_desc    |        51 |         123 | Server ver: 5.7.26-log, Binlog ver: 4 |
| mysql-bin.000003 | 123 | Previous_gtids |        51 |         154 |                                       |
+------------------+-----+----------------+-----------+-------------+---------------------------------------+
2 rows in set (0.00 sec)


---介绍
---Pos：事件开始的位置点（position）
---End_log_pos：事件结束的位置点（position）
---Info：事件内容
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>5）查看binlog内容</p>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 ~]# mysqlbinlog &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000003|grep -v &#39;SET&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>语句看不懂，查看详细语句</p>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 ~]# mysqlbinlog --base64-output&#x3D;decode-rows -vvvv &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000003|grep -v &#39;SET&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>2.4 binlog的截取</strong><br>模拟环境准备：</p>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; use world;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql&gt; 
mysql&gt; create table test(id int)charset utf8mb4;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; insert into test values(1);
Query OK, 1 row affected (0.00 sec)

mysql&gt; insert into test values(2);
Query OK, 1 row affected (0.00 sec)

mysql&gt; insert into test values(3);
Query OK, 1 row affected (0.00 sec)

mysql&gt; commit;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; 
mysql&gt; insert into test values(4);
Query OK, 1 row affected (0.00 sec)

mysql&gt; insert into test values(5);
Query OK, 1 row affected (0.00 sec)

mysql&gt; insert into test values(6);
Query OK, 1 row affected (0.00 sec)

mysql&gt; 
mysql&gt; commit;
Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">mysql&gt; drop table test;
Query OK, 0 rows affected (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>要求：使用binlog 恢复 test表的数据<br>截取日志</p>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; show binlog events in &#39;mysql-bin.000003&#39;;
--- 起点：967
| mysql-bin.000003 | 967 | Query | 51 | 1083 | use &#96;world&#96;; create table test(id int)charset utf8mb4 |
--- 终点：2014
| mysql-bin.000003 | 2014 | Query | 51 | 2133 | use &#96;world&#96;; DROP TABLE &#96;test&#96; &#x2F;* generated by server *&#x2F; |
--- 截取：
mysqlbinlog --start-position&#x3D;967--stop-position&#x3D;2014  &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000003 &gt;&#x2F;tmp&#x2F;t.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>2.5 数据恢复</strong></p>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; set sql_log_bin&#x3D;0;
Query OK, 0 rows affected (0.00 sec)
mysql&gt; source &#x2F;tmp&#x2F;t.sql
mysql&gt; set sql_log_bin&#x3D;1;
Query OK, 0 rows affected (0.00 sec)
mysql&gt; use world
Database changed
mysql&gt; 
mysql&gt; select *from test
    -&gt; ;
+------+
| id   |
+------+
|    1 |
|    2 |
|    3 |
|    4 |
|    5 |
|    6 |
+------+
6 rows in set (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>补充：<br>200G 每天（23：00）全备，每天备份binlog，周三上午10点误删的表t1<br>恢复思路：<br>停业务，挂维护页<br>找临时库，恢复全备<br>截取全备之后，一直到删除之前的所有binlog<br>导出表，导入到生产<br><strong>2.6 binlog扩展-gtid模式（5.6.9）</strong><br>1）gtid（global trans）介绍<br>在传统模式的基础上，加入对于每个事物唯一的编号<br>DDL,DCL一条语句就是一个事务，会分配一个唯一的GTID号码<br>DML，从begin；xxx; commit；作为一个完整的事务，分配一个唯一的gtid号<br>这些号码是唯一，连续，具备幂等性的<br>2）gtid格式<br>server_uuid：TID</p>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 ~]# cd &#x2F;data&#x2F;mysql&#x2F;data&#x2F;
[root@db01 data]# cat auto.cnf 
[auto]
server-uuid&#x3D;1e91fb5a-cd38-11e9-b843-000c29303796<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">mysql&gt; select @@server_uuid;
+--------------------------------------+
| @@server_uuid                        |
+--------------------------------------+
| 1e91fb5a-cd38-11e9-b843-000c29303796 |
+--------------------------------------+
1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3）配置</p>
<pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;my.cnf
gtid_mode&#x3D;no
enforce_gtid_consistency&#x3D;on

--- 重启
&#x2F;etc&#x2F;init.d&#x2F;mysqld restart <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">mysql&gt;  show variables like &#39;%gtid%&#39;;
+----------------------------------+-----------+
| Variable_name                    | Value     |
+----------------------------------+-----------+
| binlog_gtid_simple_recovery      | ON        |
| enforce_gtid_consistency         | OFF       |
| gtid_executed_compression_period | 1000      |
| gtid_mode                        | OFF       |
| gtid_next                        | AUTOMATIC |
| gtid_owned                       |           |
| gtid_purged                      |           |
| session_track_gtids              | OFF       |
+----------------------------------+-----------+
8 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">mysql&gt; create database x;
Query OK, 1 row affected (0.01 sec)
  
mysql&gt; show master status;
+------------------+----------+--------------+------------------+----------------------------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                      |
+------------------+----------+--------------+------------------+----------------------------------------+
| mysql-bin.000005 |      304 |              |                  | 1e91fb5a-cd38-11e9-b843-000c29303796:1 |
+------------------+----------+--------------+------------------+----------------------------------------+
1 row in set (0.00 sec)

mysql&gt; create database ha;
Query OK, 1 row affected (0.00 sec)

mysql&gt; show master status;
+------------------+----------+--------------+------------------+------------------------------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                        |
+------------------+----------+--------------+------------------+------------------------------------------+
| mysql-bin.000005 |      457 |              |                  | 1e91fb5a-cd38-11e9-b843-000c29303796:1-2 |
+------------------+----------+--------------+------------------+------------------------------------------+
1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>4）gtid日志截取</p>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 ~]# mysqlbinlog --skip-gtids --include-gtids&#x3D;&#39;a7f67e4b-cd4e-11e9-aaa3-000c292e8458:1-4&#39; --exclude-gtids&#x3D;&#39;a7f67e4b-cd4e-11e9-aaa3-000c292e8458:2&#39; &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000004 &gt;&#x2F;tmp&#x2F;1.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>结论：在开启GTID 模式的binlog截取时，都要加–skip-gtids</p>
<p><strong>2.7 binlog的删除</strong></p>
<p>1）什么时候可以删除binlog<br>保证有一份可用的全备，看全备的周期，<br>2）删除<br>自动删除：<br>日志过期时间，自动清理</p>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; select @@expire_logs_days 
    -&gt; ;
+--------------------+
| @@expire_logs_days |
+--------------------+
|                  0 |
+--------------------+
1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;my.cnf
expire_logs_days&#x3D;15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>一般会保留两个全备周期+1天数，比如7天全备一次，保留时间15天<br>手动删除：</p>
<pre class="line-numbers language-none"><code class="language-none">Examples:
PURGE BINARY LOGS TO &#39;mysql-bin.010&#39;;
PURGE BINARY LOGS BEFORE &#39;2008-04-02 22:46:26&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">mysql&gt; show binary logs;
+------------------+-----------+
| Log_name         | File_size |
+------------------+-----------+
| mysql-bin.000001 |       201 |
| mysql-bin.000002 |       201 |
| mysql-bin.000003 |      2340 |
| mysql-bin.000004 |       177 |
| mysql-bin.000005 |       613 |
+------------------+-----------+
5 rows in set (0.00 sec)
mysql&gt; purge binary logs to &#39;mysql-bin.000003&#39;;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; show binary logs;
+------------------+-----------+
| Log_name         | File_size |
+------------------+-----------+
| mysql-bin.000003 |      2340 |
| mysql-bin.000004 |       177 |
| mysql-bin.000005 |       613 |
+------------------+-----------+
3 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">reset master;
mysql&gt; show binary logs;
+------------------+-----------+
| Log_name         | File_size |
+------------------+-----------+
| mysql-bin.000001 |       154 |
+------------------+-----------+
1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2.8 binlog滚动</p>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; flush logs;
Query OK, 0 rows affected (0.01 sec)
mysql&gt; flush logs;      
Query OK, 0 rows affected (0.00 sec)

mysql&gt; flush logs;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; flush logs;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; flush logs;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; show binary logs;
+------------------+-----------+
| Log_name         | File_size |
+------------------+-----------+
| mysql-bin.000001 |       201 |
| mysql-bin.000002 |       201 |
| mysql-bin.000003 |       201 |
| mysql-bin.000004 |       201 |
| mysql-bin.000005 |       154 |
+------------------+-----------+
5 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>重启会滚动</p>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; flush logs;
Query OK, 0 rows affected (0.01 sec)
mysql&gt; flush logs;      
Query OK, 0 rows affected (0.00 sec)

mysql&gt; flush logs;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; flush logs;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; flush logs;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; show binary logs;
+------------------+-----------+
| Log_name         | File_size |
+------------------+-----------+
| mysql-bin.000001 |       201 |
| mysql-bin.000002 |       201 |
| mysql-bin.000003 |       201 |
| mysql-bin.000004 |       201 |
| mysql-bin.000005 |       154 |
+------------------+-----------+
5 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="3、慢日志"><a href="#3、慢日志" class="headerlink" title="3、慢日志"></a>3、慢日志</h3><p>3.1 介绍<br>以文本格式，记录MySQL 较慢的SQL语句，追加记录方式<br>3.2 配置</p>
<blockquote>
<p>slow_query_log&#x3D;1<br>slow_query_log_file&#x3D;&#x2F;data&#x2F;mysql&#x2F;data&#x2F;db01-slow.log<br>long_query_time&#x3D;0.1<br>log_queries_not_using_indexes&#x3D;1</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; show variables like &#39;%slow%&#39;;
+---------------------------+--------------------------------+
| Variable_name             | Value                          |
+---------------------------+--------------------------------+
| log_slow_admin_statements | OFF                            |
| log_slow_slave_statements | OFF                            |
| slow_launch_time          | 2                              |
| slow_query_log            | OFF                            |
| slow_query_log_file       | &#x2F;data&#x2F;mysql&#x2F;data&#x2F;db01-slow.log |
+---------------------------+--------------------------------+
5 rows in set (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">mysql&gt; select @@slow_query_log;
+------------------+
| @@slow_query_log |
+------------------+
|                0 |
+------------------+
1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">mysql&gt; select @@long_query_time;
+-------------------+
| @@long_query_time |
+-------------------+
|         10.000000 |
+-------------------+
1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在配置文件中写入以下配置</p>
<pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;my.cnf
slow_query_log&#x3D;1
slow_query_log_file&#x3D;&#x2F;data&#x2F;mysql&#x2F;data&#x2F;db01-slow.log 
long_query_time&#x3D;0.1
log_queries_not_using_indexes&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>1.3.4<br>测试语句查询时间</p>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 ~]# mysqldumpslow -s c  -t 3  &#x2F;data&#x2F;mysql&#x2F;data&#x2F;db01-slow.log

Reading mysql slow query log from &#x2F;data&#x2F;mysql&#x2F;data&#x2F;db01-slow.log
Count: 3  Time&#x3D;0.63s (1s)  Lock&#x3D;0.00s (0s)  Rows&#x3D;1.3 (4), root[root]@localhost
  select * from t100w where num&#x3D;N

Count: 1  Time&#x3D;0.37s (0s)  Lock&#x3D;0.00s (0s)  Rows&#x3D;265.0 (265), root[root]@localhost
  select k2 from t100w where k2&#x3D;&#39;S&#39;

Count: 1  Time&#x3D;0.38s (0s)  Lock&#x3D;0.00s (0s)  Rows&#x3D;0.0 (0), root[root]@localhost
  select * from t100w where k1&#x3D;&#39;S&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL主从复制（Replication）</title>
    <url>/2019/03/23/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%EF%BC%88Replication%EF%BC%89/</url>
    <content><![CDATA[<h1 id="一、主从复制"><a href="#一、主从复制" class="headerlink" title="一、主从复制"></a>一、主从复制</h1><h5 id="1-主从复制介绍"><a href="#1-主从复制介绍" class="headerlink" title="1.主从复制介绍"></a>1.主从复制介绍</h5><p>两台MySQL实例，通过binlog  自动 “实时” 同步数据<br>通常可以用作：辅助备份+ 架构演变</p>
<h5 id="2-主从复制搭建"><a href="#2-主从复制搭建" class="headerlink" title="2.主从复制搭建"></a>2.主从复制搭建</h5><ul>
<li>两台以上MySQL实例（server_id不同，port，socket等），确认主从身份</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; select @@server_id;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>主库开启二进制（binlog）日志</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; select @@log_bin;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>主库开启复制专用用户：replication slave</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; grant replication slave on *.* to repl@&#39;10.0.0.5%&#39; identified by &#39;123&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<ul>
<li>主库备份恢复到从库</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">mysqldump -uroot -p456 -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -A --master-data&#x3D;2 --single-transaction &gt;&#x2F;tmp&#x2F;full.sql
mysql -S &#x2F;data&#x2F;3308&#x2F;mysql.sock
mysql&gt; set sql_log_bin&#x3D;0;
mysql&gt; source &#x2F;tmp&#x2F;full.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>告诉从库复制相关信息：change master to  ，IP，port user  password    file_name  position<ul>
<li>起点：</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">vim &#x2F;tmp&#x2F;full.sql
-- CHANGE MASTER TO MASTER_LOG_FILE&#x3D;&#39;mysql-bin.000002&#39;, MASTER_LOG_POS&#x3D;444;
mysql&gt; change master to;
CHANGE MASTER TO
  MASTER_HOST&#x3D;&#39;10.0.0.62&#39;,
  MASTER_USER&#x3D;&#39;repl&#39;,
  MASTER_PASSWORD&#x3D;&#39;123456&#39;,
  MASTER_PORT&#x3D;3307,
  MASTER_LOG_FILE&#x3D;&#39;mysql-bin.000002&#39;,
  MASTER_LOG_POS&#x3D;444,
  MASTER_CONNECT_RETRY&#x3D;10;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>从库开启复制线程：start  slave;</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; show slave status \G;
--- 两个yes 就是成功
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="3-主从复制过程原理"><a href="#3-主从复制过程原理" class="headerlink" title="3.主从复制过程原理"></a>3.主从复制过程原理</h5><h6 id="3-1-涉及到的文件"><a href="#3-1-涉及到的文件" class="headerlink" title="3.1 涉及到的文件"></a>3.1 涉及到的文件</h6><ul>
<li>主库：binlog  </li>
<li>从库：<ul>
<li>relaylog 中继日志：存储请求的binlog    </li>
<li>master.info ：存储change master to 信息</li>
<li>relaylog.info：上次已经回放relay的位置点</li>
</ul>
</li>
</ul>
<h6 id="3-2-涉及到的线程"><a href="#3-2-涉及到的线程" class="headerlink" title="3.2 涉及到的线程"></a>3.2 涉及到的线程</h6><ul>
<li>主库<ul>
<li>binlog dump thread<pre class="line-numbers language-none"><code class="language-none">mysql&gt; show processlist\G;
*************************** 1. row ***************************
     Id: 6
   User: repl
   Host: db01:55196
     db: NULL
Command: Binlog Dump
   Time: 10015
  State: Master has sent all binlog to slave; waiting for more updates
   Info: NULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li>从库 ：<ul>
<li>slave_io_running</li>
<li>slave_sql_running</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 ~]# mysql -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;show slave status \G&quot;|grep Running;
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h6 id="3-3工作过程原理："><a href="#3-3工作过程原理：" class="headerlink" title="3.3工作过程原理："></a>3.3工作过程原理：</h6><ul>
<li>change master to 时，ip port user password binlog position写入到master.info进行记录</li>
<li>start slave 时，从库会启动IO线程和SQL线程</li>
<li>IO_T，读取master.info信息，获取主库信息连接主库</li>
<li>主库会生成一个准备binlog DUMP线程，来响应从库</li>
<li>IO_T根据master.info记录的binlog文件名和position号，请求主库DUMP最新日志</li>
<li>DUMP线程检查主库的binlog日志，如果有新的，TP(传送)给从从库的IO_T</li>
<li>IO_T将收到的日志存储到了TCP&#x2F;IP 缓存，立即返回ACK(网络层面)给主库 ，主库工作完成</li>
<li>IO_T将缓存中的数据，存储到relay-log日志文件,更新master.info文件binlog 文件名和postion，IO_T工作完成</li>
<li>SQL_T读取relay-log.info文件，获取到上次执行到的relay-log的位置，作为起点，回放relay-log</li>
<li>SQL_T回放完成之后，会更新relay-log.info文件。</li>
<li>relay-log会有自动清理的功能。<br> <img src="https://img-blog.csdnimg.cn/343ba10293484586a6c435a6a36b25c3.png" alt="在这里插入图片描述"></li>
</ul>
<p>  细节：</p>
<ul>
<li>主库一旦有新的日志生成，会发送“信号”给binlog dump ，IO线程再请求</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 world]# cd &#x2F;data&#x2F;3308&#x2F;data&#x2F;
[root@db01 data]# ll
total 122940
-rw-r----- 1 mysql mysql       56 Sep  3 15:18 auto.cnf
-rw-r----- 1 mysql mysql        6 Sep 16 12:19 db01.pid
-rw-r----- 1 mysql mysql      206 Sep 16 12:28 db01-relay-bin.000001
-rw-r----- 1 mysql mysql      320 Sep 16 12:28 db01-relay-bin.000002
-rw-r----- 1 mysql mysql       48 Sep 16 12:28 db01-relay-bin.index
drwxr-x--- 2 mysql mysql       20 Sep 16 12:23 ha
-rw-r----- 1 mysql mysql      359 Sep 16 10:13 ib_buffer_pool
-rw-r----- 1 mysql mysql 12582912 Sep 16 12:24 ibdata1
-rw-r----- 1 mysql mysql 50331648 Sep 16 12:24 ib_logfile0
-rw-r----- 1 mysql mysql 50331648 Sep 16 12:24 ib_logfile1
-rw-r----- 1 mysql mysql 12582912 Sep 16 12:19 ibtmp1
-rw-r----- 1 mysql mysql      122 Sep 16 15:52 master.info
drwxr-x--- 2 mysql mysql       48 Sep 16 12:23 mdp
drwxr-x--- 2 mysql mysql     4096 Sep 16 12:23 mysql
drwxr-x--- 2 mysql mysql       54 Sep 16 12:23 oldboy
drwxr-x--- 2 mysql mysql     8192 Sep  3 15:18 performance_schema
-rw-r----- 1 mysql mysql       58 Sep 16 12:28 relay-log.info
drwxr-x--- 2 mysql mysql       20 Sep 16 12:23 sch
drwxr-x--- 2 mysql mysql      176 Sep 16 12:23 school
drwxr-x--- 2 mysql mysql     8192 Sep  3 15:18 sys
drwxr-x--- 2 mysql mysql       52 Sep 16 12:23 test
drwxr-x--- 2 mysql mysql      246 Sep 16 12:23 world
drwxr-x--- 2 mysql mysql       46 Sep 16 12:23 x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从库可以查看日志：master.info</p>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 data]# cat master.info 
25
mysql-bin.000002
444
10.0.0.51
repl
123456
3307
10
0





0
30.000

0
031e1ee9-ce1b-11e9-8e51-000c29303796
86400


0

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="4-主从复制监控"><a href="#4-主从复制监控" class="headerlink" title="4.主从复制监控"></a>4.主从复制监控</h5><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show slave status \G;
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 10.0.0.51
                  Master_User: repl
                  Master_Port: 3307
                Connect_Retry: 10
              Master_Log_File: mysql-bin.000002
          Read_Master_Log_Pos: 444
               Relay_Log_File: db01-relay-bin.000002
                Relay_Log_Pos: 320
        Relay_Master_Log_File: mysql-bin.000002
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
              Replicate_Do_DB: 
          Replicate_Ignore_DB: 
           Replicate_Do_Table: 
       Replicate_Ignore_Table: 
      Replicate_Wild_Do_Table: 
  Replicate_Wild_Ignore_Table: 
                   Last_Errno: 0
                   Last_Error: 
                 Skip_Counter: 0
          Exec_Master_Log_Pos: 444
              Relay_Log_Space: 526
              Until_Condition: None
               Until_Log_File: 
                Until_Log_Pos: 0
           Master_SSL_Allowed: No
           Master_SSL_CA_File: 
           Master_SSL_CA_Path: 
              Master_SSL_Cert: 
            Master_SSL_Cipher: 
               Master_SSL_Key: 
        Seconds_Behind_Master: 0
Master_SSL_Verify_Server_Cert: No
                Last_IO_Errno: 0
                Last_IO_Error: 
               Last_SQL_Errno: 0
               Last_SQL_Error: 
  Replicate_Ignore_Server_Ids: 
             Master_Server_Id: 7
                  Master_UUID: 031e1ee9-ce1b-11e9-8e51-000c29303796
             Master_Info_File: &#x2F;data&#x2F;3308&#x2F;data&#x2F;master.info
                    SQL_Delay: 0
          SQL_Remaining_Delay: NULL
      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates
           Master_Retry_Count: 86400
                  Master_Bind: 
      Last_IO_Error_Timestamp: 
     Last_SQL_Error_Timestamp: 
               Master_SSL_Crl: 
           Master_SSL_Crlpath: 
           Retrieved_Gtid_Set: 
            Executed_Gtid_Set: 
                Auto_Position: 0
         Replicate_Rewrite_DB: 
                 Channel_Name: 
           Master_TLS_Version: 
1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h6 id="4-1主库相关信息"><a href="#4-1主库相关信息" class="headerlink" title="4.1主库相关信息"></a>4.1主库相关信息</h6><pre class="line-numbers language-none"><code class="language-none">Master_Host: 10.0.0.51
Master_User: repl
Master_Port: 3307
Connect_Retry: 10
Master_Log_File: mysql-bin.000002
Read_Master_Log_Pos: 444<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h6 id="4-2-从库relaylog-的信息（relay-log-info）从库的320对应主库的444"><a href="#4-2-从库relaylog-的信息（relay-log-info）从库的320对应主库的444" class="headerlink" title="4.2  从库relaylog 的信息（relay-log.info）从库的320对应主库的444"></a>4.2  从库relaylog 的信息（relay-log.info）从库的320对应主库的444</h6><pre class="line-numbers language-none"><code class="language-none">Relay_Log_File: db01-relay-bin.000002
Relay_Log_Pos: 320
Relay_Master_Log_File: mysql-bin.000002
Exec_Master_Log_Pos: 444<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h6 id="4-3-线程状态："><a href="#4-3-线程状态：" class="headerlink" title="4.3 线程状态："></a>4.3 线程状态：</h6><pre class="line-numbers language-none"><code class="language-none">Slave_IO_Running: Yes
Slave_SQL_Running: Yes
--- 如果上面线程启动失败，则看下面的参数
Last_IO_Errno: 0
Last_IO_Error: 
Last_SQL_Errno: 0
Last_SQL_Error: <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>或者：<br>从库日志（log_error）线程启动no，但是没有报错信息可以查看</p>
<h6 id="4-4-过滤复制有关信息"><a href="#4-4-过滤复制有关信息" class="headerlink" title="4.4 过滤复制有关信息"></a>4.4 过滤复制有关信息</h6><pre class="line-numbers language-none"><code class="language-none">Replicate_Do_DB: 
Replicate_Ignore_DB: 
Replicate_Do_Table: 
Replicate_Ignore_Table: 
Replicate_Wild_Do_Table: 
Replicate_Wild_Ignore_Table: <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h6 id="4-5-从库延时主库的时间"><a href="#4-5-从库延时主库的时间" class="headerlink" title="4.5 从库延时主库的时间"></a>4.5 从库延时主库的时间</h6><pre class="line-numbers language-none"><code class="language-none">Seconds_Behind_Master: 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h6 id="4-6-延时从库（可以手动定制）"><a href="#4-6-延时从库（可以手动定制）" class="headerlink" title="4.6 延时从库（可以手动定制）"></a>4.6 延时从库（可以手动定制）</h6><pre class="line-numbers language-none"><code class="language-none">SQL_Delay: 0
SQL_Remaining_Delay: NULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h6 id="4-7-GTID-复制状态"><a href="#4-7-GTID-复制状态" class="headerlink" title="4.7 GTID 复制状态"></a>4.7 GTID 复制状态</h6><pre class="line-numbers language-none"><code class="language-none">Retrieved_Gtid_Set: 
Executed_Gtid_Set: 
Auto_Position: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="5-主从复制故障"><a href="#5-主从复制故障" class="headerlink" title="5.主从复制故障"></a>5.主从复制故障</h5><h6 id="5-1-IO线程"><a href="#5-1-IO线程" class="headerlink" title="5.1 IO线程"></a>5.1 IO线程</h6><pre class="line-numbers language-none"><code class="language-none">Slave_IO_Running: Yes
Last_IO_Errno: 0
Last_IO_Error: <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>1）连接主库 connecting</p>
<ul>
<li>IP</li>
<li>port</li>
<li>password</li>
<li>网络</li>
<li>防火墙</li>
<li>主库没起<br>排查：<br><strong>1. 查看从库的master.info</strong></li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 data]# pwd
&#x2F;data&#x2F;3308&#x2F;data
[root@db01 data]# cat master.info 
25
mysql-bin.000002
444
10.0.0.51
repl
123456
3307
10
0





0
30.000

0
031e1ee9-ce1b-11e9-8e51-000c29303796
86400


0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>使用以上信息手工连接，查看结果</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 ~]# mysql -urepl -p123 -h 10.0.0.52 -P3307
mysql: [Warning] Using a password on the command line interface can be insecure.
ERROR 2003 (HY000): Can&#39;t connect to MySQL server on &#39;10.0.0.52&#39; (113)
[root@db01 ~]# mysql -urepl -p123 -h 10.0.0.51 -P3301
mysql: [Warning] Using a password on the command line interface can be insecure.
ERROR 2003 (HY000): Can&#39;t connect to MySQL server on &#39;10.0.0.51&#39; (111)
[root@db01 ~]# mysql -urepl -p123 -h 10.0.0.51 -P3307
mysql: [Warning] Using a password on the command line interface can be insecure.
ERROR 2003 (HY000): Can&#39;t connect to MySQL server on &#39;10.0.0.51&#39; (111)
[root@db01 ~]# mysql -urepl -p1234 -h 10.0.0.51 -P3307
mysql: [Warning] Using a password on the command line interface can be insecure.
ERROR 1045 (28000): Access denied for user &#39;repl&#39;@&#39;db01&#39; (using password: YES)
[root@db01 ~]# mysql -urepla -p123 -h 10.0.0.51 -P3307
mysql: [Warning] Using a password on the command line interface can be insecure.
ERROR 1045 (28000): Access denied for user &#39;repla&#39;@&#39;db01&#39; (using password: YES)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在从库处理：</p>
<blockquote>
<p>stop  slave all;<br>reset slave all<br>change master to..<br>start salve;<br>show salve status\G;</p>
</blockquote>
<p>2）请求binlog<br>起点错误<br>主库二进制日志破坏</p>
<pre class="line-numbers language-none"><code class="language-none">Got fatal error 1236 from master when reading data from binary log: &#39;log event entry exceeded max_allowed_packet; Increase max_allowed_packet on master; the first event &#39;mysql-bin.000005&#39; at 653, the last event read from &#39;&#x2F;data&#x2F;3307&#x2F;mysql-bin.000005&#39; at 123, the last byte read from &#39;&#x2F;data&#x2F;3307&#x2F;mysql-bin.000005&#39; at 672.&#39;
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>3）记录日志</p>
<h6 id="5-2-SQL线程"><a href="#5-2-SQL线程" class="headerlink" title="5.2 SQL线程"></a>5.2 SQL线程</h6><p>回放Relaylog（binlog）：SQL回放不了</p>
<blockquote>
<p>SQL语句为什么会执行失败？<br>语法，sql_mode,<br>权限<br>创建的对象已经存在<br>从库创建一个库，然后在主库在创建一个库，就会报sql线程错误，需要把从库的库删除之后重新start slave;<br>修改或删除的对象不存在<br>约束冲突<br>数据类型<br>死锁<br>锁等待超时<br>命令失效<br>总结：<br>版本不一致<br>从库写入数据了：只读，读写分离中间件<br>手工补偿<br>pt-checksume<br>pt-sync</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">方法一：
stop slave; 
set global sql_slave_skip_counter &#x3D; 1;
#将同步指针向下移动一个，如果多次不同步，可以重复操作。
start slave;
方法二：
&#x2F;etc&#x2F;my.cnf
slave-skip-errors &#x3D; 1032,1062,1007
常见错误代码:
1007:对象已存在
1032:无法执行DML
1062:主键冲突,或约束冲突

但是，以上操作有时是有风险的，最安全的做法就是重新构建主从。把握一个原则,一切以主库为主.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="6-主从延时"><a href="#6-主从延时" class="headerlink" title="6.主从延时"></a>6.主从延时</h5><h5 id="6-1-基础监控"><a href="#6-1-基础监控" class="headerlink" title="6.1 基础监控"></a>6.1 基础监控</h5><pre class="line-numbers language-none"><code class="language-none">Seconds_Behind_Master:0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h5 id="6-2-日志量监控"><a href="#6-2-日志量监控" class="headerlink" title="6.2 日志量监控"></a>6.2 日志量监控</h5><p>1）主库</p>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; show master status\G;
*************************** 1. row ***************************
             File: mysql-bin.000008
         Position: 750
     Binlog_Do_DB: 
 Binlog_Ignore_DB: 
Executed_Gtid_Set: 1e91fb5a-cd38-11e9-b843-000c29303796:1-6,
b3ad910d-d832-11e9-89dc-000c29303796:1-2,
f66f1a5b-d827-11e9-bdf6-000c29303796:1-6
1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2）从库</p>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; show salve status \G;
Master_Log_File: mysql-bin.000002
Read_Master_Log_Pos: 444<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">[root@db01 ~]# cat &#x2F;data&#x2F;3308&#x2F;data&#x2F;relay-log.info 
7
.&#x2F;db01-relay-bin.000002
320
mysql-bin.000002
444<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h6 id="6-3-导致主从延时的原因"><a href="#6-3-导致主从延时的原因" class="headerlink" title="6.3 导致主从延时的原因"></a>6.3 导致主从延时的原因</h6><p><strong>主库：</strong></p>
<ul>
<li>sync_binlog&#x3D;1</li>
<li>binlog存储性能低，建议换成SSD</li>
<li>binlog_dump 5.6以前的传统复制模型下，是串行工作的，如果在主库发生高并发事务，或者大事务的时候传输的时候，传输日志会受到阻塞。</li>
<li>早期解决办法，切割大事务。</li>
<li>5.6以后有了GTID模式，可以自动进行并行传输日志到从库</li>
<li>5.7以后即使不开启GTID模式也会有匿名的GTID，建议开启</li>
</ul>
<p><strong>从库：</strong></p>
<ul>
<li>从库SQL线程串行回放，在主库发生高并发事务，大事务的时候，会出现很高延时</li>
<li>在5.6中，开启GTID之后，使用多SQL线程并行回放，限制：只能针对database级别（不能多个线程同时回放一个库）实现并行</li>
<li>在5.7当中，开启GTID 之后，多SQL 并行回放，基于Logic_clock 实现了真正的事务级别的并行回放，这个技术称为MTS</li>
</ul>
<p>其他：</p>
<ul>
<li>网络</li>
<li>硬件差异大</li>
<li>版本</li>
<li>优化参数不一样</li>
<li>锁等待</li>
<li>死锁</li>
<li>从库太多</li>
<li>从库有大量的慢查询</li>
</ul>
<h5 id="7-延时从库"><a href="#7-延时从库" class="headerlink" title="7. 延时从库"></a>7. 延时从库</h5><h6 id="7-1-为什么要延时从库"><a href="#7-1-为什么要延时从库" class="headerlink" title="7.1 为什么要延时从库"></a>7.1 为什么要延时从库</h6><pre class="line-numbers language-none"><code class="language-none">数据库故障?
物理损坏
主从复制非常擅长解决物理损坏.
逻辑损坏
普通主从复制没办法解决逻辑损坏<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h6 id="7-2-配置"><a href="#7-2-配置" class="headerlink" title="7.2 配置"></a>7.2 配置</h6><pre class="line-numbers language-none"><code class="language-none">SQL线程延时:数据已经写入relaylog中了,SQL线程&quot;慢点&quot;运行
一般企业建议3-6小时,具体看公司运维人员对于故障的反应时间
mysql&gt;stop slave;
mysql&gt;CHANGE MASTER TO MASTER_DELAY &#x3D; 300;
mysql&gt;start slave;
mysql&gt; show slave status \G
SQL_Delay: 300
SQL_Remaining_Delay: NULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h6 id="7-3-如果使用延时从库恢复数据"><a href="#7-3-如果使用延时从库恢复数据" class="headerlink" title="7.3 如果使用延时从库恢复数据"></a>7.3 如果使用延时从库恢复数据</h6><p>测试演练：<br>1）背景：</p>
<ul>
<li>核心业务库</li>
<li>2T 数据 </li>
<li>主从复制  1主3从，主库负责写，两个从库负责读1，1 从库延时3小时<br>2）故障：</li>
<li>主库误删除了其中一个核心业务库，大约1T数据，（DROP DATABASE）<br>3）思路：</li>
<li>1.快速监控到故障</li>
<li>2.停业务，挂维护页</li>
<li>3.停延时从库</li>
<li>4.手工模拟SQL线程（截取日志）<ul>
<li>起点：relay.info</li>
<li>终点：drop之前<br>4）模拟过程<br>主库模拟数据</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">--- 主库添加数据，模拟删除
create database delay charset utf8mb4;
use delay;
create table t1 (id int);
insert into t1 values(1),(2),(3);
commit;
insert into t1 values(11),(22),(33);
commit;
insert into t1 values(111),(222),(333);
commit;
drop database delay;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">--- 从库停止sql线程
mysql&gt; stop slave sql_thread;
Query OK, 0 rows affected (0.00 sec)
mysql&gt; show slave status \G;
起点：
Relay_Log_File: db01-relay-bin.000002
Relay_Log_Pos: 320
终点：
mysql&gt; show relaylog events in &#39;db01-relay-bin.000002&#39;;
| db01-relay-bin.000002 | 1523 | Query          |         7 |        1452 | drop database delay                 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>截取relaylog</p>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 ~]# mysqlbinlog --start-position&#x3D;320 --stop-position&#x3D;1523 &#x2F;data&#x2F;3308&#x2F;data&#x2F;db01-relay-bin.000002 &gt;&#x2F;tmp&#x2F;relay.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>恢复relaylog</p>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; set sql_log_bin&#x3D;0;
mysql&gt; source &#x2F;tmp&#x2F;relay.sql
mysql&gt; use delay;
mysql&gt; show tables;
+-----------------+
| Tables_in_delay |
+-----------------+
| t1              |
+-----------------+
1 row in set (0.00 sec)

mysql&gt; select *from t1;
+------+
| id   |
+------+
|    1 |
|    2 |
|    3 |
|   11 |
|   22 |
|   33 |
|  111 |
|  222 |
|  333 |
+------+
9 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="8-过滤复制"><a href="#8-过滤复制" class="headerlink" title="8.过滤复制"></a>8.过滤复制</h5><h6 id="8-1-配置"><a href="#8-1-配置" class="headerlink" title="8.1 配置"></a>8.1 配置</h6><p>主库：</p>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; show master status;
--- 白名单
Binlog_Do_DB
--- 黑名单
Binlog_Ignore_DB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>从库：</p>
<pre class="line-numbers language-none"><code class="language-none">--- 白名单，只复制什么库
Replicate_Do_DB: 
--- 黑名单 ，不复制什么库
Replicate_Ignore_DB: 

--- 只复制什么表
Replicate_Do_Table: 
--- 不复制什么表
Replicate_Ignore_Table: 

---模糊
Replicate_Wild_Do_Table: 
Replicate_Wild_Ignore_Table: <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">my.cnf
replicate_do_db&#x3D;world
replicate_do_table&#x3D;oldboy.t1
replicate_wild_do_table&#x3D;oldboy.t*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>清理环境恢复主从</p>
<p>从库：</p>
<pre class="line-numbers language-none"><code class="language-none">stop  salve;
reset slave all;
drop database delay;
reset master;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>主库：</p>
<pre class="line-numbers language-none"><code class="language-none">reset master;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>从库：</p>
<pre class="line-numbers language-none"><code class="language-none">CHANGE MASTER TO
  MASTER_HOST&#x3D;&#39;10.0.0.51&#39;,
  MASTER_USER&#x3D;&#39;repl&#39;,
  MASTER_PASSWORD&#x3D;&#39;123456&#39;,
  MASTER_PORT&#x3D;3307,
  MASTER_LOG_FILE&#x3D;&#39;mysql-bin.000001&#39;,
  MASTER_LOG_POS&#x3D;154,
  MASTER_CONNECT_RETRY&#x3D;10;
start slave;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>配置：<br>从库：<br>添加白名单，设置白名单库，重启从库</p>
<pre class="line-numbers language-none"><code class="language-none">change master to master_host&#x3D;&#39;10.0.0.62&#39;,master_user&#x3D;&#39;repl&#39;,master_password&#x3D;&#39;123456&#39;,master_log_file&#x3D;&#39;mysql-bin.000002&#39;,master_log_pos&#x3D;154;
[root@db01 ~]# vim &#x2F;data&#x2F;3308&#x2F;my.cnf 
[mysqld]
basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql
datadir&#x3D;&#x2F;data&#x2F;3308&#x2F;data
socket&#x3D;&#x2F;data&#x2F;3308&#x2F;mysql.sock
log_error&#x3D;&#x2F;data&#x2F;3308&#x2F;mysql.log
port&#x3D;3308
server_id&#x3D;8
log_bin&#x3D;&#x2F;data&#x2F;3308&#x2F;mysql-bin
replicate_do_db&#x3D;oldboy
replicate_do_db&#x3D;school
[root@db01 ~]# systemctl restart mysqld3308<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查看从库状态，白名单已经存在</p>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; show slave status\G;
Replicate_Do_DB: oldboy,school<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>主库：<br>创建一个新库，去从库查看库是否能创建</p>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; create database aaaa;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>从库：<br>可以看到从库并没有创建aaaa库</p>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| ha                 |
| mdp                |
| mysql              |
| oldboy             |
| performance_schema |
| sch                |
| school             |
| sys                |
| test               |
| world              |
| x                  |
+--------------------+
12 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>主库：<br>在设置的白名单的库中添加一个表</p>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; use oldboy;
mysql&gt; show tables;
+------------------+
| Tables_in_oldboy |
+------------------+
| t100w            |
+------------------+
1 row in set (0.00 sec)
mysql&gt; create table t1(id int);
Query OK, 0 rows affected (0.01 sec)

mysql&gt; show tables;
+------------------+
| Tables_in_oldboy |
+------------------+
| t1               |
| t100w            |
+------------------+
2 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从库：<br>查看从库中已经创建成功</p>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; show tables;
+------------------+
| Tables_in_oldboy |
+------------------+
| t1               |
| t100w            |
+------------------+
2 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="9-GTID复制"><a href="#9-GTID复制" class="headerlink" title="9.GTID复制"></a>9.GTID复制</h5><h6 id="9-1-3台虚拟机测试环境清理重构"><a href="#9-1-3台虚拟机测试环境清理重构" class="headerlink" title="9.1  3台虚拟机测试环境清理重构"></a>9.1  3台虚拟机测试环境清理重构</h6><pre class="line-numbers language-none"><code class="language-none">pkill mysqld
 \rm -rf &#x2F;data&#x2F;mysql&#x2F;data&#x2F;*
 \rm -rf &#x2F;data&#x2F;binlog&#x2F;*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="9-2-准备配置文件"><a href="#9-2-准备配置文件" class="headerlink" title="9.2 准备配置文件"></a>9.2 准备配置文件</h5><pre class="line-numbers language-none"><code class="language-none">主库db01：
cat &gt; &#x2F;etc&#x2F;my.cnf &lt;&lt;EOF
[mysqld]
basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;
datadir&#x3D;&#x2F;data&#x2F;mysql&#x2F;data
socket&#x3D;&#x2F;tmp&#x2F;mysql.sock
server_id&#x3D;51
port&#x3D;3306
secure-file-priv&#x3D;&#x2F;tmp
autocommit&#x3D;0
log_bin&#x3D;&#x2F;data&#x2F;binlog&#x2F;mysql-bin
binlog_format&#x3D;row
gtid-mode&#x3D;on
enforce-gtid-consistency&#x3D;true
log-slave-updates&#x3D;1
[mysql]
prompt&#x3D;db01 [\\d]&gt;
EOF

slave1(db02)：
cat &gt; &#x2F;etc&#x2F;my.cnf &lt;&lt;EOF
[mysqld]
basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql
datadir&#x3D;&#x2F;data&#x2F;mysql&#x2F;data
socket&#x3D;&#x2F;tmp&#x2F;mysql.sock
server_id&#x3D;52
port&#x3D;3306
secure-file-priv&#x3D;&#x2F;tmp
autocommit&#x3D;0
log_bin&#x3D;&#x2F;data&#x2F;binlog&#x2F;mysql-bin
binlog_format&#x3D;row
gtid-mode&#x3D;on
enforce-gtid-consistency&#x3D;true
log-slave-updates&#x3D;1
[mysql]
prompt&#x3D;db02 [\\d]&gt;
EOF

slave2(db03)：
cat &gt; &#x2F;etc&#x2F;my.cnf &lt;&lt;EOF
[mysqld]
basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql
datadir&#x3D;&#x2F;data&#x2F;mysql&#x2F;data
socket&#x3D;&#x2F;tmp&#x2F;mysql.sock
server_id&#x3D;53
port&#x3D;3306
secure-file-priv&#x3D;&#x2F;tmp
autocommit&#x3D;0
log_bin&#x3D;&#x2F;data&#x2F;binlog&#x2F;mysql-bin
binlog_format&#x3D;row
gtid-mode&#x3D;on
enforce-gtid-consistency&#x3D;true
log-slave-updates&#x3D;1
[mysql]
prompt&#x3D;db03 [\\d]&gt;
EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h6 id="9-3-初始化数据"><a href="#9-3-初始化数据" class="headerlink" title="9.3 初始化数据"></a>9.3 初始化数据</h6><pre class="line-numbers language-none"><code class="language-none">mysqld --initialize-insecure --user&#x3D;mysql --basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql --datadir&#x3D;&#x2F;data&#x2F;mysql&#x2F;data 
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h6 id="9-4-主库导入测试数据"><a href="#9-4-主库导入测试数据" class="headerlink" title="9.4 主库导入测试数据"></a>9.4 主库导入测试数据</h6><pre class="line-numbers language-none"><code class="language-none">source &#x2F;root&#x2F;world.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h6 id="9-5-启动数据库"><a href="#9-5-启动数据库" class="headerlink" title="9.5 启动数据库"></a>9.5 启动数据库</h6><pre class="line-numbers language-none"><code class="language-none">&#x2F;etc&#x2F;init.d&#x2F;mysqld start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h6 id="9-6-构建主从"><a href="#9-6-构建主从" class="headerlink" title="9.6 构建主从"></a>9.6 构建主从</h6><pre class="line-numbers language-none"><code class="language-none">master:51
slave:52,53<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>主：</p>
<pre class="line-numbers language-none"><code class="language-none">grant replication slave  on *.* to repl@&#39;10.0.0.%&#39; identified by &#39;123&#39;;
mysqldump  -A --master-data&#x3D;2 --single-transaction &gt;&#x2F;tmp&#x2F;full.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>从：</p>
<pre class="line-numbers language-none"><code class="language-none">source &#x2F;tmp&#x2F;full.sql

change master to 
master_host&#x3D;&#39;10.0.0.51&#39;,
master_user&#x3D;&#39;repl&#39;,
master_password&#x3D;&#39;123&#39; ,
MASTER_AUTO_POSITION&#x3D;1;
start slave;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>主从复制不能添加 –set-gtid-purged&#x3D;OFF 参数<br>mysqldump -A –master-data&#x3D;2 –single-transaction –set-gtid-purged&#x3D;OFF &gt;&#x2F;tmp&#x2F;full2.sql</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL分布式架构-MyCAT</title>
    <url>/2019/03/08/MySQL%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84-MyCAT/</url>
    <content><![CDATA[<h1 id="一、MyCAT基础架构介绍及准备"><a href="#一、MyCAT基础架构介绍及准备" class="headerlink" title="一、MyCAT基础架构介绍及准备"></a>一、MyCAT基础架构介绍及准备</h1><ol>
<li>环境准备<br>两台虚拟机 db01  db02<br>每台创建四个mysql实例：3307  3308  3309  3310</li>
<li>删除历史环境</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">pkill mysqld
rm -rf &#x2F;data&#x2F;330* 
mv &#x2F;etc&#x2F;my.cnf &#x2F;etc&#x2F;my.cnf.bak<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<ol start="3">
<li>创建相关目录初始化数据</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">mkdir &#x2F;data&#x2F;33&#123;07..10&#125;&#x2F;data -p
mysqld --initialize-insecure  --user&#x3D;mysql --datadir&#x3D;&#x2F;data&#x2F;3307&#x2F;data --basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql
mysqld --initialize-insecure  --user&#x3D;mysql --datadir&#x3D;&#x2F;data&#x2F;3308&#x2F;data --basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql
mysqld --initialize-insecure  --user&#x3D;mysql --datadir&#x3D;&#x2F;data&#x2F;3309&#x2F;data --basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql
mysqld --initialize-insecure  --user&#x3D;mysql --datadir&#x3D;&#x2F;data&#x2F;3310&#x2F;data --basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>准备配置文件和启动脚本</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;db01&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
cat &gt;&#x2F;data&#x2F;3307&#x2F;my.cnf&lt;&lt;EOF
[mysqld]
basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql
datadir&#x3D;&#x2F;data&#x2F;3307&#x2F;data
socket&#x3D;&#x2F;data&#x2F;3307&#x2F;mysql.sock
port&#x3D;3307
log-error&#x3D;&#x2F;data&#x2F;3307&#x2F;mysql.log
log_bin&#x3D;&#x2F;data&#x2F;3307&#x2F;mysql-bin
binlog_format&#x3D;row
skip-name-resolve
server-id&#x3D;7
gtid-mode&#x3D;on
enforce-gtid-consistency&#x3D;true
log-slave-updates&#x3D;1
EOF

cat &gt;&#x2F;data&#x2F;3308&#x2F;my.cnf&lt;&lt;EOF
[mysqld]
basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql
datadir&#x3D;&#x2F;data&#x2F;3308&#x2F;data
port&#x3D;3308
socket&#x3D;&#x2F;data&#x2F;3308&#x2F;mysql.sock
log-error&#x3D;&#x2F;data&#x2F;3308&#x2F;mysql.log
log_bin&#x3D;&#x2F;data&#x2F;3308&#x2F;mysql-bin
binlog_format&#x3D;row
skip-name-resolve
server-id&#x3D;8
gtid-mode&#x3D;on
enforce-gtid-consistency&#x3D;true
log-slave-updates&#x3D;1
EOF

cat &gt;&#x2F;data&#x2F;3309&#x2F;my.cnf&lt;&lt;EOF
[mysqld]
basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql
datadir&#x3D;&#x2F;data&#x2F;3309&#x2F;data
socket&#x3D;&#x2F;data&#x2F;3309&#x2F;mysql.sock
port&#x3D;3309
log-error&#x3D;&#x2F;data&#x2F;3309&#x2F;mysql.log
log_bin&#x3D;&#x2F;data&#x2F;3309&#x2F;mysql-bin
binlog_format&#x3D;row
skip-name-resolve
server-id&#x3D;9
gtid-mode&#x3D;on
enforce-gtid-consistency&#x3D;true
log-slave-updates&#x3D;1
EOF
cat &gt;&#x2F;data&#x2F;3310&#x2F;my.cnf&lt;&lt;EOF
[mysqld]
basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql
datadir&#x3D;&#x2F;data&#x2F;3310&#x2F;data
socket&#x3D;&#x2F;data&#x2F;3310&#x2F;mysql.sock
port&#x3D;3310
log-error&#x3D;&#x2F;data&#x2F;3310&#x2F;mysql.log
log_bin&#x3D;&#x2F;data&#x2F;3310&#x2F;mysql-bin
binlog_format&#x3D;row
skip-name-resolve
server-id&#x3D;10
gtid-mode&#x3D;on
enforce-gtid-consistency&#x3D;true
log-slave-updates&#x3D;1
EOF

cat &gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;mysqld3307.service&lt;&lt;EOF
[Unit]
Description&#x3D;MySQL Server
Documentation&#x3D;man:mysqld(8)
Documentation&#x3D;http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;en&#x2F;using-systemd.html
After&#x3D;network.target
After&#x3D;syslog.target
[Install]
WantedBy&#x3D;multi-user.target
[Service]
User&#x3D;mysql
Group&#x3D;mysql
ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysqld --defaults-file&#x3D;&#x2F;data&#x2F;3307&#x2F;my.cnf
LimitNOFILE &#x3D; 5000
EOF

cat &gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;mysqld3308.service&lt;&lt;EOF
[Unit]
Description&#x3D;MySQL Server
Documentation&#x3D;man:mysqld(8)
Documentation&#x3D;http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;en&#x2F;using-systemd.html
After&#x3D;network.target
After&#x3D;syslog.target
[Install]
WantedBy&#x3D;multi-user.target
[Service]
User&#x3D;mysql
Group&#x3D;mysql
ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysqld --defaults-file&#x3D;&#x2F;data&#x2F;3308&#x2F;my.cnf
LimitNOFILE &#x3D; 5000
EOF

cat &gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;mysqld3309.service&lt;&lt;EOF
[Unit]
Description&#x3D;MySQL Server
Documentation&#x3D;man:mysqld(8)
Documentation&#x3D;http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;en&#x2F;using-systemd.html
After&#x3D;network.target
After&#x3D;syslog.target
[Install]
WantedBy&#x3D;multi-user.target
[Service]
User&#x3D;mysql
Group&#x3D;mysql
ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysqld --defaults-file&#x3D;&#x2F;data&#x2F;3309&#x2F;my.cnf
LimitNOFILE &#x3D; 5000
EOF
cat &gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;mysqld3310.service&lt;&lt;EOF
[Unit]
Description&#x3D;MySQL Server
Documentation&#x3D;man:mysqld(8)
Documentation&#x3D;http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;en&#x2F;using-systemd.html
After&#x3D;network.target
After&#x3D;syslog.target

[Install]
WantedBy&#x3D;multi-user.target
[Service]
User&#x3D;mysql
Group&#x3D;mysql
ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysqld --defaults-file&#x3D;&#x2F;data&#x2F;3310&#x2F;my.cnf
LimitNOFILE &#x3D; 5000
EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;db02&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
cat &gt;&#x2F;data&#x2F;3307&#x2F;my.cnf&lt;&lt;EOF
[mysqld]
basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql
datadir&#x3D;&#x2F;data&#x2F;3307&#x2F;data
socket&#x3D;&#x2F;data&#x2F;3307&#x2F;mysql.sock
port&#x3D;3307
log-error&#x3D;&#x2F;data&#x2F;3307&#x2F;mysql.log
log_bin&#x3D;&#x2F;data&#x2F;3307&#x2F;mysql-bin
binlog_format&#x3D;row
skip-name-resolve
server-id&#x3D;17
gtid-mode&#x3D;on
enforce-gtid-consistency&#x3D;true
log-slave-updates&#x3D;1
EOF
cat &gt;&#x2F;data&#x2F;3308&#x2F;my.cnf&lt;&lt;EOF
[mysqld]
basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql
datadir&#x3D;&#x2F;data&#x2F;3308&#x2F;data
port&#x3D;3308
socket&#x3D;&#x2F;data&#x2F;3308&#x2F;mysql.sock
log-error&#x3D;&#x2F;data&#x2F;3308&#x2F;mysql.log
log_bin&#x3D;&#x2F;data&#x2F;3308&#x2F;mysql-bin
binlog_format&#x3D;row
skip-name-resolve
server-id&#x3D;18
gtid-mode&#x3D;on
enforce-gtid-consistency&#x3D;true
log-slave-updates&#x3D;1
EOF
cat &gt;&#x2F;data&#x2F;3309&#x2F;my.cnf&lt;&lt;EOF
[mysqld]
basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql
datadir&#x3D;&#x2F;data&#x2F;3309&#x2F;data
socket&#x3D;&#x2F;data&#x2F;3309&#x2F;mysql.sock
port&#x3D;3309
log-error&#x3D;&#x2F;data&#x2F;3309&#x2F;mysql.log
log_bin&#x3D;&#x2F;data&#x2F;3309&#x2F;mysql-bin
binlog_format&#x3D;row
skip-name-resolve
server-id&#x3D;19
gtid-mode&#x3D;on
enforce-gtid-consistency&#x3D;true
log-slave-updates&#x3D;1
EOF


cat &gt;&#x2F;data&#x2F;3310&#x2F;my.cnf&lt;&lt;EOF
[mysqld]
basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql
datadir&#x3D;&#x2F;data&#x2F;3310&#x2F;data
socket&#x3D;&#x2F;data&#x2F;3310&#x2F;mysql.sock
port&#x3D;3310
log-error&#x3D;&#x2F;data&#x2F;3310&#x2F;mysql.log
log_bin&#x3D;&#x2F;data&#x2F;3310&#x2F;mysql-bin
binlog_format&#x3D;row
skip-name-resolve
server-id&#x3D;20
gtid-mode&#x3D;on
enforce-gtid-consistency&#x3D;true
log-slave-updates&#x3D;1
EOF

cat &gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;mysqld3307.service&lt;&lt;EOF
[Unit]
Description&#x3D;MySQL Server
Documentation&#x3D;man:mysqld(8)
Documentation&#x3D;http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;en&#x2F;using-systemd.html
After&#x3D;network.target
After&#x3D;syslog.target
[Install]
WantedBy&#x3D;multi-user.target
[Service]
User&#x3D;mysql
Group&#x3D;mysql
ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysqld --defaults-file&#x3D;&#x2F;data&#x2F;3307&#x2F;my.cnf
LimitNOFILE &#x3D; 5000
EOF

cat &gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;mysqld3308.service&lt;&lt;EOF
[Unit]
Description&#x3D;MySQL Server
Documentation&#x3D;man:mysqld(8)
Documentation&#x3D;http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;en&#x2F;using-systemd.html
After&#x3D;network.target
After&#x3D;syslog.target
[Install]
WantedBy&#x3D;multi-user.target
[Service]
User&#x3D;mysql
Group&#x3D;mysql
ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysqld --defaults-file&#x3D;&#x2F;data&#x2F;3308&#x2F;my.cnf
LimitNOFILE &#x3D; 5000
EOF

cat &gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;mysqld3309.service&lt;&lt;EOF
[Unit]
Description&#x3D;MySQL Server
Documentation&#x3D;man:mysqld(8)
Documentation&#x3D;http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;en&#x2F;using-systemd.html
After&#x3D;network.target
After&#x3D;syslog.target
[Install]
WantedBy&#x3D;multi-user.target
[Service]
User&#x3D;mysql
Group&#x3D;mysql
ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysqld --defaults-file&#x3D;&#x2F;data&#x2F;3309&#x2F;my.cnf
LimitNOFILE &#x3D; 5000
EOF
cat &gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;mysqld3310.service&lt;&lt;EOF
[Unit]
Description&#x3D;MySQL Server
Documentation&#x3D;man:mysqld(8)
Documentation&#x3D;http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;en&#x2F;using-systemd.html
After&#x3D;network.target
After&#x3D;syslog.target
[Install]
WantedBy&#x3D;multi-user.target
[Service]
User&#x3D;mysql
Group&#x3D;mysql
ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysqld --defaults-file&#x3D;&#x2F;data&#x2F;3310&#x2F;my.cnf
LimitNOFILE &#x3D; 5000
EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li>修改权限，启动多实例</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">chown -R mysql.mysql &#x2F;data&#x2F;*
systemctl start mysqld3307
systemctl start mysqld3308
systemctl start mysqld3309
systemctl start mysqld3310

mysql -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;show variables like &#39;server_id&#39;&quot;
mysql -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;show variables like &#39;server_id&#39;&quot;
mysql -S &#x2F;data&#x2F;3309&#x2F;mysql.sock -e &quot;show variables like &#39;server_id&#39;&quot;
mysql -S &#x2F;data&#x2F;3310&#x2F;mysql.sock -e &quot;show variables like &#39;server_id&#39;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="6">
<li>分片规划</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">shard1：
    Master：10.0.0.51:3307
    slave1：10.0.0.51:3309
    Standby Master：10.0.0.52:3307
    slave2：10.0.0.52:3309
shard2：
    Master：10.0.0.52:3308
    slave1：10.0.0.52:3310
    Standby Master：10.0.0.51:3308
    slave2：10.0.0.51:3310<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="7">
<li>开始配置</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">## shard1
### db02
mysql  -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;grant replication slave on *.* to repl@&#39;10.0.0.%&#39; identified by &#39;123&#39;;&quot;
mysql  -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;grant all  on *.* to root@&#39;10.0.0.%&#39; identified by &#39;123&#39;  with grant option;&quot;

### db01
mysql  -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;CHANGE MASTER TO MASTER_HOST&#x3D;&#39;10.0.0.52&#39;, MASTER_PORT&#x3D;3307, MASTER_AUTO_POSITION&#x3D;1, MASTER_USER&#x3D;&#39;repl&#39;, MASTER_PASSWORD&#x3D;&#39;123&#39;;&quot;
mysql  -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;start slave;&quot;
mysql  -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;show slave status\G&quot;


### db02
mysql  -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;CHANGE MASTER TO MASTER_HOST&#x3D;&#39;10.0.0.51&#39;, MASTER_PORT&#x3D;3307, MASTER_AUTO_POSITION&#x3D;1, MASTER_USER&#x3D;&#39;repl&#39;, MASTER_PASSWORD&#x3D;&#39;123&#39;;&quot;
mysql  -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;start slave;&quot;
mysql  -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;show slave status\G&quot;



### db01
mysql  -S &#x2F;data&#x2F;3309&#x2F;mysql.sock  -e &quot;CHANGE MASTER TO MASTER_HOST&#x3D;&#39;10.0.0.51&#39;, MASTER_PORT&#x3D;3307, MASTER_AUTO_POSITION&#x3D;1, MASTER_USER&#x3D;&#39;repl&#39;, MASTER_PASSWORD&#x3D;&#39;123&#39;;&quot;
mysql  -S &#x2F;data&#x2F;3309&#x2F;mysql.sock  -e &quot;start slave;&quot;
mysql  -S &#x2F;data&#x2F;3309&#x2F;mysql.sock  -e &quot;show slave status\G&quot;


### db02
mysql  -S &#x2F;data&#x2F;3309&#x2F;mysql.sock -e &quot;CHANGE MASTER TO MASTER_HOST&#x3D;&#39;10.0.0.52&#39;, MASTER_PORT&#x3D;3307, MASTER_AUTO_POSITION&#x3D;1, MASTER_USER&#x3D;&#39;repl&#39;, MASTER_PASSWORD&#x3D;&#39;123&#39;;&quot;
mysql  -S &#x2F;data&#x2F;3309&#x2F;mysql.sock -e &quot;start slave;&quot;
mysql  -S &#x2F;data&#x2F;3309&#x2F;mysql.sock -e &quot;show slave status\G&quot;


## shard2
### db01
mysql  -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;grant replication slave on *.* to repl@&#39;10.0.0.%&#39; identified by &#39;123&#39;;&quot;
mysql  -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;grant all  on *.* to root@&#39;10.0.0.%&#39; identified by &#39;123&#39;  with grant option;&quot;

### db02
mysql  -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;CHANGE MASTER TO MASTER_HOST&#x3D;&#39;10.0.0.51&#39;, MASTER_PORT&#x3D;3308, MASTER_AUTO_POSITION&#x3D;1, MASTER_USER&#x3D;&#39;repl&#39;, MASTER_PASSWORD&#x3D;&#39;123&#39;;&quot;
mysql  -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;start slave;&quot;
mysql  -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;show slave status\G&quot;

### db01
mysql  -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;CHANGE MASTER TO MASTER_HOST&#x3D;&#39;10.0.0.52&#39;, MASTER_PORT&#x3D;3308, MASTER_AUTO_POSITION&#x3D;1, MASTER_USER&#x3D;&#39;repl&#39;, MASTER_PASSWORD&#x3D;&#39;123&#39;;&quot;
mysql  -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;start slave;&quot;
mysql  -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;show slave status\G&quot;
10.0.0.52:3310 -----&gt; 10.0.0.52:3308

### db02
mysql  -S &#x2F;data&#x2F;3310&#x2F;mysql.sock -e &quot;CHANGE MASTER TO MASTER_HOST&#x3D;&#39;10.0.0.52&#39;, MASTER_PORT&#x3D;3308, MASTER_AUTO_POSITION&#x3D;1, MASTER_USER&#x3D;&#39;repl&#39;, MASTER_PASSWORD&#x3D;&#39;123&#39;;&quot;
mysql  -S &#x2F;data&#x2F;3310&#x2F;mysql.sock -e &quot;start slave;&quot;
mysql  -S &#x2F;data&#x2F;3310&#x2F;mysql.sock -e &quot;show slave status\G&quot;

### db01
mysql  -S &#x2F;data&#x2F;3310&#x2F;mysql.sock -e &quot;CHANGE MASTER TO MASTER_HOST&#x3D;&#39;10.0.0.51&#39;, MASTER_PORT&#x3D;3308, MASTER_AUTO_POSITION&#x3D;1, MASTER_USER&#x3D;&#39;repl&#39;, MASTER_PASSWORD&#x3D;&#39;123&#39;;&quot;
mysql  -S &#x2F;data&#x2F;3310&#x2F;mysql.sock -e &quot;start slave;&quot;
mysql  -S &#x2F;data&#x2F;3310&#x2F;mysql.sock -e &quot;show slave status\G&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="8">
<li>检测主从状态</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">mysql -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;show slave status\G&quot;|grep Yes
mysql -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;show slave status\G&quot;|grep Yes
mysql -S &#x2F;data&#x2F;3309&#x2F;mysql.sock -e &quot;show slave status\G&quot;|grep Yes
mysql -S &#x2F;data&#x2F;3310&#x2F;mysql.sock -e &quot;show slave status\G&quot;|grep Yes
注：如果中间出现错误，在每个节点进行执行以下命令
mysql -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;stop slave; reset slave all;&quot;
mysql -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;stop slave; reset slave all;&quot;
mysql -S &#x2F;data&#x2F;3309&#x2F;mysql.sock -e &quot;stop slave; reset slave all;&quot;
mysql -S &#x2F;data&#x2F;3310&#x2F;mysql.sock -e &quot;stop slave; reset slave all;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="二、MyCat核心功能-分库分表（分片）"><a href="#二、MyCat核心功能-分库分表（分片）" class="headerlink" title="二、MyCat核心功能-分库分表（分片）"></a>二、MyCat核心功能-分库分表（分片）</h1><ol>
<li>垂直分表</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">mv  schema.xml  schema.xml.ha 
vim schema.xml
&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;
&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;
&lt;mycat:schema xmlns:mycat&#x3D;&quot;http:&#x2F;&#x2F;io.mycat&#x2F;&quot;&gt;
&lt;schema name&#x3D;&quot;TESTDB&quot; checkSQLschema&#x3D;&quot;false&quot; sqlMaxLimit&#x3D;&quot;100&quot; dataNode&#x3D;&quot;sh1&quot;&gt;
        &lt;table name&#x3D;&quot;t1&quot; dataNode&#x3D;&quot;sh1&quot;&#x2F;&gt;
        &lt;table name&#x3D;&quot;t2&quot; dataNode&#x3D;&quot;sh2&quot;&#x2F;&gt;
&lt;&#x2F;schema&gt;
    &lt;dataNode name&#x3D;&quot;sh1&quot; dataHost&#x3D;&quot;oldguo1&quot; database&#x3D; &quot;taobao&quot; &#x2F;&gt;
    &lt;dataNode name&#x3D;&quot;sh2&quot; dataHost&#x3D;&quot;oldguo2&quot; database&#x3D; &quot;taobao&quot; &#x2F;&gt;
	
    &lt;dataHost name&#x3D;&quot;oldguo1&quot; maxCon&#x3D;&quot;1000&quot; minCon&#x3D;&quot;10&quot; balance&#x3D;&quot;1&quot;  writeType&#x3D;&quot;0&quot; dbType&#x3D;&quot;mysql&quot;  dbDriver&#x3D;&quot;native&quot; switchType&#x3D;&quot;1&quot;&gt;
        &lt;heartbeat&gt;select user()&lt;&#x2F;heartbeat&gt;
    &lt;writeHost host&#x3D;&quot;db1&quot; url&#x3D;&quot;10.0.0.51:3307&quot; user&#x3D;&quot;root&quot; password&#x3D;&quot;123&quot;&gt;
            &lt;readHost host&#x3D;&quot;db2&quot; url&#x3D;&quot;10.0.0.51:3309&quot; user&#x3D;&quot;root&quot; password&#x3D;&quot;123&quot; &#x2F;&gt;
    &lt;&#x2F;writeHost&gt;
    &lt;writeHost host&#x3D;&quot;db3&quot; url&#x3D;&quot;10.0.0.52:3307&quot; user&#x3D;&quot;root&quot; password&#x3D;&quot;123&quot;&gt;
            &lt;readHost host&#x3D;&quot;db4&quot; url&#x3D;&quot;10.0.0.52:3309&quot; user&#x3D;&quot;root&quot; password&#x3D;&quot;123&quot; &#x2F;&gt;
    &lt;&#x2F;writeHost&gt;
    &lt;&#x2F;dataHost&gt;
	
    &lt;dataHost name&#x3D;&quot;oldguo2&quot; maxCon&#x3D;&quot;1000&quot; minCon&#x3D;&quot;10&quot; balance&#x3D;&quot;1&quot;  writeType&#x3D;&quot;0&quot; dbType&#x3D;&quot;mysql&quot;  dbDriver&#x3D;&quot;native&quot; switchType&#x3D;&quot;1&quot;&gt;
        &lt;heartbeat&gt;select user()&lt;&#x2F;heartbeat&gt;
    &lt;writeHost host&#x3D;&quot;db1&quot; url&#x3D;&quot;10.0.0.51:3308&quot; user&#x3D;&quot;root&quot; password&#x3D;&quot;123&quot;&gt;
            &lt;readHost host&#x3D;&quot;db2&quot; url&#x3D;&quot;10.0.0.51:3310&quot; user&#x3D;&quot;root&quot; password&#x3D;&quot;123&quot; &#x2F;&gt;
    &lt;&#x2F;writeHost&gt;
    &lt;writeHost host&#x3D;&quot;db3&quot; url&#x3D;&quot;10.0.0.52:3308&quot; user&#x3D;&quot;root&quot; password&#x3D;&quot;123&quot;&gt;
            &lt;readHost host&#x3D;&quot;db4&quot; url&#x3D;&quot;10.0.0.52:3310&quot; user&#x3D;&quot;root&quot; password&#x3D;&quot;123&quot; &#x2F;&gt;
    &lt;&#x2F;writeHost&gt;
    &lt;&#x2F;dataHost&gt;
&lt;&#x2F;mycat:schema&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建测试库和表</p>
<pre class="line-numbers language-none"><code class="language-none">mysql -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;create database taobao charset utf8;&quot;
 mysql -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;create database taobao charset utf8;&quot;
 mysql -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;use taobao;create table t1(id int,name varchar(20))&quot;
 mysql -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;use taobao;create table t2(id int,name varchar(20))&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="三、MyCAT-核心特性——分片（水平拆分）"><a href="#三、MyCAT-核心特性——分片（水平拆分）" class="headerlink" title="三、MyCAT 核心特性——分片（水平拆分）"></a>三、MyCAT 核心特性——分片（水平拆分）</h1><p>分片：对一个“bintable”，比如说t3表<br>1）行数非常多，800w<br>2）访问非常频繁<br>分片的目的：<br>1）将大数据进行分布存储<br>2）提供均衡的访问路由</p>
<ol>
<li>分片策略：<br>范围 range 800w 1-400w 400w-800w<br>取模 mod 取余数<br>枚举<br>哈希 hash<br>时间 流水</li>
<li>范围分片<br>比如说：t3表<br>1）行数非常多，2000w（1-1000w:shi   1000w-2000w:sha2）<br>2）访问非常频繁，用户访问较离散</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">cp schema.xml schema.xml.22  
vim schema.xml
        &lt;table name&#x3D;&quot;t3&quot; dataNode&#x3D;&quot;sh1,sh2&quot; rule&#x3D;&quot;auto-sharding-long&quot; &#x2F;&gt;

vim rule.xml
&lt;tableRule name&#x3D;&quot;auto-sharding-long&quot;&gt;
                &lt;rule&gt;
                        &lt;columns&gt;id&lt;&#x2F;columns&gt;
                        &lt;algorithm&gt;rang-long&lt;&#x2F;algorithm&gt;
                &lt;&#x2F;rule&gt;             
&lt;function name&#x3D;&quot;rang-long&quot;
    class&#x3D;&quot;io.mycat.route.function.AutoPartitionByLong&quot;&gt;
    &lt;property name&#x3D;&quot;mapFile&quot;&gt;autopartition-long.txt&lt;&#x2F;property&gt;
&lt;&#x2F;function&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">vim autopartition-long.txt
0-10&#x3D;0
10-20&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>创建测试表：</p>
<pre class="line-numbers language-none"><code class="language-none">mysql -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;use taobao;create table t3 (id int not null primary key auto_increment,name varchar(20) not null);&quot;

mysql -S &#x2F;data&#x2F;3308&#x2F;mysql.sock  -e &quot;use taobao;create table t3 (id int not null primary key auto_increment,name varchar(20) not null);&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>测试：<br>重启mycat</p>
<pre class="line-numbers language-none"><code class="language-none">mycat restart
mysql -uroot -p123456 -h 127.0.0.1 -P 8066
insert into t3(id,name) values(1,&#39;a&#39;);
insert into t3(id,name) values(2,&#39;b&#39;);
insert into t3(id,name) values(3,&#39;c&#39;);
insert into t3(id,name) values(4,&#39;d&#39;);
insert into t3(id,name) values(10,&#39;aa&#39;);
insert into t3(id,name) values(12,&#39;bb&#39;);
insert into t3(id,name) values(13,&#39;cc&#39;);
insert into t3(id,name) values(14,&#39;dd&#39;);

[root@db01 &#x2F;usr&#x2F;local&#x2F;mycat&#x2F;conf]# mysql -S &#x2F;data&#x2F;3307&#x2F;mysql.sock  -e &quot;select * from taobao.t3&quot;
[root@db01 &#x2F;usr&#x2F;local&#x2F;mycat&#x2F;conf]# mysql -S &#x2F;data&#x2F;3308&#x2F;mysql.sock  -e &quot;select * from taobao.t3&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="四、取模分片-mod-long"><a href="#四、取模分片-mod-long" class="headerlink" title="四、取模分片(mod-long)"></a>四、取模分片(mod-long)</h1><p>取余分片方式：分片键（一个列）与节点数量进行取余，得到余数，将数据写入对应节点</p>
<pre class="line-numbers language-none"><code class="language-none">vim schema.xml
&lt;table name&#x3D;&quot;t4&quot; dataNode&#x3D;&quot;sh1,sh2&quot; rule&#x3D;&quot;mod-long&quot; &#x2F;&gt;
vim rule.xml
&lt;property name&#x3D;&quot;count&quot;&gt;2&lt;&#x2F;property&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>准备测试环境<br>创建测试表</p>
<pre class="line-numbers language-none"><code class="language-none">mysql -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;use taobao;create table t4 (id int not null primary key auto_increment,name varchar(20) not null);&quot;
mysql -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;use taobao;create table t4 (id int not null primary key auto_increment,name varchar(20) not null);&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>重启mycat</p>
<pre class="line-numbers language-none"><code class="language-none">mycat restart <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>测试：</p>
<pre class="line-numbers language-none"><code class="language-none">mysql -uroot -p123456 -h10.0.0.52 -P8066

use TESTDB
insert into t4(id,name) values(1,&#39;a&#39;);
insert into t4(id,name) values(2,&#39;b&#39;);
insert into t4(id,name) values(3,&#39;c&#39;);
insert into t4(id,name) values(4,&#39;d&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>分别登陆后端节点查询数据</p>
<pre class="line-numbers language-none"><code class="language-none">mysql -S &#x2F;data&#x2F;3307&#x2F;mysql.sock 
use taobao
select * from t4;

mysql -S &#x2F;data&#x2F;3308&#x2F;mysql.sock 
use taobao
select * from t4;


mysql -S &#x2F;data&#x2F;3307&#x2F;mysql.sock  -e &quot;select * from taobao.t4&quot;
mysql -S &#x2F;data&#x2F;3308&#x2F;mysql.sock  -e &quot;select * from taobao.t4&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>枚举分片<br>id name telnum<br>1 bj 1212<br>2 sh 22222<br>3 bj 3333<br>4 sh 44444<br>5 bj 5555</p>
<pre class="line-numbers language-none"><code class="language-none">vim schema.xml
&lt;table name&#x3D;&quot;t5&quot; dataNode&#x3D;&quot;sh1,sh2&quot; rule&#x3D;&quot;sharding-by-intfile&quot; &#x2F;&gt;

vim rule.xml
&lt;tableRule name&#x3D;&quot;sharding-by-intfile&quot;&gt; 
&lt;rule&gt; &lt;columns&gt;name&lt;&#x2F;columns&gt; 
&lt;algorithm&gt;hash-int&lt;&#x2F;algorithm&gt; 
&lt;&#x2F;rule&gt; 
&lt;&#x2F;tableRule&gt; 

&lt;function name&#x3D;&quot;hash-int&quot; class&#x3D;&quot;org.opencloudb.route.function.PartitionByFileMap&quot;&gt; 
&lt;property name&#x3D;&quot;mapFile&quot;&gt;partition-hash-int.txt&lt;&#x2F;property&gt; 
  &lt;property name&#x3D;&quot;type&quot;&gt;1&lt;&#x2F;property&gt;
                &lt;property name&#x3D;&quot;defaultNode&quot;&gt;0&lt;&#x2F;property&gt;
&lt;&#x2F;function&gt; 

partition-hash-int.txt 配置： 
bj&#x3D;0 
sh&#x3D;1
DEFAULT_NODE&#x3D;1 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>准备测试环境</p>
<pre class="line-numbers language-none"><code class="language-none">mysql -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;use taobao;create table t5 (id int not null primary key auto_increment,name varchar(20) not null);&quot;

mysql -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;use taobao;create table t5 (id int not null primary key auto_increment,name varchar(20) not null);&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>重启mycat</p>
<pre class="line-numbers language-none"><code class="language-none">mycat restart 

mysql -uroot -p123456 -h10.0.0.51 -P8066
use TESTDB
insert into t5(id,name) values(1,&#39;bj&#39;);
insert into t5(id,name) values(2,&#39;sh&#39;);
insert into t5(id,name) values(3,&#39;bj&#39;);
insert into t5(id,name) values(4,&#39;sh&#39;);
insert into t5(id,name) values(5,&#39;tj&#39;);


mysql -S &#x2F;data&#x2F;3307&#x2F;mysql.sock  -e &quot;select * from taobao.t5&quot;
mysql -S &#x2F;data&#x2F;3308&#x2F;mysql.sock  -e &quot;select * from taobao.t5&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="五、MyCAT全局表"><a href="#五、MyCAT全局表" class="headerlink" title="五、MyCAT全局表"></a>五、MyCAT全局表</h1><pre class="line-numbers language-none"><code class="language-none">select  t1.name   ,t.x  from  t1 
join t 
select  t2.name   ,t.x  from  t2 
join t 
select  t3.name   ,t.x  from  t3 
join t <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">使用场景：
如果你的业务中有些数据类似于数据字典，比如配置文件的配置，
常用业务的配置或者数据量不大很少变动的表，这些表往往不是特别大，
而且大部分的业务场景都会用到，那么这种表适合于Mycat全局表，无须对数据进行切分，
要在所有的分片上保存一份数据即可，Mycat 在Join操作中，业务表与全局表进行Join聚合会优先选择相同分片内的全局表join，
避免跨库Join，在进行数据插入操作时，mycat将把数据分发到全局表对应的所有分片执行，在进行数据读取时候将会随机获取一个节点读<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">vim schema.xml 
&lt;table name&#x3D;&quot;t_area&quot; primaryKey&#x3D;&quot;id&quot;  type&#x3D;&quot;global&quot; dataNode&#x3D;&quot;sh1,sh2&quot; &#x2F;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>后端数据准备</p>
<pre class="line-numbers language-none"><code class="language-none">mysql -S &#x2F;data&#x2F;3307&#x2F;mysql.sock 
use taobao
create table t_area (id int not null primary key auto_increment,name varchar(20) not null);

mysql -S &#x2F;data&#x2F;3308&#x2F;mysql.sock 
use taobao
create table t_area  (id int not null primary key auto_increment,name varchar(20) not null);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>重启mycat</p>
<pre class="line-numbers language-none"><code class="language-none">mycat restart <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>测试：</p>
<pre class="line-numbers language-none"><code class="language-none">mysql -uroot -p123456 -h10.0.0.52 -P8066

use TESTDB
insert into t_area(id,name) values(1,&#39;a&#39;);
insert into t_area(id,name) values(2,&#39;b&#39;)+;
insert into t_area(id,name) values(3,&#39;c&#39;);
insert into t_area(id,name) values(4,&#39;d&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL物理备份工具使用（Percona Xtrabackup）</title>
    <url>/2019/03/14/MySQL%E7%89%A9%E7%90%86%E5%A4%87%E4%BB%BD%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%EF%BC%88Percona%20Xtrabackup%EF%BC%89PBK%20%20%20XBK/</url>
    <content><![CDATA[<h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><pre class="line-numbers language-none"><code class="language-none">yum -y install perl perl-devel libaio libaio-devel perl-Time-HiRes perl-DBD-MySQL libev
yum -y install percona-xtrabackup-24-2.4.12-1.el7.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="二、XBK-的备份逻辑（简单）"><a href="#二、XBK-的备份逻辑（简单）" class="headerlink" title="二、XBK 的备份逻辑（简单）"></a>二、XBK 的备份逻辑（简单）</h1><ol>
<li>自动判断表的类型</li>
<li>Flush table with read lock （FTWRL） </li>
<li>非innoDB表进行锁表，然后进行cp</li>
<li>innoDB表，立即CKPT，将提交的脏页刷写到磁盘，进行cp，cp同时将备份过程中产生的redo一起备份走</li>
</ol>
<p>恢复：</p>
<ol>
<li>非innodb直接恢复即可</li>
<li>InnoDB表，需要XBK处理备份后，再进行恢复<br>处理备份（prepare）？<br>模仿了 自动故障恢复的流程：先redo前滚，再undo回滚</li>
</ol>
<h1 id="三、innobackupex工具使用"><a href="#三、innobackupex工具使用" class="headerlink" title="三、innobackupex工具使用"></a>三、innobackupex工具使用</h1><h3 id="1、全备"><a href="#1、全备" class="headerlink" title="1、全备"></a>1、全备</h3><p><strong>1.1 配置文件</strong></p>
<ul>
<li>datadir</li>
<li>socket</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;my.cnf
[client]
socket&#x3D;&#x2F;tmp&#x2F;mysql.sock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><strong>1.2 备份</strong></p>
<pre class="line-numbers language-none"><code class="language-none">innobackupex --user&#x3D;root --password&#x3D;123456  &#x2F;data&#x2F;backup&#x2F;full
--- 查看备份目录
[root@db01 local]# cd &#x2F;data&#x2F;backup&#x2F;full&#x2F;
[root@db01 full]# ll
total 0
drwxr-x--- 11 root root 294 Sep 16 09:54 2019-09-16_09-54-01
[root@db01 2019-09-16_09-54-01]# pwd
&#x2F;data&#x2F;backup&#x2F;full&#x2F;2019-09-16_09-54-01
[root@db01 2019-09-16_09-54-01]# ll
total 77876
-rw-r----- 1 root root      488 Sep 16 09:54 backup-my.cnf
drwxr-x--- 2 root root       20 Sep 16 09:54 ha
-rw-r----- 1 root root      767 Sep 16 09:54 ib_buffer_pool
-rw-r----- 1 root root 79691776 Sep 16 09:54 ibdata1
drwxr-x--- 2 root root     4096 Sep 16 09:54 mysql
drwxr-x--- 2 root root       54 Sep 16 09:54 oldboy
drwxr-x--- 2 root root     8192 Sep 16 09:54 performance_schema
drwxr-x--- 2 root root       20 Sep 16 09:54 sch
drwxr-x--- 2 root root      176 Sep 16 09:54 school
drwxr-x--- 2 root root     8192 Sep 16 09:54 sys
drwxr-x--- 2 root root      246 Sep 16 09:54 world
drwxr-x--- 2 root root       46 Sep 16 09:54 x
-rw-r----- 1 root root       63 Sep 16 09:54 xtrabackup_binlog_info
-rw-r----- 1 root root      117 Sep 16 09:54 xtrabackup_checkpoints
-rw-r----- 1 root root      546 Sep 16 09:54 xtrabackup_info
-rw-r----- 1 root root     2560 Sep 16 09:54 xtrabackup_logfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>1.3 备份额外的文件介绍</strong></p>
<ul>
<li>xtrabackup_binlog_info<ul>
<li>备份时的binlog的位置点信息，截取binlog的起点信息</li>
<li></li>
</ul>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 2019-09-16_09-54-01]# cat xtrabackup_binlog_info 
mysql-bin.000006        1356    1e91fb5a-cd38-11e9-b843-000c29303796:1-6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>xtrabackup_checkpoints<ul>
<li>备份过程中产生的 LSN信息</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 2019-09-16_09-54-01]# cat xtrabackup_checkpoints 
backup_type &#x3D; full-backuped    --- 备份类型和状态，全备还是增量
from_lsn &#x3D; 0                --- 日志序列号，全备从0开始 ，整个备份起始的LSN
to_lsn &#x3D; 126113880			--- ckpt时的LSN
last_lsn &#x3D; 126113889        --- 备份结束时的LSN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>xtrabackup_info<ul>
<li>备份总览</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 2019-09-16_09-54-01]# cat xtrabackup_info 
uuid &#x3D; dc09cdeb-d824-11e9-b26e-000c29303796
name &#x3D; 
tool_name &#x3D; innobackupex
tool_command &#x3D; --user&#x3D;root --password&#x3D;... &#x2F;data&#x2F;backup&#x2F;full
tool_version &#x3D; 2.4.12
ibbackup_version &#x3D; 2.4.12
server_version &#x3D; 5.7.26-log
start_time &#x3D; 2019-09-16 09:54:01
end_time &#x3D; 2019-09-16 09:54:03
lock_time &#x3D; 0
binlog_pos &#x3D; filename &#39;mysql-bin.000006&#39;, position &#39;1356&#39;, GTID of the last change &#39;1e91fb5a-cd38-11e9-b843-000c29303796:1-6&#39;
innodb_from_lsn &#x3D; 0
innodb_to_lsn &#x3D; 126113880
partial &#x3D; N
incremental &#x3D; N
format &#x3D; file
compact &#x3D; N
compressed &#x3D; N
encrypted &#x3D; N<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>xtrabackup_logfile<ul>
<li>记录备份的过程中产生的redo</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 2019-09-16_09-54-01]# file xtrabackup_logfile 
xtrabackup_logfile: data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><strong>1.4 恢复全备</strong></p>
<ul>
<li>破坏数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">pkill mysqld 
\rm -rf  &#x2F;data&#x2F;mysql&#x2F;data&#x2F;*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>prepare处理备份</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 ~]# innobackupex  --apply-log &#x2F;data&#x2F;backup&#x2F;full&#x2F;2019-09-16_09-54-01&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>此时查看checkpoints 备份类型已经变成已处理</p>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 2019-09-16_09-54-01]# cat xtrabackup_checkpoints 
backup_type &#x3D; full-prepared
from_lsn &#x3D; 0
to_lsn &#x3D; 126113880
last_lsn &#x3D; 126113889
compact &#x3D; 0
recover_binlog_info &#x3D; 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>恢复备份</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 2019-09-16_09-54-01]# cp -a * &#x2F;data&#x2F;mysql&#x2F;data
[root@db01 2019-09-16_09-54-01]# chown -R mysql. &#x2F;data&#x2F;mysql&#x2F;data&#x2F;*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>或者</p>
<pre class="line-numbers language-none"><code class="language-none">innobackupex --copy-back &#x2F;data&#x2F;backup&#x2F;full&#x2F;2019-09-16_09-54-01<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>多实例恢复</p>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 &#x2F;data&#x2F;mysql&#x2F;data]# innobackupex --user&#x3D;root --password&#x3D;456 --default-file&#x3D;&#x2F;data&#x2F;3307&#x2F;my.cnf --sock&#x3D;&#x2F;data&#x2F;3307&#x2F;mysql.sock &#x2F;data&#x2F;backup&#x2F;3307&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>远程备份</p>
<pre class="line-numbers language-none"><code class="language-none">innobackupex --defaults-file&#x3D;&#x2F;etc&#x2F;my.cnf --no-lock --user &#39;root&#39; --password &#39;password123&#39; --stream&#x3D;tar .&#x2F; | ssh root@192.168.2.100 \ &quot;cat - &gt; &#x2F;home&#x2F;backup&#x2F;database&#x2F;&#96;date +%Y%m%d&#96;&#x2F;&#96;date +%H-%M&#96;-backup.tar&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">echo &#96;date +%Y%m%d-%H%M&#96;：备份结束 &gt;&gt; backup_db.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>手动指定备份文件名字</p>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 &#x2F;data&#x2F;backup&#x2F;full&#x2F;2019-09-16]# innobackupex --user&#x3D;root --password&#x3D;456 --no-timestamp &#x2F;data&#x2F;backup&#x2F;full&#x2F;2019-09-16<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>**2.1 全备+ 增量 **<br>故障案例说明：</p>
<ul>
<li>背景：某大型网站，MySQL5.7.20，数据量800G</li>
<li>备份策略：Xtrabackup ，FULL（周日23：30）+INCN（周一到周六23：30）+binlog（每天中午12.30）</li>
<li>故障：周三上午10点，数据库瘫了</li>
</ul>
<p>故障案例模拟：</p>
<ul>
<li>模拟初始数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">--建库
mysql&gt; create database xbk charset utf8mb4;
Query OK, 1 row affected (0.00 sec)
--切换库
mysql&gt; use xbk;
Database changed
-- 建表
mysql&gt; create table t1 (id int)engine&#x3D;innodb charset&#x3D;utf8mb4;
Query OK, 0 rows affected (0.01 sec)
-- 插入数据
mysql&gt; insert into t1 values(1),(2),(3);
Query OK, 3 rows affected (0.02 sec)
Records: 3  Duplicates: 0  Warnings: 0
-- 提交
mysql&gt; commit;
Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>模拟周日的全备</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">-- 全备
[root@db01 backup]# innobackupex  --user&#x3D;root --password&#x3D;123456 --no-timestamp &#x2F;data&#x2F;backup&#x2F;full<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>模拟周一数据变化</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">-- 切换库
mysql&gt; use xbk;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
-- 插入数据
mysql&gt;  insert into t1 values(11),(22),(33);
Query OK, 3 rows affected (0.00 sec)
Records: 3  Duplicates: 0  Warnings: 0
-- 提交
mysql&gt; commit;
Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>模拟周一晚上增量</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 backup]# innobackupex  --user&#x3D;root --password&#x3D;123456 --notimestamp --incremental --incremental-basedir&#x3D;&#x2F;data&#x2F;backup&#x2F;full &#x2F;data&#x2F;backup&#x2F;inc1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查看全备和增量的关系<br><img src="https://img-blog.csdnimg.cn/2ff03adc72744cf886ea925f837d2f0a.png" alt="在这里插入图片描述"></p>
<ul>
<li>模拟周二白天的数据变化</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">-- 切换库
mysql&gt; use xbk;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
-- 插入数据
mysql&gt;  insert into t1 values(111),(222),(333);
Query OK, 3 rows affected (0.00 sec)
Records: 3  Duplicates: 0  Warnings: 0
-- 提交
mysql&gt; commit;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; select *from t1;
+------+
| id   |
+------+
|    1 |
|    2 |
|    3 |
|   11 |
|   22 |
|   33 |
|  111 |
|  222 |
|  333 |
+------+
9 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>周二晚上增量</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 backup]# innobackupex  --user&#x3D;root --password&#x3D;123456 --notimestamp --incremental --incremental-basedir&#x3D;&#x2F;data&#x2F;backup&#x2F;inc1 &#x2F;data&#x2F;backup&#x2F;inc2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>模拟周三白天的数据变化</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">-- 切换库
mysql&gt; use xbk;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
-- 插入数据
mysql&gt;  insert into t1 values(1111),(2222),(3333);
Query OK, 3 rows affected (0.00 sec)
Records: 3  Duplicates: 0  Warnings: 0
-- 提交
mysql&gt; commit;
Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/5ad41d31de584cfd8d9849470a1b970b.png" alt="在这里插入图片描述"></p>
<ul>
<li>破坏数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">pkill mysqld
\rm -fr &#x2F;bata&#x2F;mysql&#x2F;data&#x2F;*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>恢复模拟：</p>
<ul>
<li>检查备份<ul>
<li>full+inc1+inc2+binlog</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 backup]# pwd
&#x2F;data&#x2F;backup
[root@db01 backup]# ll
total 0
drwxr-x--- 12 root root 305 Sep 16 10:37 full
drwxr-x---  3 root root  33 Sep 16 10:41 inc1
drwxr-x---  3 root root  33 Sep 16 10:52 inc2
--- binlog
[root@db01 backup]# cd &#x2F;data&#x2F;binlog&#x2F;
[root@db01 binlog]# ll
total 32
-rw-r----- 1 mysql mysql  201 Sep 11 16:13 mysql-bin.000001
-rw-r----- 1 mysql mysql  201 Sep 11 16:13 mysql-bin.000002
-rw-r----- 1 mysql mysql  201 Sep 11 16:14 mysql-bin.000003
-rw-r----- 1 mysql mysql  201 Sep 11 16:14 mysql-bin.000004
-rw-r----- 1 mysql mysql  177 Sep 11 16:58 mysql-bin.000005
-rw-r----- 1 mysql mysql 1379 Sep 16 10:13 mysql-bin.000006
-rw-r----- 1 mysql mysql 1078 Sep 16 10:38 mysql-bin.000007
-rw-r----- 1 mysql mysql  210 Sep 16 10:16 mysql-bin.index<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>合并并整理备份<ul>
<li>base_full 进行prepare处理备份</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 binlog]# innobackupex  --apply-log --redo-only &#x2F;data&#x2F;backup&#x2F;full&#x2F; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>合并inc1到full中，处理备份</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 binlog]# innobackupex --apply-log --redo-only --incremental-dir&#x3D;&#x2F;data&#x2F;backup&#x2F;inc1&#x2F;2019-09-16_10-41-52 &#x2F;data&#x2F;backup&#x2F;full<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>合并inc2到full中，处理备份</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 binlog]# innobackupex --apply-log  --incremental-dir&#x3D;&#x2F;data&#x2F;backup&#x2F;inc2&#x2F;2019-09-16_10-47-42 &#x2F;data&#x2F;backup&#x2F;full<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>最后一次整理</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 binlog]# innobackupex --apply-log  --incremental-dir&#x3D;&#x2F;data&#x2F;backup&#x2F;inc2&#x2F;2019-09-16_10-47-42 &#x2F;data&#x2F;backup&#x2F;full<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>恢复xbk备份</li>
<li>截取日志（起点，终点）<ul>
<li>起点</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[root@db01 inc2]# cat 2019-09-16_10-47-42&#x2F;xtrabackup_binlog_info 
mysql-bin.000007        1078    1e91fb5a-cd38-11e9-b843-000c29303796:1-6,
f66f1a5b-d827-11e9-bdf6-000c29303796:1-4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>启动数据库</li>
<li>恢复binlog</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">mysql&gt; sql_log_bin&#x3D;0;
mysql&gt; source &#x2F;data&#x2F;backup&#x2F;bin.sql;
mysql&gt; sql_log_bin&#x3D;1;
mysql&gt; use xbk;
mysql&gt; select *from t1;
    -&gt; ;
+------+
| id   |
+------+
|    1 |
|    2 |
|    3 |
|   11 |
|   22 |
|   33 |
|  111 |
|  222 |
|  333 |
| 1111 |
| 2222 |
| 3333 |
+------+
12 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从全备当中恢复单表，可以用表空间迁移</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL读写分离架构（MHA+Atlas）</title>
    <url>/2019/03/06/MySQL%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E6%9E%B6%E6%9E%84%EF%BC%88MHA+Atlas%EF%BC%89/</url>
    <content><![CDATA[<h1 id="一、MySQL读写分离架构"><a href="#一、MySQL读写分离架构" class="headerlink" title="一、MySQL读写分离架构"></a>一、MySQL读写分离架构</h1><ol>
<li>安装配置</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">--- 安装Atlas
yum install -y Atlas*
cd &#x2F;usr&#x2F;local&#x2F;mysql-proxy&#x2F;conf
--- 修改配置文件
mv test.cnf test.cnf.bak
cat &gt; test.cnf &lt;&lt;EOF

[mysql-proxy]

admin-username &#x3D; user
admin-password &#x3D; pwd
proxy-backend-addresses &#x3D; 10.0.0.55:3306
proxy-read-only-backend-addresses &#x3D; 10.0.0.51:3306,10.0.0.53:3306
pwds &#x3D; repl:3yb5jEku5h4&#x3D;,mha:O2jBXONX098&#x3D;
daemon &#x3D; true
keepalive &#x3D; true
event-threads &#x3D; 8
log-level &#x3D; message
log-path &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql-proxy&#x2F;log
sql-log&#x3D;ON
proxy-address &#x3D; 0.0.0.0:33060
admin-address &#x3D; 0.0.0.0:2345
charset&#x3D;utf8
EOF

--- 启动atlas
&#x2F;usr&#x2F;local&#x2F;mysql-proxy&#x2F;bin&#x2F;mysql-proxyd test start
--- 查看Atlas是否启动
ps -ef |grep proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>测试<br>1）读</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">[root@db03 ~]# mysql -umha -pmha -h10.0.0.53 -P33060
db03 [(none)]&gt;select @@server_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>2）写</p>
<pre class="line-numbers language-none"><code class="language-none">db03 [(none)]&gt;begin;
db03 [(none)]&gt;select @@server_id;
db03 [(none)]&gt;commit;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>添加用户<br>1）主节点添加用户</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">db02 [(none)]&gt;grant all on *.* to root@&#39;10.0.0.%&#39; identified by &#39;123&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>2）密码加密（db03）</p>
<pre class="line-numbers language-none"><code class="language-none">[root@db03 &#x2F;usr&#x2F;local&#x2F;mysql-proxy&#x2F;bin]# &#x2F;usr&#x2F;local&#x2F;mysql-proxy&#x2F;bin&#x2F;encrypt 123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>3）改配置文件重启</p>
<pre class="line-numbers language-none"><code class="language-none">pwds &#x3D; repl:3yb5jEku5h4&#x3D;,mha:O2jBXONX098&#x3D;,root:3yb5jEku5h4&#x3D;

&#x2F;usr&#x2F;local&#x2F;mysql-proxy&#x2F;bin&#x2F;mysql-proxyd test restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>在线管理<br>1）连接到管理端口2345</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">[root@db03 ~]# mysql -uuser -ppwd -h 127.0.0.1 -P2345<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>2）查看帮助</p>
<pre class="line-numbers language-none"><code class="language-none">db03 [(none)]&gt;select * from help;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>3）查看所有后端节点</p>
<pre class="line-numbers language-none"><code class="language-none">SELECT * FROM backends;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>4）上线、下线节点</p>
<pre class="line-numbers language-none"><code class="language-none">SET OFFLINE 3;
SET ONLINE 3;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>5）在线添加、删除从节点</p>
<pre class="line-numbers language-none"><code class="language-none">add slave 10.0.0.53:3306;
REMOVE BACKEND 3;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>6）用户操作</p>
<pre class="line-numbers language-none"><code class="language-none">db03 [(none)]&gt;SELECT * FROM pwds
db03 [(none)]&gt;add pwd root:123;
db03 [(none)]&gt;REMOVE PWD root;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>7）保存配置文件</p>
<pre class="line-numbers language-none"><code class="language-none">db03 [(none)]&gt;save config;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes常用资源——PV/PVC</title>
    <url>/2022/07/02/PV%20PVC/</url>
    <content><![CDATA[<h1 id="PV-x2F-PVC"><a href="#PV-x2F-PVC" class="headerlink" title="PV&#x2F;PVC"></a>PV&#x2F;PVC</h1><ul>
<li>PV：persistentVolume （与硬件（nfs、ceph等）对接）</li>
</ul>
<p>是集群中已经由kubernetes 管理员配置的一个网络存储，集群中的存储资源一个集群资源，即不隶属于任何namespace，PV的数据最终存储在硬件存储，pod不能字节挂载pv，pv需要绑定给pvc并最终由pod挂载pvc使用，PV支持NFS、Ceph，商业存储或云提供商的听特定的存储等，可以自定义PV的类型是块还是文件存储，存储空间大小，访问模式等，PV的生命周期独立于Pod，即当使用PV的Pod被删除时可以对PV的数据没有影响</p>
<ul>
<li>PVC：persistentVolumeClaim（与pod关联，与pv绑定）</li>
</ul>
<p>PVC是对存储的请求，pod挂载PVC并将数据存储在PVC，而PVC需要绑定到PV才能使用，另外PVC在创建的时候要知道namespace，即Pod要和PVC在同一个namespace下，可以对pvc设置特定的空间大小和访问模式，使用PVC的pod在删除时也可以对PVC中的数据没有影响</p>
<p><img src="/images/pasted-11.png" alt="pv1"></p>
<p>用于实现pod和storage的解耦，这样我们修改storage的时候不需要修改pod</p>
<p>与NFS的区别，可以在PV和PVC 层面实现对存储服务器的空间分配、存储的访问权限管理等。</p>
<p><a href="https://v1-22.docs.kubernetes.io/zh/docs/concepts/storage/persistent-volumes/">https://v1-22.docs.kubernetes.io/zh/docs/concepts/storage/persistent-volumes/</a> #不同存储卷支持的访问模式</p>
<p><img src="/images/pasted-12.png" alt="pv2"></p>
<p>总结：</p>
<p>PV是对底层网络存储的抽象，就是将网络存储定义为一种存储资源，将一个整体的存储资源拆分成多分后给不同的业务使用</p>
<p>PVC是对PV资源的申请调用，pod是通过PVC将数据保存至PV，PV再把数据保存至真正的硬件存储。</p>
<p><img src="/images/pasted-13.png" alt="pv3"></p>
<h5 id="PV参数："><a href="#PV参数：" class="headerlink" title="PV参数："></a>PV参数：</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 case7-nfs<span class="token punctuation">]</span><span class="token comment"># kubectl explain pv</span>
<span class="token number">1</span>、Capacity: <span class="token comment">#当前PV空间大小，kubectl explain pv.spec.capacity</span>
<span class="token number">2</span>、accessModes: <span class="token comment">#访问模式， kubectl explain pv.spec.accessModes</span>
   ReadWriteOnce <span class="token comment">#————————PV只能被单个节点以读写权限挂载RWO</span>
   ReadOnlyMany  <span class="token comment">#————————PV可以被多个节点挂载但是权限只读ROX</span>
   ReadWriteMany <span class="token comment">#————————PV可以被多个节点以读写方式挂载使用RWX</span>
<span class="token number">3</span>、persistentVolumeReclaimPolicy <span class="token comment">#删除机制</span>
   Retain  <span class="token comment">#———————— 删除PV后保持原状，最后需要管理员手动删除</span>
   Recycle <span class="token comment">#———————— 空间回收，即删除存储卷上所有数据（包括数据和隐藏文件），目前仅支持NFS和hostPath</span>
   Delete  <span class="token comment">#———————— 自动删除存储卷</span>
<span class="token number">4</span>、volumeMode <span class="token comment">#卷类型</span>
   <span class="token comment">#定义存储卷使用的文件系统是块还是文件系统，默认是文件系统</span>
<span class="token number">5</span>、mountOptions <span class="token comment">#附加的挂载选项列表，实现更精细的权限控制 ro等</span>

<span class="token comment">#pv创建后的状态</span>
Available（可用）-- 卷是一个空闲资源，尚未绑定到任何申领；
Bound（已绑定）-- 该卷已经绑定到某申领；
Released（已释放）-- 所绑定的申领已被删除，但是资源尚未被集群回收；
Failed（失败）-- 卷的自动回收操作失败。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>PVC参数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 case7-nfs<span class="token punctuation">]</span><span class="token comment"># kubectl explain pvc</span>
<span class="token number">1</span>、accessModes: <span class="token comment">#访问模式， kubectl explain pv.spec.accessModes</span>
   ReadWriteOnce <span class="token comment">#————————PV只能被单个节点以读写权限挂载RWO</span>
   ReadOnlyMany  <span class="token comment">#————————PV可以被多个节点挂载但是权限只读ROX</span>
   ReadWriteMany <span class="token comment">#————————PV可以被多个节点以读写方式挂载使用RWX</span>
<span class="token number">2</span>、resources: <span class="token comment">#定义PVC创建存储卷的空间大小</span>
<span class="token number">3</span>、selector： <span class="token comment">#标签选择器，选择要绑定的pv</span>
     matchLabels: <span class="token comment">#匹配标签名称</span>
     matchExperssions: <span class="token comment">#基于正则表达式匹配</span>
<span class="token number">4</span>、volumeMode <span class="token comment">#卷类型</span>
   <span class="token comment">#定义PVC使用的文件系统是块还是文件系统，默认是文件系统</span>
<span class="token number">5</span>、volumeName <span class="token comment">#要绑定的pv名称</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>Volume存储卷类型：</p>
<p>static：静态存储卷，需要在使用前手动创建pv，然后创建pvc并绑定到pv，然后挂载至pod使用，适用于pv和pvc相对于比较固定的业务场景</p>
<p>dynamin：动态存储卷，先创建一个存储类storageclass，后期pod在使用pvc的时候可以通过存储类动态创建pvc，适用于有状态服务集群如Mysql一主多从、zookeeper集群等。</p>
<p><img src="/images/pasted-14.png" alt="pv4"></p>
<h4 id="一、Volume静态存储卷示例"><a href="#一、Volume静态存储卷示例" class="headerlink" title="一、Volume静态存储卷示例"></a>一、Volume静态存储卷示例</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#准备NFS存储</span>
<span class="token punctuation">[</span>root@haproxy1 case8-pv-static<span class="token punctuation">]</span><span class="token comment"># mkdir /data/k8sdata/myserver/myappdata -p</span>
<span class="token punctuation">[</span>root@haproxy1 case8-pv-static<span class="token punctuation">]</span><span class="token comment"># cat /etc/exports</span>
/data/k8sdata <span class="token number">172.16</span>.92.0/24<span class="token punctuation">(</span>rw,no_root_squash<span class="token punctuation">)</span>
/data/k8sdata/myserver/myappdata <span class="token number">172.16</span>.92.0/24<span class="token punctuation">(</span>rw,no_root_squash<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@haproxy1 case8-pv-static<span class="token punctuation">]</span><span class="token comment"># systemctl restart nfs</span>
<span class="token comment">#——————创建pv</span>
<span class="token punctuation">[</span>root@haproxy1 case8-pv-static<span class="token punctuation">]</span><span class="token comment"># cat 1-myapp-persistentvolume.yaml </span>
apiVersion: v1
kind: PersistentVolume
metadata:
  name: myserver-myapp-static-pv
spec:
  <span class="token comment">#存储卷的大小</span>
  capacity:
    storage: 10Gi
  <span class="token comment">#存储卷访问模式，单个pod可读写</span>
  accessModes:
    - ReadWriteOnce
  <span class="token comment">#指定存储类型nfs</span>
  nfs:
    path: /data/k8sdata/myserver/myappdata
    server: <span class="token number">172.16</span>.92.160
<span class="token punctuation">[</span>root@haproxy1 case8-pv-static<span class="token punctuation">]</span><span class="token comment"># kubectl apply -f  1-myapp-persistentvolume.yaml </span>
persistentvolume/myserver-myapp-static-pv created
<span class="token comment">#STATUS为Available表示pv已经和nfs关联了</span>
<span class="token punctuation">[</span>root@haproxy1 case8-pv-static<span class="token punctuation">]</span><span class="token comment"># kubectl get pv </span>
NAME                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE
myserver-myapp-static-pv   10Gi       RWO            Retain           Available                                   3s
<span class="token comment">#——————创建pvc</span>
<span class="token punctuation">[</span>root@haproxy1 case8-pv-static<span class="token punctuation">]</span><span class="token comment"># cat 2-myapp-persistentvolumeclaim.yaml </span>
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: myserver-myapp-static-pvc
  namespace: myserver
spec:
  volumeName: myserver-myapp-static-pv
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
<span class="token punctuation">[</span>root@haproxy1 case8-pv-static<span class="token punctuation">]</span><span class="token comment"># kubectl  apply -f 2-myapp-persistentvolumeclaim.yaml </span>
persistentvolumeclaim/myserver-myapp-static-pvc created
<span class="token comment">#pvc状态为Bound时表示已经和pv绑定成功</span>
<span class="token punctuation">[</span>root@haproxy1 case8-pv-static<span class="token punctuation">]</span><span class="token comment"># kubectl get pvc -n myserver </span>
NAME                        STATUS   VOLUME                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
myserver-myapp-static-pvc   Bound    myserver-myapp-static-pv   10Gi       RWO                           8s
<span class="token comment">#创建deployment</span>
<span class="token punctuation">[</span>root@haproxy1 case8-pv-static<span class="token punctuation">]</span><span class="token comment"># kubectl apply -f  3-myapp-webserver.yaml </span>
kind: Deployment
<span class="token comment">#apiVersion: extensions/v1beta1</span>
apiVersion: apps/v1
metadata:
  labels:
    app: myserver-myapp 
  name: myserver-myapp-deployment-name
  namespace: myserver
spec:
  replicas: <span class="token number">3</span>
  selector:
    matchLabels:
      app: myserver-myapp-frontend
  template:
    metadata:
      labels:
        app: myserver-myapp-frontend
    spec:
      containers:
        - name: myserver-myapp-container
          image: nginx:1.20.0 
          <span class="token comment">#imagePullPolicy: Always</span>
          volumeMounts:
          - mountPath: <span class="token string">"/usr/share/nginx/html/statics"</span>
            name: statics-datadir
      volumes:
        - name: statics-datadir
          persistentVolumeClaim:
<span class="token comment">#这里指定pvc的名称</span>
            claimName: myserver-myapp-static-pvc 

---
kind: Service
apiVersion: v1
metadata:
  labels:
    app: myserver-myapp-service
  name: myserver-myapp-service-name
  namespace: myserver
spec:
  type: NodePort
  ports:
  - name: http
    port: <span class="token number">80</span>
    targetPort: <span class="token number">80</span>
    nodePort: <span class="token number">30080</span>
  selector:
    app: myserver-myapp-frontend
<span class="token punctuation">[</span>root@haproxy1 case8-pv-static<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -n myserver -o wide </span>
NAME                                             READY   STATUS    RESTARTS   AGE    IP               NODE            NOMINATED NODE   READINESS GATES
myserver-myapp-deployment-name-fb44b4447-bg54x   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          3d1h   <span class="token number">10.200</span>.36.83     <span class="token number">172.16</span>.92.140   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
myserver-myapp-deployment-name-fb44b4447-s7cdg   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          3d1h   <span class="token number">10.200</span>.107.251   <span class="token number">172.16</span>.92.142   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
myserver-myapp-deployment-name-fb44b4447-xhlgp   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          3d1h   <span class="token number">10.200</span>.169.172   <span class="token number">172.16</span>.92.141   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
<span class="token comment">#创建成功后进入pod查看是否已经挂载</span>
<span class="token punctuation">[</span>root@haproxy1 case8-pv-static<span class="token punctuation">]</span><span class="token comment"># kubectl exec -it myserver-myapp-deployment-name-fb44b4447-bg54x bash  -n myserver </span>
kubectl <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>POD<span class="token punctuation">]</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> is DEPRECATED and will be removed <span class="token keyword">in</span> a future version. Use kubectl <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>POD<span class="token punctuation">]</span> -- <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> instead.
root@myserver-myapp-deployment-name-fb44b4447-bg54x:/<span class="token comment"># </span>
root@myserver-myapp-deployment-name-fb44b4447-bg54x:/<span class="token comment"># df -h </span>
Filesystem                                      Size  Used Avail Use% Mounted on
overlay                                         100G  <span class="token number">6</span>.4G   94G   <span class="token number">7</span>% /
tmpfs                                            64M     <span class="token number">0</span>   64M   <span class="token number">0</span>% /dev
tmpfs                                           <span class="token number">2</span>.8G     <span class="token number">0</span>  <span class="token number">2</span>.8G   <span class="token number">0</span>% /sys/fs/cgroup
/dev/sda1                                       100G  <span class="token number">6</span>.4G   94G   <span class="token number">7</span>% /etc/hosts
shm                                              64M     <span class="token number">0</span>   64M   <span class="token number">0</span>% /dev/shm
tmpfs                                           <span class="token number">5</span>.3G   12K  <span class="token number">5</span>.3G   <span class="token number">1</span>% /run/secrets/kubernetes.io/serviceaccount
<span class="token number">172.16</span>.92.160:/data/k8sdata/myserver/myappdata   70G  <span class="token number">8</span>.1G   62G  <span class="token number">12</span>% /usr/share/nginx/html/statics
tmpfs                                           <span class="token number">2</span>.8G     <span class="token number">0</span>  <span class="token number">2</span>.8G   <span class="token number">0</span>% /proc/acpi
tmpfs                                           <span class="token number">2</span>.8G     <span class="token number">0</span>  <span class="token number">2</span>.8G   <span class="token number">0</span>% /proc/scsi
tmpfs                                           <span class="token number">2</span>.8G     <span class="token number">0</span>  <span class="token number">2</span>.8G   <span class="token number">0</span>% /sys/firmware


<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>#测试————————在nfs挂载目录传一个图片，看看pod是否能解析</p>
<h5 id="二、Volume动态存储卷示例"><a href="#二、Volume动态存储卷示例" class="headerlink" title="二、Volume动态存储卷示例"></a>二、Volume动态存储卷示例</h5><p><a href="https://kubernetes.io/zh/docs/concepts/storage/storage-classes/">https://kubernetes.io/zh/docs/concepts/storage/storage-classes/</a></p>
<p><a href="https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner">https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner</a></p>
<p>1、创建账户</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 case9-pv-dynamic-nfs<span class="token punctuation">]</span><span class="token comment"># cat 1-rbac.yaml </span>
apiVersion: v1
kind: Namespace
metadata:
  name: nfs
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nfs-client-provisioner
  <span class="token comment"># replace with namespace where provisioner is deployed</span>
  namespace: nfs
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nfs-client-provisioner-runner
rules:
  - apiGroups: <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>
    resources: <span class="token punctuation">[</span><span class="token string">"nodes"</span><span class="token punctuation">]</span>
    verbs: <span class="token punctuation">[</span><span class="token string">"get"</span>, <span class="token string">"list"</span>, <span class="token string">"watch"</span><span class="token punctuation">]</span>
  - apiGroups: <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>
    resources: <span class="token punctuation">[</span><span class="token string">"persistentvolumes"</span><span class="token punctuation">]</span>
    verbs: <span class="token punctuation">[</span><span class="token string">"get"</span>, <span class="token string">"list"</span>, <span class="token string">"watch"</span>, <span class="token string">"create"</span>, <span class="token string">"delete"</span><span class="token punctuation">]</span>
  - apiGroups: <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>
    resources: <span class="token punctuation">[</span><span class="token string">"persistentvolumeclaims"</span><span class="token punctuation">]</span>
    verbs: <span class="token punctuation">[</span><span class="token string">"get"</span>, <span class="token string">"list"</span>, <span class="token string">"watch"</span>, <span class="token string">"update"</span><span class="token punctuation">]</span>
  - apiGroups: <span class="token punctuation">[</span><span class="token string">"storage.k8s.io"</span><span class="token punctuation">]</span>
    resources: <span class="token punctuation">[</span><span class="token string">"storageclasses"</span><span class="token punctuation">]</span>
    verbs: <span class="token punctuation">[</span><span class="token string">"get"</span>, <span class="token string">"list"</span>, <span class="token string">"watch"</span><span class="token punctuation">]</span>
  - apiGroups: <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>
    resources: <span class="token punctuation">[</span><span class="token string">"events"</span><span class="token punctuation">]</span>
    verbs: <span class="token punctuation">[</span><span class="token string">"create"</span>, <span class="token string">"update"</span>, <span class="token string">"patch"</span><span class="token punctuation">]</span>
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: run-nfs-client-provisioner
subjects:
  - kind: ServiceAccount
    name: nfs-client-provisioner
    <span class="token comment"># replace with namespace where provisioner is deployed</span>
    namespace: nfs
roleRef:
  kind: ClusterRole
  name: nfs-client-provisioner-runner
  apiGroup: rbac.authorization.k8s.io
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: leader-locking-nfs-client-provisioner
  <span class="token comment"># replace with namespace where provisioner is deployed</span>
  namespace: nfs
rules:
  - apiGroups: <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>
    resources: <span class="token punctuation">[</span><span class="token string">"endpoints"</span><span class="token punctuation">]</span>
    verbs: <span class="token punctuation">[</span><span class="token string">"get"</span>, <span class="token string">"list"</span>, <span class="token string">"watch"</span>, <span class="token string">"create"</span>, <span class="token string">"update"</span>, <span class="token string">"patch"</span><span class="token punctuation">]</span>
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: leader-locking-nfs-client-provisioner
  <span class="token comment"># replace with namespace where provisioner is deployed</span>
  namespace: nfs
subjects:
  - kind: ServiceAccount
    name: nfs-client-provisioner
    <span class="token comment"># replace with namespace where provisioner is deployed</span>
    namespace: nfs
roleRef:
  kind: Role
  name: leader-locking-nfs-client-provisioner
  apiGroup: rbac.authorization.k8s.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>2、创建storageClass</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 case9-pv-dynamic-nfs<span class="token punctuation">]</span><span class="token comment"># cat 2-storageclass.yaml </span>
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: managed-nfs-storage
provisioner: k8s-sigs.io/nfs-subdir-external-provisioner <span class="token comment"># or choose another name, must match deployment's env PROVISIONER_NAME'</span>
reclaimPolicy: Retain <span class="token comment">#PV的删除策略，默认为delete，删除PV后立即删除NFS server的数据</span>
mountOptions:
  - noresvport <span class="token comment">#告知NFS客户端在重新建立网络连接时，使用新的传输控制协议源端口</span>
  - noatime <span class="token comment">#访问文件时不更新文件inode中的时间戳，高并发环境可提高性能</span>
parameters:
  mountOptions: <span class="token string">"vers=4.1,noresvport,noatime"</span>
  archiveOnDelete: <span class="token string">"true"</span>  <span class="token comment">#删除pod时保留pod数据，默认为false时为不保留数据 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>3、创建NFS provisioner</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 case9-pv-dynamic-nfs<span class="token punctuation">]</span><span class="token comment"># cat 3-nfs-provisioner.yaml </span>
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nfs-client-provisioner
  labels:
    app: nfs-client-provisioner
  <span class="token comment"># replace with namespace where provisioner is deployed</span>
  namespace: nfs
spec:
  replicas: <span class="token number">1</span>
  strategy: <span class="token comment">#部署策略</span>
    type: Recreate
  selector:
    matchLabels:
      app: nfs-client-provisioner
  template:
    metadata:
      labels:
        app: nfs-client-provisioner
    spec:
      serviceAccountName: nfs-client-provisioner
      containers:
        - name: nfs-client-provisioner
          <span class="token comment">#image: k8s.gcr.io/sig-storage/nfs-subdir-external-provisioner:v4.0.2 </span>
          <span class="token comment">#image: registry.cn-qingdao.aliyuncs.com/zhangshijie/nfs-subdir-external-provisioner:v4.0.2 </span>
          image: registry.cn-beijing.aliyuncs.com/mydlq/nfs-subdir-external-provisioner:v4.0.0
          volumeMounts:
            - name: nfs-client-root
              mountPath: /persistentvolumes
          env:
            - name: PROVISIONER_NAME
              value: k8s-sigs.io/nfs-subdir-external-provisioner
            - name: NFS_SERVER
              value: <span class="token number">172.16</span>.92.160
            - name: NFS_PATH
              value: /data/volumes
      volumes:
        - name: nfs-client-root
          nfs:
            server: <span class="token number">172.16</span>.92.160
            path: /data/volumes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>4、创建PVC</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 case9-pv-dynamic-nfs<span class="token punctuation">]</span><span class="token comment"># cat 4-create-pvc.yaml </span>
<span class="token comment"># Test PVC</span>
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: myserver-myapp-dynamic-pvc
  namespace: myserver
spec:
  storageClassName: managed-nfs-storage <span class="token comment">#调用的storageclass 名称</span>
  accessModes:
    - ReadWriteMany <span class="token comment">#访问权限</span>
  resources:
    requests:
      storage: 500Mi <span class="token comment">#空间大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>5、创建web服务</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 case9-pv-dynamic-nfs<span class="token punctuation">]</span><span class="token comment"># cat 5-myapp-webserver.yaml </span>
kind: Deployment
<span class="token comment">#apiVersion: extensions/v1beta1</span>
apiVersion: apps/v1
metadata:
  labels:
    app: myserver-myapp 
  name: myserver-myapp-deployment-name
  namespace: myserver
spec:
  replicas: <span class="token number">1</span> 
  selector:
    matchLabels:
      app: myserver-myapp-frontend
  template:
    metadata:
      labels:
        app: myserver-myapp-frontend
    spec:
      containers:
        - name: myserver-myapp-container
          image: nginx:1.20.0 
          <span class="token comment">#imagePullPolicy: Always</span>
          volumeMounts:
          - mountPath: <span class="token string">"/usr/share/nginx/html/statics"</span>
            name: statics-datadir
      volumes:
        - name: statics-datadir
          persistentVolumeClaim:
            claimName: myserver-myapp-dynamic-pvc 

---
kind: Service
apiVersion: v1
metadata:
  labels:
    app: myserver-myapp-service
  name: myserver-myapp-service-name
  namespace: myserver
spec:
  type: NodePort
  ports:
  - name: http
    port: <span class="token number">80</span>
    targetPort: <span class="token number">80</span>
    nodePort: <span class="token number">30080</span>
  selector:
    app: myserver-myapp-frontend

<span class="token comment">#验证nfs存储服务器</span>
<span class="token punctuation">[</span>root@haproxy1 case9-pv-dynamic-nfs<span class="token punctuation">]</span><span class="token comment"># ll /data/volumes/</span>
drwxrwxrwx <span class="token number">2</span> root root <span class="token number">6</span> <span class="token number">5</span>月  <span class="token number">18</span> <span class="token number">16</span>:35 myserver-myserver-myapp-dynamic-pvc-pvc-d4c2d565-cbea-4b19-91df-38c7ca1a3717
<span class="token comment">#进入pod创建nginx的首页文件</span>
<span class="token punctuation">[</span>root@haproxy1 case9-pv-dynamic-nfs<span class="token punctuation">]</span><span class="token comment"># kubectl exec -it myserver-myapp-deployment-name-7c855dc86d-sbb6g -n myserver  bash </span>
kubectl <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>POD<span class="token punctuation">]</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> is DEPRECATED and will be removed <span class="token keyword">in</span> a future version. Use kubectl <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>POD<span class="token punctuation">]</span> -- <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> instead.
root@myserver-myapp-deployment-name-7c855dc86d-sbb6g:/<span class="token comment"># </span>
root@myserver-myapp-deployment-name-7c855dc86d-sbb6g:/<span class="token comment"># df -h </span>
Filesystem                                                                                                Size  Used Avail Use% Mounted on
overlay                                                                                                   100G  <span class="token number">2</span>.0G   99G   <span class="token number">2</span>% /
tmpfs                                                                                                      64M     <span class="token number">0</span>   64M   <span class="token number">0</span>% /dev
tmpfs                                                                                                     <span class="token number">2</span>.8G     <span class="token number">0</span>  <span class="token number">2</span>.8G   <span class="token number">0</span>% /sys/fs/cgroup
/dev/sda1                                                                                                 100G  <span class="token number">2</span>.0G   99G   <span class="token number">2</span>% /etc/hosts
shm                                                                                                        64M     <span class="token number">0</span>   64M   <span class="token number">0</span>% /dev/shm
<span class="token number">172.16</span>.92.160:/data/volumes/myserver-myserver-myapp-dynamic-pvc-pvc-d4c2d565-cbea-4b19-91df-38c7ca1a3717   70G  <span class="token number">8</span>.1G   62G  <span class="token number">12</span>% /usr/share/nginx/html/statics
tmpfs                                                                                                     <span class="token number">5</span>.3G   12K  <span class="token number">5</span>.3G   <span class="token number">1</span>% /run/secrets/kubernetes.io/serviceaccount
tmpfs                                                                                                     <span class="token number">2</span>.8G     <span class="token number">0</span>  <span class="token number">2</span>.8G   <span class="token number">0</span>% /proc/acpi
tmpfs                                                                                                     <span class="token number">2</span>.8G     <span class="token number">0</span>  <span class="token number">2</span>.8G   <span class="token number">0</span>% /proc/scsi
tmpfs                                                                                                     <span class="token number">2</span>.8G     <span class="token number">0</span>  <span class="token number">2</span>.8G   <span class="token number">0</span>% /sys/firmware
root@myserver-myapp-deployment-name-7c855dc86d-sbb6g:/<span class="token comment"># </span>
root@myserver-myapp-deployment-name-7c855dc86d-sbb6g:/<span class="token comment"># cd /usr/share/nginx/html/statics/</span>
root@myserver-myapp-deployment-name-7c855dc86d-sbb6g:/usr/share/nginx/html/statics<span class="token comment"># ls</span>
root@myserver-myapp-deployment-name-7c855dc86d-sbb6g:/usr/share/nginx/html/statics<span class="token comment"># </span>
root@myserver-myapp-deployment-name-7c855dc86d-sbb6g:/usr/share/nginx/html/statics<span class="token comment"># echo nihao >index.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><img src="/images/pasted-15.png" alt="pv5"></p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>Pod异常状态排错</title>
    <url>/2022/08/15/Pod%E5%BC%82%E5%B8%B8%E7%8A%B6%E6%80%81%E6%8E%92%E9%94%99/</url>
    <content><![CDATA[<h1 id="一、常用命令"><a href="#一、常用命令" class="headerlink" title="一、常用命令"></a>一、常用命令</h1><p>首先列出Pod排查过程中我这边的常用命令：</p>
<ul>
<li>查看Pod状态：kubectl get pod  podname -o wide</li>
<li>查看Pod的yaml配置：kubectl get pods podname -o yaml</li>
<li>查看pod事件：kubectl describe pods podname </li>
<li>查看容器日志：kubectl logs podsname -c  container-name</li>
</ul>
<h1 id="二、Pod状态"><a href="#二、Pod状态" class="headerlink" title="二、Pod状态"></a>二、Pod状态</h1><ul>
<li>Error：Pod 启动过程中发生错误</li>
<li>NodeLost : Pod 所在节点失联</li>
<li>Unkown : Pod 所在节点失联或其它未知异常</li>
<li>Waiting : Pod 等待启动</li>
<li>Pending : Pod 等待被调度</li>
<li>ContainerCreating : Pod 容器正在被创建</li>
<li>Terminating : Pod 正在被销毁</li>
<li>CrashLoopBackOff ： 容器退出，kubelet 正在将它重启</li>
<li>InvalidImageName ： 无法解析镜像名称</li>
<li>ImageInspectError ： 无法校验镜像</li>
<li>ErrImageNeverPull ： 策略禁止拉取镜像</li>
<li>ImagePullBackOff ： 正在重试拉取</li>
<li>RegistryUnavailable ： 连接不到镜像中心</li>
<li>ErrImagePull ： 通用的拉取镜像出错</li>
<li>CreateContainerConfigError ： 不能创建 kubelet 使用的容器配置</li>
<li>CreateContainerError ： 创建容器失败</li>
<li>RunContainerError ： 启动容器失败</li>
<li>PreStartHookError : 执行 preStart hook 报错</li>
<li>PostStartHookError ： 执行 postStart hook 报错</li>
<li>ContainersNotInitialized ： 容器没有初始化完毕</li>
<li>ContainersNotReady ： 容器没有准备完毕</li>
<li>ContainerCreating ：容器创建中</li>
<li>PodInitializing ：pod 初始化中</li>
<li>DockerDaemonNotReady ：docker还没有完全启动</li>
<li>NetworkPluginNotReady ： 网络插件还没有完全启动</li>
</ul>
<h1 id="三、pod遇到的问题"><a href="#三、pod遇到的问题" class="headerlink" title="三、pod遇到的问题"></a>三、pod遇到的问题</h1><h2 id="1、pod一直处于Pending状态"><a href="#1、pod一直处于Pending状态" class="headerlink" title="1、pod一直处于Pending状态"></a>1、pod一直处于Pending状态</h2><p>Pending 状态说明 Pod 还没有被调度到某个节点上，需要看下 Pod 事件进一步判断原因，比如:</p>
<pre class="line-numbers language-none"><code class="language-none">$ kubectl describe pod tikv-0 
   . ... 
     Events: 
      Type     Reason   Age     From   Message 
       ----    ------   ----    ----    ------- 
      Warning FailedScheduling 3m (x106 over 33m) default-scheduler 0&#x2F;4 nodes are available: 1 node(s) had no available volume zone, 2 Insufficient cpu, 3 Insufficient memory.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面是我遇到的一些原因：</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>节点资源不够</strong></font><br></li>
</ul>
<p>节点资源不够有以下几种情况:<br> 1、CPU负载过高<br> 2、剩余可被分配的内存不足<br> 3、剩余可用GPU数量不足<br> 如果判断某个 Node 资源是否足够？ 通过下面的命令查看node资源情况，关注以下信息：</p>
<blockquote>
<p>kubectl describe node nodename</p>
</blockquote>
<ul>
<li><code>Allocatable</code> : 表示此节点能够申请的资源总和</li>
<li><code>Allocated resources</code> : 表示此节点已分配的资源 (Allocatable 减去节点上所有 Pod 总 的 Request)</li>
</ul>
<p>前者与后者相减，可得出剩余可申请的资源。如果这个值小于 Pod 的 request，就不满足 Pod 的 资源要求，Scheduler 在 Predicates (预选) 阶段就会剔除掉这个 Node，也就不会调度上去。</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>不满足 nodeSelector 与 affinity</strong></font><br></li>
</ul>
<blockquote>
<p>如果 Pod 包含 nodeSelector 指定了节点需要包含的 label，调度器将只会考虑将 Pod 调度到 包含这些 label 的Node 上，如果没有 Node 有这些 label 或者有这些 label 的 Node 其它 条件不满足也将会无法调度。参考官方文档</p>
</blockquote>
<p><a href="https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector">https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector</a><br>如果 Pod 包含 affinity（亲和性）的配置，调度器根据调度算法也可能算出没有满足条件的 Node，从而无法调度。affinity 有以下几类:</p>
<ul>
<li><code>nodeAffinity</code>: 节点亲和性，可以看成是增强版的 nodeSelector，用于限制 Pod 只允许 被调度到某一部分 Node。</li>
<li><code>podAffinity</code>: Pod 亲和性，用于将一些有关联的 Pod 调度到同一个地方，同一个地方可以 是指同一个节点或同一个可用区的节点等。</li>
<li><code>podAntiAffinity</code>: Pod 反亲和性，用于避免将某一类 Pod 调度到同一个地方避免单点故 障，比如将集群 DNS 服务的 Pod 副本都调度到不同节点，避免一个节点挂了造成整个集群 DNS 解析失败，使得业务中断。</li>
</ul>
<hr>
<ul>
<li><font color="#dd0000"><strong>Node 存在 Pod 没有容忍的污点</strong></font><br></li>
</ul>
<blockquote>
<p>如果节点上存在污点 (Taints)，而 Pod 没有响应的容忍 (<code>Tolerations</code>)，Pod 也将不会调度上 去。通过 <code>describe node</code> 可以看下 Node 有哪些 Taints:</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">$ kubectl describe nodes host1 
    ... 
    Taints: special&#x3D;true:NoSchedule
    ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>污点既可以是手动添加也可以是被自动添加，下面可以看一下。</p>
<p><strong>手动添加的污点：</strong><br>通过类似以下方式可以给节点添加污点:</p>
<pre class="line-numbers language-none"><code class="language-none">$ kubectl taint node host1 special&#x3D;true:NoSchedule 
  node &quot;host1&quot; tainted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>另外，有些场景下希望新加的节点默认不调度 Pod，直到调整完节点上某些配置才允许调度，就给新加 的节点都加上<code>node.kubernetes.io/unschedulable</code>   这个污点。</p>
<p><strong>自动添加的污点</strong><br>如果节点运行状态不正常，污点也可以被自动添加，从 v1.12 开始， TaintNodesByCondition 特性进入 Beta 默认开启，<code>controller manager</code> 会检查 Node 的 <code>Condition</code>，如果命中条件 就自动为 Node 加上相应的污点，这些 Condition 与 Taints 的对应关系如下:</p>
<pre class="line-numbers language-none"><code class="language-none">Conditon Value Taints 
-------- ----- ------
OutOfDisk True node.kubernetes.io&#x2F;out-of-disk
Ready False node.kubernetes.io&#x2F;not-ready
Ready Unknown node.kubernetes.io&#x2F;unreachable
MemoryPressure True node.kubernetes.io&#x2F;memory-pressure
PIDPressure True node.kubernetes.io&#x2F;pid-pressure
DiskPressure True node.kubernetes.io&#x2F;disk-pressure
NetworkUnavailable True node.kubernetes.io&#x2F;network-unavailable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>解释下上面各种条件的意思:</p>
<ul>
<li>OutOfDisk 为 True 表示节点磁盘空间不够了 </li>
<li>Ready 为 False 表示节点不健康 </li>
<li>Ready 为 Unknown 表示节点失联，在 node-monitor-grace-period 这么长的时间内没有 上报状态 controller-manager 就会将 Node 状态置为 Unknown (默认 40s) </li>
<li>MemoryPressure 为 True 表示节点内存压力大，实际可用内存很少</li>
<li>PIDPressure 为 True 表示节点上运行了太多进程，PID 数量不够用了 </li>
<li>DiskPressure 为 True 表示节点上的磁盘可用空间太少了 </li>
<li>NetworkUnavailable 为 True 表示节点上的网络没有正确配置，无法跟其它 Pod 正常通 信</li>
</ul>
<p>另外，在云环境下，比如腾讯云 TKE，添加新节点会先给这个 Node 加上<br><code>node.cloudprovider.kubernetes.io/uninitialized</code>  的污点，等 Node 初始化成功后才自动移 除这个污点，避免 Pod 被调度到没初始化好的 Node 上。</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>低版本 kube-scheduler 的 bug</strong></font><br></li>
</ul>
<p>可能是低版本 kube-scheduler 的 bug, 可以升级下调度器版本。</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>kube-scheduler 没有正常运行</strong></font><br></li>
</ul>
<p>检查 maser 上的 kube-scheduler 是否运行正常，异常的话可以尝试重启临时恢复。</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>驱逐后其它可用节点与当前节点有状态应用不在同一个可用区</strong></font><br></li>
</ul>
<blockquote>
<p>有时候服务部署成功运行过，但在某个时候节点突然挂了，此时就会触发驱逐，创建新的副本调度到其 它节点上，对于已经挂载了磁盘的 Pod，它通常需要被调度到跟当前节点和磁盘在同一个可用区，如果 集群中同一个可用区的节点不满足调度条件，即使其它可用区节点各种条件都满足，但不跟当前节点在 同一个可用区，也是不会调度的。为什么需要限制挂载了磁盘的 Pod 不能漂移到其它可用区的节点？ 试想一下，云上的磁盘虽然可以被动态挂载到不同机器，但也只是相对同一个数据中心，通常不允许跨数据中心挂载磁盘设备，因为网络时延会极大的降低 IO 速率。</p>
</blockquote>
<h2 id="2、Pod-一直处于-ContainerCreating-或-Waiting-状-态"><a href="#2、Pod-一直处于-ContainerCreating-或-Waiting-状-态" class="headerlink" title="2、Pod 一直处于 ContainerCreating 或 Waiting 状 态"></a>2、Pod 一直处于 ContainerCreating 或 Waiting 状 态</h2><hr>
<ul>
<li><p><font color="#dd0000"><strong>Pod 配置错误</strong></font><br></p>
</li>
<li><p>检查是否打包了正确的镜像</p>
</li>
<li><p>检查配置了正确的容器参数</p>
</li>
</ul>
<hr>
<ul>
<li><font color="#dd0000"><strong>挂载 Volume 失败</strong></font><br></li>
</ul>
<p>Volume 挂载失败也分许多种情况，先列下我这里目前已知的。</p>
<p><strong>Pod 漂移没有正常解挂之前的磁盘</strong></p>
<blockquote>
<p>在云尝试托管的 K8S 服务环境下，默认挂载的 Volume 一般是块存储类型的云硬盘，如果某个节点 挂了，kubelet 无法正常运行或与 apiserver 通信，到达时间阀值后会触发驱逐，自动在其它节点 上启动相同的副本 (Pod 漂移)，但是由于被驱逐的 Node 无法正常运行并不知道自己被驱逐了，也 就没有正常执行解挂，cloud-controller-manager 也在等解挂成功后再调用云厂商的接口将磁盘 真正从节点上解挂，通常会等到一个时间阀值后 cloud-controller-manager 会强制解挂云盘， 然后再将其挂载到 Pod 最新所在节点上，这种情况下 ContainerCreating 的时间相对长一点，但 一般最终是可以启动成功的，除非云厂商的 cloud-controller-manager 逻辑有 bug。</p>
</blockquote>
<hr>
<ul>
<li><font color="#dd0000"><strong>磁盘爆满</strong></font><br></li>
</ul>
<p>启动 Pod 会调 CRI 接口创建容器，容器运行时创建容器时通常会在数据目录下为新建的容器创建一 些目录和文件，如果数据目录所在的磁盘空间满了就会创建失败并报错:</p>
<pre class="line-numbers language-none"><code class="language-none">Events：
    Type Reason Age From
Message
     ---- ------ ---- ----
 Warning FailedCreatePodSandBox 2m (x4307 over 16h) kubelet, 10.179.80.31 (combined from similar events): Failed create pod sandbox: rpc error: code &#x3D; Unknown desc &#x3D; failed to create a sandbox for pod &quot;apigateway-6dc48bf8b6-l8xrw&quot;: Error response from daemon: mkdir &#x2F;var&#x2F;lib&#x2F;docker&#x2F;aufs&#x2F;mnt&#x2F;1f09d6c1c9f24e8daaea5bf33a4230de7dbc758e3b22785e8ee21e3e3d921214 no space left on device<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>处理方法: <a href="https://dycloudnavite.love/2022/08/19/kubernetes%E7%A3%81%E7%9B%98%E7%88%86%E6%BB%A1%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/index.html?_sw-precache=ec6633b042c26b4b5c4c0310bc4037a3">https://dycloudnavite.love/2022/08/19/kubernetes%E7%A3%81%E7%9B%98%E7%88%86%E6%BB%A1%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/index.html?_sw-precache&#x3D;ec6633b042c26b4b5c4c0310bc4037a3</a></p>
<hr>
<ul>
<li><font color="#dd0000"><strong>节点内存碎片化</strong></font><br></li>
</ul>
<p>如果节点上内存碎片化严重，缺少大页内存，会导致即使总的剩余内存较多，但还是会申请内存失败，处理方法请看：<a href="https://dycloudnavite.love/2022/08/13/%E9%98%B2%E6%AD%A2%E5%86%85%E5%AD%98%E7%A2%8E%E7%89%87%E5%8C%96/index.html?_sw-precache=16ffedc87d255f33e2b942a0edddcb74">https://dycloudnavite.love/2022/08/13/%E9%98%B2%E6%AD%A2%E5%86%85%E5%AD%98%E7%A2%8E%E7%89%87%E5%8C%96/index.html?_sw-precache&#x3D;16ffedc87d255f33e2b942a0edddcb74</a></p>
<hr>
<ul>
<li><font color="#dd0000"><strong>limit 设置太小或者单位不对</strong></font><br></li>
</ul>
<p>如果 limit 设置过小以至于不足以成功运行 Sandbox 也会造成这种状态，常见的是因为 memory limit 单位设置不对造成的 limit 过小，比如误将 memory 的 limit 单位像 request 一样设 置为小 <strong>m</strong> ，这个单位在 memory 不适用，会被 k8s 识别成 byte， 应该用 <strong>Mi</strong> 或<strong>M</strong></p>
<p><em>举个例子: 如果 memory limit 设为 1024m 表示限制 1.024 Byte，这么小的内存， pause 容器一起来就会被 cgroup-oom kill 掉，导致 pod 状态一直处于 ContainerCreating。</em><br>这种情况通常会报下面的 event:</p>
<pre class="line-numbers language-none"><code class="language-none">Pod sandbox changed, it will be killed and re-created。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>kubelet 报错:</p>
<pre class="line-numbers language-none"><code class="language-none">to start sandbox container for pod ... Error response from daemon: OCI runtime create failed: container_linux.go:348: starting container process caused &quot;process_linux.go:301: running exec setns process for init caused \&quot;signal: killed\&quot;&quot;: unknown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<hr>
<ul>
<li><font color="#dd0000"><strong>拉取镜像失败</strong></font><br></li>
</ul>
<p>镜像拉取失败也分很多情况，这里列举下:</p>
<ul>
<li>配置了错误的镜像</li>
<li>Kubelet 无法访问镜像仓库（比如默认 pause 镜像在 gcr.io 上，国内环境访问需要特殊处 理）</li>
<li>拉取私有镜像的 <code>imagePullSecret</code> 没有配置或配置有误</li>
<li>镜像太大，拉取超时（可以适当调整 kubelet 的 <code>—image-pull-progress-deadline</code> 和 <code>—runtime-request-timeout</code> 选项）</li>
</ul>
<hr>
<ul>
<li><font color="#dd0000"><strong>CNI 网络错误</strong></font><br></li>
</ul>
<p>如果发生 CNI 网络错误通常需要检查下网络插件的配置和运行状态，如果没有正确配置或正常运行通 常表现为:</p>
<ul>
<li>无法配置 Pod 网络</li>
<li>无法分配 Pod IP</li>
</ul>
<hr>
<ul>
<li><font color="#dd0000"><strong>controller-manager 异常</strong></font><br></li>
</ul>
<p>查看 master 上 <code>kube-controller-manager</code> 状态，异常的话尝试重启。</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>安装 docker 没删干净旧版本</strong></font><br></li>
</ul>
<p>如果节点上本身有 docker 或者没删干净，然后又安装 docker，比如在 centos 上用 yum 安装:</p>
<pre class="line-numbers language-none"><code class="language-none">1. yum install -y docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这样可能会导致 dockerd 创建容器一直不成功，从而 Pod 状态一直 <code>ContainerCreating</code>，查看 event 报错:</p>
<pre class="line-numbers language-none"><code class="language-none">     Type     Reason        Age       From
Message
      ----    ------       ----       ----
      Warning FailedCreatePodSandBox 18m (x3583 over 83m) kubelet, 192.168.4.5 (combined from similar events): Failed create pod sandbox: rpc error: code &#x3D; Unknown desc &#x3D; failed to start sandbox container for pod &quot;nginx-7db9fccd9b-2j6dh&quot;: Error response from daemon: ttrpc: client shutting down: read unix @-&gt;@&#x2F;containerd- shim&#x2F;moby&#x2F;de2bfeefc999af42783115acca62745e6798981dff75f4148fae8c086668f667&#x2F;shim.sock
 read: connection reset by peer: unknown
 Normal SandboxChanged 3m12s (x4420 over 83m) kubelet, 192.168.4.5
 Pod sandbox changed, it will be killed and re-created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可能是因为重复安装 docker 版本不一致导致一些组件之间不兼容，从而导致 dockerd 无法正常创 建容器。</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>存在同名容器</strong></font><br></li>
</ul>
<p>如果节点上已有同名容器，创建 sandbox 就会失败，event:</p>
<pre class="line-numbers language-none"><code class="language-none">Warning FailedCreatePodSandBox 2m kubelet, 10.205.8.91 Failed create pod sandbox: rpc error: code &#x3D; Unknown desc &#x3D; failed to create a sandbox for pod &quot;lomp-ext-d8c8b8c46-4v8tl&quot;: operation timeout: context deadline exceeded
Warning FailedCreatePodSandBox 3s (x12 over 2m) kubelet, 10.205.8.91 Failed create pod sandbox: rpc error: code &#x3D; Unknown desc &#x3D; failed to create a sandbox for pod &quot;lomp-ext-d8c8b8c46-4v8tl&quot;: Error response from daemon: Conflict. The container name &quot;&#x2F;k8s_POD_lomp-ext-d8c8b8c46- 4v8tl_default_65046a06-f795-11e9-9bb6-b67fb7a70bad_0&quot; is already in use by container &quot;30aa3f5847e0ce89e9d411e76783ba14accba7eb7743e605a10a9a862a72c1e2&quot;. You have to remove (or rename) that container to be able to reuse that name.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>关于什么情况下会产生同名容器，这个有待研究。</p>
<h2 id="3、Pod-处于-CrashLoopBackOff-状态"><a href="#3、Pod-处于-CrashLoopBackOff-状态" class="headerlink" title="3、Pod 处于 CrashLoopBackOff 状态"></a>3、Pod 处于 CrashLoopBackOff 状态</h2><p>Pod 如果处于 <code>CrashLoopBackOff</code> 状态说明之前是启动了，只是又异常退出了，只要 Pod 的 <code>restartPolicy</code>不是 Never 就可能被重启拉起，此时 Pod 的 <code>RestartCounts</code> 通常是大于 0 的，可以先看下容器进程的退出状态码来缩小问题范围</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>容器进程主动退出：</strong></font><br></li>
</ul>
<p>如果是容器进程主动退出，退出状态码一般在 0-128 之间，除了可能是业务程序 BUG，还有其它许 多可能原因</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>系统OOM</strong></font><br></li>
</ul>
<p>如果发生系统 OOM，可以看到 Pod 中容器退出状态码是 137，表示被 <code>SIGKILL</code> 信号杀死，同时 内核会报错: <code>Out of memory: Kill process</code> … 。大概率是节点上部署了其它非 K8S 管理的进 程消耗了比较多的内存，或者 kubelet 的 <code>--kube-reserved</code> 和 <code>--system-reserved</code> 配的 比较小，没有预留足够的空间给其它非容器进程，节点上所有 Pod 的实际内存占用总量不会超过 <code>/sys/fs/cgroup/memory/kubepods</code> 这里 cgroup 的限制，这个限制等于 <code>capacity - &quot;kube- reserved&quot; - &quot;system-reserved&quot;</code> ，如果预留空间设置合理，节点上其它非容器进程（kubelet, dockerd, kube-proxy, sshd 等) 内存占用没有超过 kubelet 配置的预留空间是不会发生系统 OOM 的，可以根据实际需求做合理的调整。</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>系统OOM</strong></font><br></li>
</ul>
<p>如果是 cgrou OOM 杀掉的进程，从 Pod 事件的下 Reason 可以看到是 OOMKilled ，说明 容器实际占用的内存超过 limit 了，同时内核日志会报: &#96;&#96;。 可以根据需求调整下 limit。</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>节点内存碎片化</strong></font><br></li>
</ul>
<p>如果节点上内存碎片化严重，缺少大页内存，会导致即使总的剩余内存较多，但还是会申请内存失败，</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>健康检查失败</strong></font><br></li>
</ul>
<h2 id="4、Pod-一直处于-Terminating-状态"><a href="#4、Pod-一直处于-Terminating-状态" class="headerlink" title="4、Pod 一直处于 Terminating 状态"></a>4、Pod 一直处于 Terminating 状态</h2><hr>
<ul>
<li><font color="#dd0000"><strong>磁盘爆满</strong></font><br></li>
</ul>
<p>如果 docker 的数据目录所在磁盘被写满，docker 无法正常运行，无法进行删除和创建操作，所以 kubelet 调用 docker 删除容器没反应，看 event 类似这样：</p>
<pre class="line-numbers language-none"><code class="language-none">Normal Killing 39s (x735 over 15h) kubelet, 10.179.80.31 Killing container with id docker:&#x2F;&#x2F;apigateway:Need to kill Pod<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<hr>
<ul>
<li><font color="#dd0000"><strong>存在 “i” 文件属性</strong></font><br></li>
</ul>
<p>如果容器的镜像本身或者容器启动后写入的文件存在 “i” 文件属性，此文件就无法被修改删除，而删 除 Pod 时会清理容器目录，但里面包含有不可删除的文件，就一直删不了，Pod 状态也将一直保持 Terminating，kubelet 报错:</p>
<pre class="line-numbers language-none"><code class="language-none">Sep 27 14:37:21 VM_0_7_centos kubelet[14109]: E0927 14:37:21.922965 14109 remote_runtime RemoveContainer &quot;19d837c77a3c294052a99ff9347c520bc8acb7b8b9a9dc9fab281fc09df38257&quot; failed: rpc error: code &#x3D; Unknown desc &#x3D; failed to remove container &quot;19d837c77a3c294052a99ff9347c520bc8acb7b8b9a9dc9fab281fc09df38257&quot;: Error response 19d837c77a3c294052a99ff9347c520bc8acb7b8b9a9dc9fab281fc09df38257: driver &quot;overlay2&quot; filesystem: remove &#x2F;data&#x2F;docker&#x2F;overlay2&#x2F;b1aea29c590aa9abda79f7cf3976422073fb3652757f0391db88534027546868 operation not permitted
Sep 27 14:37:21 VM_0_7_centos kubelet[14109]: E0927 14:37:21.923027 14109 kuberuntime_gc to remove container &quot;19d837c77a3c294052a99ff9347c520bc8acb7b8b9a9dc9fab281fc09df38257&quot; Unknown desc &#x3D; failed to remove container &quot;19d837c77a3c294052a99ff9347c520bc8acb7b8b9a9dc9fab281fc09df38257&quot;: Error response 19d837c77a3c294052a99ff9347c520bc8acb7b8b9a9dc9fab281fc09df38257: driver &quot;overlay2&quot; filesystem: remove &#x2F;data&#x2F;docker&#x2F;overlay2&#x2F;b1aea29c590aa9abda79f7cf3976422073fb3652757f0391db88534027546868 operation not permitted
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>通过 <strong>man chattr</strong> 查看 “i” 文件属性描述:</p>
<pre class="line-numbers language-none"><code class="language-none">A file with the &#39;i&#39; attribute cannot be modified: it cannot be deleted or renamed, no link can be created to this file and no data can be written to the file. Only the superuser or a process possessing the CAP_LINUX_IMMUTABLE capability can set or clear this attribute.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>彻底解决当然是不要在容器镜像中或启动后的容器设置 “i” 文件属性，临时恢复方法： 复制 kubelet 日志报错提示的文件路径，然后执行 chattr -i 文件名 :</p>
<pre class="line-numbers language-none"><code class="language-none">chattr -i &#x2F;data&#x2F;docker&#x2F;overlay2&#x2F;b1aea29c590aa9abda79f7cf3976422073fb3652757f0391db88534027<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>执行完后等待 kubelet 自动重试，Pod 就可以被自动删除了。</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>存在 Finalizers</strong></font><br></li>
</ul>
<p>k8s 资源的 metadata 里如果存在 <code>finalizers</code> ，那么该资源一般是由某程序创建的，并且在其 创建的资源的 metadata 里的 <code>finalizers</code> 加了一个它的标识，这意味着这个资源被删除时需要 由创建资源的程序来做删除前的清理，清理完了它需要将标识从该资源的 <code>finalizers</code> 中移除，然 后才会最终彻底删除资源。比如 Rancher 创建的一些资源就会写入 <code>finalizers</code> 标识。</p>
<p> 处理建议： kubectl edit 手动编辑资源定义，删掉 <code>finalizers</code> ，这时再看下资源，就会发现 已经删掉了</p>
<h2 id="5、Pod-一直处于-Unknown-状态"><a href="#5、Pod-一直处于-Unknown-状态" class="headerlink" title="5、Pod 一直处于 Unknown 状态"></a>5、Pod 一直处于 Unknown 状态</h2><p>通常是节点失联，没有上报状态给 apiserver，到达阀值后 controller-manager 认为节点失联 并将其状态置为 <code>Unknown</code><br>可能原因:</p>
<ul>
<li>节点高负载导致无法上报</li>
<li>节点宕机</li>
<li>节点被关机</li>
<li>网络不通</li>
</ul>
<h2 id="6、Pod-一直处于-Error-状态"><a href="#6、Pod-一直处于-Error-状态" class="headerlink" title="6、Pod 一直处于 Error 状态"></a>6、Pod 一直处于 Error 状态</h2><p>通常处于 Error 状态说明 Pod 启动过程中发生了错误。常见的原因包括：</p>
<ul>
<li>依赖的 ConfigMap、Secret 或者 PV 等不存在</li>
<li>请求的资源超过了管理员设置的限制，比如超过了 <code>LimitRange</code> 等</li>
<li>违反集群的安全策略，比如违反了 <code>PodSecurityPolicy</code> 等</li>
<li>容器无权操作集群内的资源，比如开启 RBAC 后，需要为 <code>ServiceAccount</code> 配置角色绑定</li>
</ul>
<h2 id="7、Pod-一直处于-ImagePullBackOff-状态"><a href="#7、Pod-一直处于-ImagePullBackOff-状态" class="headerlink" title="7、Pod 一直处于 ImagePullBackOff 状态"></a>7、Pod 一直处于 ImagePullBackOff 状态</h2><hr>
<ul>
<li><font color="#dd0000"><strong>http 类型 registry，地址未加入到 insecure- registry</strong></font><br></li>
</ul>
<p>dockerd 默认从 https 类型的 registry 拉取镜像，如果使用 https 类型的 registry，则 必须将它添加到 <code>insecure-registry</code> 参数中，然后重启或 reload dockerd 生效。</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>https 自签发类型 resitry，没有给节点添加 ca 证书</strong></font><br></li>
</ul>
<p>如果 registry 是 https 类型，但证书是自签发的，dockerd 会校验 registry 的证书，校验 成功才能正常使用镜像仓库，要想校验成功就需要将 registry 的 ca 证书放置到<br><code>/etc/docker/certs.d/&lt;registry:port&gt;/ca.crt</code>  位置</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>私有镜像仓库认证失败</strong></font><br></li>
</ul>
<p>如果 registry 需要认证，但是 Pod 没有配置 <code>imagePullSecret</code>，配置的 Secret 不存在或者 有误都会认证失败。</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>镜像文件损坏</strong></font><br></li>
</ul>
<p>如果 push 的镜像文件损坏了，下载下来也用不了，需要重新 push 镜像文件。</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>镜像拉取超时</strong></font><br></li>
</ul>
<p>如果节点上新起的 Pod 太多就会有许多可能会造成容器镜像下载排队，如果前面有许多大镜像需要下 载很长时间，后面排队的 Pod 就会报拉取超时。<br>kubelet 默认串行下载镜像:</p>
<pre class="line-numbers language-none"><code class="language-none">--serialize-image-pulls Pull images one at a time. We recommend *not* changing the default value on nodes that run docker daemon with version &lt; 1.9 or an Aufs storage backend. Issue #10959 has more details. (default true)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>也可以开启并行下载并控制并发:</p>
<pre class="line-numbers language-none"><code class="language-none">--registry-qps int32 If &gt; 0, limit registry pull QPS to this value. If 0, unlimited. (default 5)
--registry-burst int32 Maximum size of a bursty pulls, temporarily allows pulls to burst to this number, while still not exceeding registry-qps. Only used if --registry-qps &gt; 0 (default 10)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<hr>
<ul>
<li><font color="#dd0000"><strong>镜像不存在</strong></font><br></li>
</ul>
<p>kubelet日志：</p>
<pre class="line-numbers language-none"><code class="language-none">PullImage &quot;imroc&#x2F;test:v0.2&quot; from image service failed: rpc error: code &#x3D; Unknown desc &#x3D; Error response from daemon: manifest for imroc&#x2F;test:v0.2 not found<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="8、Pod-健康检查失败"><a href="#8、Pod-健康检查失败" class="headerlink" title="8、Pod 健康检查失败"></a>8、Pod 健康检查失败</h2><ul>
<li>Kubernetes 健康检查包含就绪检查(<code>readinessProbe</code>)和存活检查(<code>livenessProbe</code>)</li>
<li>pod 如果就绪检查失败会将此 pod ip 从 service 中摘除，通过 service 访问，流量将 不会被转发给就绪检查失败的 pod</li>
<li>pod 如果存活检查失败，kubelet 将会杀死容器并尝试重启</li>
</ul>
<p>健康检查失败的可能原因有多种，除了业务程序BUG导致不能响应健康检查导致 unhealthy，还能有 有其它原因，下面我们来逐个排查。</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>健康检查配置不合理</strong></font><br></li>
</ul>
<p><code>initialDelaySeconds</code> 太短，容器启动慢，导致容器还没完全启动就开始探测，如果 <code>successThreshold</code> 是默认值 1，检查失败一次就会被 kill，然后 pod 一直这样被 kill 重 启。</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>节点负载过高</strong></font><br></li>
</ul>
<p>cpu 占用高（比如跑满）会导致进程无法正常发包收包，通常会 timeout，导致 kubelet 认为 pod 不健康</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>容器进程被木马进程杀死</strong></font><br></li>
</ul>
<hr>
<ul>
<li><font color="#dd0000"><strong>容器内进程端口监听挂掉</strong></font><br></li>
</ul>
<p>使用 <code>netstat -tunlp</code> 检查端口监听是否还在，如果不在了，抓包可以看到会直接 reset 掉健 康检查探测的连接:</p>
<pre class="line-numbers language-none"><code class="language-none">20:15:17.890996 IP 172.16.2.1.38074 &gt; 172.16.2.23.8888: Flags [S], seq 96880261, win 14600, options [mss 1424,nop,nop,sackOK,nop,wscale 7], length 0
20:15:17.891021 IP 172.16.2.23.8888 &gt; 172.16.2.1.38074: Flags [R.], seq 0, ack 96880262, win 0, length 0
20:15:17.906744 IP 10.0.0.16.54132 &gt; 172.16.2.23.8888: Flags [S], seq 1207014342, win 14600, options [mss 1424,nop,nop,sackOK,nop,wscale 7], length 0
20:15:17.906766 IP 172.16.2.23.8888 &gt; 10.0.0.16.54132: Flags [R.], seq 0, ack 1207014343, win 0, length 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>连接异常，从而健康检查失败。发生这种情况的原因可能在一个节点上启动了多个使用 <code>hostNetwork</code> 监听相同宿主机端口的 Pod，只会有一个 Pod 监听成功，但监听失败的 Pod 的 业务逻辑允许了监听失败，并没有退出，Pod 又配了健康检查，kubelet 就会给 Pod 发送健康检查 探测报文，但 Pod 由于没有监听所以就会健康检查失败。</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>SYN backlog 设置过小</strong></font><br></li>
</ul>
<p>SYN backlog 大小即 SYN 队列大小，如果短时间内新建连接比较多，而 SYN backlog 设置太 小，就会导致新建连接失败，通过 <code>netstat -s | grep TCPBacklogDrop</code>可以看到有多少是因为 backlog 满了导致丢弃的新连接。</p>
<p>如果确认是 backlog 满了导致的丢包，建议调高 backlog 的值，内核参数为 <code>net.ipv4.tcp_max_syn_backlog</code> 。</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>容器进程主动退出</strong></font><br></li>
</ul>
<p>容器进程如果是自己主动退出(不是被外界中断杀死)，退出状态码一般在 0-128 之间，根据约定，正 常退出时状态码为 0，1-127 说明是程序发生异常，主动退出了，比如检测到启动的参数和条件不满 足要求，或者运行过程中发生 panic 但没有捕获处理导致程序退出。除了可能是业务程序 BUG，还 有其它许多可能原因，这里我们一一列举下。</p>
<ul>
<li><p><strong>DNS 无法解析</strong><br>可能程序依赖 集群 DNS 服务，比如启动时连接数据库，数据库使用 service 名称或外部域名都需 要 DNS 解析，如果解析失败程序将报错并主动退出。解析失败的可能原因:</p>
<p>1、集群网络有问题，Pod 连不上集群 DNS 服务<br>2、集群 DNS 服务挂了，无法响应解析请求<br>3、Service 或域名地址配置有误，本身是无法解析的地址</p>
</li>
<li><p><strong>程序配置有误</strong><br> 1、配置文件格式错误，程序启动解析配置失败报错退出<br> 2、配置内容不符合规范，比如配置中某个字段是必选但没有填写，配置校验不通过，程序报错主动 退出</p>
</li>
</ul>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes常用资源——RC/RS</title>
    <url>/2022/07/01/RC%20RS%E5%89%AF%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
    <content><![CDATA[<h1 id="RC-x2F-RS副本控制器"><a href="#RC-x2F-RS副本控制器" class="headerlink" title="RC&#x2F;RS副本控制器"></a>RC&#x2F;RS副本控制器</h1><p>Replication Controller:副本控制器（selector &#x3D;  !&#x3D;）#第一代pod副本控制器</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 case3-controller<span class="token punctuation">]</span><span class="token comment"># cat rc.yml </span>
apiVersion: v1  
kind: ReplicationController  
metadata:  
  name: ng-rc
spec:  
  replicas: <span class="token number">2</span>
  selector:  
    app: ng-rc-80 
    <span class="token comment">#app1: ng-rc-81</span>
  template:   
    metadata:  
      labels:  
        app: ng-rc-80
        <span class="token comment">#app1: ng-rc-81</span>
    spec:  
      containers:  
      - name: ng-rc-80 
        image: nginx  
        ports:  
        - containerPort: <span class="token number">80</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>Replication Set: rs 支持matchlabels，可以支持labels  In 或者NotIn</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 case3-controller<span class="token punctuation">]</span><span class="token comment"># cat rs.yml </span>
<span class="token comment">#apiVersion: extensions/v1beta1</span>
apiVersion: apps/v1 
kind: ReplicaSet
metadata:
  name: frontend
spec:
  replicas: <span class="token number">2</span>
  selector:
    matchLabels:
      app: ng-rs-80
    <span class="token comment">#matchExpressions:</span>
    <span class="token comment">#  - &#123;key: app, operator: In, values: [ng-rs-80,ng-rs-81]&#125;</span>
  template:
    metadata:
      labels:
        app: ng-rs-80
    spec:  
      containers:  
      - name: ng-rs-80 
        image: nginx  
        ports:  
        - containerPort: <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes常用资源——Service</title>
    <url>/2022/07/03/Service%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
    <content><![CDATA[<h1 id="Service控制器"><a href="#Service控制器" class="headerlink" title="Service控制器"></a>Service控制器</h1><p>由于Pod重建之后ip就变了，因此pod之间使用的IP直接访问会出现无法访问的问题，而service则解耦了服务和应用，service的实现方式就是通过label标签动态匹配后端endpoint。</p>
<p>kube-proxy 监听着k8s-apiserver，一旦service资源发生变化（调k8s-api修改service信息），kube-proxy 就会生成对应得负载调度得调整，这样就保证了service得最新状态</p>
<p><img src="/images/pasted-16.png" alt="service"></p>
<p>service类型：</p>
<ul>
<li>ClusterIP：用于内部服务基于service name的访问</li>
<li>NodePort：用于K8s集群以外的服务主动访问运行在kubernetes集群内部的服务</li>
<li>LoadBalancer：用于公有云环境的服务暴露</li>
<li>ExternalName：用于将k8s集群外部的服务映射至K8s集群内部访问，从而让集群内部的pod能够通过固定的service name访问集群外部的服务，有时候也用于将不同namespace 之间的pod通过ExternalName 进行访问</li>
</ul>
<p>clusterIP:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 case4-service<span class="token punctuation">]</span><span class="token comment"># cat 1-deploy_node.yml </span>
<span class="token comment">#apiVersion: extensions/v1beta1</span>
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: <span class="token number">1</span>
  selector:
    <span class="token comment">#matchLabels: #rs or deployment</span>
    <span class="token comment">#  app: ng-deploy3-80</span>
    matchExpressions:
      - <span class="token punctuation">&#123;</span>key: app, operator: In, values: <span class="token punctuation">[</span>ng-deploy-80,ng-rs-81<span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
  template:
    metadata:
      labels:
        app: ng-deploy-80
    spec:
      containers:
      - name: ng-deploy-80
        image: nginx:1.17.5 
        ports:
        - containerPort: <span class="token number">80</span>
      <span class="token comment">#nodeSelector:</span>
      <span class="token comment">#  env: group1</span>
<span class="token comment">#在其他的pod</span>
<span class="token punctuation">[</span>root@haproxy1 case4-service<span class="token punctuation">]</span><span class="token comment"># cat 2-svc_service.yml </span>
apiVersion: v1
kind: Service
metadata:
  name: ng-deploy-80 
spec:
  ports:
  - name: http
    port: <span class="token number">80</span>
    targetPort: <span class="token number">80</span>
    protocol: TCP
  type: ClusterIP
<span class="token comment">#这里的selector 对应deployment 的template  metadata下的labels通过这个标签选择器找到指定的deployment控制器</span>
  selector:
    app: ng-deploy-80
<span class="token punctuation">[</span>root@haproxy1 case4-service<span class="token punctuation">]</span><span class="token comment"># kubectl get svc </span>
NAME           TYPE        CLUSTER-IP      EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>   AGE
kubernetes     ClusterIP   <span class="token number">10.100</span>.0.1      <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">443</span>/TCP   15d
ng-deploy-80   ClusterIP   <span class="token number">10.100</span>.41.139   <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">80</span>/TCP    11m
<span class="token punctuation">[</span>root@haproxy1 case4-service<span class="token punctuation">]</span><span class="token comment"># </span>
<span class="token comment">#查看svc对应的后端pod</span>
<span class="token punctuation">[</span>root@haproxy1 case4-service<span class="token punctuation">]</span><span class="token comment"># kubectl get ep</span>
NAME           ENDPOINTS                               AGE
kubernetes     <span class="token number">172.16</span>.92.130:6443,172.16.92.131:6443   15d
ng-deploy-80   <span class="token number">10.200</span>.107.219:80                       3d2h
<span class="token punctuation">[</span>root@haproxy1 case4-service<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>Nodeport:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 case4-service<span class="token punctuation">]</span><span class="token comment"># cat 3-svc_NodePort.yml </span>
apiVersion: v1
kind: Service
metadata:
  name: ng-deploy-80 
spec:
  ports:
  - name: http
    port: <span class="token number">81</span>
    targetPort: <span class="token number">80</span>
    nodePort: <span class="token number">30012</span>
    protocol: TCP
  type: NodePort
  selector:
    app: ng-deploy-80
<span class="token comment">#此时就可以直接访问podip+30012 端口访问了</span>
<span class="token comment">#如果前端有负载均衡可以添加到负载均衡里，如haproxy：</span>
listen dujie-nginx-80
    <span class="token builtin class-name">bind</span> <span class="token number">172.16</span>.92.189:80
    mode tcp
    server k8s-node1 <span class="token number">172.16</span>.92.140:30012 check inter 3s fall <span class="token number">3</span> rise <span class="token number">1</span>
    server k8s-node2 <span class="token number">172.16</span>.92.141:30012 check inter 3s fall <span class="token number">3</span> rise <span class="token number">1</span>
    server k8s-node3 <span class="token number">172.16</span>.92.142:30012 check inter 3s fall <span class="token number">3</span> rise <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>SonarQube代码扫描</title>
    <url>/2019/09/23/SonarQube%E4%BB%A3%E7%A0%81%E6%89%AB%E6%8F%8F/</url>
    <content><![CDATA[<h1 id="一、代码质量测试"><a href="#一、代码质量测试" class="headerlink" title="一、代码质量测试"></a>一、代码质量测试</h1><p> <strong>1. 代码测试工具 SonarQube：</strong></p>
<blockquote>
<p> 官方网站：<a href="https://www.sonarqube.org/">https://www.sonarqube.org/</a></p>
</blockquote>
<p>SonarQube 是一个用于代码质量管理的开放平台，通过插件机制,SonarQube 可以集成不同的测试工具，代码分析工具，以及持续集成工具。与持续集成工具（例如 Hudson&#x2F;Jenkins等）不同，SonarQube并不是简单的把不同的代码检查工具结果（例如FindBugs，PMD等）直接显示在web页面上，而是通过不同的插件针对这些结果进行再加工处理，通过量化的方式度量代码质量的变化，从而可以方便的对不同规模和种类的工程进行代码质量管理。在对其他工具的支持方面，Sonar不仅提供了对IDE的支持，可以在Eclipse和Interlij IDEA 这些工具里联机查看结果，同时Sonar还对大量的持续集成工具提供了接口支持，可以很方便的在持续集成中使用SnoarQube的插件还可以对java以外的其他编程语言提供支持，对国际化以及报告文档化也有良好的支持。<br> <strong>2. 安装sonarqube</strong><br>在jenkins-master中安装sonarqube</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@jenkins src]</span><span class="token comment"># ll</span>
<span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span> 1 root root 143286376 Aug 22 16:56 sonarqube-6<span class="token punctuation">.</span>5<span class="token punctuation">.</span>zip
<span class="token namespace">[root@jenkins src]</span><span class="token comment"># unzip sonarqube-6.5.zip </span>
Archive:  sonarqube-6<span class="token punctuation">.</span>5<span class="token punctuation">.</span>zip
   creating: sonarqube-6<span class="token punctuation">.</span>5/
   creating: sonarqube-6<span class="token punctuation">.</span>5/bin/
   creating: sonarqube-6<span class="token punctuation">.</span>5/bin/windows-x86-32/
  inflating: sonarqube-6<span class="token punctuation">.</span>5/bin/windows-x86-32/wrapper<span class="token punctuation">.</span>exe  
   creating: sonarqube-6<span class="token punctuation">.</span>5/bin/windows-x86-32/lib/
  inflating: sonarqube-6<span class="token punctuation">.</span>5/bin/windows-x86-32/lib/wrapper<span class="token punctuation">.</span>dll  
   creating: sonarqube-6<span class="token punctuation">.</span>5/bin/macosx-universal-64/
<span class="token namespace">[root@jenkins src]</span><span class="token comment"># ln -s /app/src/sonarqube-6.5 /app/sonarqube</span>
<span class="token namespace">[root@jenkins src]</span><span class="token comment"># ll /app/</span>
  tal 0
▽rwxrwxrwx 1 root root  21 Aug 21 17:49 jdk <span class="token operator">-</span>> <span class="token operator">/</span>app/src/jdk1<span class="token punctuation">.</span>8<span class="token punctuation">.</span>0_60/
lrwxrwxrwx 1 root root  22 Aug 22 17:02 sonarqube <span class="token operator">-</span>> <span class="token operator">/</span>app/src/sonarqube-6<span class="token punctuation">.</span>5
drwxr-xr-x 4 root root 170 Aug 22 17:01 src<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改sonarqube配置文件</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@jenkins conf]</span><span class="token comment"># vim /app/sonarqube/conf/sonar.properties</span>
sonar<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>username=sonar   <span class="token comment">#配置数据库用户名</span>
sonar<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>password=123456  <span class="token comment">#配置数据库密码</span>
sonar<span class="token punctuation">.</span>web<span class="token punctuation">.</span>port=9000
sonar<span class="token punctuation">.</span>web<span class="token punctuation">.</span>host=0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> <strong>3. 安装数据库（注意：只支持5.6以上）</strong></p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#将数据库导入linux，执行mysql安装脚本（如果没有mysql用户必须先创建mysql用户）</span>
<span class="token namespace">[root@jenkins-slave tools]</span><span class="token comment"># ll</span>
total 498272
<span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span> 1 root root       256 Aug 22 17:11 my<span class="token punctuation">.</span>cnf
<span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span> 1 root root 328979165 Aug 22 17:05 mysql-5<span class="token punctuation">.</span>6<span class="token punctuation">.</span>42-linux-glibc2<span class="token punctuation">.</span>12-x86_64<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz
<span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span> 1 root root      1470 Aug 22 17:11 mysql-install<span class="token punctuation">.</span>sh
<span class="token namespace">[root@jenkins-slave tools]</span><span class="token comment"># sh mysql-install.sh </span>
Loaded plugins: fastestmirror
Loading mirror speeds <span class="token keyword">from</span> cached hostfile
 <span class="token operator">*</span> base: mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com
 <span class="token operator">*</span> extras: mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com
 <span class="token operator">*</span> updates: mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com
Package gcc-4<span class="token punctuation">.</span>8<span class="token punctuation">.</span>5-36<span class="token punctuation">.</span>el7_6<span class="token punctuation">.</span>2<span class="token punctuation">.</span>x86_64 already installed and latest version
Package gcc-c+<span class="token operator">+</span><span class="token operator">-</span>4<span class="token punctuation">.</span>8<span class="token punctuation">.</span>5-36<span class="token punctuation">.</span>el7_6<span class="token punctuation">.</span>2<span class="token punctuation">.</span>x86_64 already installed and latest version
Package wget-1<span class="token punctuation">.</span>14-18<span class="token punctuation">.</span>el7_6<span class="token punctuation">.</span>1<span class="token punctuation">.</span>x86_64 already installed and latest version
Package autoconf-2<span class="token punctuation">.</span>69-11<span class="token punctuation">.</span>el7<span class="token punctuation">.</span>noarch already installed and latest version
Package net-tools-2<span class="token punctuation">.</span>0-0<span class="token punctuation">.</span>24<span class="token punctuation">.</span>20131004git<span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64 already installed and latest version
Package lrzsz-0<span class="token punctuation">.</span>12<span class="token punctuation">.</span>20-36<span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64 already installed and latest version
Package iotop-0<span class="token punctuation">.</span>6-4<span class="token punctuation">.</span>el7<span class="token punctuation">.</span>noarch already installed and latest version
Package lsof-4<span class="token punctuation">.</span>87-6<span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64 already installed and latest version
Package iotop-0<span class="token punctuation">.</span>6-4<span class="token punctuation">.</span>el7<span class="token punctuation">.</span>noarch already installed and latest version
Package 1:bash-completion-2<span class="token punctuation">.</span>1-6<span class="token punctuation">.</span>el7<span class="token punctuation">.</span>noarch already installed and latest version
Resolving Dependencies
<span class="token operator">--</span>> Running transaction check
<span class="token operator">--</span><span class="token operator">-</span>> Package vim-enhanced<span class="token punctuation">.</span>x86_64 2:7<span class="token punctuation">.</span>4<span class="token punctuation">.</span>160-5<span class="token punctuation">.</span>el7 will be updated
<span class="token operator">--</span><span class="token operator">-</span>> Package vim-enhanced<span class="token punctuation">.</span>x86_64 2:7<span class="token punctuation">.</span>4<span class="token punctuation">.</span>160-6<span class="token punctuation">.</span>el7_6 will be an update
<span class="token operator">--</span>> Processing Dependency: vim-common = 2:7<span class="token punctuation">.</span>4<span class="token punctuation">.</span>160-6<span class="token punctuation">.</span>el7_6 <span class="token keyword">for</span> package: 2:vim-enhanced-7<span class="token punctuation">.</span>4<span class="token punctuation">.</span>160-6<span class="token punctuation">.</span>el7_6<span class="token punctuation">.</span>x86_64
<span class="token operator">--</span>> Running transaction check
<span class="token operator">--</span><span class="token operator">-</span>> Package vim-common<span class="token punctuation">.</span>x86_64 2:7<span class="token punctuation">.</span>4<span class="token punctuation">.</span>160-5<span class="token punctuation">.</span>el7 will be updated
<span class="token operator">--</span><span class="token operator">-</span>> Package vim-common<span class="token punctuation">.</span>x86_64 2:7<span class="token punctuation">.</span>4<span class="token punctuation">.</span>160-6<span class="token punctuation">.</span>el7_6 will be an update
<span class="token operator">--</span>> Finished Dependency Resolution

Dependencies Resolved

===================================================================================================================================
 Package                         Arch                      Version                                Repository                  Size
===================================================================================================================================
Updating:
 vim-enhanced                    x86_64                    2:7<span class="token punctuation">.</span>4<span class="token punctuation">.</span>160-6<span class="token punctuation">.</span>el7_6                      updates                    1<span class="token punctuation">.</span>0 M
Updating <span class="token keyword">for</span> dependencies:
 vim-common                      x86_64                    2:7<span class="token punctuation">.</span>4<span class="token punctuation">.</span>160-6<span class="token punctuation">.</span>el7_6                      updates                    5<span class="token punctuation">.</span>9 M

WARNING: Default config file <span class="token operator">/</span>etc/my<span class="token punctuation">.</span>cnf exists on the system
This file will be read by default by the MySQL server
<span class="token keyword">If</span> you <span class="token keyword">do</span> not want to use this<span class="token punctuation">,</span> either remove it<span class="token punctuation">,</span> or use the
<span class="token operator">--</span>defaults-file argument to mysqld_safe when starting the server

‘<span class="token operator">/</span>usr/bin/mysql’ <span class="token operator">-</span>> ‘<span class="token operator">/</span>usr/local/mysql/bin/mysql’
‘<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/mysql/mysql<span class="token punctuation">.</span>sock’ <span class="token operator">-</span>> ‘<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>mysql/mysql<span class="token punctuation">.</span>sock’
Starting MySQL<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> SUCCESS! <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建数据库</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@jenkins-slave tools]</span><span class="token comment"># mysql</span>
Welcome to the MySQL monitor<span class="token punctuation">.</span>  Commands <span class="token keyword">end</span> with <span class="token punctuation">;</span> or \g<span class="token punctuation">.</span>
Your MySQL connection id is 2
Server version: 5<span class="token punctuation">.</span>6<span class="token punctuation">.</span>42 MySQL Community Server <span class="token punctuation">(</span>GPL<span class="token punctuation">)</span>

Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 2000<span class="token punctuation">,</span> 2018<span class="token punctuation">,</span> Oracle and/or its affiliates<span class="token punctuation">.</span> All rights reserved<span class="token punctuation">.</span>

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates<span class="token punctuation">.</span> Other names may be trademarks of their respective
owners<span class="token punctuation">.</span>

<span class="token function">Type</span> <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help<span class="token punctuation">.</span> <span class="token function">Type</span> <span class="token string">'\c'</span> to clear the current input statement<span class="token punctuation">.</span>

mysql> 
mysql> CREATE DATABASE sonar CHARACTER <span class="token function">SET</span> utf8 COLLATE utf8_general_ci<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> 1 row affected <span class="token punctuation">(</span>0<span class="token punctuation">.</span>01 sec<span class="token punctuation">)</span>
<span class="token comment">#创建并授权用户</span>
mysql> grant all on sonar<span class="token punctuation">.</span><span class="token operator">*</span> to sonar@<span class="token string">"10.0.0.%"</span> identified by <span class="token string">"123456"</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> 0 rows affected <span class="token punctuation">(</span>0<span class="token punctuation">.</span>01 sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>授权完之后再jenkins-master中查看mysql是否能够登陆到10.0.0.177</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@jenkins conf]</span><span class="token comment"># mysql -usonar -p123456 -h 10.0.0.177</span>
Welcome to the MariaDB monitor<span class="token punctuation">.</span>  Commands <span class="token keyword">end</span> with <span class="token punctuation">;</span> or \g<span class="token punctuation">.</span>
Your MySQL connection id is 3
Server version: 5<span class="token punctuation">.</span>6<span class="token punctuation">.</span>42 MySQL Community Server <span class="token punctuation">(</span>GPL<span class="token punctuation">)</span>

Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 2000<span class="token punctuation">,</span> 2018<span class="token punctuation">,</span> Oracle<span class="token punctuation">,</span> MariaDB Corporation Ab and others<span class="token punctuation">.</span>

<span class="token function">Type</span> <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help<span class="token punctuation">.</span> <span class="token function">Type</span> <span class="token string">'\c'</span> to clear the current input statement<span class="token punctuation">.</span>

MySQL <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span>> 
MySQL <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span>> <span class="token keyword">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> <strong>4. 启动sonarQube</strong></p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@jenkins linux-x86-64]</span><span class="token comment"># /app/sonarqube/bin/linux-x86-64/sonar.sh  --help </span>
Usage: <span class="token operator">/</span>app/sonarqube/bin/linux-x86-64/sonar<span class="token punctuation">.</span>sh <span class="token punctuation">&#123;</span> console <span class="token punctuation">|</span> <span class="token function">start</span> <span class="token punctuation">|</span> stop <span class="token punctuation">|</span> restart <span class="token punctuation">|</span> status <span class="token punctuation">|</span> dump <span class="token punctuation">&#125;</span>
<span class="token namespace">[root@jenkins linux-x86-64]</span><span class="token comment"># /app/sonarqube/bin/linux-x86-64/sonar.sh  start</span>
Starting SonarQube<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
Started SonarQube<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>启动成功后可以登陆界面 10.0.0.175:9000 （master）<br><img src="https://img-blog.csdnimg.cn/16fd4b0340e74d16b72478417ff12612.png" alt="在这里插入图片描述"><br>用户名和密码都是admin——admin<br><img src="https://img-blog.csdnimg.cn/8db8237b312d4bf7b80e1eeb777f67a8.png" alt="请添加图片描述"><br>sonarQube也是基于插件的，所以需要安装插件<br><img src="https://img-blog.csdnimg.cn/a3cbf58ef9764434955b5b5a500817f2.png" alt="请添加图片描述"><br>汉化包不兼容6.x版本<br><img src="https://img-blog.csdnimg.cn/f82f077d212648c194adbdd200d85863.png" alt="请添加图片描述"><br>导入汉化包到 &#x2F;app&#x2F;sonarqube&#x2F;extensions&#x2F;plugins&#x2F;</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@jenkins sonarqube]</span><span class="token comment"># cd extensions/plugins/</span>
<span class="token namespace">[root@jenkins plugins]</span><span class="token comment"># </span>
<span class="token comment">#这里面都是java插件包</span>
<span class="token namespace">[root@jenkins plugins]</span><span class="token comment"># ll</span>
total 44832
<span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span> 1 root root      129 Aug  1  2017 README<span class="token punctuation">.</span>txt
<span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span> 1 root root 11069007 Jul 31  2017 sonar-csharp-plugin-5<span class="token punctuation">.</span>10<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1411<span class="token punctuation">.</span>jar
<span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span> 1 root root  1618672 Jul 31  2017 sonar-flex-plugin-2<span class="token punctuation">.</span>3<span class="token punctuation">.</span>jar
<span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span> 1 root root  4900103 Aug  1  2017 sonar-java-plugin-4<span class="token punctuation">.</span>12<span class="token punctuation">.</span>0<span class="token punctuation">.</span>11033<span class="token punctuation">.</span>jar
<span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span> 1 root root  3261889 Aug  1  2017 sonar-javascript-plugin-3<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>5128<span class="token punctuation">.</span>jar
<span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span> 1 root root  3733262 Jul 31  2017 sonar-php-plugin-2<span class="token punctuation">.</span>10<span class="token punctuation">.</span>0<span class="token punctuation">.</span>2087<span class="token punctuation">.</span>jar
<span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span> 1 root root  4024311 Aug  1  2017 sonar-python-plugin-1<span class="token punctuation">.</span>8<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1496<span class="token punctuation">.</span>jar
<span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span> 1 root root  3233128 Jul 31  2017 sonar-scm-git-plugin-1<span class="token punctuation">.</span>2<span class="token punctuation">.</span>jar
<span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span> 1 root root  6676141 Aug  1  2017 sonar-scm-svn-plugin-1<span class="token punctuation">.</span>5<span class="token punctuation">.</span>0<span class="token punctuation">.</span>715<span class="token punctuation">.</span>jar
<span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span> 1 root root  7368250 Aug  1  2017 sonar-xml-plugin-1<span class="token punctuation">.</span>4<span class="token punctuation">.</span>3<span class="token punctuation">.</span>1027<span class="token punctuation">.</span>jar
<span class="token namespace">[root@jenkins plugins]</span><span class="token comment"># rz</span>
rz waiting to receive<span class="token punctuation">.</span>
Starting zmodem transfer<span class="token punctuation">.</span>  Press Ctrl+C to cancel<span class="token punctuation">.</span>
Transferring sonar-l10n-zh-plugin-1<span class="token punctuation">.</span>11<span class="token punctuation">.</span>jar<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  100%      35 KB      35 KB/sec    00:00:01       0 Errors  
<span class="token comment">#上传进去之后重启sonarqube</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>重新进入网址已经是中文的了<br><img src="https://img-blog.csdnimg.cn/89956b77318241f583b1ee34cfcf8601.png" alt="请添加图片描述"></p>
<h1 id="二、部署扫描器-sonar-scanner"><a href="#二、部署扫描器-sonar-scanner" class="headerlink" title="二、部署扫描器 sonar-scanner"></a>二、部署扫描器 sonar-scanner</h1><ol>
<li>部署sonar-scanner<br>sonarqube通过调用扫描器sonar-scanner 进行代码质量分析，即扫描器的具体工作就是扫描代码。<br>然后sonar-scanner 扫描完成后会把扫描结果也写入到数据库中，所以sonarqube是基于数据库读出结果，所以就可以查到扫描结果了</li>
</ol>
<blockquote>
<p>下载地址：<a href="https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/">https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/</a></p>
</blockquote>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@jenkins src]</span><span class="token comment"># unzip sonar-scanner-2.6.1.zip </span>
Archive:  sonar-scanner-2<span class="token punctuation">.</span>6<span class="token punctuation">.</span>1<span class="token punctuation">.</span>zip
   creating: sonar-scanner-2<span class="token punctuation">.</span>6<span class="token punctuation">.</span>1/bin/
  inflating: sonar-scanner-2<span class="token punctuation">.</span>6<span class="token punctuation">.</span>1/bin/sonar-scanner  
  inflating: sonar-scanner-2<span class="token punctuation">.</span>6<span class="token punctuation">.</span>1/bin/sonar-runner  
   creating: sonar-scanner-2<span class="token punctuation">.</span>6<span class="token punctuation">.</span>1/conf/
  inflating: sonar-scanner-2<span class="token punctuation">.</span>6<span class="token punctuation">.</span>1/conf/sonar-scanner<span class="token punctuation">.</span>properties  
   creating: sonar-scanner-2<span class="token punctuation">.</span>6<span class="token punctuation">.</span>1/lib/
  inflating: sonar-scanner-2<span class="token punctuation">.</span>6<span class="token punctuation">.</span>1/lib/sonar-scanner-<span class="token function">cli</span><span class="token operator">-</span>2<span class="token punctuation">.</span>6<span class="token punctuation">.</span>1<span class="token punctuation">.</span>jar  
  inflating: sonar-scanner-2<span class="token punctuation">.</span>6<span class="token punctuation">.</span>1/bin/sonar-runner<span class="token punctuation">.</span>bat  
  inflating: sonar-scanner-2<span class="token punctuation">.</span>6<span class="token punctuation">.</span>1/bin/sonar-scanner<span class="token punctuation">.</span>bat  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改配置文件(连接数据库的)</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@jenkins bin]</span><span class="token comment"># vim /app/sonar-scanner/conf/sonar-scanner.properties </span>
<span class="token comment">#Configure here general information about the environment, such as SonarQube DB details for example</span>
<span class="token comment">#No information about specific project should appear here</span>

<span class="token comment">#----- Default SonarQube server</span>
sonar<span class="token punctuation">.</span>host<span class="token punctuation">.</span>url=http:<span class="token operator">/</span><span class="token operator">/</span>localhost:9000

<span class="token comment">#----- Default source code encoding</span>
sonar<span class="token punctuation">.</span>sourceEncoding=UTF-8

<span class="token comment">#----- Global database settings (not used for SonarQube 5.2+)</span>
sonar<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>username=sonar
sonar<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>password=123456

<span class="token comment">#----- PostgreSQL</span>
<span class="token comment">#sonar.jdbc.url=jdbc:postgresql://localhost/sonar</span>

<span class="token comment">#----- MySQL</span>
sonar<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>url=jdbc:mysql:<span class="token operator">/</span><span class="token operator">/</span>10<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>177:3306/sonar?useUnicode=true&amp;amp<span class="token punctuation">;</span>characterEncoding=utf8

<span class="token comment">#----- Oracle</span>
<span class="token comment">#sonar.jdbc.url=jdbc:oracle:thin:@localhost/XE</span>

<span class="token comment">#----- Microsoft SQLServer</span>
<span class="token comment">#sonar.jdbc.url=jdbc:jtds:sqlserver://localhost/sonar;SelectMethod=Cursor</span>
~                                                                          <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>sonar-scanner 是不需要启动的，他是被调用的，需要在扫描的目录执行这个命令,代码在哪里路径就在哪执行</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@jenkins bin]</span><span class="token comment"># /app/sonar-scanner/bin/sonar-scanner </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后上传各种语言的代码进行测试</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#里面存放着各种语言的代码</span>
<span class="token namespace">[root@jenkins python-sonar-runner]</span><span class="token comment"># ll /app/src/sonar-examples-master</span>
total 4
drwxr-xr-x 7 root root 130 Jul 25  2016 plugins
drwxr-xr-x 5 root root  85 Jul 25  2016 projects
<span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span> 1 root root 493 Jul 25  2016 README<span class="token punctuation">.</span>md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以进入到目录中进行查看，可以看到各种语言的代码，我们进入到python中对python代码进行质量测试</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@jenkins languages]</span><span class="token comment"># cd /app/src/sonar-examples-master/projects/languages/</span>
<span class="token namespace">[root@jenkins languages]</span><span class="token comment"># ls</span>
abap     cobol   css     generic-coverage  javascript      php    python                    swift  web
android  <span class="token function">cpp</span>     erlang  groovy            multi-language  pli    rpg                       vb6    xml
c        csharp  flex    java              objc            plsql  sonar-project<span class="token punctuation">.</span>properties  vbnet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后进入到python-sonar-runner中进行代码测试</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@jenkins sonar-scanner]</span><span class="token comment"># cd /app/src/sonar-examples-master/projects/languages/python/python-sonar-runner</span>
<span class="token namespace">[root@jenkins python-sonar-runner]</span><span class="token comment"># ls</span>
README<span class="token punctuation">.</span>md  sonar-project<span class="token punctuation">.</span>properties  src  validation<span class="token punctuation">.</span>txt
<span class="token namespace">[root@jenkins python-sonar-runner]</span><span class="token comment"># /app/sonar-scanner/bin/sonar-scanner </span>
INFO: Scanner configuration file: <span class="token operator">/</span>app/sonar-scanner/conf/sonar-scanner<span class="token punctuation">.</span>properties
INFO: Project root configuration file: <span class="token operator">/</span>app/src/sonar-examples-master/projects/languages/python/python-sonar-runner/sonar-project<span class="token punctuation">.</span>properties
INFO: SonarQube Scanner 2<span class="token punctuation">.</span>6<span class="token punctuation">.</span>1
INFO: Java 1<span class="token punctuation">.</span>8<span class="token punctuation">.</span>0_121 Oracle Corporation <span class="token punctuation">(</span>64-bit<span class="token punctuation">)</span>
INFO: Linux 3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>0-957<span class="token punctuation">.</span>12<span class="token punctuation">.</span>2<span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64 amd64
INFO: User cache: <span class="token operator">/</span>root/<span class="token punctuation">.</span>sonar/cache
INFO: Load global settings
INFO: Load global settings <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=261ms
WARN: Property <span class="token string">'sonar.jdbc.url'</span> is not supported any more<span class="token punctuation">.</span> It will be ignored<span class="token punctuation">.</span> There is no longer any DB connection to the SQ database<span class="token punctuation">.</span>
WARN: Property <span class="token string">'sonar.jdbc.username'</span> is not supported any more<span class="token punctuation">.</span> It will be ignored<span class="token punctuation">.</span> There is no longer any DB connection to the SQ database<span class="token punctuation">.</span>
WARN: Property <span class="token string">'sonar.jdbc.password'</span> is not supported any more<span class="token punctuation">.</span> It will be ignored<span class="token punctuation">.</span> There is no longer any DB connection to the SQ database<span class="token punctuation">.</span>
INFO: User cache: <span class="token operator">/</span>root/<span class="token punctuation">.</span>sonar/cache
INFO: Load plugins index
INFO: Load plugins index <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=116ms
INFO: Plugin <span class="token namespace">[l10nzh]</span> defines <span class="token string">'l10nen'</span> as base plugin<span class="token punctuation">.</span> This metadata can be removed <span class="token keyword">from</span> manifest of l10n plugins since version 5<span class="token punctuation">.</span>2<span class="token punctuation">.</span>
INFO: SonarQube server 6<span class="token punctuation">.</span>5<span class="token punctuation">.</span>0
INFO: Default locale: <span class="token string">"en_US"</span><span class="token punctuation">,</span> source code encoding: <span class="token string">"UTF-8"</span>
INFO: <span class="token keyword">Process</span> project properties
INFO: Load project repositories
INFO: Load project repositories <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=122ms
INFO: Load quality profiles
INFO: Load quality profiles <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=246ms
INFO: Load active rules
INFO: Load active rules <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=1754ms
INFO: Load metrics repository
INFO: Load metrics repository <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=254ms
WARN: SCM provider autodetection failed<span class="token punctuation">.</span> No SCM provider claims to support this project<span class="token punctuation">.</span> Please use sonar<span class="token punctuation">.</span>scm<span class="token punctuation">.</span>provider to <span class="token keyword">define</span> SCM of your project<span class="token punctuation">.</span>
INFO: Publish mode
INFO: Project key: org<span class="token punctuation">.</span>sonarqube:python-simple-sonar-scanner
INFO: <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>  Scan Python :: Simple Project : SonarQube Scanner
INFO: Load server rules
INFO: Load server rules <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=331ms
INFO: Language is forced to py
INFO: Base <span class="token function">dir</span>: <span class="token operator">/</span>app/src/sonar-examples-master/projects/languages/python/python-sonar-runner
INFO: Working <span class="token function">dir</span>: <span class="token operator">/</span>app/src/sonar-examples-master/projects/languages/python/python-sonar-runner/<span class="token punctuation">.</span>sonar
INFO: Source paths: src
INFO: Source encoding: UTF-8<span class="token punctuation">,</span> default locale: en_US
INFO: Index files
INFO: 9 files indexed
INFO: Quality profile <span class="token keyword">for</span> py: Sonar way
INFO: Sensor PythonXUnitSensor <span class="token namespace">[python]</span>
INFO: Sensor PythonXUnitSensor <span class="token namespace">[python]</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=11ms
INFO: Sensor Python Squid Sensor <span class="token namespace">[python]</span>
INFO: Python unit test coverage
INFO: Python integration test coverage
INFO: Python overall test coverage
INFO: Sensor Python Squid Sensor <span class="token namespace">[python]</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=614ms
INFO: Sensor SonarJavaXmlFileSensor <span class="token namespace">[java]</span>
INFO: Sensor SonarJavaXmlFileSensor <span class="token namespace">[java]</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=0ms
INFO: Sensor Analyzer <span class="token keyword">for</span> <span class="token string">"php.ini"</span> files <span class="token namespace">[php]</span>
INFO: Sensor Analyzer <span class="token keyword">for</span> <span class="token string">"php.ini"</span> files <span class="token namespace">[php]</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=10ms
INFO: Sensor Zero Coverage Sensor
INFO: Sensor Zero Coverage Sensor <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=35ms
INFO: Sensor CPD Block Indexer
INFO: Sensor CPD Block Indexer <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=61ms
INFO: No SCM system was detected<span class="token punctuation">.</span> You can use the <span class="token string">'sonar.scm.provider'</span> property to explicitly specify it<span class="token punctuation">.</span>
INFO: 5 files had no CPD blocks
INFO: Calculating CPD <span class="token keyword">for</span> 4 files
INFO: CPD calculation finished
INFO: Analysis report generated in 112ms<span class="token punctuation">,</span> <span class="token function">dir</span> size=54 KB
INFO: Analysis reports compressed in 27ms<span class="token punctuation">,</span> zip size=27 KB
INFO: Analysis report uploaded in 1424ms
INFO: ANALYSIS SUCCESSFUL<span class="token punctuation">,</span> you can browse http:<span class="token operator">/</span><span class="token operator">/</span>localhost:9000/dashboard/index/org<span class="token punctuation">.</span>sonarqube:python-simple-sonar-scanner
INFO: Note that you will be able to access the updated dashboard once the server has processed the submitted analysis report
INFO: More about the report processing at http:<span class="token operator">/</span><span class="token operator">/</span>localhost:9000/api/ce/task?id=AWy72tmj-QGXbgTpuyz-
INFO: Task total time: 9<span class="token punctuation">.</span>425 s
INFO: <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
INFO: EXECUTION SUCCESS
INFO: <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
INFO: Total time: 12<span class="token punctuation">.</span>871s
INFO: Final Memory: 43M/107M
INFO: <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后到sonar-qube网站中查看已经多了一个代码扫描结果<br><img src="https://img-blog.csdnimg.cn/33c8e10be911414f8fa2389647a95cac.png" alt="请添加图片描述"><br>进入到里面可以看到报错代码的具体行数<br><img src="https://img-blog.csdnimg.cn/cf8f4a2d9e2b4cd8b4b6060bc46cea4d.png" alt="请添加图片描述"><br>我们可以自己写段代码进行测试</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@jenkins python-test]</span><span class="token comment"># mkdir src</span>
<span class="token comment">#手动创建一个python代码目录</span>
<span class="token namespace">[root@jenkins python-test]</span><span class="token comment"># pwd</span>
<span class="token operator">/</span>app/src/sonar-examples-master/projects/languages/python/python-test
<span class="token comment">#将python中别的配置文件cp一份</span>
<span class="token namespace">[root@jenkins python-test]</span><span class="token comment"># cp ../python-sonar-runner/sonar-project.properties .</span>
<span class="token namespace">[root@jenkins python-test]</span><span class="token comment"># ll</span>
total 4
<span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span> 1 root root 338 Aug 23 15:02 sonar-project<span class="token punctuation">.</span>properties
drwxr-xr-x 2 root root   6 Aug 23 15:01 src
<span class="token comment">#将src目录改名</span>
<span class="token namespace">[root@jenkins python-test]</span><span class="token comment"># mv src source</span>
<span class="token comment">#修改配置文件</span>
<span class="token namespace">[root@jenkins python-test]</span><span class="token comment"># vim sonar-project.properties </span>
<span class="token comment"># Required metadata</span>
sonar<span class="token punctuation">.</span>projectKey=python-test
sonar<span class="token punctuation">.</span>projectName=python-test
sonar<span class="token punctuation">.</span>projectVersion=1<span class="token punctuation">.</span>0
  
▽ Comma-separated paths to directories with sources <span class="token punctuation">(</span>required<span class="token punctuation">)</span>
sonar<span class="token punctuation">.</span>sources=source

<span class="token comment"># Language</span>
sonar<span class="token punctuation">.</span>language=py

<span class="token comment"># Encoding of the source files</span>
sonar<span class="token punctuation">.</span>sourceEncoding=UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>进入代码目录中写一段正确的python代码</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@jenkins python-test]</span><span class="token comment"># cd source/</span>
<span class="token namespace">[root@jenkins source]</span><span class="token comment"># vim test.py</span>
<span class="token comment">#/usr/bin/env python</span>
print <span class="token string">"hello world"</span>
<span class="token comment">#然后可以测试，可以看到代码是正确的</span>
<span class="token namespace">[root@jenkins source]</span><span class="token comment"># python test.py </span>
hello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后修改一下python代码让代码出错然后进行测试,可以看到执行代码已经报错</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@jenkins source]</span><span class="token comment"># vim test.py    </span>
<span class="token comment">#/usr/bin/env python</span>
print <span class="token string">"hello world"</span>
print hello
<span class="token namespace">[root@jenkins source]</span><span class="token comment"># python test.py </span>
hello world
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:
  File <span class="token string">"test.py"</span><span class="token punctuation">,</span> line 3<span class="token punctuation">,</span> in &lt;module>
    print hello
NameError: name <span class="token string">'hello'</span> is not defined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后执行扫描的命令</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@jenkins python-test]</span><span class="token comment"># /app/sonar-scanner/bin/sonar-scanner </span>
INFO: Scanner configuration file: <span class="token operator">/</span>app/sonar-scanner/conf/sonar-scanner<span class="token punctuation">.</span>properties
INFO: Project root configuration file: <span class="token operator">/</span>app/src/sonar-examples-master/projects/languages/python/python-test/sonar-project<span class="token punctuation">.</span>properties
INFO: SonarQube Scanner 2<span class="token punctuation">.</span>6<span class="token punctuation">.</span>1
INFO: Java 1<span class="token punctuation">.</span>8<span class="token punctuation">.</span>0_121 Oracle Corporation <span class="token punctuation">(</span>64-bit<span class="token punctuation">)</span>
INFO: Linux 3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>0-957<span class="token punctuation">.</span>12<span class="token punctuation">.</span>2<span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64 amd64
INFO: User cache: <span class="token operator">/</span>root/<span class="token punctuation">.</span>sonar/cache
INFO: Load global settings
INFO: Load global settings <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=534ms
WARN: Property <span class="token string">'sonar.jdbc.url'</span> is not supported any more<span class="token punctuation">.</span> It will be ignored<span class="token punctuation">.</span> There is no longer any DB connection to the SQ database<span class="token punctuation">.</span>
WARN: Property <span class="token string">'sonar.jdbc.username'</span> is not supported any more<span class="token punctuation">.</span> It will be ignored<span class="token punctuation">.</span> There is no longer any DB connection to the SQ database<span class="token punctuation">.</span>
WARN: Property <span class="token string">'sonar.jdbc.password'</span> is not supported any more<span class="token punctuation">.</span> It will be ignored<span class="token punctuation">.</span> There is no longer any DB connection to the SQ database<span class="token punctuation">.</span>
INFO: User cache: <span class="token operator">/</span>root/<span class="token punctuation">.</span>sonar/cache
INFO: Load plugins index
INFO: Load plugins index <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=202ms
INFO: Plugin <span class="token namespace">[l10nzh]</span> defines <span class="token string">'l10nen'</span> as base plugin<span class="token punctuation">.</span> This metadata can be removed <span class="token keyword">from</span> manifest of l10n plugins since version 5<span class="token punctuation">.</span>2<span class="token punctuation">.</span>
INFO: SonarQube server 6<span class="token punctuation">.</span>5<span class="token punctuation">.</span>0
INFO: Default locale: <span class="token string">"en_US"</span><span class="token punctuation">,</span> source code encoding: <span class="token string">"UTF-8"</span>
INFO: <span class="token keyword">Process</span> project properties
INFO: Load project repositories
INFO: Load project repositories <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=53ms
INFO: Load quality profiles
INFO: Load quality profiles <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=127ms
INFO: Load active rules
INFO: Load active rules <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=2179ms
INFO: Load metrics repository
INFO: Load metrics repository <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=160ms
WARN: SCM provider autodetection failed<span class="token punctuation">.</span> No SCM provider claims to support this project<span class="token punctuation">.</span> Please use sonar<span class="token punctuation">.</span>scm<span class="token punctuation">.</span>provider to <span class="token keyword">define</span> SCM of your project<span class="token punctuation">.</span>
INFO: Publish mode
INFO: Project key: python-test
INFO: <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>  Scan python-test
INFO: Load server rules
INFO: Load server rules <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=118ms
INFO: Language is forced to py
INFO: Base <span class="token function">dir</span>: <span class="token operator">/</span>app/src/sonar-examples-master/projects/languages/python/python-test
INFO: Working <span class="token function">dir</span>: <span class="token operator">/</span>app/src/sonar-examples-master/projects/languages/python/python-test/<span class="token punctuation">.</span>sonar
INFO: Source paths: source
INFO: Source encoding: UTF-8<span class="token punctuation">,</span> default locale: en_US
INFO: Index files
INFO: 1 file indexed
INFO: Quality profile <span class="token keyword">for</span> py: Sonar way
INFO: Sensor PythonXUnitSensor <span class="token namespace">[python]</span>
INFO: Sensor PythonXUnitSensor <span class="token namespace">[python]</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=14ms
INFO: Sensor Python Squid Sensor <span class="token namespace">[python]</span>
INFO: Python unit test coverage
INFO: Python integration test coverage
INFO: Python overall test coverage
INFO: Sensor Python Squid Sensor <span class="token namespace">[python]</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=181ms
INFO: Sensor SonarJavaXmlFileSensor <span class="token namespace">[java]</span>
INFO: Sensor SonarJavaXmlFileSensor <span class="token namespace">[java]</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=0ms
INFO: Sensor Analyzer <span class="token keyword">for</span> <span class="token string">"php.ini"</span> files <span class="token namespace">[php]</span>
INFO: Sensor Analyzer <span class="token keyword">for</span> <span class="token string">"php.ini"</span> files <span class="token namespace">[php]</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=5ms
INFO: Sensor Zero Coverage Sensor
INFO: Sensor Zero Coverage Sensor <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=15ms
INFO: Sensor CPD Block Indexer
INFO: Sensor CPD Block Indexer <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=15ms
INFO: No SCM system was detected<span class="token punctuation">.</span> You can use the <span class="token string">'sonar.scm.provider'</span> property to explicitly specify it<span class="token punctuation">.</span>
INFO: 1 file had no CPD blocks
INFO: Calculating CPD <span class="token keyword">for</span> 0 files
INFO: CPD calculation finished
INFO: Analysis report generated in 90ms<span class="token punctuation">,</span> <span class="token function">dir</span> size=20 KB
INFO: Analysis reports compressed in 11ms<span class="token punctuation">,</span> zip size=6 KB
INFO: Analysis report uploaded in 716ms
INFO: ANALYSIS SUCCESSFUL<span class="token punctuation">,</span> you can browse http:<span class="token operator">/</span><span class="token operator">/</span>localhost:9000/dashboard/index/python-test
INFO: Note that you will be able to access the updated dashboard once the server has processed the submitted analysis report
INFO: More about the report processing at http:<span class="token operator">/</span><span class="token operator">/</span>localhost:9000/api/ce/task?id=AWy9UfSW-QGXbgTpuy0A
INFO: Task total time: 8<span class="token punctuation">.</span>471 s
INFO: <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
INFO: EXECUTION SUCCESS
INFO: <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
INFO: Total time: 12<span class="token punctuation">.</span>703s
INFO: Final Memory: 43M/106M
INFO: <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时再去sonarqube网站上查看，已经多了2个问题了<br><img src="https://img-blog.csdnimg.cn/85d7238f3b6e412487188a285c2507eb.png" alt="请添加图片描述"><br>然后我们再把source中的python代码修改正确，然后再次测试看看情况</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@jenkins python-test]</span><span class="token comment"># vim source/test.py </span>
<span class="token comment">#/usr/bin/env python</span>
print<span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span>

<span class="token namespace">[root@jenkins python-test]</span><span class="token comment"># /app/sonar-scanner/bin/sonar-scanner </span>
INFO: Scanner configuration file: <span class="token operator">/</span>app/sonar-scanner/conf/sonar-scanner<span class="token punctuation">.</span>properties
INFO: Project root configuration file: <span class="token operator">/</span>app/src/sonar-examples-master/projects/languages/python/python-test/sonar-project<span class="token punctuation">.</span>properties
INFO: SonarQube Scanner 2<span class="token punctuation">.</span>6<span class="token punctuation">.</span>1
INFO: Java 1<span class="token punctuation">.</span>8<span class="token punctuation">.</span>0_121 Oracle Corporation <span class="token punctuation">(</span>64-bit<span class="token punctuation">)</span>
INFO: Linux 3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>0-957<span class="token punctuation">.</span>12<span class="token punctuation">.</span>2<span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64 amd64
INFO: User cache: <span class="token operator">/</span>root/<span class="token punctuation">.</span>sonar/cache
INFO: Load global settings
INFO: Load global settings <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=142ms
WARN: Property <span class="token string">'sonar.jdbc.url'</span> is not supported any more<span class="token punctuation">.</span> It will be ignored<span class="token punctuation">.</span> There is no longer any DB connection to the SQ database<span class="token punctuation">.</span>
WARN: Property <span class="token string">'sonar.jdbc.username'</span> is not supported any more<span class="token punctuation">.</span> It will be ignored<span class="token punctuation">.</span> There is no longer any DB connection to the SQ database<span class="token punctuation">.</span>
WARN: Property <span class="token string">'sonar.jdbc.password'</span> is not supported any more<span class="token punctuation">.</span> It will be ignored<span class="token punctuation">.</span> There is no longer any DB connection to the SQ database<span class="token punctuation">.</span>
INFO: User cache: <span class="token operator">/</span>root/<span class="token punctuation">.</span>sonar/cache
INFO: Load plugins index
INFO: Load plugins index <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=8ms
INFO: Plugin <span class="token namespace">[l10nzh]</span> defines <span class="token string">'l10nen'</span> as base plugin<span class="token punctuation">.</span> This metadata can be removed <span class="token keyword">from</span> manifest of l10n plugins since version 5<span class="token punctuation">.</span>2<span class="token punctuation">.</span>
INFO: SonarQube server 6<span class="token punctuation">.</span>5<span class="token punctuation">.</span>0
INFO: Default locale: <span class="token string">"en_US"</span><span class="token punctuation">,</span> source code encoding: <span class="token string">"UTF-8"</span>
INFO: <span class="token keyword">Process</span> project properties
INFO: Load project repositories
INFO: Load project repositories <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=230ms
INFO: Load quality profiles
INFO: Load quality profiles <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=61ms
INFO: Load active rules
INFO: Load active rules <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=862ms
INFO: Load metrics repository
INFO: Load metrics repository <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=73ms
WARN: SCM provider autodetection failed<span class="token punctuation">.</span> No SCM provider claims to support this project<span class="token punctuation">.</span> Please use sonar<span class="token punctuation">.</span>scm<span class="token punctuation">.</span>provider to <span class="token keyword">define</span> SCM of your project<span class="token punctuation">.</span>
INFO: Publish mode
INFO: Project key: python-test
INFO: <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>  Scan python-test
INFO: Load server rules
INFO: Load server rules <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=83ms
INFO: Language is forced to py
INFO: Base <span class="token function">dir</span>: <span class="token operator">/</span>app/src/sonar-examples-master/projects/languages/python/python-test
INFO: Working <span class="token function">dir</span>: <span class="token operator">/</span>app/src/sonar-examples-master/projects/languages/python/python-test/<span class="token punctuation">.</span>sonar
INFO: Source paths: source
INFO: Source encoding: UTF-8<span class="token punctuation">,</span> default locale: en_US
INFO: Index files
INFO: 1 file indexed
INFO: Quality profile <span class="token keyword">for</span> py: Sonar way
INFO: Sensor PythonXUnitSensor <span class="token namespace">[python]</span>
INFO: Sensor PythonXUnitSensor <span class="token namespace">[python]</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=41ms
INFO: Sensor Python Squid Sensor <span class="token namespace">[python]</span>
INFO: Python unit test coverage
INFO: Python integration test coverage
INFO: Python overall test coverage
INFO: Sensor Python Squid Sensor <span class="token namespace">[python]</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=569ms
INFO: Sensor SonarJavaXmlFileSensor <span class="token namespace">[java]</span>
INFO: Sensor SonarJavaXmlFileSensor <span class="token namespace">[java]</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=0ms
INFO: Sensor Analyzer <span class="token keyword">for</span> <span class="token string">"php.ini"</span> files <span class="token namespace">[php]</span>
INFO: Sensor Analyzer <span class="token keyword">for</span> <span class="token string">"php.ini"</span> files <span class="token namespace">[php]</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=5ms
INFO: Sensor Zero Coverage Sensor
INFO: Sensor Zero Coverage Sensor <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=17ms
INFO: Sensor CPD Block Indexer
INFO: Sensor CPD Block Indexer <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">|</span> time=25ms
INFO: No SCM system was detected<span class="token punctuation">.</span> You can use the <span class="token string">'sonar.scm.provider'</span> property to explicitly specify it<span class="token punctuation">.</span>
INFO: 1 file had no CPD blocks
INFO: Calculating CPD <span class="token keyword">for</span> 0 files
INFO: CPD calculation finished
INFO: Analysis report generated in 128ms<span class="token punctuation">,</span> <span class="token function">dir</span> size=20 KB
INFO: Analysis reports compressed in 14ms<span class="token punctuation">,</span> zip size=6 KB
INFO: Analysis report uploaded in 54ms
INFO: ANALYSIS SUCCESSFUL<span class="token punctuation">,</span> you can browse http:<span class="token operator">/</span><span class="token operator">/</span>localhost:9000/dashboard/index/python-test
INFO: Note that you will be able to access the updated dashboard once the server has processed the submitted analysis report
INFO: More about the report processing at http:<span class="token operator">/</span><span class="token operator">/</span>localhost:9000/api/ce/task?id=AWy9VWr5-QGXbgTpuy0B
INFO: Task total time: 6<span class="token punctuation">.</span>789 s
INFO: <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
INFO: EXECUTION SUCCESS
INFO: <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
INFO: Total time: 9<span class="token punctuation">.</span>013s
INFO: Final Memory: 43M/106M
INFO: <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>再去网址上查看，已经恢复正常<br><img src="https://img-blog.csdnimg.cn/41e69965ca3443939d2e743aed04162a.png" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/b711ac0ec6a24e4bb9b78e05fefb26cc.png" alt="请添加图片描述"><br>然后如何将代码扫描放到jenkins中，<br>代码扫描2中方式：<br>1，在代码里执行shell命令放进去扫描<br>2，在代码克隆完之后用jenkins触发，帮我们做扫描</p>
<h1 id="三、Jenkins关联到SonarQube"><a href="#三、Jenkins关联到SonarQube" class="headerlink" title="三、Jenkins关联到SonarQube"></a>三、Jenkins关联到SonarQube</h1><p> <strong>1. 安装插件，配置jenkins关联到sonarQube</strong><br>首先安装插件，在jenkins插件安装界面安装Sonar 插件SonarQube Plugin<br><img src="https://img-blog.csdnimg.cn/6a73ecfd5f54412c88f150fae137b91e.png" alt="请添加图片描述"><br>安装成功之后需要到系统配置中配置sonarQube<br><img src="https://img-blog.csdnimg.cn/0259642b765748a3b4be7dd1e6fbc8b2.png" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/d259acb05ddb43f98ff599dee886e9b8.png" alt="请添加图片描述"><br>填写sonarQube名字，可以随意些，URL需要写sonarqube服务器，我这里jenkins和sonarqube在同一台机器，tonken不用设置<img src="https://img-blog.csdnimg.cn/2fb1826755114ef2966ea8d400fbbc54.png" alt="请添加图片描述"></p>
<p> <strong>2. 让jeknins关联到sonarscanner</strong><br> 添加扫描器<br>系统管理Global Tool Configuration 全局工具配置<br><img src="https://img-blog.csdnimg.cn/d042c179e4f24194ac456fcf82950f6d.png" alt="请添加图片描述"><br>配置sonarQube Scanner 配置<br><img src="https://img-blog.csdnimg.cn/f9957e1046514d9c812809ad08bb79a1.png" alt="请添加图片描述"></p>
<p> <strong>3. 配置扫描</strong><br> 选择自己的项目<br><img src="https://img-blog.csdnimg.cn/68f16357fb634214b094eab148a6957a.png" alt="请添加图片描述"><br>选择配置项目</p>
<p><img src="https://img-blog.csdnimg.cn/95d0b53c8aa74f9995a66f420006218f.png" alt="请添加图片描述"><br>构建execute sonarqube sacnner<br><img src="https://img-blog.csdnimg.cn/e3ed00d586634aec8000361ced1fa3e7.png" alt="请添加图片描述"><br>将配置文件的内容修改成如下格式，然后将Execute SonarQube Scanner 和Excute Shell调换位置，先扫描后执行命令，填写完成然后点击保存。</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">sonar<span class="token punctuation">.</span>projectKey=testDemo
sonar<span class="token punctuation">.</span>projectName=testDemo
sonar<span class="token punctuation">.</span>projectVersion=1<span class="token punctuation">.</span>0
sonar<span class="token punctuation">.</span>source=<span class="token punctuation">.</span><span class="token operator">/</span>   
sonar<span class="token punctuation">.</span>language=php
sonar<span class="token punctuation">.</span>sourceEncoding=UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/ea0f5de92932438a8dcc80def9199198.png" alt="请添加图片描述"></p>
]]></content>
      <categories>
        <category>SonarQube</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>SonarQube</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes常用资源——Volume存储卷</title>
    <url>/2022/07/03/Volume%E5%AD%98%E5%82%A8%E5%8D%B7/</url>
    <content><![CDATA[<h1 id="Volume存储卷"><a href="#Volume存储卷" class="headerlink" title="Volume存储卷"></a>Volume存储卷</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>Volume将容器中的指定数据和容器解耦，并将数据存储到指定的位置，不同的存储卷功能不一致，如果是基于网络存储的存储卷可以实现容器间的数据共享和持久化。</li>
<li>静态存储卷需要在使用前手动创建pv和pvc，然后绑定至pod使用</li>
<li>常用的几种卷：<ul>
<li>emptyDir：本地临时卷</li>
<li>hostPath：本地存储卷</li>
<li>configmap：配置文件</li>
<li>Secret：是一种包含少量敏感信息例如密码、令牌或密钥的对象</li>
<li>nfs等网络存储卷</li>
</ul>
</li>
</ul>
<p><a href="https://kubernetes.io/zh/docs/concepts/storage/volumes/">https://kubernetes.io/zh/docs/concepts/storage/volumes/</a></p>
<h5 id="一、emptyDir"><a href="#一、emptyDir" class="headerlink" title="一、emptyDir"></a><strong>一、emptyDir</strong></h5><p>emptyDir：本地临时卷，pod删除卷也跟着删除，通常用于两个pod之间日志共享</p>
<ul>
<li>当pod被分配给节点时，首先创建emptydir卷，并且只要该Pod在该节点上运行，该卷就会存在，正如卷的名字所述，它最初是空的，Pod中的容器可以读取和写入emptyDir卷中的相同文件，尽管该卷可以挂载到每个容器中的相同或不同路径上，当出于任何原因从节点中删除pod时，emptyDir中的数据将被永久删除。</li>
<li>&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;pods&#x2F;$ID&#x2F;volumes&#x2F;kubernetes.io~emptydir&#x2F;cache-volume&#x2F;$FILE</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 case5-emptyDir<span class="token punctuation">]</span><span class="token comment"># </span>
<span class="token comment">#apiVersion: extensions/v1beta1</span>
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: <span class="token number">1</span>
  selector:
    matchLabels: <span class="token comment">#rs or deployment</span>
      app: ng-deploy-80
  template:
    metadata:
      labels:
        app: ng-deploy-80
    spec:
      containers:
      - name: ng-deploy-80
        image: nginx
        ports:
        - containerPort: <span class="token number">80</span>
        volumeMounts:
        <span class="token comment">#在容器中挂载指定的volumes</span>
        - mountPath: /cache
          name: cache-volume
      volumes:
      <span class="token comment">#定义volumes名称</span>
      - name: cache-volume
      <span class="token comment">#定义volumes类型</span>
        emptyDir: <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token comment">#挂载完成查看pod所调度到哪个节点上</span>
<span class="token punctuation">[</span>root@haproxy1 case5-emptyDir<span class="token punctuation">]</span><span class="token comment"># kubectl get pods  -o wide </span>
NAME                                      READY   STATUS              RESTARTS      AGE     IP               NODE            NOMINATED NODE   READINESS GATES

nginx-deployment-cf796fbd-hx4mv           <span class="token number">1</span>/1     Running             <span class="token number">0</span>             3d1h    <span class="token number">10.200</span>.169.144   <span class="token number">172.16</span>.92.141   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
<span class="token comment">#查看上面已经将pod调度到172.16.92.141上，可以到该节点查看是否已经存在cache-volume这个卷</span>
<span class="token punctuation">[</span>root@k8s-node2 ~<span class="token punctuation">]</span><span class="token comment"># find /var/lib/ -name 'cache-volume'</span>
/var/lib/kubelet/pods/43b5be70-9c9e-47ce-b4ce-9a98b65de774/volumes/kubernetes.io~empty-dir/cache-volume
/var/lib/kubelet/pods/43b5be70-9c9e-47ce-b4ce-9a98b65de774/plugins/kubernetes.io~empty-dir/cache-volume

<span class="token comment">#测试——————————可以进入pod的/cache 挂载目录，创建文件或文件夹，然后再到141节点上查看是否已经创建成功</span>
<span class="token punctuation">[</span>root@haproxy1 case5-emptyDir<span class="token punctuation">]</span><span class="token comment"># kubectl exec -it nginx</span>
nginx                            nginx-deployment-cf796fbd-hx4mv  
<span class="token punctuation">[</span>root@haproxy1 case5-emptyDir<span class="token punctuation">]</span><span class="token comment"># kubectl exec -it nginx-deployment-cf796fbd-hx4mv  bash </span>
kubectl <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>POD<span class="token punctuation">]</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> is DEPRECATED and will be removed <span class="token keyword">in</span> a future version. Use kubectl <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>POD<span class="token punctuation">]</span> -- <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> instead.
root@nginx-deployment-cf796fbd-hx4mv:/<span class="token comment"># </span>
root@nginx-deployment-cf796fbd-hx4mv:/<span class="token comment"># cd cache/</span>
root@nginx-deployment-cf796fbd-hx4mv:/cache<span class="token comment"># mkdir nihaoa </span>
root@nginx-deployment-cf796fbd-hx4mv:/cache<span class="token comment"># ls </span>
nihaoa
<span class="token comment">#回到141节点查看是否已经创建了nihaoa的文件夹</span>
<span class="token punctuation">[</span>root@k8s-node2 cache-volume<span class="token punctuation">]</span><span class="token comment"># cd /var/lib/kubelet/pods/43b5be70-9c9e-47ce-b4ce-9a98b65de774/volumes/kubernetes.io~empty-dir/cache-volume</span>
<span class="token punctuation">[</span>root@k8s-node2 cache-volume<span class="token punctuation">]</span><span class="token comment"># ll</span>
总用量 <span class="token number">0</span>
drwxr-xr-x <span class="token number">2</span> root root <span class="token number">6</span> <span class="token number">5</span>月  <span class="token number">18</span> <span class="token number">11</span>:10 nihaoa
<span class="token punctuation">[</span>root@k8s-node2 cache-volume<span class="token punctuation">]</span><span class="token comment"># </span>

<span class="token comment">#一旦将pod删除，宿主机的目录也会被删除</span>
<span class="token punctuation">[</span>root@haproxy1 case5-emptyDir<span class="token punctuation">]</span><span class="token comment"># kubectl delete -f  deploy_emptyDir.yml </span>
deployment.apps <span class="token string">"nginx-deployment"</span> deleted
<span class="token punctuation">[</span>root@k8s-node2 ~<span class="token punctuation">]</span><span class="token comment"># find /var/lib/ -name 'cache-volume'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="二、hostPath"><a href="#二、hostPath" class="headerlink" title="二、hostPath"></a>二、hostPath</h5><p>hostpath卷将主机节点上文件系统中的文件或目录挂载到集群中，pod删除的时候卷不会被删除</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@nginx-deployment-cf796fbd-hx4mv:/cache<span class="token comment"># exit </span>
<span class="token comment">#apiVersion: extensions/v1beta1</span>
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: <span class="token number">1</span>
  selector:
    matchLabels:
      app: ng-deploy-80
  template:
    metadata:
      labels:
        app: ng-deploy-80
    spec:
      containers:
      - name: ng-deploy-80
        image: nginx
        ports:
        - containerPort: <span class="token number">80</span>
        volumeMounts:
        - mountPath: /cache
          name: cache-volume
      volumes:
      - name: cache-volume
        hostPath:
          path: /tmp/linux66<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/images/pasted-17.png" alt="1"></p>
<h5 id="三、nfs等共享存储-常用v3版本，v4可能会有问题"><a href="#三、nfs等共享存储-常用v3版本，v4可能会有问题" class="headerlink" title="三、nfs等共享存储(常用v3版本，v4可能会有问题)"></a>三、nfs等共享存储(常用v3版本，v4可能会有问题)</h5><p>nfs卷允许将现有的NFS（网络文件系统）共享挂载到容器中，不像emptyDir，当删除Pod时，nfs卷的内容会被保留，卷仅仅是被卸载，这意味着nfs卷可以预填充数据，并且可以在pod之间“切换”数据。NFS可以被多个写入者同时挂载。</p>
<p>需要安装nfs服务端：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y nfs-utils rpcbind
 systemctl start nfs-utils
 systemctl status nfs-utils
<span class="token punctuation">[</span>root@haproxy1 case7-nfs<span class="token punctuation">]</span><span class="token comment"># cat /etc/exports</span>
<span class="token comment">#注意，这里用*只是测试，生产环境需要填写服务器的网段，如172.16.0.0/16,不能写pod网段,要写宿主机网段</span>
/data/k8sdata *<span class="token punctuation">(</span>rw,no_root_squash<span class="token punctuation">)</span>
<span class="token comment">#检查配置文件是否正常</span>
<span class="token punctuation">[</span>root@haproxy1 case7-nfs<span class="token punctuation">]</span><span class="token comment"># exportfs  -r</span>
<span class="token comment">#如果showmount遇到以下报错，关闭服务端防火墙</span>
clnt_create: RPC: Port mapper failure - Unable to receive: errno <span class="token number">113</span> <span class="token punctuation">(</span>No route to <span class="token function">host</span><span class="token punctuation">)</span>
<span class="token comment">#到客户端挂载试试</span>
<span class="token punctuation">[</span>root@k8s-master1 ~<span class="token punctuation">]</span><span class="token comment"># showmount -e 172.16.92.160</span>
Export list <span class="token keyword">for</span> <span class="token number">172.16</span>.92.160:
/data/k8sdata <span class="token number">172.16</span>.92.0/24
<span class="token punctuation">[</span>root@k8s-master1 ~<span class="token punctuation">]</span><span class="token comment"># mount -t nfs 172.16.92.160:/data/k8sdata /application</span>
<span class="token punctuation">[</span>root@k8s-master1 ~<span class="token punctuation">]</span><span class="token comment"># </span>
<span class="token punctuation">[</span>root@k8s-master1 ~<span class="token punctuation">]</span><span class="token comment"># df -h </span>
文件系统                     容量  已用  可用 已用% 挂载点
/dev/sda5                     70G  <span class="token number">5</span>.0G   66G    <span class="token number">8</span>% /
devtmpfs                     <span class="token number">2</span>.8G     <span class="token number">0</span>  <span class="token number">2</span>.8G    <span class="token number">0</span>% /dev
tmpfs                        <span class="token number">2</span>.8G     <span class="token number">0</span>  <span class="token number">2</span>.8G    <span class="token number">0</span>% /dev/shm
tmpfs                        <span class="token number">2</span>.8G  292M  <span class="token number">2</span>.5G   <span class="token number">11</span>% /run
tmpfs                        <span class="token number">2</span>.8G     <span class="token number">0</span>  <span class="token number">2</span>.8G    <span class="token number">0</span>% /sys/fs/cgroup
/dev/sda2                     20G   33M   20G    <span class="token number">1</span>% /home
/dev/sda1                    100G  <span class="token number">1</span>.1G   99G    <span class="token number">2</span>% /var
tmpfs                        <span class="token number">5</span>.3G   12K  <span class="token number">5</span>.3G    <span class="token number">1</span>% /var/lib/kubelet/pods/d9b2f0b8-d5b7-4949-a687-468281be5f83/volumes/kubernetes.io~secret/etcd-certs
tmpfs                        <span class="token number">5</span>.3G   12K  <span class="token number">5</span>.3G    <span class="token number">1</span>% /var/lib/kubelet/pods/d9b2f0b8-d5b7-4949-a687-468281be5f83/volumes/kubernetes.io~projected/kube-api-access-nj7r9
overlay                      100G  <span class="token number">1</span>.1G   99G    <span class="token number">2</span>% /var/lib/docker/overlay2/75d1ac39be42a35a7e8f18d51f089d51004141fec406f6caea4a15eeeeffa569/merged
shm                           64M     <span class="token number">0</span>   64M    <span class="token number">0</span>% /var/lib/docker/containers/89234494f4af49c5bb9fbcf0a7446817d92a71863ab7f079a2790b2b623d3170/mounts/shm
overlay                      100G  <span class="token number">1</span>.1G   99G    <span class="token number">2</span>% /var/lib/docker/overlay2/4755c360c33f2f974117ae6ad11318aafe3a32719db05bf5f6de2b75204fe405/merged
tmpfs                        565M     <span class="token number">0</span>  565M    <span class="token number">0</span>% /run/user/0
<span class="token number">172.16</span>.92.160:/data/k8sdata   70G  <span class="token number">8</span>.1G   62G   <span class="token number">12</span>% /application

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>创建多个pod测试挂载同一个nfs</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 case7-nfs<span class="token punctuation">]</span><span class="token comment"># cat deploy_nfs.yml </span>
<span class="token comment">#apiVersion: extensions/v1beta1</span>
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: <span class="token number">1</span>
  selector:
    matchLabels:
      app: ng-deploy-80
  template:
    metadata:
      labels:
        app: ng-deploy-80
    spec:
      containers:
      - name: ng-deploy-80
        image: nginx 
        ports:
        - containerPort: <span class="token number">80</span>
        volumeMounts:
        <span class="token comment">#挂载到容器的这个目录</span>
        - mountPath: /usr/share/nginx/html/mysite
        <span class="token comment">#调用哪个volumes名称</span>
          name: my-nfs-volume
      volumes:
      - name: my-nfs-volume
        nfs:
        <span class="token comment">#nfs服务端ip</span>
          server: <span class="token number">172.31</span>.7.109
        <span class="token comment">#nfs挂载点</span>
          path: /data/k8sdata/linux66

---
apiVersion: v1
kind: Service
metadata:
  name: ng-deploy-80
spec:
  ports:
  - name: http
    port: <span class="token number">81</span>
    targetPort: <span class="token number">80</span>
    nodePort: <span class="token number">30016</span>
    protocol: TCP
  type: NodePort
  selector:
    app: ng-deploy-80
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>#进入pod查看</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 case7-nfs<span class="token punctuation">]</span><span class="token comment"># kubectl exec -it nginx-deployment-57cbf4c5f4-z6xqd bash </span>
kubectl <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>POD<span class="token punctuation">]</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> is DEPRECATED and will be removed <span class="token keyword">in</span> a future version. Use kubectl <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>POD<span class="token punctuation">]</span> -- <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> instead.
root@nginx-deployment-57cbf4c5f4-z6xqd:/<span class="token comment"># cd /usr/share/nginx/html/mysite</span>
root@nginx-deployment-57cbf4c5f4-z6xqd:/usr/share/nginx/html/mysite<span class="token comment"># </span>
root@nginx-deployment-57cbf4c5f4-z6xqd:/usr/share/nginx/html/mysite<span class="token comment"># ls </span>
root@nginx-deployment-57cbf4c5f4-z6xqd:/usr/share/nginx/html/mysite<span class="token comment"># </span>
root@nginx-deployment-57cbf4c5f4-z6xqd:/usr/share/nginx/html/mysite<span class="token comment"># mkdir nihao </span>
root@nginx-deployment-57cbf4c5f4-z6xqd:/usr/share/nginx/html/mysite<span class="token comment"># df -h </span>
Filesystem                   Size  Used Avail Use% Mounted on
overlay                      100G  <span class="token number">1</span>.8G   99G   <span class="token number">2</span>% /
tmpfs                         64M     <span class="token number">0</span>   64M   <span class="token number">0</span>% /dev
tmpfs                        <span class="token number">2</span>.8G     <span class="token number">0</span>  <span class="token number">2</span>.8G   <span class="token number">0</span>% /sys/fs/cgroup
/dev/sda1                    100G  <span class="token number">1</span>.8G   99G   <span class="token number">2</span>% /etc/hosts
shm                           64M     <span class="token number">0</span>   64M   <span class="token number">0</span>% /dev/shm
<span class="token number">172.16</span>.92.160:/data/k8sdata   70G  <span class="token number">8</span>.1G   62G  <span class="token number">12</span>% /usr/share/nginx/html/mysite
tmpfs                        <span class="token number">5</span>.3G   12K  <span class="token number">5</span>.3G   <span class="token number">1</span>% /run/secrets/kubernetes.io/serviceaccount
tmpfs                        <span class="token number">2</span>.8G     <span class="token number">0</span>  <span class="token number">2</span>.8G   <span class="token number">0</span>% /proc/acpi
tmpfs                        <span class="token number">2</span>.8G     <span class="token number">0</span>  <span class="token number">2</span>.8G   <span class="token number">0</span>% /proc/scsi
tmpfs                        <span class="token number">2</span>.8G     <span class="token number">0</span>  <span class="token number">2</span>.8G   <span class="token number">0</span>% /sys/firmware
root@nginx-deployment-57cbf4c5f4-z6xqd:/usr/share/nginx/html/mysite<span class="token comment"># </span>
root@nginx-deployment-57cbf4c5f4-z6xqd:/usr/share/nginx/html/mysite<span class="token comment"># ls </span>
a  hahahhaha  nihao
<span class="token comment">#可以查看nfs服务端已经有了</span>
<span class="token punctuation">[</span>root@haproxy1 case7-nfs<span class="token punctuation">]</span><span class="token comment"># ll /data/k8sdata/</span>
总用量 <span class="token number">0</span>
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> <span class="token number">5</span>月  <span class="token number">18</span> <span class="token number">12</span>:35 a
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> <span class="token number">5</span>月  <span class="token number">18</span> <span class="token number">12</span>:35 hahahhaha
drwxr-xr-x <span class="token number">2</span> root root <span class="token number">6</span> <span class="token number">5</span>月  <span class="token number">18</span> <span class="token number">12</span>:35 nihao

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>#测试——————————创建一个图片到pod内的nginx站点目录中看看是否能访问</p>
<p><img src="/images/pasted-18.png" alt="volume2.png"></p>
<p><img src="/images/pasted-19.png" alt="volume3.png"></p>
<p>挂载流程：</p>
<p>会在宿主机挂载目录到nfs服务器，然后通过联合文件挂载系统，将目录映射到容器的目录使用，容器内没有内核，不识别nfs驱动</p>
<ul>
<li>创建多个pod测试每个pod挂载多个nfs</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 case7-nfs<span class="token punctuation">]</span><span class="token comment"># kubectl exec -it nginx-deployment-site2-76f4fdb9f5-sz6k7 bash </span>
kubectl <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>POD<span class="token punctuation">]</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> is DEPRECATED and will be removed <span class="token keyword">in</span> a future version. Use kubectl <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>POD<span class="token punctuation">]</span> -- <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> instead.
root@nginx-deployment-site2-76f4fdb9f5-sz6k7:/<span class="token comment"># ls </span>
bin  boot  dev  docker-entrypoint.d  docker-entrypoint.sh  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
root@nginx-deployment-site2-76f4fdb9f5-sz6k7:/<span class="token comment"># df -h </span>
Filesystem                   Size  Used Avail Use% Mounted on
overlay                      100G  <span class="token number">1</span>.8G   99G   <span class="token number">2</span>% /
tmpfs                         64M     <span class="token number">0</span>   64M   <span class="token number">0</span>% /dev
tmpfs                        <span class="token number">2</span>.8G     <span class="token number">0</span>  <span class="token number">2</span>.8G   <span class="token number">0</span>% /sys/fs/cgroup
/dev/sda1                    100G  <span class="token number">1</span>.8G   99G   <span class="token number">2</span>% /etc/hosts
shm                           64M     <span class="token number">0</span>   64M   <span class="token number">0</span>% /dev/shm
tmpfs                        <span class="token number">5</span>.3G   12K  <span class="token number">5</span>.3G   <span class="token number">1</span>% /run/secrets/kubernetes.io/serviceaccount
<span class="token number">172.16</span>.92.160:/data/k8sdata   70G  <span class="token number">8</span>.1G   62G  <span class="token number">12</span>% /usr/share/nginx/html/mysite
<span class="token number">172.16</span>.92.161:/data/dujie     70G  <span class="token number">1</span>.1G   69G   <span class="token number">2</span>% /usr/share/nginx/html/magedu
tmpfs                        <span class="token number">2</span>.8G     <span class="token number">0</span>  <span class="token number">2</span>.8G   <span class="token number">0</span>% /proc/acpi
tmpfs                        <span class="token number">2</span>.8G     <span class="token number">0</span>  <span class="token number">2</span>.8G   <span class="token number">0</span>% /proc/scsi
tmpfs                        <span class="token number">2</span>.8G     <span class="token number">0</span>  <span class="token number">2</span>.8G   <span class="token number">0</span>% /sys/firmware<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>










































<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>ab命令压测</title>
    <url>/2020/10/15/ab%E5%91%BD%E4%BB%A4%E5%8E%8B%E6%B5%8B/</url>
    <content><![CDATA[<pre class="line-numbers language-none"><code class="language-none">yum -y install httpd-tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>ab命令参数：</p>
<pre class="line-numbers language-none"><code class="language-none">-n	即requests，用于指定压力测试总共的执行次数。
-c	即concurrency，用于指定的并发数。
-t	即timelimit，等待响应的最大时间(单位：秒)。
-b	即windowsize，TCP发送&#x2F;接收的缓冲大小(单位：字节)。
-p	即postfile，发送POST请求时需要上传的文件，此外还必须设置-T参数。
-u	即putfile，发送PUT请求时需要上传的文件，此外还必须设置-T参数。
-T	即content-type，用于设置Content-Type请求头信息，例如：application&#x2F;x-www-form-urlencoded，默认值为text&#x2F;plain。
-v	即verbosity，指定打印帮助信息的冗余级别。
-w	以HTML表格形式打印结果。
-i	使用HEAD请求代替GET请求。
-x	插入字符串作为table标签的属性。
-y	插入字符串作为tr标签的属性。
-z	插入字符串作为td标签的属性。
-C	添加cookie信息，例如：&quot;Apache&#x3D;1234&quot;(可以重复该参数选项以添加多个)。
-H	添加任意的请求头，例如：&quot;Accept-Encoding: gzip&quot;，请求头将会添加在现有的多个请求头之后(可以重复该参数选项以添加多个)。
-A	添加一个基本的网络认证信息，用户名和密码之间用英文冒号隔开。
-P	添加一个基本的代理认证信息，用户名和密码之间用英文冒号隔开。
-X	指定使用的和端口号，例如:&quot;126.10.10.3:88&quot;。
-V	打印版本号并退出。
-k	使用HTTP的KeepAlive特性。
-d	不显示百分比。
-S	不显示预估和警告信息。
-g	输出结果信息到gnuplot格式的文件中。
-e	输出结果信息到CSV格式的文件中。
-r	指定接收到错误信息时不退出程序。
-h	显示用法信息，其实就是ab -help。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>ab使用：<br>模拟并发100次，总共请求10000次<br>命令模板：</p>
<pre class="line-numbers language-none"><code class="language-none">ab -c 100 -n 10000 待测试网站（建议完整路径）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>输出：</p>
<pre class="line-numbers language-none"><code class="language-none">Server Software:        nginx&#x2F;1.10.2 (服务器软件名称及版本信息)
Server Hostname:        192.168.1.106(服务器主机名)
Server Port:            80 (服务器端口)
Document Path:          &#x2F;index1.html. (供测试的URL路径)
Document Length:        3721 bytes (供测试的URL返回的文档大小)
Concurrency Level:      1000 (并发数)
Time taken for tests:   2.327 seconds (压力测试消耗的总时间)
Complete requests:      5000 (的总次数)
Failed requests:        688 (失败的请求数)
Write errors:           0 (网络连接写入错误数)
Total transferred:      17402975 bytes (传输的总数据量)
HTML transferred:       16275725 bytes (HTML文档的总数据量)
Requests per second:    2148.98 [#&#x2F;sec] (mean) (平均每秒的请求数) 这个是非常重要的参数数值，服务器的吞吐量 
Time per request:       465.338 [ms] (mean) (所有并发用户(这里是1000)都请求一次的平均时间)
Time  request:       0.247 [ms] (mean, across all concurrent requests) (单个用户请求一次的平均时间)
Transfer rate:          7304.41 [Kbytes&#x2F;sec] received 每秒获取的数据长度 (传输速率，单位：KB&#x2F;s)
...
Percentage of the requests served within a certain time (ms)
  50%    347  ## 50%的请求在347ms内返回 
  66%    401  ## 60%的请求在401ms内返回 
  75%    431
  80%    516
  90%    600
  95%    846
  98%   1571
  99%   1593
 100%   1619 (longest request)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意：<br>测试机与被测试机要分开<br>不要对线上的服务器做压力测试<br>观察测试工具ab所在机器，以及被测试的前端机的CPU、内存、网络等都不超过最高限度的75%</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7 安装svn服务器</title>
    <url>/2020/09/08/centos7%E6%90%AD%E5%BB%BAsvn%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="一、安装svn服务器"><a href="#一、安装svn服务器" class="headerlink" title="一、安装svn服务器"></a>一、安装svn服务器</h1><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@svnserver ~]</span><span class="token comment"># yum -y install subversion</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查看svn 安装位置，可以用以下命令：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@svnserver ~]</span><span class="token comment"># rpm -ql subversion</span>
<span class="token operator">/</span>etc/subversion
<span class="token operator">/</span>etc/sysconfig/svnserve
<span class="token operator">/</span>run/svnserve
<span class="token operator">/</span>usr/bin/svn
<span class="token operator">/</span>usr/bin/svnadmin
<span class="token operator">/</span>usr/bin/svndumpfilter
<span class="token operator">/</span>usr/bin/svnlook
<span class="token operator">/</span>usr/bin/svnrdump
<span class="token operator">/</span>usr/bin/svnserve
<span class="token operator">/</span>usr/bin/svnsync
<span class="token operator">/</span>usr/bin/svnversion
<span class="token operator">/</span>usr/lib/systemd/system/svnserve<span class="token punctuation">.</span>service
<span class="token operator">/</span>usr/lib/tmpfiles<span class="token punctuation">.</span>d/svnserve<span class="token punctuation">.</span>conf
<span class="token operator">/</span>usr/share/bash-completion/completions/svn
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="二、创建版本库目录（此仅为目录，为后面创建版本库提供存放位置"><a href="#二、创建版本库目录（此仅为目录，为后面创建版本库提供存放位置" class="headerlink" title="二、创建版本库目录（此仅为目录，为后面创建版本库提供存放位置"></a>二、创建版本库目录（此仅为目录，为后面创建版本库提供存放位置</h1><p>选择在var路径下创建版本库，当前处于根目录下，一次性创建如下：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@svnserver ~]</span><span class="token comment"># mkdir /var/svnrepos</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="三、创建svn-版本库"><a href="#三、创建svn-版本库" class="headerlink" title="三、创建svn 版本库"></a>三、创建svn 版本库</h1><p>在第二步建立的路径基础上，创建版本库，命令如下：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@svnserver ~]</span><span class="token comment"># svnadmin create /var/svnrepos/dujie</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>（dujie）为预期的版本库名称，可自定义<br>创建成功后，进入dujie目录下</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@svnserver ~]</span><span class="token comment"># cd /var/svnrepos/dujie/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>进入目录，可以看见如下文件信息</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@svnserver dujie]</span><span class="token comment"># ll</span>
total 8
drwxr-xr-x 2 root root  54 Aug 26 08:45 conf
drwxr-sr-x 6 root root 233 Aug 26 08:45 db
<span class="token operator">-</span>r-<span class="token operator">-</span>r-<span class="token operator">-</span>r-<span class="token operator">-</span> 1 root root   2 Aug 26 08:45 format
drwxr-xr-x 2 root root 231 Aug 26 08:45 hooks
drwxr-xr-x 2 root root  41 Aug 26 08:45 locks
<span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span> 1 root root 229 Aug 26 08:45 README<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="四、配置修改"><a href="#四、配置修改" class="headerlink" title="四、配置修改"></a>四、配置修改</h1><p>进入已经创建好的版本库目录下，也就是上面说的创建的dujie，进入conf</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@svnserver dujie]</span><span class="token comment"># cd conf/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>conf目录下，一共存放三份重要的配置文件，如下：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@svnserver conf]</span><span class="token comment"># ll</span>
total 12
<span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span> 1 root root 1094 Aug 26 08:46 authz
<span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span> 1 root root  324 Aug 26 08:46 passwd
<span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span> 1 root root 3074 Aug 26 08:48 svnserve<span class="token punctuation">.</span>conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p><strong>authz:</strong> 负责账号权限的管理，控制账号是否读写权限<br><strong>passwd：</strong> 负责账号和密码的用户名单管理<br><strong>svnserve.conf ：</strong> svn服务器配置文件</p>
</blockquote>
<ol>
<li>编辑authz 文件(注意：[&#x2F;]也是必须的)<blockquote>
<p>[&#x2F;] ：表示根目录，即&#x2F;var&#x2F;svnrepos<br>dujie &#x3D; rw; 表示于用户dujie对跟目录具有读写权限</p>
</blockquote>
</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/9fbb9e7a490b450eb5e171ad027ff2ea.png#pic_center" alt="在这里插入图片描述"></p>
<ol start="2">
<li><p>编辑passwd文件<br><img src="https://img-blog.csdnimg.cn/b8170d7202ff44618a549fb3ceb38af9.png#pic_center" alt="在这里插入图片描述"><br>如上所示，用户名为dujie，认证密码为123456</p>
</li>
<li><p>编辑svnserve.conf 文件(注意：配置的前面不能有空格，一定要定格写)<br><img src="https://img-blog.csdnimg.cn/119603fd947241298f2a2c281e257a0a.png#pic_center" alt="在这里插入图片描述"></p>
</li>
</ol>
<blockquote>
<p>anon-access &#x3D; none ：表示禁止匿名用户访问<br>auth-access &#x3D; write：表示授权用户拥有读写权限<br>password-db &#x3D; passwd：指定用户名口令文件，即passwd文件。<br>authz-db &#x3D; authz：指定权限配置文件，即authz文件。<br>realm &#x3D; &#x2F;var&#x2F;svnrepos：指定认证域，即&#x2F;var&#x2F;svnrepos目录。</p>
</blockquote>
<h1 id="五、防火墙开启（这里以iptables防火墙为例）"><a href="#五、防火墙开启（这里以iptables防火墙为例）" class="headerlink" title="五、防火墙开启（这里以iptables防火墙为例）"></a>五、防火墙开启（这里以iptables防火墙为例）</h1><p>多数情况下服务器安装完成，配置完成以后，无法连接svn服务器，均是防火墙问题【注意：如果是阿里云，腾讯云的服务器，还需要在安全组添加端口开启规则】</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">vim <span class="token operator">/</span>etc/sysconfig/iptables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>添加配置</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token operator">-</span>A INPUT <span class="token operator">-</span>p tcp <span class="token operator">-</span>m state <span class="token operator">--</span>state NEW <span class="token operator">-</span>m tcp <span class="token operator">--</span>dport 3690 <span class="token operator">-</span>j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>保存退出</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">systemctl restart iptables<span class="token punctuation">.</span>service <span class="token comment">#重启防火墙使配置生效</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="六、启动svn服务器"><a href="#六、启动svn服务器" class="headerlink" title="六、启动svn服务器"></a>六、启动svn服务器</h1><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">svnserve <span class="token operator">-</span>d <span class="token operator">-</span>r <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>svnrepos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>启动成功后，可以用ps -aux 查看服务器启动是否成功</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@svnserver conf]</span><span class="token comment"># ps -ef | grep 'svnserve'</span>
root       8604      1  0 09:36 ?        00:00:00 svnserve <span class="token operator">-</span>d <span class="token operator">-</span>r <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>svnrepos/
root       9379   8219  0 09:56 pts/0    00:00:00 grep <span class="token operator">--</span>color=auto svnserve<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1 id="七、客户端访问svn服务器"><a href="#七、客户端访问svn服务器" class="headerlink" title="七、客户端访问svn服务器"></a>七、客户端访问svn服务器</h1><p>在windows 客户端，输入地址：svn:&#x2F;&#x2F;ip地址:3690:xxxx（ip地址为linux的ip，xxxx为上面创建的版本库的名称，3690位svn默认端口）<br>弹出输入用户名和密码输入即可访问<br>或者在linux服务器输入命令测试</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">svn co svn:<span class="token operator">/</span><span class="token operator">/</span>ip地址:3690/xxxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>遇到问题小结：</strong><br><em><strong>问题1：执行svn命令：svn co svn:&#x2F;&#x2F;ip地址:3690&#x2F;xxxx报错如下</strong></em><br><img src="https://img-blog.csdnimg.cn/6110d7c116284010a640c9d621d2358f.png#pic_center" alt="在这里插入图片描述"><br>这是因为修改svnserve.conf 时，打开注释时，配置的前面有空格，应该定格写。修改完成后即可</p>
<p><em><strong>问题2：输入账号密码后，提示svn:Authorization failed 解决方法</strong></em><br>把authz文件[&#x2F;] 改为[]试试</p>
<p>mac 电脑客户端连接方式：<br>下载cornerstone svn客户端<br><img src="https://img-blog.csdnimg.cn/254c5eb10e6b488abc1d9d0c267b2214.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6791708bffcb445aa760772a4ee5dbfe.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/890804f0f2274053a22546e3fd5d0c8b.png#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>svn</category>
      </categories>
      <tags>
        <tag>svn</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>生成随机数</title>
    <url>/2019/10/10/centos7%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    <content><![CDATA[<p>1、通过系统环境变量($RANDOM)实现</p>
<pre class="line-numbers language-none"><code class="language-none">[root@i-1pbhgm8j ~]# echo $RANDOM | md5sum | cut -c 5-11
3edb8e2
urandomNum&#x3D;&#96;tr -dc &#39;a-z&#39; &lt;&#x2F;dev&#x2F;urandom | head -c 10; echo&#96;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>2、通过openssl产生随机数</p>
<pre class="line-numbers language-none"><code class="language-none">[root@i-1pbhgm8j ~]# openssl rand -base64 30
K2M6kqd&#x2F;&#x2F;nWnOcn0l+jZdQPLhojKwuiqKJmZjj5H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这里后面的数字30是产生随机数的位数</p>
<p>3、通过时间data产生随机数</p>
<pre class="line-numbers language-none"><code class="language-none">[root@i-1pbhgm8j ~]# date +%s%N
1507534201869428907<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<p>4、通过&#x2F;dev&#x2F;urandom配合chksum生成随机数</p>
<pre class="line-numbers language-none"><code class="language-none">[root@i-1pbhgm8j ~]# head &#x2F;dev&#x2F;urandom | cksum
3529852297 1731<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>5、通过UUID生成产生随机数</p>
<pre class="line-numbers language-none"><code class="language-none">[root@i-1pbhgm8j ~]# cat &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;uuid 
1a2f4db2-5ec6-46b1-8c08-f0fdf17e76eb
[root@i-1pbhgm8j ~]# cat &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;uuid 
6c2be32b-6f8c-4cdc-9f6f-224a3d966f7a
[root@i-1pbhgm8j ~]# cat &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;uuid 
4a11c9e6-0b42-4401-bad3-f492dcb28baa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>6、使用expect附带的mkpasswd生成随机数</p>
<pre class="line-numbers language-none"><code class="language-none">[root@i-1pbhgm8j ~]# yum install expect -y

[root@i-1pbhgm8j ~]# mkpasswd -l 10 -d 4 -c 2 -C 2 -s 1
y78UF&#x2F;o93b
[root@i-1pbhgm8j ~]# mkpasswd -l 10 -d 4 -c 2 -C 2 -s 1
hELs1(n297
[root@i-1pbhgm8j ~]# mkpasswd -l 10 -d 4 -c 2 -C 2 -s 1
gWC$s1239z
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>小结：<br>-l 指定密码长度<br>-d 指定密码中数字的数量<br>-c 指定密码中小写字母的数量<br>-C 指定密码中大写字母的数量<br>-s 指定密码中特殊字符的数量<br>生成1-39内的随机数</p>
<pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bash
num&#x3D;$(date +%N);
a&#x3D;&#96;expr $num % 39 &#96;
b&#x3D;&#96;expr $a + 1 &#96;
echo $b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>iptables相关规则</title>
    <url>/2020/05/13/iptables%E7%9B%B8%E5%85%B3%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h1 id="一、表与链"><a href="#一、表与链" class="headerlink" title="一、表与链"></a>一、表与链</h1><table>
<thead>
<tr>
<th>filter表</th>
<th>主要和主机自身相关，真正负责主机防火墙功能的（过滤流入流出主机的数据包）filter表示iptbales默认使用的表，这个表定义了3个链（chains）</th>
</tr>
</thead>
<tbody><tr>
<td>INPUT</td>
<td>负责过滤所有目标地址是本机地址的数据包，就是过滤进入主机的数据包</td>
</tr>
<tr>
<td>FORWARD</td>
<td>负责转发流经主机的数据包。起转发的作用。NAT模式，net.ipv4.ip_forward&#x3D;0</td>
</tr>
<tr>
<td>OUTPUT</td>
<td>处理所有源地址是本机地址的数据包，就是处理从主机发出去的数据包</td>
</tr>
</tbody></table>
<p>NAT表：</p>
<blockquote>
<p>负责网络地址转换的，即来源与目的IP地址和port的转换。 应用:和主机本身无关，一般用于局域网共享上网或者特殊的端口转换服务相 关。<br><strong>使用场景</strong>:</p>
<blockquote>
<ol>
<li>用于企业路由(zebra)或网关(iptables)，共享上网 (POSTROUTING)</li>
<li>做内部外部IP地址一对一映射(dmz)，硬件防火墙映射IP到内部服务 器，ftp服务(PREROUTING)</li>
<li>WEB，单个端口的映射，直接映射80端口(PREROUTING) 这个表定义 了3个链，nat功能相当于网络的acl控制。和网络交换机acl类似。</li>
</ol>
</blockquote>
</blockquote>
<p>OUTPUT：</p>
<blockquote>
<p>和主机放出去的数据包有关，改变主机发出数据包的目的地址。</p>
</blockquote>
<p>PREROUTING：</p>
<blockquote>
<p>在数据包到达防火墙时，进行路由判断之前执行的规则，作用是改变数据包的 目的地址、目的端口等<br>就是收信时，根据规则重写收件人的地址。 例如:把公网IP:xxx.xxx.xxx.xxx映射到局域网的xx.xx.xx.xx服务器上。 如果是web服务，可以报80转换为局域网的服务器9000端口上<br>10.0.0.61 8080(目标端口) —-nat—à 10.0.0.7 22</p>
</blockquote>
<p>POSTROUTING:</p>
<blockquote>
<p>在数据包离开防火墙时进行路由判断之后执行的规则，作用改变数据包的源地址，源端口等。<br>例如。默认笔记本和虚拟机都是局域网地址，在出网的时候被路由器将源地址改为了公网地址。<br>例如：局域网共享上网。</p>
</blockquote>
<h1 id="二、环境准备及命令"><a href="#二、环境准备及命令" class="headerlink" title="二、环境准备及命令"></a>二、环境准备及命令</h1><h3 id="1、iptables-启动和关闭的命令"><a href="#1、iptables-启动和关闭的命令" class="headerlink" title="1、iptables 启动和关闭的命令"></a>1、iptables 启动和关闭的命令</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">yum install <span class="token operator">-</span>y  iptables-services
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># rpm -ql   iptables-services</span>
<span class="token operator">/</span>etc/sysconfig/ip6tables
<span class="token operator">/</span>etc/sysconfig/iptables
<span class="token operator">/</span>usr/lib/systemd/system/ip6tables<span class="token punctuation">.</span>service
<span class="token operator">/</span>usr/lib/systemd/system/iptables<span class="token punctuation">.</span>service
防火墙相关模块 加载到内核中
modprobe ip_tables
modprobe iptable_filter
modprobe iptable_nat
modprobe ip_conntrack
modprobe ip_conntrack_ftp
modprobe ip_nat_ftp
modprobe ipt_state
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># lsmod |egrep 'filter|nat|ipt'</span>
ipt_REJECT             12541  0 
nf_reject_ipv4         13373  1 ipt_REJECT
nf_nat_ftp             12770  0 
nf_conntrack_ftp       18638  1 nf_nat_ftp
iptable_filter         12810  1 
xt_nat                 12681  0 
iptable_nat            12875  0 
nf_nat_ipv4            14115  1 iptable_nat
nf_nat                 26583  3 nf_nat_ftp<span class="token punctuation">,</span>nf_nat_ipv4<span class="token punctuation">,</span>xt_nat
nf_conntrack          137239  7 nf_nat_ftp<span class="token punctuation">,</span>nf_nat<span class="token punctuation">,</span>xt_state<span class="token punctuation">,</span>nf_nat_ipv4<span class="token punctuation">,</span>xt_conntrack<span class="token punctuation">,</span>nf_conntrack_ftp<span class="token punctuation">,</span>nf_conntrack_ipv4
ip_tables              27126  2 iptable_filter<span class="token punctuation">,</span>iptable_nat
libcrc32c              12644  3 xfs<span class="token punctuation">,</span>nf_nat<span class="token punctuation">,</span>nf_conntrack
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># systemctl stop firewalld</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># systemctl disable   firewalld</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># systemctl start iptables.service</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># systemctl enable iptables.service</span>
Created symlink <span class="token keyword">from</span>
<span class="token operator">/</span>etc/systemd/system/basic<span class="token punctuation">.</span>target<span class="token punctuation">.</span>wants/iptables<span class="token punctuation">.</span>service to
<span class="token operator">/</span>usr/lib/systemd/system/iptables<span class="token punctuation">.</span>service<span class="token punctuation">.</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -nL</span>
Chain INPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination         
DROP       icmp <span class="token operator">--</span>  0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            icmptype 8

Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination         

Chain OUTPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2、iptables命令参数"><a href="#2、iptables命令参数" class="headerlink" title="2、iptables命令参数"></a>2、iptables命令参数</h3><blockquote>
<p>-t：指定表 filter(默认) nat<br>-A：append 把规则追加到末尾<br>-I (大写字母I)：insert 把规则插入到规则的第1条 (添加拒绝类规则的时候)<br>-p：protocal 指定协议:tcp &#x2F;udp&#x2F;icmp<br>–dport：destination port 目标端口<br>–sport：source port 源端口<br>-d：dest ip address 目标ip地址<br>-s：source ip address 源ip地址<br>-i：input 数据进来的时候通过的网卡<br>-o：output 数据出去的时候通过的网卡<br>-j：jump 方法 DROP(拒绝) ACCEPT(准许) REJECT(拒绝)<br>-F：清除链中所有的规则<br>-X：清空自定义链的规则<br>-Z：清空计数器<br>-n：不要把端口解析服务名字<br>-L：显示表中的规则<br>–line-number：给每个链中的规则加上行号<br>-D：删除规则 根据规则的号码进行删除   -D INPUT 2</p>
</blockquote>
<h3 id="3、配置filter表规则"><a href="#3、配置filter表规则" class="headerlink" title="3、配置filter表规则"></a>3、配置filter表规则</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -F</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -X</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -Z</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -nL</span>
Chain INPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination         

Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination         

Chain OUTPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4、禁止访问某个端口"><a href="#4、禁止访问某个端口" class="headerlink" title="4、禁止访问某个端口"></a>4、禁止访问某个端口</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -I INPUT -p tcp --dport 22 -j DROP  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>删除规则 -D</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -D INPUT 1</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -nL</span>
Chain INPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination         

Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination         

Chain OUTPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5、禁止网段连入（禁止10-0-0-0网段-8080端口）"><a href="#5、禁止网段连入（禁止10-0-0-0网段-8080端口）" class="headerlink" title="5、禁止网段连入（禁止10.0.0.0网段 8080端口）"></a>5、禁止网段连入（禁止10.0.0.0网段 8080端口）</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#在m01已经将10.0.0.0网段的所有主机禁止8080端口连入</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -I INPUT -s 10.0.0.0/24  -p tcp --dport 8080 -j DROP     </span>
<span class="token comment">#可以看见web02已经连接不进去了</span>
<span class="token namespace">[root@web02 ~]</span><span class="token comment"># telnet 10.0.0.61 8080</span>
Trying 10<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>61<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="6、只允许指定网段连入（允许10-0-0-0网段）"><a href="#6、只允许指定网段连入（允许10-0-0-0网段）" class="headerlink" title="6、只允许指定网段连入（允许10.0.0.0网段）"></a>6、只允许指定网段连入（允许10.0.0.0网段）</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -I INPUT ! -s 10.0.0.0/24 -j DROP</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="7、指定多个端口"><a href="#7、指定多个端口" class="headerlink" title="7、指定多个端口"></a>7、指定多个端口</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -I INPUT -p tcp -m multiport ! --dport 80,443 -j DROP</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -I INPUT -p tcp  ! --dport 1024:65535 -j DROP   </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="8、匹配ICMP类型"><a href="#8、匹配ICMP类型" class="headerlink" title="8、匹配ICMP类型"></a>8、匹配ICMP类型</h3><p>ICMP(Internet Control Message Protocol)Internet控制报文协议<br>通过内核参数  控制 禁止被ping</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@m01 ~]</span><span class="token comment"># cat /etc/sysctl.conf</span>
<span class="token comment"># sysctl settings are defined through files in</span>
<span class="token comment"># /usr/lib/sysctl.d/, /run/sysctl.d/, and /etc/sysctl.d/.</span>
<span class="token comment">#</span>
<span class="token comment"># Vendors settings live in /usr/lib/sysctl.d/.</span>
<span class="token comment"># To override a whole file, create a new file with the same in</span>
<span class="token comment"># /etc/sysctl.d/ and put new settings there. To override</span>
<span class="token comment"># only specific settings, add a file with a lexically later</span>
<span class="token comment"># name in /etc/sysctl.d/ and put new settings there.</span>
<span class="token comment">#</span>
<span class="token comment"># For more information, see sysctl.conf(5) and sysctl.d(5).</span>
net<span class="token punctuation">.</span>ipv4<span class="token punctuation">.</span>icmp_echo_ignore_all = 1
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># sysctl -p</span>
net<span class="token punctuation">.</span>ipv4<span class="token punctuation">.</span>icmp_echo_ignore_all = 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过防火墙规则 控制 是否可以被ping</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#在m01防火墙规则上禁止被ping</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -I INPUT -p icmp --icmp-type 8 -j DROP</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -nL</span>
Chain INPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination         
DROP       icmp <span class="token operator">--</span>  0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            icmptype 8

Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination         

Chain OUTPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination    
<span class="token comment">#在web01上ping m01可以看到ping不通</span>
<span class="token namespace">[root@web02 ~]</span><span class="token comment"># ping 10.0.0.61</span>
PING 10<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>61 <span class="token punctuation">(</span>10<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>61<span class="token punctuation">)</span> 56<span class="token punctuation">(</span>84<span class="token punctuation">)</span> bytes of <span class="token keyword">data</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="9、匹配网络状态（TCP-x2F-IP连接状态）"><a href="#9、匹配网络状态（TCP-x2F-IP连接状态）" class="headerlink" title="9、匹配网络状态（TCP&#x2F;IP连接状态）"></a>9、匹配网络状态（TCP&#x2F;IP连接状态）</h3><blockquote>
<p>-m state –state NEW:已经或将启动新的连接 ESTABLISHED:已建立的连接 RELATED:正在启动的新连接 INVALID:非法或无法识别的 iptables -A INPUT -m state –state<br>ESTABLISHED,RELATED -j ACCEPT iptables -A OUTPUT -m state –state<br>ESTABLISHED,RELATED -j ACCEPT</p>
<p>意思是允许进入的数据包只能是刚刚我发出去的数据包的回应，ESTABLISHED：已建立的链接状态。RELATED：该数据包与本机发出的数据包有关。</p>
</blockquote>
<h3 id="10、限制并发及速率"><a href="#10、限制并发及速率" class="headerlink" title="10、限制并发及速率"></a>10、限制并发及速率</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -I INPUT -p icmp --icmp-type 8 -m limit --limit 6/min --limit-burst 5 -j ACCEPT</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -nL</span>
Chain INPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination         
ACCEPT     icmp <span class="token operator">--</span>  0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            icmptype 8 limit: avg 6/min burst 5

Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination         

Chain OUTPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination    
<span class="token comment">#-m limit --limit n/&#123;second/minute/hour&#125;;</span>
<span class="token comment">#解释：指定时间内的请求速率“n”为速率，后面为时间，分别为：秒  分  时</span>
<span class="token comment">#--limit-burst [n]</span>
<span class="token comment">#解释：在同一时间内允许通过的请求“n”为数字，不指定默认为5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="11、防火墙规则的保存与恢复"><a href="#11、防火墙规则的保存与恢复" class="headerlink" title="11、防火墙规则的保存与恢复"></a>11、防火墙规则的保存与恢复</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">root@m01 ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/iptables</span>
<span class="token comment"># sample configuration for iptables service</span>
<span class="token comment"># you can edit this manually or use system-config-firewall</span>
<span class="token comment"># please do not ask us to add additional ports/services to this default configuration</span>
<span class="token operator">*</span><span class="token keyword">filter</span>
:INPUT ACCEPT <span class="token punctuation">[</span>0:0<span class="token punctuation">]</span>
:FORWARD ACCEPT <span class="token punctuation">[</span>0:0<span class="token punctuation">]</span>
:OUTPUT ACCEPT <span class="token punctuation">[</span>0:0<span class="token punctuation">]</span>
<span class="token operator">-</span>A INPUT <span class="token operator">-</span>m state <span class="token operator">--</span>state RELATED<span class="token punctuation">,</span>ESTABLISHED <span class="token operator">-</span>j ACCEPT
<span class="token operator">-</span>A INPUT <span class="token operator">-</span>p icmp <span class="token operator">-</span>j ACCEPT
<span class="token operator">-</span>A INPUT <span class="token operator">-</span>i lo <span class="token operator">-</span>j ACCEPT
<span class="token operator">-</span>A INPUT <span class="token operator">-</span>p tcp <span class="token operator">-</span>m state <span class="token operator">--</span>state NEW <span class="token operator">-</span>m tcp <span class="token operator">--</span>dport 22 <span class="token operator">-</span>j ACCEPT
<span class="token operator">-</span>A INPUT <span class="token operator">-</span>j REJECT <span class="token operator">--</span>reject-with icmp-host-prohibited
<span class="token operator">-</span>A FORWARD <span class="token operator">-</span>j REJECT <span class="token operator">--</span>reject-with icmp-host-prohibited
COMMIT
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables-save > /etc/sysconfig/iptables</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># cat /etc/sysconfig/iptables</span>
<span class="token comment"># Generated by iptables-save v1.4.21 on Wed Jul 24 21:00:17 2019</span>
<span class="token operator">*</span><span class="token keyword">filter</span>
:INPUT ACCEPT <span class="token punctuation">[</span>276:25808<span class="token punctuation">]</span>
:FORWARD ACCEPT <span class="token punctuation">[</span>0:0<span class="token punctuation">]</span>
:OUTPUT ACCEPT <span class="token punctuation">[</span>209:23764<span class="token punctuation">]</span>
<span class="token operator">-</span>A INPUT <span class="token operator">-</span>p icmp <span class="token operator">-</span>m icmp <span class="token operator">--</span>icmp-<span class="token function">type</span> 8 <span class="token operator">-</span>m limit <span class="token operator">--</span>limit 6/min <span class="token operator">-</span>j ACCEPT
COMMIT
<span class="token comment"># Completed on Wed Jul 24 21:00:17 2019</span>
<span class="token comment"># Generated by iptables-save v1.4.21 on Wed Jul 24 21:00:17 2019</span>
<span class="token operator">*</span>nat
:PREROUTING ACCEPT <span class="token punctuation">[</span>394:32788<span class="token punctuation">]</span>
:INPUT ACCEPT <span class="token punctuation">[</span>9:616<span class="token punctuation">]</span>
:OUTPUT ACCEPT <span class="token punctuation">[</span>1:148<span class="token punctuation">]</span>
:POSTROUTING ACCEPT <span class="token punctuation">[</span>1:148<span class="token punctuation">]</span>
COMMIT
<span class="token comment"># Completed on Wed Jul 24 21:00:17 2019</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># #恢复</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># #重启防火墙</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -F</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># </span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -nL</span>
Chain INPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination         

Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination         

Chain OUTPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination    
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables-restore  &lt;/etc/sysconfig/iptables</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -nL   </span>
Chain INPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination         
ACCEPT     icmp <span class="token operator">--</span>  0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            icmptype 8 limit: avg 6/min burst 5

Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination         

Chain OUTPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="12、允许本机lo通讯规则"><a href="#12、允许本机lo通讯规则" class="headerlink" title="12、允许本机lo通讯规则"></a>12、允许本机lo通讯规则</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#允许本机回环lo接口数据流量流出与流入</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -A INPUT -i lo -j ACCEPT</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -A OUTPUT -o lo -j ACCEPT </span>
<span class="token comment"># 意思就允许本地环回接口在INPUT表的所有数据通信，-i 参数是指定接口，接口是lo，lo就是Loopback（本地环回接口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="13、配置默认规则及放行80-443-端口"><a href="#13、配置默认规则及放行80-443-端口" class="headerlink" title="13、配置默认规则及放行80  443 端口"></a>13、配置默认规则及放行80  443 端口</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -P INPUT DROP</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -P FORWARD DROP</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -P OUTPUT ACCEPT</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -A INPUT -m multiport -p tcp --dport 443,80 -j ACCEPT</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -nL</span>
Chain INPUT <span class="token punctuation">(</span>policy DROP<span class="token punctuation">)</span>
target     prot opt source               destination         
ACCEPT     tcp  <span class="token operator">--</span>  0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            tcp dpt:22
ACCEPT     all  <span class="token operator">--</span>  0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0           
ACCEPT     tcp  <span class="token operator">--</span>  0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            multiport dports 443<span class="token punctuation">,</span>80

Chain FORWARD <span class="token punctuation">(</span>policy DROP<span class="token punctuation">)</span>
target     prot opt source               destination         

Chain OUTPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination         
ACCEPT     all  <span class="token operator">--</span>  0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0  
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -A INPUT -s 10.0.0.0/24 -j ACCEPT</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -A INPUT -s 172.16.1.0/24 -j ACCEPT</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -nL</span>
Chain INPUT <span class="token punctuation">(</span>policy DROP<span class="token punctuation">)</span>
target     prot opt source               destination         
ACCEPT     tcp  <span class="token operator">--</span>  0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            tcp dpt:22
ACCEPT     all  <span class="token operator">--</span>  0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0           
ACCEPT     tcp  <span class="token operator">--</span>  0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            multiport dports 443<span class="token punctuation">,</span>80
ACCEPT     all  <span class="token operator">--</span>  10<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/24          0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0           
ACCEPT     all  <span class="token operator">--</span>  172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>1<span class="token punctuation">.</span>0/24        0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0           

Chain FORWARD <span class="token punctuation">(</span>policy DROP<span class="token punctuation">)</span>
target     prot opt source               destination         

Chain OUTPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination         
ACCEPT     all  <span class="token operator">--</span>  0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0  

<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables-save</span>
<span class="token comment"># Generated by iptables-save v1.4.21 on Wed Jul 24 21:45:21 2019</span>
<span class="token operator">*</span><span class="token keyword">filter</span>
:INPUT DROP <span class="token punctuation">[</span>0:0<span class="token punctuation">]</span>
:FORWARD DROP <span class="token punctuation">[</span>0:0<span class="token punctuation">]</span>
:OUTPUT ACCEPT <span class="token punctuation">[</span>37:6212<span class="token punctuation">]</span>
<span class="token operator">-</span>A INPUT <span class="token operator">-</span>p tcp <span class="token operator">-</span>m tcp <span class="token operator">--</span>dport 22 <span class="token operator">-</span>j ACCEPT
<span class="token operator">-</span>A INPUT <span class="token operator">-</span>i lo <span class="token operator">-</span>j ACCEPT
<span class="token operator">-</span>A INPUT <span class="token operator">-</span>p tcp <span class="token operator">-</span>m multiport <span class="token operator">--</span>dports 443<span class="token punctuation">,</span>80 <span class="token operator">-</span>j ACCEPT
<span class="token operator">-</span>A INPUT <span class="token operator">-</span>s 10<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/24 <span class="token operator">-</span>j ACCEPT
<span class="token operator">-</span>A INPUT <span class="token operator">-</span>s 172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>1<span class="token punctuation">.</span>0/24 <span class="token operator">-</span>j ACCEPT
<span class="token operator">-</span>A OUTPUT <span class="token operator">-</span>o lo <span class="token operator">-</span>j ACCEPT
COMMIT
<span class="token comment"># Completed on Wed Jul 24 21:45:21 2019</span>
<span class="token comment"># Generated by iptables-save v1.4.21 on Wed Jul 24 21:45:21 2019</span>
<span class="token operator">*</span>nat
:PREROUTING ACCEPT <span class="token punctuation">[</span>0:0<span class="token punctuation">]</span>
:INPUT ACCEPT <span class="token punctuation">[</span>0:0<span class="token punctuation">]</span>
:OUTPUT ACCEPT <span class="token punctuation">[</span>0:0<span class="token punctuation">]</span>
:POSTROUTING ACCEPT <span class="token punctuation">[</span>0:0<span class="token punctuation">]</span>
COMMIT
<span class="token comment"># Completed on Wed Jul 24 21:45:21 2019</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="二、nat设置"><a href="#二、nat设置" class="headerlink" title="二、nat设置"></a>二、nat设置</h1><h3 id="1、环境设置"><a href="#1、环境设置" class="headerlink" title="1、环境设置"></a>1、环境设置</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -P INPUT ACCEPT</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -P FORWARD ACCEPT</span>
<span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -nL</span>
Chain INPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination         
ACCEPT     tcp  <span class="token operator">--</span>  0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            tcp dpt:22
ACCEPT     all  <span class="token operator">--</span>  0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0           
ACCEPT     tcp  <span class="token operator">--</span>  0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            multiport dports 443<span class="token punctuation">,</span>80
ACCEPT     all  <span class="token operator">--</span>  10<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/24          0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0           
ACCEPT     all  <span class="token operator">--</span>  172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>1<span class="token punctuation">.</span>0/24        0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0           

Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination         

Chain OUTPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt source               destination         
ACCEPT     all  <span class="token operator">--</span>  0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0            0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/0  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2、实现把访问10-0-0-62-80的请求转发到172-16-1-7-80"><a href="#2、实现把访问10-0-0-62-80的请求转发到172-16-1-7-80" class="headerlink" title="2、实现把访问10.0.0.62:80的请求转发到172.16.1.7:80"></a>2、实现把访问10.0.0.62:80的请求转发到172.16.1.7:80</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@m01 ~]</span><span class="token comment"># iptables -A PREROUTING -t nat -d 10.0.0.62 -p tcp --dport 80 -j DNAT --to-destination 172.16.1.7:80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="3、实现172-16-1-0-x2F-24段所有主机通过124-32-54-26外网IP共享上网。"><a href="#3、实现172-16-1-0-x2F-24段所有主机通过124-32-54-26外网IP共享上网。" class="headerlink" title="3、实现172.16.1.0&#x2F;24段所有主机通过124.32.54.26外网IP共享上网。"></a>3、实现172.16.1.0&#x2F;24段所有主机通过124.32.54.26外网IP共享上网。</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">iptables  <span class="token operator">-</span>A  POSTROUTING <span class="token operator">-</span>p tcp <span class="token operator">-</span>s 172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>1<span class="token punctuation">.</span>0/24 <span class="token operator">-</span>j SNAT <span class="token operator">--</span>to-source 124<span class="token punctuation">.</span>32<span class="token punctuation">.</span>54<span class="token punctuation">.</span>26

iptables  <span class="token operator">-</span>A  POSTROUTING <span class="token operator">-</span>p tcp <span class="token operator">-</span>s 172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>1<span class="token punctuation">.</span>0/24 <span class="token operator">-</span>j SNAT <span class="token operator">--</span>to-source  MASQUERADE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>iptables</category>
      </categories>
      <tags>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes常用资源——job/cronjob</title>
    <url>/2022/07/04/k8s-job%20cronjob/</url>
    <content><![CDATA[<h1 id="k8s-job-x2F-cronjob"><a href="#k8s-job-x2F-cronjob" class="headerlink" title="k8s-job&#x2F;cronjob"></a>k8s-job&#x2F;cronjob</h1><p>1、job(初始化数据库等操作，只执行一次)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 case2-job<span class="token punctuation">]</span><span class="token comment"># cat 1.job.yaml </span>
apiVersion: batch/v1
kind: Job
metadata:
  name: job-mysql-init
  namespace: <span class="token builtin class-name">test</span>
spec:
  template:
    spec:
      containers:
      - name: job-mysql-init-container
        image: centos:7.9.2009
        command: <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">]</span>
        args: <span class="token punctuation">[</span><span class="token string">"-c"</span>, <span class="token string">"echo data init job at <span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y-%m-%d_%H-%M-%S<span class="token variable">`</span></span> >> /cache/data.log"</span><span class="token punctuation">]</span>
        volumeMounts:
        - mountPath: /cache
          name: cache-volume
      volumes:
      - name: cache-volume
        hostPath:
          path: /tmp/jobdata
      restartPolicy: Never<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2、cronjob（周期性执行任务，数据备份，同步等操作）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 case2-job<span class="token punctuation">]</span><span class="token comment"># cat 2.cronjob.yaml </span>
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cronjob-mysql-databackup
spec:
  <span class="token comment">#schedule: "30 2 * * *"</span>
  schedule: <span class="token string">"* * * * *"</span>
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: cronjob-mysql-databackup-pod
            image: centos:7.9.2009
            <span class="token comment">#imagePullPolicy: IfNotPresent</span>
            command: <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">]</span>
            args: <span class="token punctuation">[</span><span class="token string">"-c"</span>, <span class="token string">"echo mysql databackup cronjob at <span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y-%m-%d_%H-%M-%S<span class="token variable">`</span></span> >> /cache/data.log"</span><span class="token punctuation">]</span>
            volumeMounts: 
            - mountPath: /cache
              name: cache-volume
          volumes:
          - name: cache-volume
            hostPath:
              path: /tmp/cronjobdata
          restartPolicy: OnFailure<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>kubeasz -etcd v3 API版本数据备份与恢复</title>
    <url>/2022/06/24/kubeasz%20-etcd%20v3%20API%E7%89%88%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
    <content><![CDATA[<p><strong>WAL是warite ahead log(预写式日志)得缩写，顾名思义，也就是在执行真正得写操作之前先写一个日志，预写日志。<br>wal：存放预写式日志，最大得作用是记录了整个数据变化得全部历程，在etcd中，所有数据得修改在提交前，都要先写入到WAL中。</strong></p>
<h1 id="一、单机版etcd恢复数据"><a href="#一、单机版etcd恢复数据" class="headerlink" title="一、单机版etcd恢复数据"></a>一、单机版etcd恢复数据</h1><p>V3 版本备份数据(单机版)：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#备份</span>
<span class="token namespace">[root@etcd1 ~]</span><span class="token comment"># ETCDCTL_API=3 etcdctl snapshot save snapshop.db</span>
<span class="token comment">#恢复到一个指定目录</span>
<span class="token namespace">[root@etcd1 ~]</span><span class="token comment"># ETCDCTL_API=3 etcdctl snapshot restore snapshop.db --data-dir=/opt/etcd-testdir-2</span>
Deprecated: Use `etcdutl snapshot restore` instead<span class="token punctuation">.</span>

2022-05-05T20:38:13+08:00       info    snapshot/v3_snapshot<span class="token punctuation">.</span>go:251     restoring snapshot      <span class="token punctuation">&#123;</span><span class="token string">"path"</span>: <span class="token string">"snapshop.db"</span><span class="token punctuation">,</span> <span class="token string">"wal-dir"</span>: <span class="token string">"/opt/etcd-testdir-2/member/wal"</span><span class="token punctuation">,</span> <span class="token string">"data-dir"</span>: <span class="token string">"/opt/etcd-testdir-2"</span><span class="token punctuation">,</span> <span class="token string">"snap-dir"</span>: <span class="token string">"/opt/etcd-testdir-2/member/snap"</span><span class="token punctuation">,</span> <span class="token string">"stack"</span>: <span class="token string">"go.etcd.io/etcd/etcdutl/v3/snapshot.(*v3Manager).Restore\n\t/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdutl/snapshot/v3_snapshot.go:257\ngo.etcd.io/etcd/etcdutl/v3/etcdutl.SnapshotRestoreCommandFunc\n\t/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdutl/etcdutl/snapshot_command.go:147\ngo.etcd.io/etcd/etcdctl/v3/ctlv3/command.snapshotRestoreCommandFunc\n\t/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdctl/ctlv3/command/snapshot_command.go:128\ngithub.com/spf13/cobra.(*Command).execute\n\t/home/remote/sbatsche/.gvm/pkgsets/go1.16.3/global/pkg/mod/github.com/spf13/cobra@v1.1.3/command.go:856\ngithub.com/spf13/cobra.(*Command).ExecuteC\n\t/home/remote/sbatsche/.gvm/pkgsets/go1.16.3/global/pkg/mod/github.com/spf13/cobra@v1.1.3/command.go:960\ngithub.com/spf13/cobra.(*Command).Execute\n\t/home/remote/sbatsche/.gvm/pkgsets/go1.16.3/global/pkg/mod/github.com/spf13/cobra@v1.1.3/command.go:897\ngo.etcd.io/etcd/etcdctl/v3/ctlv3.Start\n\t/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdctl/ctlv3/ctl.go:107\ngo.etcd.io/etcd/etcdctl/v3/ctlv3.MustStart\n\t/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdctl/ctlv3/ctl.go:111\nmain.main\n\t/tmp/etcd-release-3.5.1/etcd/release/etcd/etcdctl/main.go:59\nruntime.main\n\t/home/remote/sbatsche/.gvm/gos/go1.16.3/src/runtime/proc.go:225"</span><span class="token punctuation">&#125;</span>
2022-05-05T20:38:13+08:00       info    membership/store<span class="token punctuation">.</span>go:141 Trimming membership information <span class="token keyword">from</span> the backend<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
2022-05-05T20:38:13+08:00       info    membership/cluster<span class="token punctuation">.</span>go:421       added member    <span class="token punctuation">&#123;</span><span class="token string">"cluster-id"</span>: <span class="token string">"cdf818194e3a8c32"</span><span class="token punctuation">,</span> <span class="token string">"local-member-id"</span>: <span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">"added-peer-id"</span>: <span class="token string">"8e9e05c52164694d"</span><span class="token punctuation">,</span> <span class="token string">"added-peer-peer-urls"</span>: <span class="token punctuation">[</span><span class="token string">"http://localhost:2380"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
2022-05-05T20:38:13+08:00       info    snapshot/v3_snapshot<span class="token punctuation">.</span>go:272     restored snapshot       <span class="token punctuation">&#123;</span><span class="token string">"path"</span>: <span class="token string">"snapshop.db"</span><span class="token punctuation">,</span> <span class="token string">"wal-dir"</span>: <span class="token string">"/opt/etcd-testdir-2/member/wal"</span><span class="token punctuation">,</span> <span class="token string">"data-dir"</span>: <span class="token string">"/opt/etcd-testdir-2"</span><span class="token punctuation">,</span> <span class="token string">"snap-dir"</span>: <span class="token string">"/opt/etcd-testdir-2/member/snap"</span><span class="token punctuation">&#125;</span>
<span class="token namespace">[root@etcd1 ~]</span><span class="token comment">#</span>
<span class="token namespace">[root@etcd1 ~]</span><span class="token comment"># vim /etc/systemd/system/</span>
basic<span class="token punctuation">.</span>target<span class="token punctuation">.</span>wants/                          default<span class="token punctuation">.</span>target                               getty<span class="token punctuation">.</span>target<span class="token punctuation">.</span>wants/                          sockets<span class="token punctuation">.</span>target<span class="token punctuation">.</span>wants/
dbus-org<span class="token punctuation">.</span>freedesktop<span class="token punctuation">.</span>NetworkManager<span class="token punctuation">.</span>service  default<span class="token punctuation">.</span>target<span class="token punctuation">.</span>wants/                        multi-user<span class="token punctuation">.</span>target<span class="token punctuation">.</span>wants/                     system-update<span class="token punctuation">.</span>target<span class="token punctuation">.</span>wants/
dbus-org<span class="token punctuation">.</span>freedesktop<span class="token punctuation">.</span>nm-dispatcher<span class="token punctuation">.</span>service   etcd<span class="token punctuation">.</span>service                                 remote-fs<span class="token punctuation">.</span>target<span class="token punctuation">.</span>wants/                      
<span class="token namespace">[root@etcd1 ~]</span><span class="token comment"># vim /etc/systemd/system/etcd.service </span>
<span class="token namespace">[root@etcd1 ~]</span><span class="token comment"># </span>
<span class="token namespace">[root@etcd1 ~]</span><span class="token comment"># cat /etc/systemd/system/etcd.service</span>
<span class="token namespace">[Unit]</span>
Description=Etcd Server
After=network<span class="token punctuation">.</span>target
After=network-online<span class="token punctuation">.</span>target
Wants=network-online<span class="token punctuation">.</span>target
Documentation=https:<span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com/coreos

<span class="token namespace">[Service]</span>
<span class="token function">Type</span>=notify
<span class="token comment">#需要将workingdir改成刚才生成的新数据目录</span>
WorkingDirectory=<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/etcd
ExecStart=<span class="token operator">/</span>usr/local/kubernetes/bin/etcd \
  <span class="token operator">--</span>name=etcd-172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>150 \
  <span class="token operator">--</span>cert-file=<span class="token operator">/</span>etc/kubernetes/ssl/etcd<span class="token punctuation">.</span>pem \
  <span class="token operator">--</span>key-file=<span class="token operator">/</span>etc/kubernetes/ssl/etcd-key<span class="token punctuation">.</span>pem \
  <span class="token operator">--</span>peer-cert-file=<span class="token operator">/</span>etc/kubernetes/ssl/etcd<span class="token punctuation">.</span>pem \
  <span class="token operator">--</span>peer-key-file=<span class="token operator">/</span>etc/kubernetes/ssl/etcd-key<span class="token punctuation">.</span>pem \
  <span class="token operator">--</span>trusted-ca-file=<span class="token operator">/</span>etc/kubernetes/ssl/ca<span class="token punctuation">.</span>pem \
  <span class="token operator">--</span>peer-trusted-ca-file=<span class="token operator">/</span>etc/kubernetes/ssl/ca<span class="token punctuation">.</span>pem \
  <span class="token operator">--</span>initial-advertise-peer-urls=https:<span class="token operator">/</span><span class="token operator">/</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>150:2380 \
  <span class="token operator">--</span>listen-peer-urls=https:<span class="token operator">/</span><span class="token operator">/</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>150:2380 \
  <span class="token operator">--</span>listen-client-urls=https:<span class="token operator">/</span><span class="token operator">/</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>150:2379<span class="token punctuation">,</span>http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:2379 \
  <span class="token operator">--</span>advertise-client-urls=https:<span class="token operator">/</span><span class="token operator">/</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>150:2379 \
  <span class="token operator">--</span>initial-cluster-token=etcd-cluster-0 \
  <span class="token operator">--</span>initial-cluster=etcd-172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>150=https:<span class="token operator">/</span><span class="token operator">/</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>150:2380<span class="token punctuation">,</span>etcd-172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>151=https:<span class="token operator">/</span><span class="token operator">/</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>151:2380<span class="token punctuation">,</span>etcd-172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>152=https:<span class="token operator">/</span><span class="token operator">/</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>152:2380 \
  <span class="token operator">--</span>initial-cluster-state=new \
  <span class="token comment">#datadir也需要修改成新生成的目录</span>
  <span class="token operator">--</span><span class="token keyword">data</span><span class="token operator">-</span><span class="token function">dir</span>=<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/etcd \
  <span class="token operator">--</span>wal-<span class="token function">dir</span>= \
  <span class="token operator">--</span>snapshot-count=50000 \
  <span class="token operator">--</span>auto-compaction-retention=1 \
  <span class="token operator">--</span>auto-compaction-mode=periodic \
  <span class="token operator">--</span>max-<span class="token function">request-bytes</span>=10485760 \
  <span class="token operator">--</span>quota-backend-bytes=8589934592
Restart=always
RestartSec=15
LimitNOFILE=65536
OOMScoreAdjust=<span class="token operator">-</span>999

<span class="token namespace">[Install]</span>
WantedBy=multi-user<span class="token punctuation">.</span>target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="二、集群etcd备份（全备）"><a href="#二、集群etcd备份（全备）" class="headerlink" title="二、集群etcd备份（全备）"></a>二、集群etcd备份（全备）</h1><ol>
<li>备份</li>
</ol>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@haproxy1 kubeasz]</span><span class="token comment"># ./ezctl  backup k8s-cluster </span>
ansible-playbook <span class="token operator">-</span>i clusters/k8s-cluster/hosts <span class="token operator">-</span>e @clusters/k8s-cluster/config<span class="token punctuation">.</span>yml playbooks/94<span class="token punctuation">.</span>backup<span class="token punctuation">.</span>yml
2022-05-07 05:59:05 INFO cluster:k8s-cluster backup begins in 5s<span class="token punctuation">,</span> press any key to abort:


PLAY <span class="token namespace">[localhost]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>

TASK <span class="token namespace">[Gathering Facts]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
ok: <span class="token namespace">[localhost]</span>

TASK <span class="token namespace">[set NODE_IPS of the etcd cluster]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
ok: <span class="token namespace">[localhost]</span>

TASK <span class="token namespace">[get etcd cluster status]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
changed: <span class="token namespace">[localhost]</span>

TASK <span class="token namespace">[debug]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
ok: <span class="token namespace">[localhost]</span> => <span class="token punctuation">&#123;</span>
    <span class="token string">"ETCD_CLUSTER_STATUS"</span>: <span class="token punctuation">&#123;</span>
        <span class="token string">"changed"</span>: true<span class="token punctuation">,</span> 
        <span class="token string">"cmd"</span>: <span class="token string">"for ip in 172.16.92.150 172.16.92.151 172.16.92.152 ;do ETCDCTL_API=3 /etc/kubeasz/bin/etcdctl --endpoints=https://\"</span><span class="token variable">$ip</span>\<span class="token string">":2379 --cacert=/etc/kubeasz/clusters/k8s-cluster/ssl/ca.pem --cert=/etc/kubeasz/clusters/k8s-cluster/ssl/etcd.pem --key=/etc/kubeasz/clusters/k8s-cluster/ssl/etcd-key.pem endpoint health; done"</span><span class="token punctuation">,</span> 
        <span class="token string">"delta"</span>: <span class="token string">"0:00:00.347998"</span><span class="token punctuation">,</span> 
        <span class="token string">"end"</span>: <span class="token string">"2022-05-07 05:59:25.515497"</span><span class="token punctuation">,</span> 
        <span class="token string">"failed"</span>: false<span class="token punctuation">,</span> 
        <span class="token string">"rc"</span>: 0<span class="token punctuation">,</span> 
        <span class="token string">"start"</span>: <span class="token string">"2022-05-07 05:59:25.167499"</span><span class="token punctuation">,</span> 
        <span class="token string">"stderr"</span>: <span class="token string">""</span><span class="token punctuation">,</span> 
        <span class="token string">"stderr_lines"</span>: <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
        <span class="token string">"stdout"</span>: <span class="token string">"https://172.16.92.150:2379 is healthy: successfully committed proposal: took = 32.036126ms\nhttps://172.16.92.151:2379 is healthy: successfully committed proposal: took = 28.272971ms\nhttps://172.16.92.152:2379 is healthy: successfully committed proposal: took = 22.756272ms"</span><span class="token punctuation">,</span> 
        <span class="token string">"stdout_lines"</span>: <span class="token punctuation">[</span>
            <span class="token string">"https://172.16.92.150:2379 is healthy: successfully committed proposal: took = 32.036126ms"</span><span class="token punctuation">,</span> 
            <span class="token string">"https://172.16.92.151:2379 is healthy: successfully committed proposal: took = 28.272971ms"</span><span class="token punctuation">,</span> 
            <span class="token string">"https://172.16.92.152:2379 is healthy: successfully committed proposal: took = 22.756272ms"</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

TASK <span class="token namespace">[get a running ectd node]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
changed: <span class="token namespace">[localhost]</span>

TASK <span class="token namespace">[debug]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
ok: <span class="token namespace">[localhost]</span> => <span class="token punctuation">&#123;</span>
    <span class="token string">"RUNNING_NODE.stdout"</span>: <span class="token string">"172.16.92.150"</span>
<span class="token punctuation">&#125;</span>

TASK <span class="token namespace">[get current time]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
changed: <span class="token namespace">[localhost]</span>

TASK <span class="token namespace">[make a backup on the etcd node]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
changed: <span class="token namespace">[localhost -> 172.16.92.150]</span>

TASK <span class="token namespace">[fetch the backup data]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
changed: <span class="token namespace">[localhost -> 172.16.92.150]</span>

TASK <span class="token namespace">[update the latest backup]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
changed: <span class="token namespace">[localhost]</span>

PLAY RECAP <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
localhost                  : ok=10   changed=6    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>备份完之后会在下面的目录存放备份文件snapshot.db ，是以时间戳命名，如果想备份指定的备份文件，只需要将时间戳文件cp成snapshot.db即可</strong></p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@haproxy1 kubeasz]</span><span class="token comment"># ll clusters/k8s-cluster/backup/</span>
总用量 8124
<span class="token operator">-</span>rw-<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">.</span> 1 root root 2768928 5月   5 20:47 snapshot_202205052047<span class="token punctuation">.</span>db
<span class="token operator">-</span>rw-<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">.</span> 1 root root 2768928 5月   7 05:59 snapshot_202205070559<span class="token punctuation">.</span>db
<span class="token operator">-</span>rw-<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">.</span> 1 root root 2768928 5月   7 05:59 snapshot<span class="token punctuation">.</span>db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>恢复<br>先删除一个pod演示恢复效果：</li>
</ol>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@haproxy1 kubeasz]</span><span class="token comment"># kubectl get pods </span>
NAME       READY   STATUS    RESTARTS   AGE
net-test   1/1     Running   0          33h
<span class="token namespace">[root@haproxy1 kubeasz]</span><span class="token comment"># kubectl delete pods net-test </span>
pod <span class="token string">"net-test"</span> deleted
<span class="token namespace">[root@haproxy1 kubeasz]</span><span class="token comment"># kubectl get pods </span>
No resources found in default namespace<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>恢复：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@haproxy1 kubeasz]</span><span class="token comment"># ./ezctl restore k8s-cluster </span>
ansible-playbook <span class="token operator">-</span>i clusters/k8s-cluster/hosts <span class="token operator">-</span>e @clusters/k8s-cluster/config<span class="token punctuation">.</span>yml playbooks/95<span class="token punctuation">.</span>restore<span class="token punctuation">.</span>yml
2022-05-07 06:04:52 INFO cluster:k8s-cluster restore begins in 5s<span class="token punctuation">,</span> press any key to abort:


PLAY <span class="token namespace">[kube_master]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>

TASK <span class="token namespace">[Gathering Facts]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
ok: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>131<span class="token punctuation">]</span>
ok: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>130<span class="token punctuation">]</span>

TASK <span class="token namespace">[stopping kube_master services]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>130<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kube-apiserver<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>131<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kube-apiserver<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>130<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kube-controller-manager<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>131<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kube-controller-manager<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>130<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kube-scheduler<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>131<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kube-scheduler<span class="token punctuation">)</span>

PLAY <span class="token namespace">[kube_master,kube_node]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>

TASK <span class="token namespace">[Gathering Facts]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
ok: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>141<span class="token punctuation">]</span>
ok: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>142<span class="token punctuation">]</span>
ok: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>140<span class="token punctuation">]</span>

TASK <span class="token namespace">[stopping kube_node services]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>130<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kubelet<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>131<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kubelet<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>140<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kubelet<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>141<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kubelet<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>142<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kubelet<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>130<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kube-proxy<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>131<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kube-proxy<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>140<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kube-proxy<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>141<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kube-proxy<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>142<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kube-proxy<span class="token punctuation">)</span>

PLAY <span class="token namespace">[etcd]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>

TASK <span class="token namespace">[Gathering Facts]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
ok: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>150<span class="token punctuation">]</span>
ok: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>152<span class="token punctuation">]</span>
ok: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>151<span class="token punctuation">]</span>

TASK <span class="token namespace">[cluster-restore : 停止ectd 服务]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>152<span class="token punctuation">]</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>151<span class="token punctuation">]</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>150<span class="token punctuation">]</span>

TASK <span class="token namespace">[cluster-restore : 清除etcd 数据目录]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>151<span class="token punctuation">]</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>152<span class="token punctuation">]</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>150<span class="token punctuation">]</span>

TASK <span class="token namespace">[cluster-restore : 生成备份目录]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
ok: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>150<span class="token punctuation">]</span>
ok: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>151<span class="token punctuation">]</span>
ok: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>152<span class="token punctuation">]</span>

TASK <span class="token namespace">[cluster-restore : 准备指定的备份etcd 数据]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>151<span class="token punctuation">]</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>152<span class="token punctuation">]</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>150<span class="token punctuation">]</span>

TASK <span class="token namespace">[cluster-restore : 清理上次备份恢复数据]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>150<span class="token punctuation">]</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>151<span class="token punctuation">]</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>152<span class="token punctuation">]</span>

TASK <span class="token namespace">[cluster-restore : etcd 数据恢复]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>150<span class="token punctuation">]</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>152<span class="token punctuation">]</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>151<span class="token punctuation">]</span>

TASK <span class="token namespace">[cluster-restore : 恢复数据至etcd 数据目录]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>150<span class="token punctuation">]</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>151<span class="token punctuation">]</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>152<span class="token punctuation">]</span>

TASK <span class="token namespace">[cluster-restore : 重启etcd 服务]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>150<span class="token punctuation">]</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>151<span class="token punctuation">]</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>152<span class="token punctuation">]</span>

TASK <span class="token namespace">[cluster-restore : 以轮询的方式等待服务同步完成]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>150<span class="token punctuation">]</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>151<span class="token punctuation">]</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>152<span class="token punctuation">]</span>

PLAY <span class="token namespace">[kube_master]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>

TASK <span class="token namespace">[starting kube_master services]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>130<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kube-apiserver<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>131<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kube-apiserver<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>130<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kube-controller-manager<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>131<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kube-controller-manager<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>130<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kube-scheduler<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>131<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kube-scheduler<span class="token punctuation">)</span>

PLAY <span class="token namespace">[kube_master,kube_node]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>

TASK <span class="token namespace">[starting kube_node services]</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>130<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kubelet<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>131<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kubelet<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>140<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kubelet<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>141<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kubelet<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>142<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kubelet<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>130<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kube-proxy<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>140<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kube-proxy<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>131<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kube-proxy<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>141<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kube-proxy<span class="token punctuation">)</span>
changed: <span class="token punctuation">[</span>172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>142<span class="token punctuation">]</span> => <span class="token punctuation">(</span>item=kube-proxy<span class="token punctuation">)</span>

PLAY RECAP <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>130              : ok=5    changed=4    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>131              : ok=5    changed=4    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>140              : ok=3    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>141              : ok=3    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>142              : ok=3    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>150              : ok=10   changed=8    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>151              : ok=10   changed=8    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
172<span class="token punctuation">.</span>16<span class="token punctuation">.</span>92<span class="token punctuation">.</span>152              : ok=10   changed=8    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查看pod已经被恢复</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@haproxy1 kubeasz]</span><span class="token comment"># kubectl get pods </span>
NAME       READY   STATUS    RESTARTS   AGE
net-test   1/1     Running   0          33h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<p>总结备份流程：<br>当etcd集群宕机数量超过集群总节点一半以上的时候（如总数3台宕机两台），就会导致整个集群宕机，后期需要重新恢复数据，恢复数据流程如下：</p>
<ol>
<li>恢复服务器系统</li>
<li>重新部署etcd集群</li>
<li>停止kube-apiserver&#x2F;controller-manager&#x2F;scheduler&#x2F;kubelet&#x2F;kube-proxy</li>
<li>停止etcd集群</li>
<li>各etcd节点恢复同一份备份数据</li>
<li>启动各节点并验证ETCD集群</li>
<li>启动kube-apiserver&#x2F;controller-manager&#x2F;scheduler&#x2F;kubelet&#x2F;kube-proxy</li>
<li>验证k8s master 状态及pod数据</li>
</ol>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>kubeasz 二进制安装k8s高可用集群</title>
    <url>/2022/06/20/kubeasz%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85k8s%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<hr>
<h2 id="一、kubeasz介绍"><a href="#一、kubeasz介绍" class="headerlink" title="一、kubeasz介绍"></a>一、kubeasz介绍</h2><p>项目致力于提供快速部署高可用k8s集群的工具, 同时也努力成为k8s实践、使用的参考书；基于二进制方式部署和利用ansible-playbook实现自动化；既提供一键安装脚本, 也可以根据安装指南分步执行安装各个组件。</p>
<h2 id="二、安装前准备"><a href="#二、安装前准备" class="headerlink" title="二、安装前准备"></a>二、安装前准备</h2><h4 id="1、集群规划"><a href="#1、集群规划" class="headerlink" title="1、集群规划"></a>1、集群规划</h4><table>
<thead>
<tr>
<th>角色</th>
<th>数量</th>
<th>描述</th>
<th>节点ip</th>
</tr>
</thead>
<tbody><tr>
<td>部署节点</td>
<td>1</td>
<td>运行ansible&#x2F;ezctl命令。建议单独部署</td>
<td>192.168.17.130</td>
</tr>
<tr>
<td>etcd节点</td>
<td>3</td>
<td>注意etcd集群需要1,3,5…奇数个节点，一般复用master节点</td>
<td>192.168.17.140、192.168.17.141、192.168.17.142</td>
</tr>
<tr>
<td>master节点</td>
<td>3</td>
<td>高可用集群至少2个，这里用三个</td>
<td>192.168.17.130、192.168.17.131、192.168.17.132</td>
</tr>
<tr>
<td>node节点</td>
<td>2</td>
<td>运行应用负载的节点，可根据需要提升机器配置&#x2F;增加节点数</td>
<td>192.168.17.150、192.168.17.151</td>
</tr>
<tr>
<td>harproxy</td>
<td>2</td>
<td>负责api-server的的负载均衡，配合keepalived实现api-server高可用</td>
<td>192.168.17.160、192.168.17.161</td>
</tr>
</tbody></table>
<p><strong>机器配置：</strong></p>
<ul>
<li>master节点：4c&#x2F;8g内存&#x2F;50g硬盘</li>
<li>worker节点：建议8c&#x2F;32g内存&#x2F;200硬盘以上<br>注意：默认配置下容器&#x2F;kubelet会占用&#x2F;var的磁盘空间，如果磁盘分区特殊，可以设置config.yml中的容器&#x2F;kubelet数据目录：<br>架构图如下，ip为上述表格内<br><img src="https://img-blog.csdnimg.cn/d7424857b14e4210ba850b2e2682a752.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN54ix5Luj56CB55qE5bCP5p2c,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">CONTAINERD_STORAGE_DIR   DOCKER_STORAGE_DIR    KUBELET_ROOT_DIR<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="2、安装环境准备"><a href="#2、安装环境准备" class="headerlink" title="2、安装环境准备"></a>2、安装环境准备</h4><ol>
<li>安装docker：在所有master和worker节点安装docker，也可以不手动安装，后面脚本会自动安装，我这里手动安装了，步骤略</li>
<li>在部署节点安装ansible及准备ssh免密钥登陆</li>
</ol>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">yum install <span class="token operator">-</span>y ansible <span class="token operator">-</span>i https:<span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com/pypi/simple
<span class="token namespace">[root@master01 harbor]</span><span class="token comment"># ansible --version</span>
<span class="token namespace">[DEPRECATION WARNING]</span>: Ansible will require Python 3<span class="token punctuation">.</span>8 or newer on the controller starting with Ansible 2<span class="token punctuation">.</span>12<span class="token punctuation">.</span> Current version: 3<span class="token punctuation">.</span>6<span class="token punctuation">.</span>8 <span class="token punctuation">(</span>default<span class="token punctuation">,</span> Nov 16 2020<span class="token punctuation">,</span> 16:55:22<span class="token punctuation">)</span> <span class="token namespace">[GCC 
4.8.5 20150623 (Red Hat 4.8.5-44)]</span><span class="token punctuation">.</span> This feature will be removed <span class="token keyword">from</span> ansible-core in version 2<span class="token punctuation">.</span>12<span class="token punctuation">.</span> Deprecation warnings can be disabled by setting deprecation_warnings=False 
in ansible<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>
ansible <span class="token namespace">[core 2.11.10]</span> 
  config file = None
  configured module search path = <span class="token punctuation">[</span><span class="token string">'/root/.ansible/plugins/modules'</span><span class="token punctuation">,</span> <span class="token string">'/usr/share/ansible/plugins/modules'</span><span class="token punctuation">]</span>
  ansible python module location = <span class="token operator">/</span>usr/local/lib/python3<span class="token punctuation">.</span>6/site-packages/ansible
  ansible collection location = <span class="token operator">/</span>root/<span class="token punctuation">.</span>ansible/collections:<span class="token operator">/</span>usr/share/ansible/collections
  executable location = <span class="token operator">/</span>usr/local/bin/ansible
  python version = 3<span class="token punctuation">.</span>6<span class="token punctuation">.</span>8 <span class="token punctuation">(</span>default<span class="token punctuation">,</span> Nov 16 2020<span class="token punctuation">,</span> 16:55:22<span class="token punctuation">)</span> <span class="token namespace">[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]</span>
  jinja version = 3<span class="token punctuation">.</span>0<span class="token punctuation">.</span>3
  libyaml = True
<span class="token comment">#生成密钥对</span>
ssh-keygen 
<span class="token comment">#安装sshpass命令用于同步公钥到各k8s服务器</span>
yum install <span class="token operator">-</span>y sshpass
<span class="token comment">#分发密钥及同步harbor证书脚本</span>
<span class="token namespace">[root@master01 ~]</span><span class="token comment"># vim copysshid.sh </span>

<span class="token comment">#!/bin/bash</span>
IP=<span class="token string">"
192.168.17.130
192.168.17.131
192.168.17.132
192.168.17.133
192.168.17.140
192.168.17.141
192.168.17.142
192.168.17.150
192.168.17.151
192.168.17.160
192.168.17.161
"</span>
<span class="token keyword">for</span> node in $<span class="token punctuation">&#123;</span>IP<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">do</span>
    sshpass <span class="token operator">-</span>p 123456 ssh-<span class="token function">copy-id</span> $<span class="token punctuation">&#123;</span>node<span class="token punctuation">&#125;</span> <span class="token operator">-</span>o StrictHostKeyChecking=no
    <span class="token keyword">if</span> <span class="token punctuation">[</span> $? <span class="token operator">-eq</span> 0 <span class="token punctuation">]</span><span class="token punctuation">;</span>then
      <span class="token function">echo</span> <span class="token string">"$&#123;node&#125; 密钥copy完成"</span>
      ssh $<span class="token punctuation">&#123;</span>node<span class="token punctuation">&#125;</span> <span class="token string">" mkdir /etc/docker/certs.d/harbor.dujie.com -p"</span>
      scp <span class="token operator">-</span>r <span class="token operator">/</span>root/harbor-install/harbor/ssl/harbor-ca<span class="token punctuation">.</span>crt $<span class="token punctuation">&#123;</span>node<span class="token punctuation">&#125;</span>:<span class="token operator">/</span>etc/docker/certs<span class="token punctuation">.</span>d/harbor<span class="token punctuation">.</span>dujie<span class="token punctuation">.</span>com/harbor-ca<span class="token punctuation">.</span>crt
      ssh $<span class="token punctuation">&#123;</span>node<span class="token punctuation">&#125;</span> <span class="token string">"echo '192.168.17.130 harbor.dujie.com' >> /etc/hosts"</span>
      scp <span class="token operator">-</span>r <span class="token operator">/</span>root/<span class="token punctuation">.</span>docker $<span class="token punctuation">&#123;</span>node<span class="token punctuation">&#125;</span>:<span class="token operator">/</span>root
    <span class="token keyword">else</span>
      <span class="token function">echo</span> <span class="token string">"$&#123;node&#125; 密钥copy失败"</span>
    fi
done
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>配置haproxy和keepalived</li>
</ol>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#在两台haproxy 主机都安装keepalived和hapoxy</span>
yum install <span class="token operator">-</span>y  keepalived
<span class="token comment">#haproxy1主机的keepavlied配置如下</span>
<span class="token namespace">[root@haproxy01 ~]</span><span class="token comment"># vim /etc/keepalived/keepalived.conf </span>

<span class="token operator">!</span> Configuration File <span class="token keyword">for</span> keepalived

global_defs <span class="token punctuation">&#123;</span>
   notification_email <span class="token punctuation">&#123;</span>
     acassen@firewall<span class="token punctuation">.</span>loc
     failover@firewall<span class="token punctuation">.</span>loc
     sysadmin@firewall<span class="token punctuation">.</span>loc
   <span class="token punctuation">&#125;</span>
   notification_email_from Alexandre<span class="token punctuation">.</span>Cassen@firewall<span class="token punctuation">.</span>loc
   smtp_server 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>200<span class="token punctuation">.</span>1
   smtp_connect_timeout 30
   router_id LVS_DEVEL
   vrrp_skip_check_adv_addr
   vrrp_strict
   vrrp_garp_interval 0
   vrrp_gna_interval 0
<span class="token punctuation">&#125;</span>

vrrp_instance VI_1<span class="token punctuation">&#123;</span>
    <span class="token comment">#主</span>
    state MASTER
    interface ens33
    virtual_router_id 51
    <span class="token comment">#权重值</span>
    priority 100
    advert_int 1
    authentication <span class="token punctuation">&#123;</span>
        auth_type PASS
        auth_pass 1111
    <span class="token punctuation">&#125;</span>
    virtual_ipaddress <span class="token punctuation">&#123;</span>
        <span class="token comment">#vip地址</span>
        192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>188 dev ens33 label ens33:0
        192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>189 dev ens33 label ens33:1
        192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>190 dev ens33 label ens33:2
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">#haproxy2主机的keepalived配置如下：</span>
<span class="token namespace">[root@haproxy02 ~]</span><span class="token comment"># vim /etc/keepalived/keepalived.conf </span>

<span class="token operator">!</span> Configuration File <span class="token keyword">for</span> keepalived

global_defs <span class="token punctuation">&#123;</span>
   notification_email <span class="token punctuation">&#123;</span>
     acassen@firewall<span class="token punctuation">.</span>loc
     failover@firewall<span class="token punctuation">.</span>loc
     sysadmin@firewall<span class="token punctuation">.</span>loc
   <span class="token punctuation">&#125;</span>
   notification_email_from Alexandre<span class="token punctuation">.</span>Cassen@firewall<span class="token punctuation">.</span>loc
   smtp_server 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>200<span class="token punctuation">.</span>1
   smtp_connect_timeout 30
   router_id LVS_DEVEL
   vrrp_skip_check_adv_addr
   vrrp_strict
   vrrp_garp_interval 0
   vrrp_gna_interval 0
<span class="token punctuation">&#125;</span>

vrrp_instance VI_1 <span class="token punctuation">&#123;</span>
    state BACKUP
    interface ens33
    virtual_router_id 51
    priority 80
    advert_int 1
    authentication <span class="token punctuation">&#123;</span>
        auth_type PASS
        auth_pass 1111
    <span class="token punctuation">&#125;</span>
    virtual_ipaddress <span class="token punctuation">&#123;</span>
        192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>188 dev ens33 label ens33:0
        192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>189 dev ens33 label ens33:1
        192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>190 dev ens33 label ens33:2
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">echo</span> <span class="token string">'net.ipv4.ip_nonlocal_bind = 1'</span> >><span class="token operator">/</span>etc/sysctl<span class="token punctuation">.</span>conf

<span class="token comment">#配置完启动keepalived，查看vip是否在haproxy1网卡上，可以进行测试，把haproxy1的keepalived</span>
<span class="token comment">#关闭，看看vip是否会自动漂移到haproxy2服务器上</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>安装haproxy，注意关闭selinux</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#两个节点都需要安装，同样的配置</span>
yum install <span class="token operator">-</span>y haproxy 
vim <span class="token operator">/</span>etc/haproxy/haproxy<span class="token punctuation">.</span>cfg
<span class="token comment">#在后面添加</span>
listen k8s_api_master_6443
    bind 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>188:6443
    mode tcp
    server  192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>130 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>130:6443 check inter 3s fall 3 rise 1
    server 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>131 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>131:6443 check inter 3s fall 3 rise 1
    server 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>132 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>132:6443 check inter 3s fall 3 rise 1

systemctl restart haproxy <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="3、正式安装"><a href="#3、正式安装" class="headerlink" title="3、正式安装"></a>3、正式安装</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">export release=3<span class="token punctuation">.</span>2<span class="token punctuation">.</span>0
wget https:<span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com/easzlab/kubeasz/releases/download/$<span class="token punctuation">&#123;</span>release<span class="token punctuation">&#125;</span><span class="token operator">/</span>ezdown
chmod <span class="token operator">+</span>x <span class="token punctuation">.</span><span class="token operator">/</span>ezdown 
<span class="token punctuation">.</span><span class="token operator">/</span>ezdown <span class="token operator">--</span>help
<span class="token punctuation">.</span><span class="token operator">/</span>ezdown <span class="token operator">-</span>D
<span class="token namespace">[root@master01 ~]</span><span class="token comment"># ll /etc/kubeasz/down/</span>
总用量 1192924
<span class="token operator">-</span>rw-<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">.</span> 1 root root 384354816 4月  13 00:51 calico_v3<span class="token punctuation">.</span>19<span class="token punctuation">.</span>3<span class="token punctuation">.</span>tar
<span class="token operator">-</span>rw-<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">.</span> 1 root root  46967296 4月  13 00:51 coredns_1<span class="token punctuation">.</span>8<span class="token punctuation">.</span>6<span class="token punctuation">.</span>tar
<span class="token operator">-</span>rw-<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">.</span> 1 root root 224458240 4月  13 00:51 dashboard_v2<span class="token punctuation">.</span>4<span class="token punctuation">.</span>0<span class="token punctuation">.</span>tar
<span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span><span class="token punctuation">.</span> 1 root root  63350495 10月  5 2021 docker-20<span class="token punctuation">.</span>10<span class="token punctuation">.</span>9<span class="token punctuation">.</span>tgz
<span class="token operator">-</span>rw-<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">.</span> 1 root root  70554112 4月  13 00:51 flannel_v0<span class="token punctuation">.</span>15<span class="token punctuation">.</span>1<span class="token punctuation">.</span>tar
<span class="token operator">-</span>rw-<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">.</span> 1 root root 106171392 4月  13 00:51 k8s-dns-node-cache_1<span class="token punctuation">.</span>21<span class="token punctuation">.</span>1<span class="token punctuation">.</span>tar
<span class="token operator">-</span>rw-<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">.</span> 1 root root 179055104 4月  13 00:52 kubeasz_3<span class="token punctuation">.</span>2<span class="token punctuation">.</span>0<span class="token punctuation">.</span>tar
<span class="token operator">-</span>rw-<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">.</span> 1 root root  34463744 4月  13 00:52 metrics-scraper_v1<span class="token punctuation">.</span>0<span class="token punctuation">.</span>7<span class="token punctuation">.</span>tar
<span class="token operator">-</span>rw-<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">.</span> 1 root root  65683968 4月  13 00:52 metrics-server_v0<span class="token punctuation">.</span>5<span class="token punctuation">.</span>2<span class="token punctuation">.</span>tar
<span class="token operator">-</span>rw-<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">.</span> 1 root root  45084160 4月  13 00:52 nfs-provisioner_v4<span class="token punctuation">.</span>0<span class="token punctuation">.</span>2<span class="token punctuation">.</span>tar
<span class="token operator">-</span>rw-<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">.</span> 1 root root    692736 4月  13 00:52 pause_3<span class="token punctuation">.</span>6<span class="token punctuation">.</span>tar
<span class="token operator">-</span>rw-<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">.</span> 1 root root    692736 4月  13 00:52 pause<span class="token punctuation">.</span>tar
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>生成hosts文件</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">cd <span class="token operator">/</span>etc/kubeasz
<span class="token punctuation">.</span><span class="token operator">/</span>ezctl  new k8s-cluster
<span class="token comment">#创建完集群后会在/etc/kubeasz/clusters/k8s-cluster下生成两个文件</span>
<span class="token namespace">[root@master01 ~]</span><span class="token comment"># ll /etc/kubeasz/clusters/k8s-cluster/hosts</span>
<span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span><span class="token punctuation">.</span> 1 root root 1716 4月  13 01:01 <span class="token operator">/</span>etc/kubeasz/clusters/k8s-cluster/hosts
<span class="token namespace">[root@master01 ~]</span><span class="token comment"># ll /etc/kubeasz/clusters/k8s-cluster/config.yml </span>
<span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span><span class="token punctuation">.</span> 1 root root 6733 4月  14 17:18 <span class="token operator">/</span>etc/kubeasz/clusters/k8s-cluster/config<span class="token punctuation">.</span>yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>编辑hosts文件：</strong><br>指定etcd节点、master节点、node节点、VIP、运行时、网络组件类型、serverIP与Pod ip范围等配置信息</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 k8s-cluster]</span><span class="token comment"># cat hosts </span>
<span class="token comment"># 'etcd' cluster should have odd member(s) (1,3,5,...)</span>
<span class="token namespace">[etcd]</span>
192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>140
192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>141
192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>142
<span class="token comment"># master node(s)</span>
<span class="token namespace">[kube_master]</span>
192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>130
192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>131
192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>132

<span class="token comment"># work node(s)</span>
<span class="token namespace">[kube_node]</span>
192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>150
192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>151


<span class="token comment"># [optional] harbor server, a private docker registry</span>
<span class="token comment"># 'NEW_INSTALL': 'true' to install a harbor server; 'false' to integrate with existed one</span>
<span class="token namespace">[harbor]</span>
<span class="token comment">#192.168.1.8 NEW_INSTALL=false</span>

<span class="token comment"># [optional] loadbalance for accessing k8s from outside</span>
<span class="token namespace">[ex_lb]</span>
192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>6 LB_ROLE=backup EX_APISERVER_VIP=192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>188 EX_APISERVER_PORT=6443
192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>7 LB_ROLE=master EX_APISERVER_VIP=192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>188 EX_APISERVER_PORT=6443

<span class="token comment"># [optional] ntp server for the cluster</span>
<span class="token namespace">[chrony]</span>
<span class="token comment">#192.168.1.1</span>

<span class="token namespace">[all:vars]</span>
<span class="token comment"># --------- Main Variables ---------------</span>
<span class="token comment"># Secure port for apiservers</span>
SECURE_PORT=<span class="token string">"6443"</span>

<span class="token comment"># Cluster container-runtime supported: docker, containerd</span>
CONTAINER_RUNTIME=<span class="token string">"docker"</span>

<span class="token comment"># Network plugins supported: calico, flannel, kube-router, cilium, kube-ovn</span>
CLUSTER_NETWORK=<span class="token string">"calico"</span>

<span class="token comment"># Service proxy mode of kube-proxy: 'iptables' or 'ipvs'</span>
PROXY_MODE=<span class="token string">"ipvs"</span>

<span class="token comment"># K8S Service CIDR, not overlap with node(host) networking</span>
SERVICE_CIDR=<span class="token string">"10.100.0.0/16"</span>

<span class="token comment"># Cluster CIDR (Pod CIDR), not overlap with node(host) networking</span>
CLUSTER_CIDR=<span class="token string">"10.200.0.0/16"</span>

<span class="token comment"># NodePort Range</span>
NODE_PORT_RANGE=<span class="token string">"30000-65000"</span>

<span class="token comment"># Cluster DNS Domain</span>
CLUSTER_DNS_DOMAIN=<span class="token string">"clusterdujie.local"</span>

<span class="token comment"># -------- Additional Variables (don't change the default value right now) ---</span>
<span class="token comment"># Binaries Directory</span>
bin_dir=<span class="token string">"/usr/local/bin"</span>

<span class="token comment"># Deploy Directory (kubeasz workspace)</span>
base_dir=<span class="token string">"/etc/kubeasz"</span>

<span class="token comment"># Directory for a specific cluster</span>
cluster_dir=<span class="token string">"&#123;&#123; base_dir &#125;&#125;/clusters/k8s-cluster"</span>

<span class="token comment"># CA and other components cert/key Directory</span>
ca_dir=<span class="token string">"/etc/kubernetes/ssl"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>编辑config文件</strong></p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 k8s-cluster]</span><span class="token comment"># cat config.yml </span>
<span class="token comment">############################</span>
<span class="token comment"># prepare</span>
<span class="token comment">############################</span>
<span class="token comment"># 可选离线安装系统软件包 (offline|online)</span>
INSTALL_SOURCE: <span class="token string">"online"</span>

<span class="token comment"># 可选进行系统安全加固 github.com/dev-sec/ansible-collection-hardening</span>
OS_HARDEN: false

<span class="token comment"># 设置时间源服务器【重要：集群内机器时间必须同步】</span>
ntp_servers:
  <span class="token operator">-</span> <span class="token string">"ntp1.aliyun.com"</span>
  <span class="token operator">-</span> <span class="token string">"time1.cloud.tencent.com"</span>
  <span class="token operator">-</span> <span class="token string">"0.cn.pool.ntp.org"</span>

<span class="token comment"># 设置允许内部时间同步的网络段，比如"10.0.0.0/8"，默认全部允许</span>
local_network: <span class="token string">"0.0.0.0/0"</span>


<span class="token comment">############################</span>
<span class="token comment"># role:deploy</span>
<span class="token comment">############################</span>
<span class="token comment"># default: ca will expire in 100 years</span>
<span class="token comment"># default: certs issued by the ca will expire in 50 years</span>
CA_EXPIRY: <span class="token string">"876000h"</span>
CERT_EXPIRY: <span class="token string">"876000h"</span>

<span class="token comment"># kubeconfig 配置参数</span>
CLUSTER_NAME: <span class="token string">"cluster1"</span>
CONTEXT_NAME: <span class="token string">"context-&#123;&#123; CLUSTER_NAME &#125;&#125;"</span>

<span class="token comment"># k8s version</span>
K8S_VER: <span class="token string">"1.23.1"</span>

<span class="token comment">############################</span>
<span class="token comment"># role:etcd</span>
<span class="token comment">############################</span>
<span class="token comment"># 设置不同的wal目录，可以避免磁盘io竞争，提高性能</span>
ETCD_DATA_DIR: <span class="token string">"/var/lib/etcd"</span>
ETCD_WAL_DIR: <span class="token string">""</span>


<span class="token comment">############################</span>
<span class="token comment"># role:runtime [containerd,docker]</span>
<span class="token comment">############################</span>
<span class="token comment"># ------------------------------------------- containerd</span>
<span class="token comment"># [.]启用容器仓库镜像</span>
ENABLE_MIRROR_REGISTRY: true

<span class="token comment"># [containerd]基础容器镜像</span>
SANDBOX_IMAGE: <span class="token string">"easzlab/pause:3.6"</span>

<span class="token comment"># [containerd]容器持久化存储目录</span>
CONTAINERD_STORAGE_DIR: <span class="token string">"/var/lib/containerd"</span>

<span class="token comment"># ------------------------------------------- docker</span>
<span class="token comment"># [docker]容器存储目录</span>
DOCKER_STORAGE_DIR: <span class="token string">"/var/lib/docker"</span>

<span class="token comment"># [docker]开启Restful API</span>
ENABLE_REMOTE_API: false

<span class="token comment"># [docker]信任的HTTP仓库</span>
INSECURE_REG: <span class="token string">'["127.0.0.1/8","192.168.17.130"]'</span>


<span class="token comment">############################</span>
<span class="token comment"># role:kube-master</span>
<span class="token comment">############################</span>
<span class="token comment"># k8s 集群 master 节点证书配置，可以添加多个ip和域名（比如增加公网ip和域名）</span>
MASTER_CERT_HOSTS:
  <span class="token operator">-</span> <span class="token string">"192.168.17.188"</span>
  <span class="token operator">-</span> <span class="token string">"k8s.test.io"</span>
  <span class="token comment">#- "www.test.com"</span>

<span class="token comment"># node 节点上 pod 网段掩码长度（决定每个节点最多能分配的pod ip地址）</span>
<span class="token comment"># 如果flannel 使用 --kube-subnet-mgr 参数，那么它将读取该设置为每个节点分配pod网段</span>
<span class="token comment"># https://github.com/coreos/flannel/issues/847</span>
NODE_CIDR_LEN: 24


<span class="token comment">############################</span>
<span class="token comment"># role:kube-node</span>
<span class="token comment">############################</span>
<span class="token comment"># Kubelet 根目录</span>
KUBELET_ROOT_DIR: <span class="token string">"/var/lib/kubelet"</span>

<span class="token comment"># node节点最大pod 数</span>
MAX_PODS: 500

<span class="token comment"># 配置为kube组件（kubelet,kube-proxy,dockerd等）预留的资源量</span>
<span class="token comment"># 数值设置详见templates/kubelet-config.yaml.j2</span>
KUBE_RESERVED_ENABLED: <span class="token string">"no"</span>

<span class="token comment"># k8s 官方不建议草率开启 system-reserved, 除非你基于长期监控，了解系统的资源占用状况；</span>
<span class="token comment"># 并且随着系统运行时间，需要适当增加资源预留，数值设置详见templates/kubelet-config.yaml.j2</span>
<span class="token comment"># 系统预留设置基于 4c/8g 虚机，最小化安装系统服务，如果使用高性能物理机可以适当增加预留</span>
<span class="token comment"># 另外，集群安装时候apiserver等资源占用会短时较大，建议至少预留1g内存</span>
SYS_RESERVED_ENABLED: <span class="token string">"no"</span>

<span class="token comment"># haproxy balance mode</span>
BALANCE_ALG: <span class="token string">"roundrobin"</span>


<span class="token comment">############################</span>
<span class="token comment"># role:network [flannel,calico,cilium,kube-ovn,kube-router]</span>
<span class="token comment">############################</span>
<span class="token comment"># ------------------------------------------- flannel</span>
<span class="token comment"># [flannel]设置flannel 后端"host-gw","vxlan"等</span>
FLANNEL_BACKEND: <span class="token string">"vxlan"</span>
DIRECT_ROUTING: false

<span class="token comment"># [flannel] flanneld_image: "quay.io/coreos/flannel:v0.10.0-amd64"</span>
flannelVer: <span class="token string">"v0.15.1"</span>
flanneld_image: <span class="token string">"easzlab/flannel:&#123;&#123; flannelVer &#125;&#125;"</span>

<span class="token comment"># [flannel]离线镜像tar包</span>
flannel_offline: <span class="token string">"flannel_&#123;&#123; flannelVer &#125;&#125;.tar"</span>

<span class="token comment"># ------------------------------------------- calico</span>
<span class="token comment"># [calico]设置 CALICO_IPV4POOL_IPIP=“off”,可以提高网络性能，条件限制详见 docs/setup/calico.md</span>
CALICO_IPV4POOL_IPIP: <span class="token string">"Always"</span>

<span class="token comment"># [calico]设置 calico-node使用的host IP，bgp邻居通过该地址建立，可手工指定也可以自动发现</span>
IP_AUTODETECTION_METHOD: <span class="token string">"can-reach=&#123;&#123; groups['kube_master'][0] &#125;&#125;"</span>

<span class="token comment"># [calico]设置calico 网络 backend: brid, vxlan, none</span>
CALICO_NETWORKING_BACKEND: <span class="token string">"brid"</span>

<span class="token comment"># [calico]更新支持calico 版本: [v3.3.x] [v3.4.x] [v3.8.x] [v3.15.x]</span>
calico_ver: <span class="token string">"v3.19.3"</span>

<span class="token comment"># [calico]calico 主版本</span>
calico_ver_main: <span class="token string">"&#123;&#123; calico_ver.split('.')[0] &#125;&#125;.&#123;&#123; calico_ver.split('.')[1] &#125;&#125;"</span>

<span class="token comment"># [calico]离线镜像tar包</span>
calico_offline: <span class="token string">"calico_&#123;&#123; calico_ver &#125;&#125;.tar"</span>

<span class="token comment"># ------------------------------------------- cilium</span>
<span class="token comment"># [cilium]CILIUM_ETCD_OPERATOR 创建的 etcd 集群节点数 1,3,5,7...</span>
ETCD_CLUSTER_SIZE: 1

<span class="token comment"># [cilium]镜像版本</span>
cilium_ver: <span class="token string">"v1.4.1"</span>

<span class="token comment"># [cilium]离线镜像tar包</span>
cilium_offline: <span class="token string">"cilium_&#123;&#123; cilium_ver &#125;&#125;.tar"</span>

<span class="token comment"># ------------------------------------------- kube-ovn</span>
<span class="token comment"># [kube-ovn]选择 OVN DB and OVN Control Plane 节点，默认为第一个master节点</span>
OVN_DB_NODE: <span class="token string">"&#123;&#123; groups['kube_master'][0] &#125;&#125;"</span>

<span class="token comment"># [kube-ovn]离线镜像tar包</span>
kube_ovn_ver: <span class="token string">"v1.5.3"</span>
kube_ovn_offline: <span class="token string">"kube_ovn_&#123;&#123; kube_ovn_ver &#125;&#125;.tar"</span>

<span class="token comment"># ------------------------------------------- kube-router</span>
<span class="token comment"># [kube-router]公有云上存在限制，一般需要始终开启 ipinip；自有环境可以设置为 "subnet"</span>
OVERLAY_TYPE: <span class="token string">"full"</span>

<span class="token comment"># [kube-router]NetworkPolicy 支持开关</span>
FIREWALL_ENABLE: <span class="token string">"true"</span>

<span class="token comment"># [kube-router]kube-router 镜像版本</span>
kube_router_ver: <span class="token string">"v0.3.1"</span>
busybox_ver: <span class="token string">"1.28.4"</span>

<span class="token comment"># [kube-router]kube-router 离线镜像tar包</span>
kuberouter_offline: <span class="token string">"kube-router_&#123;&#123; kube_router_ver &#125;&#125;.tar"</span>
busybox_offline: <span class="token string">"busybox_&#123;&#123; busybox_ver &#125;&#125;.tar"</span>


<span class="token comment">############################</span>
<span class="token comment"># role:cluster-addon</span>
<span class="token comment">############################</span>
<span class="token comment"># coredns 自动安装</span>
dns_install: <span class="token string">"no"</span>
corednsVer: <span class="token string">"1.8.6"</span>
ENABLE_LOCAL_DNS_CACHE: false
dnsNodeCacheVer: <span class="token string">"1.21.1"</span>
<span class="token comment"># 设置 local dns cache 地址</span>
LOCAL_DNS_CACHE: <span class="token string">"169.254.20.10"</span>

<span class="token comment"># metric server 自动安装</span>
metricsserver_install: <span class="token string">"no"</span>
metricsVer: <span class="token string">"v0.5.2"</span>

<span class="token comment"># dashboard 自动安装</span>
dashboard_install: <span class="token string">"no"</span>
dashboardVer: <span class="token string">"v2.4.0"</span>
dashboardMetricsScraperVer: <span class="token string">"v1.0.7"</span>

<span class="token comment"># ingress 自动安装</span>
ingress_install: <span class="token string">"no"</span>
ingress_backend: <span class="token string">"traefik"</span>
traefik_chart_ver: <span class="token string">"10.3.0"</span>

<span class="token comment"># prometheus 自动安装</span>
prom_install: <span class="token string">"no"</span>
prom_namespace: <span class="token string">"monitor"</span>
prom_chart_ver: <span class="token string">"12.10.6"</span>

<span class="token comment"># nfs-provisioner 自动安装</span>
nfs_provisioner_install: <span class="token string">"no"</span>
nfs_provisioner_namespace: <span class="token string">"kube-system"</span>
nfs_provisioner_ver: <span class="token string">"v4.0.2"</span>
nfs_storage_class: <span class="token string">"managed-nfs-storage"</span>
nfs_server: <span class="token string">"192.168.1.10"</span>
nfs_path: <span class="token string">"/data/nfs"</span>

<span class="token comment">############################</span>
<span class="token comment"># role:harbor</span>
<span class="token comment">############################</span>
<span class="token comment"># harbor version，完整版本号</span>
HARBOR_VER: <span class="token string">"v2.1.3"</span>
HARBOR_DOMAIN: <span class="token string">"harbor.yourdomain.com"</span>
HARBOR_TLS_PORT: 8443

<span class="token comment"># if set 'false', you need to put certs named harbor.pem and harbor-key.pem in directory 'down'</span>
HARBOR_SELF_SIGNED_CERT: true

<span class="token comment"># install extra component</span>
HARBOR_WITH_NOTARY: false
HARBOR_WITH_TRIVY: false
HARBOR_WITH_CLAIR: false
HARBOR_WITH_CHARTMUSEUM: true
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="三、部署k8s集群"><a href="#三、部署k8s集群" class="headerlink" title="三、部署k8s集群"></a>三、部署k8s集群</h3><p>通过ansible脚本初始化环境及部署k8s高可用集群</p>
<h5 id="1、环境初始化"><a href="#1、环境初始化" class="headerlink" title="1、环境初始化"></a>1、环境初始化</h5><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 kubeasz]</span><span class="token comment"># ./ezctl help setup</span>
Usage: ezctl setup &lt;cluster> &lt;step>
available steps:
    01  prepare            to prepare CA/certs &amp; kubeconfig &amp; other system settings 
    02  etcd               to setup the etcd cluster
    03  container-runtime  to setup the container runtime<span class="token punctuation">(</span>docker or containerd<span class="token punctuation">)</span>
    04  kube-master        to setup the master nodes
    05  kube-node          to setup the worker nodes
    06  network            to setup the network plugin
    07  cluster-addon      to setup other useful plugins
    90  all                to run 01~07 all at once
    10  ex-lb              to install external loadbalance <span class="token keyword">for</span> accessing k8s <span class="token keyword">from</span> outside
    11  harbor             to install a new harbor server or to integrate with an existed one

examples: <span class="token punctuation">.</span><span class="token operator">/</span>ezctl setup test-k8s 01  <span class="token punctuation">(</span>or <span class="token punctuation">.</span><span class="token operator">/</span>ezctl setup test-k8s prepare<span class="token punctuation">)</span>
	  <span class="token punctuation">.</span><span class="token operator">/</span>ezctl setup test-k8s 02  <span class="token punctuation">(</span>or <span class="token punctuation">.</span><span class="token operator">/</span>ezctl setup test-k8s etcd<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token operator">/</span>ezctl setup test-k8s all
          <span class="token punctuation">.</span><span class="token operator">/</span>ezctl setup test-k8s 04 <span class="token operator">-</span>t restart_master

<span class="token comment">#准备CA和基础系统设置</span>
<span class="token namespace">[root@master01 kubeasz]</span><span class="token comment"># ./ezctl setup k8s-cluster 01 </span>
<span class="token comment">#如果遇到提示ansible 版本问题，将python软连接修改成python2版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="2、部署etcd集群"><a href="#2、部署etcd集群" class="headerlink" title="2、部署etcd集群"></a>2、部署etcd集群</h5><p>可更改启动脚本路径及版本等自定义配置</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">.</span><span class="token operator">/</span>ezctl setup k8s-cluster 02<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装完成后到etcd服务器查看2379服务是否启动正常</p>
<h5 id="3、部署docker"><a href="#3、部署docker" class="headerlink" title="3、部署docker"></a>3、部署docker</h5><p>在master和node节点都需要安装docker，我这里已经都手动安装了，可以略此步，如果没有部署则执行03 脚本</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">.</span><span class="token operator">/</span>ezctl setup k8s-cluster 03<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h5 id="4、部署master"><a href="#4、部署master" class="headerlink" title="4、部署master"></a>4、部署master</h5><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">.</span><span class="token operator">/</span>ezctl setup k8s-cluster 04
<span class="token comment">#完成后查看master是否已经部署到集群中</span>
<span class="token namespace">[root@master01 kubeasz]</span><span class="token comment"># kubectl get nodes </span>
NAME             STATUS                        ROLES    AGE   VERSION
192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>130   Ready<span class="token punctuation">,</span>SchedulingDisabled   master   28h   v1<span class="token punctuation">.</span>23<span class="token punctuation">.</span>1
192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>131   Ready<span class="token punctuation">,</span>SchedulingDisabled   master   28h   v1<span class="token punctuation">.</span>23<span class="token punctuation">.</span>1
192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>132   Ready<span class="token punctuation">,</span>SchedulingDisabled   master   28h   v1<span class="token punctuation">.</span>23<span class="token punctuation">.</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="5、部署node"><a href="#5、部署node" class="headerlink" title="5、部署node"></a>5、部署node</h5><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">.</span><span class="token operator">/</span>ezctl setup k8s-cluster 05
<span class="token comment">#完成后查看node是否已经部署到集群中</span>
<span class="token namespace">[root@master01 ~]</span><span class="token comment"># kubectl get nodes</span>
NAME             STATUS                        ROLES    AGE   VERSION
192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>130   Ready<span class="token punctuation">,</span>SchedulingDisabled   master   28h   v1<span class="token punctuation">.</span>23<span class="token punctuation">.</span>1
192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>131   Ready<span class="token punctuation">,</span>SchedulingDisabled   master   28h   v1<span class="token punctuation">.</span>23<span class="token punctuation">.</span>1
192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>132   Ready<span class="token punctuation">,</span>SchedulingDisabled   master   28h   v1<span class="token punctuation">.</span>23<span class="token punctuation">.</span>1
192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>150   Ready                      node     28h   v1<span class="token punctuation">.</span>23<span class="token punctuation">.</span>1
192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>151   Ready                      node     28h   v1<span class="token punctuation">.</span>23<span class="token punctuation">.</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="6、部署calico"><a href="#6、部署calico" class="headerlink" title="6、部署calico"></a>6、部署calico</h5><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">.</span><span class="token operator">/</span>ezctl setup k8s-cluster 06<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>执行操作6之后简单的k8s集群已经部署好，后续将持续更新部署coredns,prometheus等组件<br>如果上面操作有误，可以删除集群重新执行</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">root@k8sm1:<span class="token operator">/</span>etc/kubeasz<span class="token comment"># ./ezctl destroy k8s-cluster1</span>
root@k8sm1:<span class="token operator">/</span>etc/kubeasz<span class="token comment"># ansible-playbook -i clusters/k8s-cluster1/hosts -e @clusters/k8s-cluster1/config.yml playbooks/99.clean.yml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetesHPA使用及测试</title>
    <url>/2022/07/05/kubernetes%20HPA%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="一、安装metrics-server"><a href="#一、安装metrics-server" class="headerlink" title="一、安装metrics server"></a>一、安装metrics server</h1><p>Metrics Server是Kubernetes内置的容器资源指标来源。<br>Metrics Server从node节点上的Kubelet收集资源指标,并通过Metrics API在 Kubernetes apiserver中公开指标数据,以供Horizontal Pod Autoscaler和Vertical Pod Autoscaler使用,也可以通过访问kubectl top node&#x2F;pod查看指标数据。<img src="/images/a3e96f87611e480084feaa655ab276f3.png" alt="image"><br>使用Metrics-Server监控node和pod计算资源使用情况，并提供给第三方使用<br>下载地址：<br><a href="https://github.com/kubernetes-sigs/metrics-server/releases">gituhub地址</a><br><img src="/images/8c8ea20d5edc45929afa2321bfd509b3.png" alt="image"><br>修改资源定义文件</p>
<pre class="line-numbers language-none"><code class="language-none">root@master:~&#x2F;.kube# vim components.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改镜像位置:</p>
<pre class="line-numbers language-none"><code class="language-none">image: k8s.gcr.io&#x2F;metrics-server&#x2F;metrics-server:v0.6.1
修改为：
registry.cn-hangzhou.aliyuncs.com&#x2F;liangxiaohui&#x2F;metrics-server:0.6.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>部署：</p>
<pre class="line-numbers language-none"><code class="language-none">kubectl apply -f components.yaml
serviceaccount&#x2F;metrics-server created
clusterrole.rbac.authorization.k8s.io&#x2F;system:aggregated-metrics-reader created
clusterrole.rbac.authorization.k8s.io&#x2F;system:metrics-server created
rolebinding.rbac.authorization.k8s.io&#x2F;metrics-server-auth-reader created
clusterrolebinding.rbac.authorization.k8s.io&#x2F;metrics-server:system:auth-delegator created
clusterrolebinding.rbac.authorization.k8s.io&#x2F;system:metrics-server created
service&#x2F;metrics-server created
deployment.apps&#x2F;metrics-server created
apiservice.apiregistration.k8s.io&#x2F;v1beta1.metrics.k8s.io created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>验证：</p>
<pre class="line-numbers language-none"><code class="language-none">root@deploy:~&#x2F;yaml# kubectl get pods -n kube-system 
NAME                                       READY   STATUS    RESTARTS       AGE
calico-kube-controllers-7ff47c8649-mnwjh   1&#x2F;1     Running   31 (69m ago)   21d
calico-node-8pqgz                          1&#x2F;1     Running   21 (69m ago)   21d
calico-node-bqbj8                          1&#x2F;1     Running   21 (69m ago)   21d
calico-node-zjrwp                          1&#x2F;1     Running   21 (69m ago)   21d
coredns-778797657-zct55                    1&#x2F;1     Running   18 (69m ago)   21d
coredns-778797657-zlgfg                    1&#x2F;1     Running   14 (69m ago)   21d
metrics-server-597c6f68ff-68hpv            1&#x2F;1     Running   0              63s
root@deploy:~&#x2F;yaml# kubectl top nodes
NAME            CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%   
192.168.100.2   76m          3%     1073Mi          64%       
192.168.100.5   141m         7%     1543Mi          20%       
192.168.100.6   50m          2%     652Mi           8%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>验证：查看可以采集pods和nodes节点资源</p>
<pre class="line-numbers language-none"><code class="language-none">root@deploy:~&#x2F;yaml# kubectl top pod -n test
NAME                                         CPU(cores)   MEMORY(bytes)   
dubbo-consumer-deployment-b55c7cdff-k8lm7    1m           3Mi 
dubbo-provider-deployment-5cc994c8b4-sd72z   1m           6Mi 
dubboadmin-deployment-d98765c7-mwt5v         71m          717Mi 
zookeeper1-654c4f44c-9cbqb                   1m           80Mi 
zookeeper2-645fdbd686-rmwrl                  2m           81Mi
zookeeper3-b879d8d8f-prhmb                   2m           74Mi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="二、HPA自动伸缩"><a href="#二、HPA自动伸缩" class="headerlink" title="二、HPA自动伸缩"></a>二、HPA自动伸缩</h1><p>HorizontalPodAutoscaler（简称HPA）自动更新工作负载资源（例如Deployment或者StatefulSet），基于pod资源利用率横向调整pod副本数量。目的是自动扩缩工作负载以满足需求。</p>
<p>根据当前pod的负载，动态调整pod副本数量，业务高峰期自动扩容pod的副本数以尽快相应pod的请求。</p>
<p>水平扩缩意味着对增加的负载的响应是部署更多的Pods。这与“垂直（Vertical）”扩缩不同，对于Kubernetes，垂直扩缩意味着将更多资源（例如：内存或CPU）分配给已经为工作负载运行的Pod。</p>
<p>如果负载减少，并且Pod的数量高于配置的最小值， HorizontalPodAutoscaler会指示工作负载资源（Deployment、StatefulSet或其他类似资源）缩减。</p>
<p><strong>相关的其他动态伸缩控制器类型</strong></p>
<blockquote>
<p>垂直pod自动缩放器(VPA)：基于pod资源利用率，调整对单个pod的最大资源限制，不能与HPA同时使用<br>       集群伸缩(Cluster Autoscaler,CA)：基于集群中node资源使用情况，动态伸缩node节点，从而保证有CPU和内存资源用于创建pod。</p>
</blockquote>
<p> <strong>HPA控制器简介：</strong></p>
<blockquote>
<p> Horizontal Pod Autoscaling (HPA)控制器，根据预定义好的阈值及pod当前的资源利用率，自动控制在k8s集群中运行的pod数量(自动弹性水平自动伸缩).</p>
</blockquote>
<p><strong>HPA重要参数：</strong></p>
<blockquote>
<pre><code> 使用kube-controller-manager --help|grep &lt;options&gt;,进行查询
</code></pre>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">##默认每隔15s，可以通过此选项修改查询metrics的资源使用
--horizontal-pod-autoscaler-sync-period

#缩容间隔周期，默认5分钟。
--horizontal-pod-autoscaler-downscale-stabilization

#HPA控制器同步pod副本数的间隔周期
--horizontal-pod-autoscaler-sync-period

#初始化延迟时间，在此时间内pod的CPU资源指标将不会生效，默认为5分钟。
--horizontal-pod-autoscaler-cpu-initialization-period

#用于设置pod准备时间，在此时间内的pod统统被认为未就绪及不采集数据,默认为30秒。
--horizontal-pod-autoscaler-initial-readiness-delay

#HPA控制器能容忍的数据差异(浮点数，默认为0.1)，即新的指标要与当前的阈值差异在0.1或以上，即要大于1+0.1&#x3D;1.1，或小于1-0.1&#x3D;0.9，比如阈值为CPU利用率50%,当前为80%,那么80&#x2F;50&#x3D;1.6 &gt; 1.1则会触发扩容，反之会缩容。
--horizontal-pod-autoscaler-tolerance

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>即触发条件：avg(CurrentPodsConsumption) &#x2F; Target &gt;1.1 或 &lt;0.9&#x3D;把N个pod的数据相加后根据pod的数量计算出平均数除以阈值,大于1.1就扩容，小于0.9就缩容。<br> 计算公式：TargetNumOfPods &#x3D; ceil(sum(CurrentPodsCPUUtilization) &#x2F; Target) #ceil是一个向上取整的目的pod整数。</p>
</blockquote>
<pre><code>指标数据需要部署metrics-server，即HPA使用metrics-server作为数据源。
https://github.com/kubernetes-sigs/metrics-server
</code></pre>
<blockquote>
<p>在k8s 1.1引入HPA控制器，早期使用Heapster组件采集pod指标数据，在k8s 1.11版本开始使用Metrices Server完成数据采集，然后将采集到的数据通过API（Aggregated API，汇总API），例如metrics.k8s.io、custom.metrics.k8s.io、external.metrics.k8s.io，然后再把数据提供给HPA控制器进行查询，以实现基于某个资源利用率对pod进行扩缩容的目的。</p>
</blockquote>
<h2 id="根据cpu利用率伸缩"><a href="#根据cpu利用率伸缩" class="headerlink" title="根据cpu利用率伸缩"></a>根据cpu利用率伸缩</h2><p>创建deployment</p>
<pre class="line-numbers language-none"><code class="language-none">apiVersion: apps&#x2F;v1
kind: Deployment
metadata:
  labels:
    app: nginx
  name: nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - image: nginx
        name: nginx
        imagePullPolicy: IfNotPresent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建hpa</p>
<pre class="line-numbers language-none"><code class="language-none">[root@master10 hpa]# kubectl autoscale deployment nginx --max&#x3D;5 --min&#x3D;2 --cpu-percent&#x3D;80 --dry-run&#x3D;client -o yaml &gt; hpa.yaml

[root@master10 hpa]# vim hpa.yaml
apiVersion: autoscaling&#x2F;v1
kind: HorizontalPodAutoscaler
metadata:
  creationTimestamp: null
  name: nginx
spec:
  maxReplicas: 5
  minReplicas: 2
  scaleTargetRef:
    apiVersion: apps&#x2F;v1
    kind: Deployment
    name: nginx
  targetCPUUtilizationPercentage: 80
status:
  currentReplicas: 0
  desiredReplicas: 0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>要想看到HPA的TARGETS值必须满足2个条件：</p>
<ol>
<li>安装metric server</li>
<li>为pod设定资源限制。</li>
</ol>
<p> 配置deployment 限制cpu和内存<br> 添加resource资源限制</p>
<pre class="line-numbers language-none"><code class="language-none">kubectl edit deployments.apps nginx

    spec:
      containers:
      - image: nginx
        imagePullPolicy: IfNotPresent
        name: nginx
        resources:
          limits:
            memory: &quot;200m&quot;
            cpu: &quot;100m&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改后，自动创建两个新的pod来替换旧的pod资源限制<img src="/images/5171b5b5c996437ca7a575f7f8e62072.png" alt="image"><br>暴露deployment端口，创建svc</p>
<pre class="line-numbers language-none"><code class="language-none">kubectl expose deployment nginx --port&#x3D;80 --target-port&#x3D;80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="/images/cf96dab942e44a1285fe17304cf6a67c.png" alt="image"><br>apt-install httpd-tools 安装ab工具进行压力测试</p>
<pre class="line-numbers language-none"><code class="language-none">[root@master10 hpa]# ab -n 300000 -c 100 http:&#x2F;&#x2F;10.102.118.93&#x2F;
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="/images/ecd14c1de69643789dbdfcd1b024b4ff.png" alt="image"><br>容器cpu达到80%则hpa自动水平伸缩，扩容pods，直到扩容到cpu负载均匀到各个pods中，或者hpa扩容到最大pods数量。<br><img src="/images/e64f2768643c4b0b8bd64f4c953a6696.png" alt="image"></p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes-ETCD说明及常用命令</title>
    <url>/2022/06/23/kubernetes-ETCD/</url>
    <content><![CDATA[<p><strong>etcd 是CoreOS团队于2013年6月发起的开源项目，它的目标是构建一个高可用的分布式键值数据库。etcd内部采用raft协议作为一致性算法，etcd基于Go语言实现</strong><br><strong>官方网址：</strong><br><a href="https://etcd.io/">https://etcd.io</a><br><strong>github地址：</strong><br><a href="https://github.com/etcd-io/etcd">https://github.com/etcd-io/etcd</a><br><strong>官方硬件推荐：</strong><br><a href="https://etcd.io/docs/v3.5/op-guide/hardware">https://etcd.io/docs/v3.5/op-guide/hardware</a></p>
<h1 id="一、硬件配置说明："><a href="#一、硬件配置说明：" class="headerlink" title="一、硬件配置说明："></a>一、硬件配置说明：</h1><ol>
<li>CPU</li>
</ol>
<blockquote>
<p>很少有 etcd 部署需要大量 CPU 容量。典型的集群需要两到四个核心才能顺利运行。重负载的 etcd 部署，每秒服务数千个客户端或数万个请求，往往受 CPU 限制，因为 etcd 可以服务来自内存的请求。如此繁重的部署通常需要八到十六个专用核心。</p>
</blockquote>
<ol start="2">
<li>内存</li>
</ol>
<blockquote>
<p>etcd 的内存占用相对较小，但其性能仍然取决于是否有足够的内存。etcd 服务器将积极缓存键值数据，并花费大部分其余的内存跟踪观察者。通常 8GB 就足够了。对于具有数千个观察者和数百万个键的大量部署，相应地分配 16GB 到 64GB 内存。</p>
</blockquote>
<ol start="3">
<li>磁盘</li>
</ol>
<blockquote>
<p>快速磁盘是 etcd 部署性能和稳定性的最关键因素。</p>
<p><strong>慢速磁盘会增加 etcd 请求延迟并可能损害集群稳定性。由于 etcd 的共识协议依赖于将元数据持久存储到日志中，因此大多数 etcd 集群成员必须将每个请求写入磁盘。此外，etcd 还将逐步检查其状态到磁盘，以便截断此日志。如果这些写入时间过长，心跳可能会超时并触发选举，从而破坏集群的稳定性。一般来说，要判断一个磁盘对于 etcd 是否足够快，可以使用诸如fio之类的基准测试工具。在此处阅读示例。</strong></p>
<p><strong>etcd 对磁盘写入延迟非常敏感。通常需要 50 个顺序 IOPS（例如，7200 RPM 磁盘）。对于负载较重的集群，建议使用 500 顺序 IOPS（例如，典型的本地 SSD 或高性能虚拟化块设备）。请注意，大多数云提供商发布并发 IOPS 而不是顺序 IOPS；发布的并发 IOPS 可以是顺序 IOPS 的 10 倍。要测量实际的顺序 IOPS，我们建议使用磁盘基准测试工具，例如diskbench或fio。</strong></p>
<p><strong>etcd 只需要适度的磁盘带宽，但当失败的成员必须赶上集群时，更多的磁盘带宽会购买更快的恢复时间。通常 10MB&#x2F;s 将在 15 秒内恢复 100MB 数据。对于大型集群，建议 100MB&#x2F;s 或更高，以在 15 秒内恢复 1GB 数据。</strong></p>
<p><strong>如果可能，请使用 SSD 支持 etcd 的存储。SSD 通常比旋转磁盘提供更低的写入延迟和更少的变化，从而提高 etcd 的稳定性和可靠性。如果使用旋转磁盘，请尽可能获得最快的磁盘 (15,000 RPM)。对于旋转磁盘和 SSD，使用 RAID 0 也是提高磁盘速度的有效方法。对于至少三个集群成员，RAID 的镜像和&#x2F;或奇偶校验变体是不必要的；etcd 的一致性复制已经获得了高可用性。</strong></p>
</blockquote>
<ol start="4">
<li>网络</li>
</ol>
<blockquote>
<p>多成员 etcd 部署受益于快速可靠的网络。为了让 etcd 保持一致和分区容错，一个不可靠的网络分区中断将导致可用性差。低延迟确保 etcd 成员可以快速通信。高带宽可以减少恢复失败的 etcd 成员的时间。1GbE 足以满足常见的 etcd 部署。对于大型 etcd 集群，10GbE 网络将减少平均恢复时间。<br>尽可能在单个数据中心内部署 etcd 成员，以避免延迟开销并减少分区事件的可能性。如果需要另一个数据中心的故障域，请选择离现有数据中心更近的数据中心。另请阅读调优文档以获取有关跨数据中心部署的更多信息</p>
</blockquote>
<p>基于硬件配置，可以支持的pod数量：</p>
<ul>
<li>8核16G SSD，基本够用，数千pod</li>
<li>8核 8G SSD 数百个pod</li>
<li>16核32G SSD 上万Pod</li>
</ul>
<p>官方文档：<br><a href="https://etcd.io/docs/v3.5/op-guide/maintenance/">https://etcd.io/docs/v3.5/op-guide/maintenance/</a></p>
<p><strong>etcd具有下面的属性：</strong></p>
<ul>
<li>完全复制：集群中的每个节点都可以使用完整的文档</li>
<li>高可用性：etcd可用于避免硬件的单点故障或网络问题</li>
<li>一致性：每次读取都会返回跨多主机的最新写入</li>
<li>简单：包括一个定义良好、面向用户的API（gRPC）</li>
<li>安全：实现了带有可选的客户端证书身份验证的自动化TLS</li>
<li>快速：每秒10000此写入的基准速度</li>
<li>可靠：使用Raft算法实现了存储的合理分布Etcd的工作原理</li>
</ul>
<p><em><strong>注意：etcd没有配置文件，直接通过etcd.service传递：</strong></em></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@etcd01 ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/systemd/system/etcd.service </span>
<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
<span class="token assign-left variable">Description</span><span class="token operator">=</span>Etcd Server
<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target
<span class="token assign-left variable">After</span><span class="token operator">=</span>network-online.target
<span class="token assign-left variable">Wants</span><span class="token operator">=</span>network-online.target
<span class="token assign-left variable">Documentation</span><span class="token operator">=</span>https://github.com/coreos

<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
<span class="token assign-left variable">Type</span><span class="token operator">=</span>notify
<span class="token assign-left variable">WorkingDirectory</span><span class="token operator">=</span>/var/lib/etcd  <span class="token comment">#数据保存目录</span>
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/local/bin/etcd <span class="token punctuation">\</span>  <span class="token comment">#二进制文件路径</span>
  --name<span class="token operator">=</span>etcd-192.168.17.140 <span class="token punctuation">\</span>    <span class="token comment">#当前node名称</span>
  --cert-file<span class="token operator">=</span>/etc/kubernetes/ssl/etcd.pem <span class="token punctuation">\</span>   <span class="token comment">#公钥</span>
  --key-file<span class="token operator">=</span>/etc/kubernetes/ssl/etcd-key.pem <span class="token punctuation">\</span>  <span class="token comment">#私钥</span>
  --peer-cert-file<span class="token operator">=</span>/etc/kubernetes/ssl/etcd.pem <span class="token punctuation">\</span> <span class="token comment">#连接对端的公钥</span>
  --peer-key-file<span class="token operator">=</span>/etc/kubernetes/ssl/etcd-key.pem <span class="token punctuation">\</span> <span class="token comment">#连接对端的私钥</span>
  --trusted-ca-file<span class="token operator">=</span>/etc/kubernetes/ssl/ca.pem <span class="token punctuation">\</span> <span class="token comment">#ca</span>
  --peer-trusted-ca-file<span class="token operator">=</span>/etc/kubernetes/ssl/ca.pem <span class="token punctuation">\</span>
  --initial-advertise-peer-urls<span class="token operator">=</span>https://192.168.17.140:2380 <span class="token punctuation">\</span>  <span class="token comment">#集群端口，通告自己的集群端口</span>
  --listen-peer-urls<span class="token operator">=</span>https://192.168.17.140:2380 <span class="token punctuation">\</span> <span class="token comment">#集群之间通讯端口</span>
  --listen-client-urls<span class="token operator">=</span>https://192.168.17.140:2379,http://127.0.0.1:2379 <span class="token punctuation">\</span>  <span class="token comment">#客户端端口，</span>
  --advertise-client-urls<span class="token operator">=</span>https://192.168.17.140:2379 <span class="token punctuation">\</span>  <span class="token comment">#通告自己的客户端端口，跟api-server交互的端口</span>
  --initial-cluster-token<span class="token operator">=</span>etcd-cluster-0 <span class="token punctuation">\</span>  <span class="token comment">#创建集群使用的token，一个集群内的节点保持一致</span>
  --initial-cluster<span class="token operator">=</span>etcd-192.168.17.140<span class="token operator">=</span>https://192.168.17.140:2380,etcd-192.168.17.141<span class="token operator">=</span>https://192.168.17.141:2380,etcd-192.168.17.142<span class="token operator">=</span>https://192.168.17.142:2380 <span class="token punctuation">\</span>  <span class="token comment">#集群所有节点信息</span>
  --initial-cluster-state<span class="token operator">=</span>new <span class="token punctuation">\</span> <span class="token comment">#新建集群时为new，如果已经存在的集群为existing</span>
  --data-dir<span class="token operator">=</span>/var/lib/etcd <span class="token punctuation">\</span>  <span class="token comment">#数据目录路径</span>
  --wal-dir<span class="token operator">=</span> <span class="token punctuation">\</span>   <span class="token comment">#预写式日志路径，默认跟数据目录下</span>
  --snapshot-count<span class="token operator">=</span><span class="token number">50000</span> <span class="token punctuation">\</span>   <span class="token comment">#快照</span>
  <span class="token comment">#etcd参数优化：</span>
  --auto-compaction-retention<span class="token operator">=</span><span class="token number">10</span> <span class="token punctuation">\</span>  <span class="token comment">#数据压缩相关参数， 第一次压缩等待10小时，以后每次10小时*10%=1小时压缩一次，会导致cpu负载变高，可能会导致网络堵塞，</span>
  --auto-compaction-mode<span class="token operator">=</span>periodic <span class="token punctuation">\</span>   <span class="token comment">#周期性压缩</span>
  --max-request-bytes<span class="token operator">=</span><span class="token number">10485760</span> <span class="token punctuation">\</span> <span class="token comment"># request size limit(请求的最大字节数，默认一个key最大1.5Mib官方推荐最大10Mib)，10485760/1024/1024单个数据往etcd写入最大是多大</span>
  --quota-backend-bytes<span class="token operator">=</span><span class="token number">8589934592</span> <span class="token comment">#storage size limit(磁盘存储空间大小限制，默认为2G,此值超过8G启动会有告警信息)，</span>


<span class="token assign-left variable">Restart</span><span class="token operator">=</span>always
<span class="token assign-left variable">RestartSec</span><span class="token operator">=</span><span class="token number">15</span>
<span class="token assign-left variable">LimitNOFILE</span><span class="token operator">=</span><span class="token number">65536</span>
<span class="token assign-left variable">OOMScoreAdjust</span><span class="token operator">=</span>-999

<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="二、ETCD参数优化："><a href="#二、ETCD参数优化：" class="headerlink" title="二、ETCD参数优化："></a>二、ETCD参数优化：</h1><ul>
<li>–auto-compaction-retention&#x3D;10 \  #数据压缩相关参数， 第一次压缩等待10小时，以后每次10小时*10%&#x3D;1小时压缩一次</li>
<li>–auto-compaction-mode&#x3D;periodic \   #周期性压缩</li>
<li>–max-request-bytes&#x3D;10485760 \ # request size limit(请求的最大字节数，默认一个key最大1.5Mib官方推荐最大10Mib)</li>
<li>–quota-backend-bytes&#x3D;8589934592 #storage size limit(磁盘存储空间大小限制，默认为2G,此值超过8G启动会有告警信息)</li>
</ul>
<p><strong>集群碎片整理（有些时候etcd工作时间比较长了，数据不是连续的需要整理，按照顺序的io）：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">ETCDCTL_API</span><span class="token operator">=</span><span class="token number">3</span> /usr/local/bin/etcdctl defrag --cluster --endpoints<span class="token operator">=</span>https://192.168.17.140:2379 --cacert<span class="token operator">=</span>/etc/kubernetes/ssl/ca.pem --cert<span class="token operator">=</span>/etc/kubernetes/ssl/etcd.pem --key<span class="token operator">=</span>/etc/kubernetes/ssl/etcd-key.pem
<span class="token punctuation">[</span>root@etcd01 ~<span class="token punctuation">]</span><span class="token comment"># ETCDCTL_API=3 /usr/local/bin/etcdctl defrag --cluster --endpoints=https://192.168.17.140:2379 --cacert=/etc/kubernetes/ssl/ca.pem --cert=/etc/kubernetes/ssl/etcd.pem --key=/etc/kubernetes/ssl/etcd-key.pem</span>
Finished defragmenting etcd member<span class="token punctuation">[</span>https://192.168.17.141:2379<span class="token punctuation">]</span>
Finished defragmenting etcd member<span class="token punctuation">[</span>https://192.168.17.142:2379<span class="token punctuation">]</span>
Finished defragmenting etcd member<span class="token punctuation">[</span>https://192.168.17.140:2379<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>etcd数据存储的都是元数据，数据量也就几个G</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@etcd01 ~<span class="token punctuation">]</span><span class="token comment"># ll /var/lib/etcd/</span>
总用量 <span class="token number">0</span>
drwx------ <span class="token number">4</span> root root <span class="token number">29</span> <span class="token number">5</span>月   <span class="token number">4</span> <span class="token number">10</span>:28 member
<span class="token punctuation">[</span>root@etcd01 ~<span class="token punctuation">]</span><span class="token comment"># ll /var/lib/etcd/member/</span>
总用量 <span class="token number">0</span>
drwx------ <span class="token number">2</span> root root <span class="token number">200</span> <span class="token number">5</span>月   <span class="token number">4</span> <span class="token number">11</span>:06 snap
drwx------ <span class="token number">2</span> root root <span class="token number">109</span> <span class="token number">5</span>月   <span class="token number">4</span> <span class="token number">10</span>:28 wal
<span class="token punctuation">[</span>root@etcd01 ~<span class="token punctuation">]</span><span class="token comment"># ll /var/lib/etcd/member/snap/</span>
总用量 <span class="token number">4236</span>
-rw-r--r-- <span class="token number">1</span> root root    <span class="token number">7601</span> <span class="token number">4</span>月  <span class="token number">19</span> 01:00 0000000000000001-0000000000000003.snap
-rw-r--r-- <span class="token number">1</span> root root   <span class="token number">10318</span> <span class="token number">4</span>月  <span class="token number">22</span> <span class="token number">17</span>:34 0000000000000010-000000000000c354.snap
-rw-r--r-- <span class="token number">1</span> root root   <span class="token number">10318</span> <span class="token number">4</span>月  <span class="token number">22</span> <span class="token number">23</span>:06 0000000000000011-00000000000186a5.snap
-rw-r--r-- <span class="token number">1</span> root root   <span class="token number">11489</span> <span class="token number">5</span>月   <span class="token number">4</span> <span class="token number">11</span>:06 0000000000000017-00000000000249f6.snap
-rw------- <span class="token number">1</span> root root <span class="token number">4292608</span> <span class="token number">5</span>月   <span class="token number">4</span> <span class="token number">15</span>:18 db
<span class="token punctuation">[</span>root@etcd01 ~<span class="token punctuation">]</span><span class="token comment"># ll /var/lib/etcd/member/wal</span>
总用量 <span class="token number">187504</span>
-rw------- <span class="token number">1</span> root root <span class="token number">64000616</span> <span class="token number">4</span>月  <span class="token number">22</span> <span class="token number">23</span>:42 0000000000000000-0000000000000000.wal
-rw------- <span class="token number">1</span> root root <span class="token number">64000000</span> <span class="token number">5</span>月   <span class="token number">4</span> <span class="token number">15</span>:18 0000000000000001-0000000000019b5d.wal
-rw------- <span class="token number">1</span> root root <span class="token number">64000000</span> <span class="token number">5</span>月   <span class="token number">4</span> <span class="token number">10</span>:28 <span class="token number">0</span>.tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>snap：</strong> 数据目录<br><strong>wal：</strong> 预写式日志，在插入数据的时候，先写完成日志，再保存数据，如果日志没有写入成功就相当于数据未写入完成,可以通过日志恢复数</p>
<h1 id="三、etcd命令（默认是v3版本）："><a href="#三、etcd命令（默认是v3版本）：" class="headerlink" title="三、etcd命令（默认是v3版本）："></a>三、etcd命令（默认是v3版本）：</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@etcd01 ~<span class="token punctuation">]</span><span class="token comment"># etcdctl --help</span>
NAME:
	etcdctl - A simple <span class="token builtin class-name">command</span> line client <span class="token keyword">for</span> etcd3.

USAGE:
	etcdctl <span class="token punctuation">[</span>flags<span class="token punctuation">]</span>

VERSION:
	<span class="token number">3.5</span>.1

API VERSION:
	<span class="token number">3.5</span>


COMMANDS:
	alarm disarm		Disarms all alarms
	alarm list		Lists all alarms
	auth disable		Disables authentication
	auth <span class="token builtin class-name">enable</span>		Enables authentication
	auth status		Returns authentication status
	check datascale		Check the memory usage of holding data <span class="token keyword">for</span> different workloads on a given server endpoint.
	check perf		Check the performance of the etcd cluster
	compaction		Compacts the event <span class="token function">history</span> <span class="token keyword">in</span> etcd
	defrag			Defragments the storage of the etcd members with given endpoints
	del			Removes the specified key or range of keys <span class="token punctuation">[</span>key, range_end<span class="token punctuation">)</span>
	elect			Observes and participates <span class="token keyword">in</span> leader election
	endpoint hashkv		Prints the KV <span class="token function">history</span> <span class="token builtin class-name">hash</span> <span class="token keyword">for</span> each endpoint <span class="token keyword">in</span> --endpoints
	endpoint health		Checks the healthiness of endpoints specified <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span>--endpoints<span class="token variable">`</span></span> flag
	endpoint status		Prints out the status of endpoints specified <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span>--endpoints<span class="token variable">`</span></span> flag
	get			Gets the key or a range of keys
	<span class="token builtin class-name">help</span>			Help about any <span class="token builtin class-name">command</span>
	lease grant		Creates leases
	lease keep-alive	Keeps leases alive <span class="token punctuation">(</span>renew<span class="token punctuation">)</span>
	lease list		List all active leases
	lease revoke		Revokes leases
	lease timetolive	Get lease information
	lock			Acquires a named lock
	make-mirror		Makes a mirror at the destination etcd cluster
	member <span class="token function">add</span>		Adds a member into the cluster
	member list		Lists all members <span class="token keyword">in</span> the cluster
	member promote		Promotes a non-voting member <span class="token keyword">in</span> the cluster
	member remove		Removes a member from the cluster
	member update		Updates a member <span class="token keyword">in</span> the cluster
	move-leader		Transfers leadership to another etcd cluster member.
	put			Puts the given key into the store
	role <span class="token function">add</span>		Adds a new role
	role delete		Deletes a role
	role get		Gets detailed information of a role
	role grant-permission	Grants a key to a role
	role list		Lists all roles
	role revoke-permission	Revokes a key from a role
	snapshot restore	Restores an etcd member snapshot to an etcd directory
	snapshot save		Stores an etcd <span class="token function">node</span> backend snapshot to a given <span class="token function">file</span>
	snapshot status		<span class="token punctuation">[</span>deprecated<span class="token punctuation">]</span> Gets backend snapshot status of a given <span class="token function">file</span>
	txn			Txn processes all the requests <span class="token keyword">in</span> one transaction
	user <span class="token function">add</span>		Adds a new user
	user delete		Deletes a user
	user get		Gets detailed information of a user
	user grant-role		Grants a role to a user
	user list		Lists all <span class="token function">users</span>
	user <span class="token function">passwd</span>		Changes password of user
	user revoke-role	Revokes a role from a user
	version			Prints the version of etcdctl
	<span class="token function">watch</span>			Watches events stream on keys or prefixes

OPTIONS:
      --cacert<span class="token operator">=</span><span class="token string">""</span>				verify certificates of TLS-enabled secure servers using this CA bundle
      --cert<span class="token operator">=</span><span class="token string">""</span>					identify secure client using this TLS certificate <span class="token function">file</span>
      --command-timeout<span class="token operator">=</span>5s			<span class="token function">timeout</span> <span class="token keyword">for</span> short running <span class="token builtin class-name">command</span> <span class="token punctuation">(</span>excluding dial <span class="token function">timeout</span><span class="token punctuation">)</span>
      --debug<span class="token punctuation">[</span><span class="token operator">=</span>false<span class="token punctuation">]</span>				<span class="token builtin class-name">enable</span> client-side debug logging
      --dial-timeout<span class="token operator">=</span>2s				dial <span class="token function">timeout</span> <span class="token keyword">for</span> client connections
  -d, --discovery-srv<span class="token operator">=</span><span class="token string">""</span>			domain name to query <span class="token keyword">for</span> SRV records describing cluster endpoints
      --discovery-srv-name<span class="token operator">=</span><span class="token string">""</span>			<span class="token function">service</span> name to query when using DNS discovery
      --endpoints<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">127.0</span>.0.1:2379<span class="token punctuation">]</span>		gRPC endpoints
  -h, --help<span class="token punctuation">[</span><span class="token operator">=</span>false<span class="token punctuation">]</span>				<span class="token builtin class-name">help</span> <span class="token keyword">for</span> etcdctl
      --hex<span class="token punctuation">[</span><span class="token operator">=</span>false<span class="token punctuation">]</span>				print byte strings as hex encoded strings
      --insecure-discovery<span class="token punctuation">[</span><span class="token operator">=</span>true<span class="token punctuation">]</span>		accept insecure SRV records describing cluster endpoints
      --insecure-skip-tls-verify<span class="token punctuation">[</span><span class="token operator">=</span>false<span class="token punctuation">]</span>	skip server certificate verification <span class="token punctuation">(</span>CAUTION: this option should be enabled only <span class="token keyword">for</span> testing purposes<span class="token punctuation">)</span>
      --insecure-transport<span class="token punctuation">[</span><span class="token operator">=</span>true<span class="token punctuation">]</span>		disable transport security <span class="token keyword">for</span> client connections
      --keepalive-time<span class="token operator">=</span>2s			keepalive <span class="token function">time</span> <span class="token keyword">for</span> client connections
      --keepalive-timeout<span class="token operator">=</span>6s			keepalive <span class="token function">timeout</span> <span class="token keyword">for</span> client connections
      --key<span class="token operator">=</span><span class="token string">""</span>					identify secure client using this TLS key <span class="token function">file</span>
      --password<span class="token operator">=</span><span class="token string">""</span>				password <span class="token keyword">for</span> authentication <span class="token punctuation">(</span>if this option is used, --user option shouldn't include password<span class="token punctuation">)</span>
      --user<span class="token operator">=</span><span class="token string">""</span>					username<span class="token punctuation">[</span>:password<span class="token punctuation">]</span> <span class="token keyword">for</span> authentication <span class="token punctuation">(</span>prompt <span class="token keyword">if</span> password is not supplied<span class="token punctuation">)</span>
  -w, --write-out<span class="token operator">=</span><span class="token string">"simple"</span>			<span class="token builtin class-name">set</span> the output <span class="token function">format</span> <span class="token punctuation">(</span>fields, json, protobuf, simple, table<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>查看etcd集群状态（可以进行监控，查看是否是successfully）</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">NODE_IPS</span><span class="token operator">=</span><span class="token string">"192.168.17.140 192.168.17.141 192.168.17.142"</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">ip</span> <span class="token keyword">in</span> <span class="token variable">$&#123;NODE_IPS&#125;</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token assign-left variable">ETCDCTL_API</span><span class="token operator">=</span><span class="token number">3</span> /usr/local/bin/etcdctl --endpoints<span class="token operator">=</span>https://<span class="token variable">$&#123;ip&#125;</span>:2379 --cacert<span class="token operator">=</span>/etc/kubernetes/ssl/ca.pem --cert<span class="token operator">=</span>/etc/kubernetes/ssl/etcd.pem --key<span class="token operator">=</span>/etc/kubernetes/ssl/etcd-key.pem endpoint health<span class="token punctuation">;</span><span class="token keyword">done</span>

<span class="token punctuation">[</span>root@etcd01 ~<span class="token punctuation">]</span><span class="token comment"># export NODE_IPS="192.168.17.140 192.168.17.141 192.168.17.142"</span>
<span class="token punctuation">[</span>root@etcd01 ~<span class="token punctuation">]</span><span class="token comment"># for ip in $&#123;NODE_IPS&#125;;do ETCDCTL_API=3 /usr/local/bin/etcdctl --endpoints=https://$&#123;ip&#125;:2379 --cacert=/etc/kubernetes/ssl/ca.pem --cert=/etc/kubernetes/ssl/etcd.pem --key=/etc/kubernetes/ssl/etcd-key.pem endpoint health;done</span>
https://192.168.17.140:2379 is healthy: successfully committed proposal: took <span class="token operator">=</span> <span class="token number">6</span>.786219ms
https://192.168.17.141:2379 is healthy: successfully committed proposal: took <span class="token operator">=</span> <span class="token number">10</span>.078909ms
https://192.168.17.142:2379 is healthy: successfully committed proposal: took <span class="token operator">=</span> <span class="token number">8</span>.635907ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以表格方式显示节点详细信息：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">export NODE_IPS=<span class="token string">"192.168.17.140 192.168.17.141 192.168.17.142"</span>
<span class="token keyword">for</span> ip in $<span class="token punctuation">&#123;</span>NODE_IPS<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">do</span> ETCDCTL_API=3 <span class="token operator">/</span>usr/local/bin/etcdctl <span class="token operator">--</span>endpoints=https:<span class="token operator">/</span><span class="token operator">/</span>$<span class="token punctuation">&#123;</span>ip<span class="token punctuation">&#125;</span>:2379 <span class="token operator">--</span>cacert=<span class="token operator">/</span>etc/kubernetes/ssl/ca<span class="token punctuation">.</span>pem <span class="token operator">--</span>cert=<span class="token operator">/</span>etc/kubernetes/ssl/etcd<span class="token punctuation">.</span>pem <span class="token operator">--</span>key=<span class="token operator">/</span>etc/kubernetes/ssl/etcd-key<span class="token punctuation">.</span>pem endpoint health<span class="token punctuation">;</span>done
<span class="token comment">#添加--write-out参数以表格方式显示详细信息</span>
<span class="token namespace">[root@etcd01 ~]</span><span class="token comment"># export NODE_IPS="192.168.17.140 192.168.17.141 192.168.17.142"</span>
<span class="token namespace">[root@etcd01 ~]</span><span class="token comment"># for ip in $&#123;NODE_IPS&#125;;do ETCDCTL_API=3 /usr/local/bin/etcdctl --write-out=table endpoint status  --endpoints=https://$&#123;ip&#125;:2379 --cacert=/etc/kubernetes/ssl/ca.pem --cert=/etc/kubernetes/ssl/etcd.pem --key=/etc/kubernetes/ssl/etcd-key.pem endpoint health;done</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>
<span class="token punctuation">|</span>          ENDPOINT           <span class="token punctuation">|</span>        ID        <span class="token punctuation">|</span> VERSION <span class="token punctuation">|</span> DB SIZE <span class="token punctuation">|</span> IS LEADER <span class="token punctuation">|</span> IS LEARNER <span class="token punctuation">|</span> RAFT TERM <span class="token punctuation">|</span> RAFT INDEX <span class="token punctuation">|</span> RAFT APPLIED INDEX <span class="token punctuation">|</span> ERRORS <span class="token punctuation">|</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>
<span class="token punctuation">|</span> https:<span class="token operator">/</span><span class="token operator">/</span>192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>140:2379 <span class="token punctuation">|</span> f0b00c5fba82edde <span class="token punctuation">|</span>   3<span class="token punctuation">.</span>5<span class="token punctuation">.</span>1 <span class="token punctuation">|</span>  2<span class="token punctuation">.</span>0 MB <span class="token punctuation">|</span>     false <span class="token punctuation">|</span>      false <span class="token punctuation">|</span>        24 <span class="token punctuation">|</span>     196500 <span class="token punctuation">|</span>             196500 <span class="token punctuation">|</span>        <span class="token punctuation">|</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>
<span class="token punctuation">|</span>          ENDPOINT           <span class="token punctuation">|</span>        ID        <span class="token punctuation">|</span> VERSION <span class="token punctuation">|</span> DB SIZE <span class="token punctuation">|</span> IS LEADER <span class="token punctuation">|</span> IS LEARNER <span class="token punctuation">|</span> RAFT TERM <span class="token punctuation">|</span> RAFT INDEX <span class="token punctuation">|</span> RAFT APPLIED INDEX <span class="token punctuation">|</span> ERRORS <span class="token punctuation">|</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>
<span class="token punctuation">|</span> https:<span class="token operator">/</span><span class="token operator">/</span>192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>141:2379 <span class="token punctuation">|</span> 31b79580a6603995 <span class="token punctuation">|</span>   3<span class="token punctuation">.</span>5<span class="token punctuation">.</span>1 <span class="token punctuation">|</span>  1<span class="token punctuation">.</span>9 MB <span class="token punctuation">|</span>      true <span class="token punctuation">|</span>      false <span class="token punctuation">|</span>        24 <span class="token punctuation">|</span>     196500 <span class="token punctuation">|</span>             196500 <span class="token punctuation">|</span>        <span class="token punctuation">|</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>
<span class="token punctuation">|</span>          ENDPOINT           <span class="token punctuation">|</span>        ID        <span class="token punctuation">|</span> VERSION <span class="token punctuation">|</span> DB SIZE <span class="token punctuation">|</span> IS LEADER <span class="token punctuation">|</span> IS LEARNER <span class="token punctuation">|</span> RAFT TERM <span class="token punctuation">|</span> RAFT INDEX <span class="token punctuation">|</span> RAFT APPLIED INDEX <span class="token punctuation">|</span> ERRORS <span class="token punctuation">|</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>
<span class="token punctuation">|</span> https:<span class="token operator">/</span><span class="token operator">/</span>192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>142:2379 <span class="token punctuation">|</span> bd6bb6e56a019be8 <span class="token punctuation">|</span>   3<span class="token punctuation">.</span>5<span class="token punctuation">.</span>1 <span class="token punctuation">|</span>  2<span class="token punctuation">.</span>0 MB <span class="token punctuation">|</span>     false <span class="token punctuation">|</span>      false <span class="token punctuation">|</span>        24 <span class="token punctuation">|</span>     196500 <span class="token punctuation">|</span>             196500 <span class="token punctuation">|</span>        <span class="token punctuation">|</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>

<span class="token comment"># IS LEADER 是否是主节点，一般是主节点写，然后同步到其他节点</span>
<span class="token comment">#IS LEARNER 是否再同步</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>查看etcd集群的所有key</li>
</ul>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@etcd01 ~]</span><span class="token comment"># etcdctl  get / --prefix --keys-only</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>根据key查看value</li>
</ul>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@etcd01 ~]</span><span class="token comment"># etcdctl  get / --prefix --keys-only |grep nginx</span>
<span class="token operator">/</span>calico/resources/v3/projectcalico<span class="token punctuation">.</span>org/workloadendpoints/default/node02-k8s-nginx-eth0
<span class="token operator">/</span>registry/deployments/test/nginx-deployment
<span class="token operator">/</span>registry/pods/default/nginx
<span class="token operator">/</span>registry/services/specs/test/nginx-service
<span class="token namespace">[root@etcd01 ~]</span><span class="token comment"># </span>
<span class="token namespace">[root@etcd01 ~]</span><span class="token comment"># etcdctl get /registry/pods/default/nginx</span>
<span class="token operator">/</span>registry/pods/default/nginx
k8s
	
v1Pod 
nginxdefault<span class="token string">"*<span class="token variable">$63501c8d</span>-8349-4b93-b8ae-61384447b83f2ޕ퐆Z

runnginxz² 

kubectl-runUpdatevޕ퐆FieldsV1: 
񡤺metadata"</span>:<span class="token punctuation">&#123;</span><span class="token string">"f:labels"</span>:<span class="token punctuation">&#123;</span><span class="token string">"."</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:run"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:spec"</span>:<span class="token punctuation">&#123;</span><span class="token string">"f:containers"</span>:<span class="token punctuation">&#123;</span><span class="token string">"k:&#123;\"</span>name\<span class="token string">":\"</span>nginx\<span class="token string">"&#125;"</span>:<span class="token punctuation">&#123;</span><span class="token string">"."</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:image"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:imagePullPolicy"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:name"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:resources"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:terminationMessagePath"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:terminationMessagePolicy"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:dnsPolicy"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:enableServiceLinks"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:restartPolicy"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:schedulerName"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:securityContext"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:terminationGracePeriodSeconds"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>BĄ
Go-http-clientUpdatev¥¶¯FieldsV1: 
<span class="token punctuation">&#123;</span><span class="token string">"f:status"</span>:<span class="token punctuation">&#123;</span><span class="token string">"f:conditions"</span>:<span class="token punctuation">&#123;</span><span class="token string">"k:&#123;\"</span><span class="token function">type</span>\<span class="token string">":\"</span>ContainersReady\<span class="token string">"&#125;"</span>:<span class="token punctuation">&#123;</span><span class="token string">"."</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:lastProbeTime"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:lastTransitionTime"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:status"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:type"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"k:&#123;\"</span><span class="token function">type</span>\<span class="token string">":\"</span>Initialized\<span class="token string">"&#125;"</span>:<span class="token punctuation">&#123;</span><span class="token string">"."</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:lastProbeTime"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:lastTransitionTime"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:status"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:type"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"k:&#123;\"</span><span class="token function">type</span>\<span class="token string">":\"</span>Ready\<span class="token string">"&#125;"</span>:<span class="token punctuation">&#123;</span><span class="token string">"."</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:lastProbeTime"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:lastTransitionTime"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:status"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:type"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:containerStatuses"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:hostIP"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:phase"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:podIP"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:podIPs"</span>:<span class="token punctuation">&#123;</span><span class="token string">"."</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"k:&#123;\"</span>ip\<span class="token string">":\"</span>10<span class="token punctuation">.</span>200<span class="token punctuation">.</span>140<span class="token punctuation">.</span>73\<span class="token string">"&#125;"</span>:<span class="token punctuation">&#123;</span><span class="token string">"."</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:ip"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"f:startTime"</span>:<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Bstatus 
 
kube-api-access-rk8zmkЁh
<span class="token string">"

token
(&amp;
 
kube-root-ca.crt 
ca.crtca.crt
)'
%
	namespace 
v1metadata.namespace¤ 
nginxnginx*BJL
kube-api-access-rk8zm-/var/run/secrets/kubernetes.io/serviceaccount"</span>2j/dev/termination-logrAlways¢FileAlways 2
                                                                                                              ClusterFirstBdefaultJdefaultR192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>151X`hrdefault-scheduler²6
node<span class="token punctuation">.</span>kubernetes<span class="token punctuation">.</span>io/not-readyExists<span class="token string">"	NoExecute(¬²8
node.kubernetes.io/unreachableExists"</span>	NoExecute<span class="token punctuation">(</span>¬Ɓ񿂺PreemptLowerPriority± 
Running<span class="token comment">#</span>

InitializedTruޕ퐆<span class="token operator">*</span>2 
ReadyTru󇑆<span class="token operator">*</span>2'
ContainersReadyTru󇑆<span class="token operator">*</span>2$

10<span class="token punctuation">.</span>200<span class="token punctuation">.</span>140<span class="token punctuation">.</span>7ޕ퐆BĂ<span class="token punctuation">.</span><span class="token operator">*</span>2<span class="token string">"*192.168.17.1512
nginx 
      
                                                                                                                                                                                                                                   󇑆oÿError󊇓:Idocker://3a2f801bd7810b187320749d3d0d365d5020ef626dc127ea8660bb73d88d97a8 (2
                                                                                     nginx:latest:_docker-pullable://nginx@sha256:0d17b565c37bcbd895e9d92315a05c1c3c9a29f762b011a10c54a66cd53c9b31BIdocker://3eb9468b2bc7dfd62f0ba9588dce1e8a996a5884de7a0173c7cbe44fcbab7e54HJ
BestEffortZb
10.200.140.73"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>删除数据</li>
</ul>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@etcd01 ~]</span><span class="token comment"># etcdctl del /registry/pods/default/nginx</span>
1
<span class="token namespace">[root@master01 ssl]</span><span class="token comment"># kubectl get pods </span>
NAME          READY   STATUS    RESTARTS        AGE
dujie-test1   1/1     Running   1 <span class="token punctuation">(</span>20h ago<span class="token punctuation">)</span>     11d
nginx         1/1     Running   2 <span class="token punctuation">(</span>5h45m ago<span class="token punctuation">)</span>   17d
<span class="token namespace">[root@master01 ssl]</span><span class="token comment"># </span>
<span class="token namespace">[root@master01 ssl]</span><span class="token comment"># kubectl get pods </span>
NAME          READY   STATUS    RESTARTS            AGE
dujie-test1   1/1     Running   1 <span class="token punctuation">(</span>&lt;invalid> ago<span class="token punctuation">)</span>   7d7h
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>etcd数据watch机制：<br>基于不断监看数据，发生变化就主动出发通知客户端，etcd v3的watch机制支持watch某个固定的key，也支持watch一个范围</li>
</ul>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#在etcd集群的node1上watch一个key，没有此key也可以执行watch，后期可以再创建</span>
<span class="token namespace">[root@etcd01 ~]</span><span class="token comment"># ETCDCTL_API=3 etcdctl watch /data</span>
<span class="token comment">#在etcd node2上修改数据，验证etcd node1是否能够发现数据变化</span>
<span class="token namespace">[root@etcd02 ~]</span><span class="token comment">#  ETCDCTL_API=3 etcdctl put /data "data v1"</span>
OK
<span class="token namespace">[root@etcd02 ~]</span><span class="token comment">#  ETCDCTL_API=3 etcdctl put /data "data v2"</span>
OK
<span class="token namespace">[root@etcd01 ~]</span><span class="token comment"># ETCDCTL_API=3 etcdctl watch /data</span>

PUT
<span class="token operator">/</span><span class="token keyword">data</span>
<span class="token keyword">data</span> v1
PUT
<span class="token operator">/</span><span class="token keyword">data</span>
<span class="token keyword">data</span> v2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes 安装coreDNS组件</title>
    <url>/2022/06/21/kubernetes%E5%AE%89%E8%A3%85coreDNS%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p><strong>DNS  组件历史版本有skydns、kube-dns和coredns三个，k8s1.3版本之前使用skydns，之后的版本到1.17及之间的版本使用kube-dns，目前主要使用coredns，DNS组件用于解析k8s集群中service name 所对应的ip地址</strong><br>官方文档：<br><a href="https://coredns.io/">coreDNS官方文档</a><br><img src="https://img-blog.csdnimg.cn/e8734359c36a4a77a1e0b49fb5508ad2.jpeg#pic_center" alt="在这里插入图片描述"><br>获取官方包和yaml文件：<br><a href="https://github.com/kubernetes/kubernetes/releases">官方包和yaml文件地址</a></p>
<p>github搜索kubernetes，找到相应的k8s版本，点击changelog<br><img src="https://img-blog.csdnimg.cn/7e44efaad8044d10bff334cbaac5e191.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/daa536e81e88483da10ff481699a183e.png#pic_center" alt="在这里插入图片描述"><br>需要下载这几个包：<br><img src="https://img-blog.csdnimg.cn/ec6df00401784d8d8bd63229aeefc81d.png#pic_center" alt="在这里插入图片描述"><br>client：<br><img src="https://img-blog.csdnimg.cn/ea43686726c54dd484345ac283aead39.png#pic_center" alt="在这里插入图片描述"><br>server：<br><img src="https://img-blog.csdnimg.cn/52564cd948c14e2f80a616705c694a3c.png#pic_center" alt="在这里插入图片描述"><br>node：<br><img src="https://img-blog.csdnimg.cn/7a26c8c3c55943dc8ac34a760d851287.png#pic_center" alt="在这里插入图片描述"><br>下载之后上传到master并解压，解压之后的目录结构如下图：<br><img src="https://img-blog.csdnimg.cn/f76cd1c43fca447ba3ea4dcf7164a55d.png#pic_center" alt="在这里插入图片描述"><br>相关yaml文件和插件目录，如dns，dashboard等<br><img src="https://img-blog.csdnimg.cn/10871876b5a74482b1932c64391669a7.png#pic_center" alt="在这里插入图片描述"><br>相关二进制文件：<br><img src="https://img-blog.csdnimg.cn/757ef1ccc20b482d8745f45b07249e8a.png#pic_center" alt="在这里插入图片描述"><br>coredns一般用coredns.yaml.base 修改<br><img src="https://img-blog.csdnimg.cn/3af66c8f609449f5b399b1bdf5b138dd.png#pic_center" alt="在这里插入图片描述"></p>
<p>官方yaml文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># __MACHINE_GENERATED_WARNING__</span>

apiVersion: v1
kind: ServiceAccount
metadata:
  name: coredns
  namespace: kube-system
  labels:
      kubernetes.io/cluster-service: <span class="token string">"true"</span>
      addonmanager.kubernetes.io/mode: Reconcile
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
    addonmanager.kubernetes.io/mode: Reconcile
  name: system:coredns
rules:
- apiGroups:
  - <span class="token string">""</span>
  resources:
  - endpoints
  - services
  - pods
  - namespaces
  verbs:
  - list
  - <span class="token function">watch</span>
- apiGroups:
  - <span class="token string">""</span>
  resources:
  - nodes
  verbs:
  - get
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - list
  - <span class="token function">watch</span>
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: <span class="token string">"true"</span>
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
    addonmanager.kubernetes.io/mode: EnsureExists
  name: system:coredns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:coredns
subjects:
- kind: ServiceAccount
  name: coredns
  namespace: kube-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
  labels:
      addonmanager.kubernetes.io/mode: EnsureExists
data:
  Corefile: <span class="token operator">|</span>
    .:53 <span class="token punctuation">&#123;</span>
    <span class="token comment">#errors:错误信息标准输出</span>
        errors
        <span class="token comment">#心跳检测，检测服务是否存活，在CoreDNS的http://localhost:8080/health端口提供CoreDNS服务的健康报告</span>
        health <span class="token punctuation">&#123;</span>
            lameduck 5s
        <span class="token punctuation">&#125;</span>
        <span class="token comment">#监听8181端口，当coredns的插件已经就绪时，访问该接口会返回200 OK</span>
        ready
        <span class="token comment">#需要修改的地方（__DNS__DOMAIN__），这个是在创建k8s集群时在/etc/kubeasz/clusters/k8s-cluster/hosts中指定的CLUSTER_DNS_DOMAIN="clusterdujie.local"</span>
        kubernetes kubernetes  clusterdujie.local in-addr.arpa ip6.arpa <span class="token punctuation">&#123;</span>  

            pods insecure
            fallthrough in-addr.arpa ip6.arpa
            ttl <span class="token number">30</span>
        <span class="token punctuation">&#125;</span>
        prometheus :9153
        <span class="token comment">#forward就表示coredns解析不了的dns域名往哪里转发。可以指向公司内部dns地址</span>
        forward <span class="token builtin class-name">.</span> <span class="token number">223.6</span>.6.6 <span class="token punctuation">&#123;</span>
            max_concurrent <span class="token number">1000</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">#dns缓存，如果第一次请求，先去etcd查询再用coredns缓存30s，如果30s内再有请求访问直接通过缓存返回</span>
        cache <span class="token number">30</span>
        <span class="token comment">#检测域名解析是否有死循环，如coredns转发给内网DNS服务器，而内网服务器又转发给coredns，如果发现解析时死循环，则强制终止coredns进程（kubernetes会重建），如果不加该参数可能会导致coredns资源利用率非常高甚至卡死</span>
        loop
        <span class="token comment">#检测corefile是否更改，再重新编辑configmap配置后，默认2分钟会优雅的自动加载新的配置</span>
        reload
        <span class="token comment">#轮询DNS域名解析，如果一个域名存在多个记录则轮询解析</span>
        loadbalance
    <span class="token punctuation">&#125;</span>
    <span class="token comment">#把myserver。online的请求转发到下面的地址</span>
    myserver.online <span class="token punctuation">&#123;</span>
      forward <span class="token builtin class-name">.</span> <span class="token number">192.168</span>.17.131:53
    <span class="token punctuation">&#125;</span>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coredns
  namespace: kube-system
  labels:
    k8s-app: kube-dns
    kubernetes.io/cluster-service: <span class="token string">"true"</span>
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: <span class="token string">"CoreDNS"</span>
spec:
  <span class="token comment"># replicas: not specified here:</span>
  <span class="token comment"># 1. In order to make Addon Manager do not reconcile this replicas parameter.</span>
  <span class="token comment"># 2. Default is 1.</span>
  <span class="token comment"># 3. Will be tuned in real time if DNS horizontal auto-scaling is turned on.</span>
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: <span class="token number">1</span>
  selector:
    matchLabels:
      k8s-app: kube-dns
  template:
    metadata:
      labels:
        k8s-app: kube-dns
    spec:
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      priorityClassName: system-cluster-critical
      serviceAccountName: coredns
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: <span class="token number">100</span>
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: k8s-app
                    operator: In
                    values: <span class="token punctuation">[</span><span class="token string">"kube-dns"</span><span class="token punctuation">]</span>
              topologyKey: kubernetes.io/hostname
      tolerations:
        - key: <span class="token string">"CriticalAddonsOnly"</span>
          operator: <span class="token string">"Exists"</span>
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - name: coredns
      <span class="token comment">#镜像地址默认是谷歌的，需要更换成国内镜像源或者官方hub仓库源，下面可以看图</span>
        image:  coredns/coredns:1.8.6
        imagePullPolicy: IfNotPresent
        resources:
        <span class="token comment">#限制coredns可以使用多少资源</span>
          limits:
            memory: 200Mi  <span class="token comment">#200毫核 ，一般生产会写2000Mi 或者直接写2</span>
          requests:
            cpu: 100m
            memory: 70Mi
        args: <span class="token punctuation">[</span> <span class="token string">"-conf"</span>, <span class="token string">"/etc/coredns/Corefile"</span> <span class="token punctuation">]</span>
        volumeMounts:
        - name: config-volume
          mountPath: /etc/coredns
          readOnly: <span class="token boolean">true</span>
        ports:
        - containerPort: <span class="token number">53</span>
          name: dns
          protocol: UDP
        - containerPort: <span class="token number">53</span>
          name: dns-tcp
          protocol: TCP
        - containerPort: <span class="token number">9153</span>
          name: metrics
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /health
            port: <span class="token number">8080</span>
            scheme: HTTP
          initialDelaySeconds: <span class="token number">60</span>
          timeoutSeconds: <span class="token number">5</span>
          successThreshold: <span class="token number">1</span>
          failureThreshold: <span class="token number">5</span>
        readinessProbe:
          httpGet:
            path: /ready
            port: <span class="token number">8181</span>
            scheme: HTTP
        securityContext:
          allowPrivilegeEscalation: <span class="token boolean">false</span>
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - all
          readOnlyRootFilesystem: <span class="token boolean">true</span>
      dnsPolicy: Default
      volumes:
        - name: config-volume
          configMap:
            name: coredns
            items:
            - key: Corefile
              path: Corefile
---
apiVersion: v1
kind: Service
metadata:
  name: kube-dns
  namespace: kube-system
  annotations:
    prometheus.io/port: <span class="token string">"9153"</span>
    prometheus.io/scrape: <span class="token string">"true"</span>
  labels:
    k8s-app: kube-dns
    kubernetes.io/cluster-service: <span class="token string">"true"</span>
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: <span class="token string">"CoreDNS"</span>
spec:
  selector:
    k8s-app: kube-dns
    <span class="token comment">#clusterIP：dns地址，这个地址可以创建一个pod然后查看pod的/etc/resolv.conf的namespaces查看，如下面</span>
  clusterIP: <span class="token number">10.100</span>.0.2
  ports:
  - name: dns
    port: <span class="token number">53</span>
    protocol: UDP
  - name: dns-tcp
    port: <span class="token number">53</span>
    protocol: TCP
  - name: metrics
    port: <span class="token number">9153</span>
    protocol: TCP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>查看coredns的svc地址，上面的10.100.0.1是kubernetes的api的地址，k8s内部会将第一个地址分配给apiserver<br><img src="https://img-blog.csdnimg.cn/230ef23b6bfe40d59e8e224c657a995e.png#pic_center" alt="在这里插入图片描述"><br>镜像更换：</p>
<p><img src="https://img-blog.csdnimg.cn/d484214680ba4da492a4757d042e4c3a.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/19bfc52cd197427481ba6ce9237e4192.png#pic_center" alt="在这里插入图片描述"><br>修改完成后apply -f coredns.yaml，启动成功后进入pod查看是否能够进行域名解析测试<br><img src="https://img-blog.csdnimg.cn/3648c3e121f44cc596498d26d33d6182.jpeg#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0e9cd09ba5d44c98bf0ce809938251ec.jpeg#pic_center" alt="在这里插入图片描述"><br>nslookup测试该域名是否可以解析<br><img src="https://img-blog.csdnimg.cn/cf1e835147824bcd83c6595b74fbb36e.jpeg#pic_center" alt="在这里插入图片描述"><br>一般会将coredns多副本，保证业务解析正常，会以轮询的方式请求，或者修改limit占用资源。一般cpu为2核，内存为3个Gi就够了，如果不够就多副本<br><img src="https://img-blog.csdnimg.cn/60bb06c121a7427cb1ffe1d5351fe7b9.jpeg#pic_center" alt="在这里插入图片描述"><br>k8s域名固定格式：<br> ping kube-dns.kube-system.svc.clusterdujie.local<br> 名称.namespace.svc.域名后缀<br> <img src="https://img-blog.csdnimg.cn/f9e448b76af54f17b324064b4f5ac91e.jpeg#pic_center" alt="在这里插入图片描述"><br><strong>coredns性能优化：</strong><br>1、（pod级别缓存）在pod中添加dnsmasq缓存，优缺点：pod自己缓存自己的，缓存不共享是隔离的，每个容器中都需要添加域名解析记录<br>2、（node级别缓存）缓存放在node上，localdns，pod第一次宿主机请求的时候，宿主机向coredns请求解析，获取解析后缓存到node，下次pod再请求直接通过node节点的localdns直接返回给pod</p>
<p>[root@master01 ~]# vim &#x2F;etc&#x2F;kubeasz&#x2F;clusters&#x2F;k8s-cluster&#x2F;config.yml<br><img src="https://img-blog.csdnimg.cn/909e03bb1caa4127b595dad46d958cdc.jpeg#pic_center" alt="在这里插入图片描述"><br>3、（coredns级别缓存）在coredns容器里，修改缓存时间，默认30s，可以调成180s，不过需要coredns内存比较大，，缓存时间设置不要太长也不要太短</p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes 磁盘爆满故障处理</title>
    <url>/2022/08/19/kubernetes%E7%A3%81%E7%9B%98%E7%88%86%E6%BB%A1%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="一、什么情况下磁盘可能会爆满-？"><a href="#一、什么情况下磁盘可能会爆满-？" class="headerlink" title="一、什么情况下磁盘可能会爆满 ？"></a>一、什么情况下磁盘可能会爆满 ？</h1><p>kubelet 有 gc 和驱逐机制，通过 <code>--image-gc-high-threshold</code>，<code>--image-gc-low- threshold</code>，<code>--eviction-hard</code>，<code>--eviction-soft</code>，<code>--eviction-minimum-reclaim</code> 等参数控制 kubelet 的 gc 和驱逐策略来释放磁盘空间，如果配置正确的情况下，磁盘一般不会爆满。</p>
<blockquote>
<p>通常导致爆满的原因可能是配置不正确或者节点上有其它非 K8S 管理的进程在不断写数据到磁盘占用 大量空间导致磁盘爆满。</p>
</blockquote>
<h1 id="二、磁盘爆满会有什么影响-？"><a href="#二、磁盘爆满会有什么影响-？" class="headerlink" title="二、磁盘爆满会有什么影响 ？"></a>二、磁盘爆满会有什么影响 ？</h1><p>影响 K8S 运行我们主要关注 kubelet 和容器运行时这两个最关键的组件，它们所使用的目录通常不 一样，kubelet 一般不会单独挂盘，直接使用系统磁盘，因为通常占用空间不会很大，容器运行时单 独挂盘的场景比较多，当磁盘爆满的时候我们也要看 kubelet 和 容器运行时使用的目录是否在这个 磁盘，通过 df 命令可以查看磁盘挂载点。</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>容器运行时使用的目录所在磁盘爆满</strong></font><br></li>
</ul>
<hr>
<blockquote>
<p>如果容器运行时使用的目录所在磁盘空间爆满，可能会造成容器运行时无响应，比如 docker，执行 docker 相关的命令一直 hang 住，kubelet 日志也可以看到 PLEG unhealthy，因为 CRI 调 用 timeout，当然也就无法创建或销毁容器，通常表现是 Pod 一直 ContainerCreating 或 一 直 Terminating。</p>
</blockquote>
<p>docker 默认使用的目录主要有:</p>
<ul>
<li><code>/var/run/docker</code>：用于存储容器运行状态，通过 dockerd 的**–exec-root** 参数指定</li>
<li><code>/var/lib/docker</code>：用于持久化容器相关的数据，比如容器镜像、容器可写层数据、容器标准 日志输出、通过 docker 创建的 volume 等</li>
</ul>
<p>Pod 启动可能报类似下面的事件:</p>
<pre class="line-numbers language-none"><code class="language-none">Warning FailedCreatePodSandBox 53m kubelet, 172.22.0.44 Failed create pod sandbox: rpc error: code &#x3D; DeadlineExceeded desc &#x3D; context deadline exceeded
Warning FailedCreatePodSandBox 2m (x4307 over 16h) kubelet, 10.179.80.31 (combined similar events): Failed create pod sandbox: rpc error: code &#x3D; Unknown desc &#x3D; failed to create a sandbox for pod &quot;apigateway-6dc48bf8b6-l8xrw&quot;: Error response from daemon: mkdir &#x2F;var&#x2F;lib&#x2F;docker&#x2F;aufs&#x2F;mnt&#x2F;1f09d6c1c9f24e8daaea5bf33a4230de7dbc758e3b22785e8ee21e3e3d921214 no space left on device
Warning Failed 5m1s (x3397 over 17h) kubelet, ip-10-0-151-35.us-west-2.compute similar events): Error: container create failed: container_linux.go:336: starting container process caused &quot;process_linux.go:399: container init caused \&quot;rootfs_linux.go:58: mounting \\\&quot;&#x2F;sys\\\&quot; to rootfs \\\&quot;&#x2F;var&#x2F;lib&#x2F;dockerd&#x2F;storage&#x2F;overlay&#x2F;051e985771cc69f3f699895a1dada9ef6483e912b46a99e004af7bb4852183eb&#x2F;merged\\\&quot; at \\\&quot;&#x2F;var&#x2F;lib&#x2F;dockerd&#x2F;storage&#x2F;overlay&#x2F;051e985771cc69f3f699895a1dada9ef6483e912b46a99e004af7bb4852183eb&#x2F;merged&#x2F;sys\\\&quot; caused \\\&quot;no space left on device\\\&quot;\&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>Pod 删除可能报类似下面的事件:</p>
<pre class="line-numbers language-none"><code class="language-none">Normal Killing 39s (x735 over 15h) kubelet, 10.179.80.31 Killing container with id docker:&#x2F;&#x2F;apigateway:Need to kill Pod<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<hr>
<ul>
<li><font color="#dd0000"><strong>kubelet 使用的目录所在磁盘爆满</strong></font><br></li>
</ul>
<hr>
<p>如果 kubelet 使用的目录所在磁盘空间爆满(通常是系统盘)，新建 Pod 时连 Sandbox 都无法创 建成功，因为 mkdir 将会失败，通常会有类似这样的 Pod 事件:</p>
<pre class="line-numbers language-none"><code class="language-none">Warning UnexpectedAdmissionError 44m kubelet, 172.22.0.44 Update plugin resources failed due to failed to write checkpoint file &quot;kubelet_internal_checkpoint&quot;: write &#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;device- plugins&#x2F;.728425055: no space left on device, which is unexpected.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>kubelet 默认使用的目录是  <code>/var/lib/kubelet</code>，用于存储插件信息、Pod 相关的状态以及挂 载的 volume (比如 <code>emptyDir</code> ，<code>ConfigMap</code>，<code>Secret</code>），通过 kubelet 的**–root- dir** 参数指定。</p>
<hr>
<ul>
<li><font color="#dd0000"><strong>如何恢复</strong></font><br></li>
</ul>
<hr>
<p>如果容器运行时使用的 Docker，无法直接重启 dockerd 来释放一些空间，因为磁盘爆满后dockerd 无法正常响应，停止的时候也会卡住。需要先手动清理一点文件腾出空间好让 dockerd 能够停止并重启</p>
<p>可以手动删除一些 docker 的 log 文件或可写层文件，通常删除 log:</p>
<pre class="line-numbers language-none"><code class="language-none">$ cd &#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers
$ du -sh * # 找到比较大的目录
$ cd dda02c9a7491fa797ab730c1568ba06cba74cecd4e4a82e9d90d00fa11de743c-json.log.9
$ cat &#x2F;dev&#x2F;null &gt; dda02c9a7491fa797ab730c1568ba06cba74cecd4e4a82e9d90d00fa11de743c-json.log.9 # 删除log文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><strong>注意：注意: 使用 <code>cat /dev/null &gt;</code> 方式删除而不用 rm ，因为用 rm 删除的文件，docker 进 程可能不会释放文件，空间也就不会释放；log 的后缀数字越大表示越久远，先删除旧日志。</strong></li>
<li>然后将该 node 标记不可调度，并将其已有的 pod 驱逐到其它节点，这样重启 dockerd 就会让该 节点的 pod 对应的容器删掉，容器相关的日志(标准输出)与容器内产生的数据文件(没有挂载 volume, 可写层)也会被清理：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">kubectl drain &lt;node-name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>重启 dockerd:</p>
<pre class="line-numbers language-none"><code class="language-none">systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>等重启恢复，pod 调度到其它节点，排查磁盘爆满原因并清理和规避，然后取消节点不可调度标记:</p>
<pre class="line-numbers language-none"><code class="language-none">kubectl uncordon &lt;node-name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<hr>
<ul>
<li><font color="#dd0000"><strong>如何规避 ？</strong></font><br></li>
</ul>
<hr>
<p>正确配置 kubelet gc 和 驱逐相关的参数，即便到达爆满地步，此时节点上的 pod 也都早就自动 驱逐到其它节点了，不会存在 Pod 一直 ContainerCreating 或 Terminating 的问题。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>pipeline分布式构建和pipline基础语法</title>
    <url>/2020/05/02/pipeline%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%84%E5%BB%BA%E5%92%8Cpipline%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="一、pipeline"><a href="#一、pipeline" class="headerlink" title="一、pipeline"></a>一、pipeline</h1><p>官方介绍: <a href="http://jenkins.io/2.0">http://jenkins.io/2.0</a></p>
<blockquote>
<p>pipeline是帮助Jenkins实现CI到CD转变的重要角色，是运行在jenkins2.x版本的核心插件，简单来说，pipeline就是一套运行与Jenkins上的工作流框架，将原本独立运行与单个或者多个节点的任务连接起来，实现单个任务难以完成的复杂发布流程，从而实现单个任务很难实现的复杂流程编排和任何可视化，pipeline的实现方式是一套GroovyDSL，任何发布流程都可以表述为一段Groovy脚本。</p>
</blockquote>
<h3 id="1、pipeline优势"><a href="#1、pipeline优势" class="headerlink" title="1、pipeline优势"></a>1、pipeline优势</h3><blockquote>
<p>可持续性：jenkins的重启或者中断后不影响已经执行的pipeline Job<br>支持暂停：pipeline可以选择停止并等待人工输入或批准后再继续执行。<br>可扩展：通过groovy的变成更容易的扩展插件。<br>并行执行：通过groovy脚本可以实现step，stage间的并行执行，和更复杂的相互依赖关系。</p>
</blockquote>
<h3 id="2、pipeline语法"><a href="#2、pipeline语法" class="headerlink" title="2、pipeline语法"></a>2、pipeline语法</h3><pre class="line-numbers language-none"><code class="language-none">Stage：阶段，一个pipeline可以划分为若干个stage，每个stage都是一个操作，比如clone代码、代码编译、代码测试和代码部署，阶段是一个逻辑分组，可以跨多个node执行。
Node：节点，每个node都是一个jenkins节点，可以使jenkinsmaster也可以是jenkinsagent，node是执行step的具体服务器。
Step：步骤，step是jenkinspipeline最基本的操作单元，从在服务器创建目录到构建容器镜像，由各类Jenkins插件提供实现，例如：sh “make”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>创建新任务选择流水线<br><img src="https://img-blog.csdnimg.cn/16dc865c04a44038877d66158c9c3b73.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/8f8853d1bdb14b4aafd736f2d930dabf.png" alt="在这里插入图片描述"><br>这里写groovy脚本代码可以点击Pipeline Syntax 语法转换<br><img src="https://img-blog.csdnimg.cn/c02dce1b543a49e5b700c2320b86fe87.png" alt="在这里插入图片描述"><br>URL写的是git地址<br><img src="https://img-blog.csdnimg.cn/06c36b7354c8434d9a9cc23940a4ed11.png" alt="在这里插入图片描述"><br>Sample Step 选择git<br>然后选择认证方式为免秘钥，然后点击Generate Pipeline Script<br>就会出现拉取的代码<br>将这段代码复制到pipeline 然后保存，再构建版本<br><img src="https://img-blog.csdnimg.cn/5e998ca46f014b96a957a03f1f24b1d8.png" alt="在这里插入图片描述"><br>可以看到已经构建成功，显示已经拉取代码成功，目录是&#x2F;backup&#x2F;jenkins&#x2F;slave&#x2F;workspace&#x2F;pipeline-test2,我们查看一下代码是否已经下载成功<br><img src="https://img-blog.csdnimg.cn/e4622a3a31954c4fbab060d171f7508c.png" alt="在这里插入图片描述"><br>可以看到代码已经拉取成功</p>
<pre class="line-numbers language-none"><code class="language-none">[root@jenkins-slave ~]# ll &#x2F;backup&#x2F;jenkins&#x2F;slave&#x2F;workspace&#x2F;pipline-test2
total 4
-rw-r--r-- 1 root root 111 Aug 22 15:27 index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>然后需要将slave上的代码拷贝到web服务器，需要修改pipeline的配置<br>如果不想使用groovy代码就在前面用sh “里面填写shell命令”<br><img src="https://img-blog.csdnimg.cn/c4fda88186324ffb8ea85a968a8b66b0.png" alt="在这里插入图片描述"><br>此时还需要设置slave和web服务器免秘钥登陆，所以需要把slave的公钥发送到Web服务器</p>
<pre class="line-numbers language-none"><code class="language-none">[root@jenkins-slave ~]# ssh-copy-id 10.0.0.8
&#x2F;usr&#x2F;bin&#x2F;ssh-copy-id: INFO: Source of key(s) to be installed: &quot;&#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub&quot;
The authenticity of host &#39;10.0.0.8 (10.0.0.8)&#39; can&#39;t be established.
ECDSA key fingerprint is SHA256:6dnMaIY2HylZXAKj9eRf6BQLls+CyGg25+kKdWOBtbw.
ECDSA key fingerprint is MD5:44:5b:03:33:ff:e0:6e:69:87:b5:9c:be:13:b3:2a:b7.
Are you sure you want to continue connecting (yes&#x2F;no)? yes
&#x2F;usr&#x2F;bin&#x2F;ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
&#x2F;usr&#x2F;bin&#x2F;ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
root@10.0.0.8&#39;s password: 

Number of key(s) added: 1

Now try logging into the machine, with:   &quot;ssh &#39;10.0.0.8&#39;&quot;
and check to make sure that only the key(s) you wanted were added.

[root@jenkins-slave ~]# 
[root@jenkins-slave ~]# 
[root@jenkins-slave ~]# ssh 10.0.0.8
Last login: Thu Aug 22 10:29:18 2019 from 10.0.0.176
*************当你的才华撑不起野心的时候，就请安静下来学习吧*************
[root@web02 ~]# exit
logout
Connection to 10.0.0.8 closed.
[root@jenkins-slave ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后重新构建版本可以看到已经成功<br><img src="https://img-blog.csdnimg.cn/5f5c51c8e6234f54a8555286e4600652.png" alt="在这里插入图片描述"><br>然后查看Web服务器的站点目录是否已经有slave传来的代码<br>可以看到web服务器已经收到slave传来的代码</p>
<pre class="line-numbers language-none"><code class="language-none">[root@web02 webapps]# ll &#x2F;data&#x2F;tomcat&#x2F;webapps&#x2F;test&#x2F;index.html    
-rw-r--r-- 1 root root 111 Aug 22 15:47 &#x2F;data&#x2F;tomcat&#x2F;webapps&#x2F;test&#x2F;index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>然后在scp的时候需要先停止服务然后在重启启动服务<br><img src="https://img-blog.csdnimg.cn/d493187e2a6c4694a8d1c4c06d125cb1.png" alt="在这里插入图片描述"><br>如果报错<br><img src="https://img-blog.csdnimg.cn/91892776f7fc48ca9c3c5a9fe376b69c.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/4d92dc979877462db8a1d518b2eb2b5f.png" alt="在这里插入图片描述"><br>这是因为tomcat启动的时候找不到JAVA_HOME路径，需要添加以下变更<br>vim catalina.sh<br>加入以下信息</p>
<pre class="line-numbers language-none"><code class="language-none">export JAVA_HOME&#x3D;&#x2F;application&#x2F;jdk
export JRE_HOME&#x3D;&#x2F;application&#x2F;jdk&#x2F;jre<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>再次构建版本可以看到此时已经构建成功<br><img src="https://img-blog.csdnimg.cn/5c40ea3cdea2425dbf6fa9b27338c7a4.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a56e5ca042b3432c8c7712d875bd5267.png" alt="在这里插入图片描述"><br>可以再去web服务器查看tomcat是否启动，可以看到时间是刚上线的</p>
<pre class="line-numbers language-none"><code class="language-none">[root@web02 webapps]# ps -ef |grep tomcat
root      75218      1  2 16:36 ?        00:00:01 &#x2F;application&#x2F;jdk&#x2F;jre&#x2F;bin&#x2F;java -Djava.util.logging.config.file&#x3D;&#x2F;application&#x2F;tomca&#x2F;conf&#x2F;logging.properties -Djava.util.logging.manager&#x3D;org.apache.juli.ClassLoaderLogManager -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port&#x3D;12345 -Dcom.sun.management.jmxremote.authenticate&#x3D;false -Dcom.sun.management.jmxremote.ssl&#x3D;false -Djava.rmi.server.hostname&#x3D;10.0.0.8 -Djava.endorsed.dirs&#x3D;&#x2F;application&#x2F;tomcat&#x2F;endorsed -classpath &#x2F;application&#x2F;tomcat&#x2F;bin&#x2F;bootstrap.jar:&#x2F;application&#x2F;tomcat&#x2F;bin&#x2F;tomcat-juli.jar -Dcatalina.base&#x3D;&#x2F;application&#x2F;tomcat -Dcatalina.home&#x3D;&#x2F;application&#x2F;tomcat -Djava.io.tmpdir&#x3D;&#x2F;application&#x2F;tomcat&#x2F;temp org.apache.catalina.startup.Bootstrap start
root      75249  71741  0 16:37 pts&#x2F;0    00:00:00 grep --color&#x3D;auto tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>promehteus+grafana</title>
    <url>/2020/02/14/promehteus+grafana/</url>
    <content><![CDATA[<h1 id="一、Promethes和zabbix对比"><a href="#一、Promethes和zabbix对比" class="headerlink" title="一、Promethes和zabbix对比"></a>一、Promethes和zabbix对比</h1><table>
<thead>
<tr>
<th>对比项</th>
<th>Prometheus</th>
<th>zabbix</th>
<th>Prometheus优势</th>
<th>zabbix优势</th>
</tr>
</thead>
<tbody><tr>
<td>管理</td>
<td>二进制文件启动</td>
<td>LNMP+编译</td>
<td>轻量级server，便于迁移和维护</td>
<td></td>
</tr>
<tr>
<td>配置</td>
<td>配置文件</td>
<td>图形化</td>
<td>更好的支持自动化配置</td>
<td>成本低</td>
</tr>
<tr>
<td>client</td>
<td>丰富的client库</td>
<td>zabbix_agent自定义脚本</td>
<td>为各种中间件、应用提供专业的exporter，监控项更全面</td>
<td>支持自定义监控项，对监控涉及者的格局要求较高</td>
</tr>
<tr>
<td>数据存储方式</td>
<td>Prometheus TSDB</td>
<td>MySQL</td>
<td>监控数据以时间维度统计情况较多，时序数据库更实用与监控数据的次敦促，按时间索引性能更高</td>
<td>Mysql比较常用</td>
</tr>
<tr>
<td>数据处理</td>
<td>PromQl</td>
<td>MySQL</td>
<td>PromQL计算函数丰富，统计维度广</td>
<td>同上</td>
</tr>
<tr>
<td>二次开发</td>
<td>丰富的SDK</td>
<td>api</td>
<td>提供了Go、Java&#x2F;Scala、Python、Ruby等sdk二次开发更便捷</td>
<td>api适配较为常用</td>
</tr>
<tr>
<td>对云环境的支持</td>
<td>原生支持容器监控</td>
<td>更适合物理机监控</td>
<td>自动发现容器，更好的适配k8s</td>
<td></td>
</tr>
<tr>
<td>告警方式</td>
<td>可按照标签分组，收敛</td>
<td>在次数上收敛</td>
<td>告警收敛方式更多样化</td>
<td></td>
</tr>
<tr>
<td>监控项值</td>
<td>支持数字</td>
<td>支持数字字符串</td>
<td></td>
<td>可做日志监控</td>
</tr>
</tbody></table>
<h1 id="二、Prometheus工作流程："><a href="#二、Prometheus工作流程：" class="headerlink" title="二、Prometheus工作流程："></a>二、Prometheus工作流程：</h1><h4 id="1、服务端"><a href="#1、服务端" class="headerlink" title="1、服务端"></a>1、服务端</h4><blockquote>
<p>Prometheus服务端是以一个进程的方式启动，下载安装完成之后，只需要启动一个进程即可，程序默认监听9090端口。每次采集到的数据叫做metrics。这些采集到的数据会先存放到内存中，然后定期的写入磁盘，如果服务器重启会将硬盘数据写会内存，所以对内存有一定消耗，Pormetheus不需要重视历史数据，所以默认只会保留15天的数据。</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">[root@bogon prometheus]# nohup .&#x2F;prometheus &amp;
[root@bogon prometheus]# ps -ef |grep prometheus
root       2620   2618  0 15:33 ?        00:00:04 .&#x2F;prometheus
root       6414   2631  0 16:01 pts&#x2F;1    00:00:00 grep prometheus
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="2、客户端"><a href="#2、客户端" class="headerlink" title="2、客户端"></a>2、客户端</h4><p>Prometheus 客户端分为pull和push 两种方式。</p>
<ul>
<li>pull模式</li>
</ul>
<blockquote>
<p>如果pull形式的话是服务端主动向客户端拉取数据，这样需要客户端上安装exporter作为守护进程（官网提供了很多exporters可以下载使用），比如node_exporter，几乎把系统自身相关数据全部采集了，非常全面，node_exporter默认监听9100端口。</p>
</blockquote>
<ul>
<li>push模式</li>
</ul>
<blockquote>
<p>如果是push形式的话客户端需要安装pushgateway插件，然后需要运维人员用脚本吧监控数据以key&#x2F;value的形式提交给pushgateway，在由pushgateway提交给服务端。（这种模式适用于exporters无法满足监控需求时可以定义）</p>
</blockquote>
<h4 id="3、metrics主要数据类型"><a href="#3、metrics主要数据类型" class="headerlink" title="3、metrics主要数据类型"></a>3、metrics主要数据类型</h4><ul>
<li>Gauges</li>
</ul>
<blockquote>
<p>最简单、使用最多的指标，获取一个返回值，这个返回值没有变化规律，不能肯定他是按照一定增长或减少的状态，采集回来的是多少就是多少。比如硬盘容量、CPU内存使用率都适合使用Gauges类型</p>
</blockquote>
<ul>
<li>Counters</li>
</ul>
<blockquote>
<p>计数器。数据从0开始累积，理想状态下应该是永远增长或者是不变。适合统计机器开机时间、HTTP访问量。</p>
</blockquote>
<ul>
<li>Histograms</li>
</ul>
<blockquote>
<p>和summary一样属于高级指标，用于统计数据的分布情况。比如最小值、最大值、中间值。比如统计一天的日志，大部分用户响应时间都是正常的，只有少量用户异常，如果这使用取平均值的话，这少量用户的异常情况就会被掩盖，而Histograms可以分别统计出全部用户的响应时间，比如0-1秒的用户有多少、1-2秒的用户有多少。</p>
</blockquote>
<p>联邦集群监控架构图<br><img src="https://img-blog.csdnimg.cn/00bfa02b27c441e6a472f07bcb0f1182.png" alt="在这里插入图片描述"><br>每个数据中心部署单独的Prometheus Server，用于采集当前数据中心的监控数据。并由一个中心的Prometheus Server 负责聚合多个数据中心的监控数据。</p>
<p>联邦集群是每个Prometheus Server都包含一个用于获取当前实例中监控样本的接口&#x2F;federate。不管是Prometheus实例还是exporter实例都可以获取。</p>
<h1 id="三、Prometheus-服务端安装"><a href="#三、Prometheus-服务端安装" class="headerlink" title="三、Prometheus 服务端安装"></a>三、Prometheus 服务端安装</h1><h4 id="1、首先下载prometheus服务端"><a href="#1、首先下载prometheus服务端" class="headerlink" title="1、首先下载prometheus服务端"></a>1、首先下载prometheus服务端</h4><p><a href="https://github.com/prometheus/prometheus/releases">https://github.com/prometheus/prometheus/releases</a><br>或者官网下载<br><a href="https://prometheus.io/download/">https://prometheus.io/download/</a></p>
<h4 id="2、解压安装包可以看到以下目录结构"><a href="#2、解压安装包可以看到以下目录结构" class="headerlink" title="2、解压安装包可以看到以下目录结构"></a>2、解压安装包可以看到以下目录结构</h4><pre class="line-numbers language-none"><code class="language-none">[root@bogon local]# cd prometheus&#x2F;
[root@bogon prometheus]# ll
总用量 95028
-rw-r--r--  1 root root        0 12月  4 12:57 1000
drwxr-xr-x. 2 3434 3434     4096 11月  6 2018 console_libraries
drwxr-xr-x. 2 3434 3434     4096 11月  6 2018 consoles
drwxr-xr-x. 3 root root     4096 12月  6 11:44 data
-rw-r--r--  1 root root     1920 12月  2 17:34 go.go
-rw-r--r--. 1 3434 3434    11357 11月  6 2018 LICENSE
-rw-------  1 root root    62726 12月  6 16:00 nohup.out
-rw-r--r--. 1 3434 3434     2769 11月  6 2018 NOTICE
-rwxr-xr-x. 1 3434 3434 58074162 11月  6 2018 prometheus
-rw-r--r--  1 root root      767 12月  3 15:24 prometheus.sh
-rw-r--r--  1 3434 3434     1772 12月  6 09:31 prometheus.yml
-rwxr-xr-x. 1 3434 3434 39113694 11月  6 2018 promtool
drwxr-xr-x. 2 root root     4096 12月  6 10:43 rules<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="3、运行promtheus程序"><a href="#3、运行promtheus程序" class="headerlink" title="3、运行promtheus程序"></a>3、运行promtheus程序</h4><pre class="line-numbers language-none"><code class="language-none">[root@bogon prometheus]# nohup .&#x2F;prometheus &amp;
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查看端口</p>
<pre class="line-numbers language-none"><code class="language-none">[root@bogon prometheus]# netstat -tunlp |grep prometheus
tcp        0      0 :::9090                     :::*                        LISTEN      2620&#x2F;.&#x2F;prometheus <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>在浏览器中输入server端ip地址：ip:9090<br><img src="https://img-blog.csdnimg.cn/556afae68c844819878f980c1950b6f6.png" alt="在这里插入图片描述"><br>可以查看当前监控的节点，因为没有监控其他client端，所以目前只监控了server本身<br><img src="https://img-blog.csdnimg.cn/8fb0889a99934c6b8917cd8bb1baadd2.png" alt="在这里插入图片描述"><br>只监控了prometheus服务端本身<br><img src="https://img-blog.csdnimg.cn/9ed455242c184736baeecb359d9bc698.png" alt="在这里插入图片描述"></p>
<h4 id="4、配置文件"><a href="#4、配置文件" class="headerlink" title="4、配置文件"></a>4、配置文件</h4><p>prometheus配置文件分四个配置</p>
<ul>
<li>global：全局配置</li>
<li>alerting：告警配置</li>
<li>rule_files：告警规则</li>
<li>scrape_configs：配置数据源（target）<br>prometheus 配置文件：</li>
</ul>
<blockquote>
<p>horbor_labels：配置为true可以确保当采集到的监控指标冲突时，能够自动忽略冲突的监控数据。如果为false时，prometheus会自动将冲突的标签替换为exported_ 的形式</p>
</blockquote>
<blockquote>
<p>match[]：指定需要获取的时间序列。match[]参数必须是一个瞬时向量选择器，比如：up或者{job&#x3D;”api-server”}。配置多个match[]参数，用于获取多组时间序列的监控数据。</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">[root@bogon prometheus]# cat prometheus.yml
# my global config
global:
  scrape_interval:     15s # # 拉取targets 的默认时间间隔 Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # # 执行rules的时间间隔 Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

# Alertmanager configuration
alerting:
  alertmanagers:
  - static_configs:
      - targets:
          - 172.16.5.25:9093

# Load rules once and periodically evaluate them according to the global &#39;evaluation_interval&#39;.
rule_files:  #告警规则
   # - &quot;first_rules.yml&quot;
   # - &quot;second_rules.yml&quot;
  - &#x2F;usr&#x2F;local&#x2F;prometheus&#x2F;rules&#x2F;all.yml   #告警规则文件路径
                 # A scrape configuration containing exactly one endpoint to scrape:
                 # Here it&#39;s Prometheus itself.

scrape_configs:
  # The job name is added as a label &#96;job&#x3D;&lt;job_name&gt;&#96; to any timeseries scraped from this config.
  - job_name: slaves
    honor_labels: true
    metrics_path: &#x2F;federate
    params:
      match[]:
        - &#39;&#123;__name__&#x3D;~&quot;^slave:.*&quot;&#125;&#39;   # Request all slave-level time series
        - &#39;&#123;__name__&#x3D;~&quot;job:.*&quot;&#125;&#39;
        - &#39;&#123;__name__&#x3D;~&quot;node.*&quot;&#125;&#39;

    static_configs:  #静态发现两个slave端（因为slave端就两台所以可以直接用静态发现）
      - targets:
        - 172.16.5.122:9090
        - 172.16.5.25:9090
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="5、配置告警规则"><a href="#5、配置告警规则" class="headerlink" title="5、配置告警规则"></a>5、配置告警规则</h4><pre class="line-numbers language-none"><code class="language-none">[root@bogon prometheus]# cat rules&#x2F;all.yml 
groups:
    - name: 主机状态-监控告警
      rules:
      - alert: 主机状态
        expr: up &#x3D;&#x3D; 0
        for: 1m
        labels:
          status: 非常严重
        annotations:
          summary: &quot;&#123;&#123;$labels.instance&#125;&#125;:服务器宕机&quot;
          description: &quot;&#123;&#123;$labels.instance&#125;&#125;:服务器延时超过5分钟&quot;
      
      - alert: CPU使用情况
        expr: 100-(avg(irate(node_cpu_seconds_total&#123;mode&#x3D;&quot;idle&quot;&#125;[5m])) by(instance)* 100) &gt; 60
        for: 1m
        labels:
          status: 一般告警
        annotations:
          summary: &quot;&#123;&#123;$labels.mountpoint&#125;&#125; CPU使用率过高！&quot;
          description: &quot;&#123;&#123;$labels.mountpoint &#125;&#125; CPU使用大于60%(目前使用:&#123;&#123;$value&#125;&#125;%)&quot;
  
      - alert: 内存使用
        expr: 100 -(node_memory_MemTotal_bytes -node_memory_MemFree_bytes+node_memory_Buffers_bytes+node_memory_Cached_bytes ) &#x2F; node_memory_MemTotal_bytes * 100&gt; 80
        for: 1m
        labels:
          status: 严重告警
        annotations:
          summary: &quot;&#123;&#123;$labels.mountpoint&#125;&#125; 内存使用率过高！&quot;
          description: &quot;&#123;&#123;$labels.mountpoint &#125;&#125; 内存使用大于80%(目前使用:&#123;&#123;$value&#125;&#125;%)&quot;
      - alert: IO性能
        expr: 100-(avg(irate(node_disk_io_time_seconds_total[1m])) by(instance)* 100) &lt; 60
        for: 1m
        labels:
          status: 严重告警
        annotations:
          summary: &quot;&#123;&#123;$labels.mountpoint&#125;&#125; 流入磁盘IO使用率过高！&quot;
          description: &quot;&#123;&#123;$labels.mountpoint &#125;&#125; 流入磁盘IO大于60%(目前使用:&#123;&#123;$value&#125;&#125;)&quot;
 
      - alert: 网络
        expr: ((sum(rate (node_network_receive_bytes_total&#123;device!~&#39;tap.*|veth.*|br.*|docker.*|virbr*|lo*&#39;&#125;[5m])) by (instance)) &#x2F; 100) &gt; 102400
        for: 1m
        labels:
          status: 严重告警
        annotations:
          summary: &quot;&#123;&#123;$labels.mountpoint&#125;&#125; 流入网络带宽过高！&quot;
          description: &quot;&#123;&#123;$labels.mountpoint &#125;&#125;流入网络带宽持续2分钟高于100M. RX带宽使用率&#123;&#123;$value&#125;&#125;&quot;
 
      - alert: 网络
        expr: ((sum(rate (node_network_transmit_bytes_total&#123;device!~&#39;tap.*|veth.*|br.*|docker.*|virbr*|lo*&#39;&#125;[5m])) by (instance)) &#x2F; 100) &gt; 102400
        for: 1m
        labels:
          status: 严重告警
        annotations:
          summary: &quot;&#123;&#123;$labels.mountpoint&#125;&#125; 流出网络带宽过高！&quot;
          description: &quot;&#123;&#123;$labels.mountpoint &#125;&#125;流出网络带宽持续2分钟高于100M. RX带宽使用率&#123;&#123;$value&#125;&#125;&quot;
      
      - alert: TCP会话
        expr: node_netstat_Tcp_CurrEstab &gt; 1000
        for: 1m
        labels:
          status: 严重告警
        annotations:
          summary: &quot;&#123;&#123;$labels.mountpoint&#125;&#125; TCP_ESTABLISHED过高！&quot;
          description: &quot;&#123;&#123;$labels.mountpoint &#125;&#125; TCP_ESTABLISHED大于1000%(目前使用:&#123;&#123;$value&#125;&#125;%)&quot;
 
      - alert: 磁盘容量
        expr: 100-(node_filesystem_free_bytes&#123;fstype&#x3D;~&quot;ext4|xfs&quot;&#125;&#x2F;node_filesystem_size_bytes &#123;fstype&#x3D;~&quot;ext4|xfs&quot;&#125;*100) &gt; 70
        for: 1m
        labels:
          status: 严重告警
        annotations:
          summary: &quot;&#123;&#123;$labels.mountpoint&#125;&#125; 磁盘分区使用率过高！&quot;
          description: &quot;&#123;&#123;$labels.mountpoint &#125;&#125; 磁盘分区使用大于80%(目前使用:&#123;&#123;$value&#125;&#125;%)&quot;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="四、安装alertmanager-告警插件"><a href="#四、安装alertmanager-告警插件" class="headerlink" title="四、安装alertmanager 告警插件"></a>四、安装alertmanager 告警插件</h1><h4 id="1、安装下载alertmanager"><a href="#1、安装下载alertmanager" class="headerlink" title="1、安装下载alertmanager"></a>1、安装下载alertmanager</h4><p>下载地址：<br><a href="https://github.com/prometheus/alertmanager">https://github.com/prometheus/alertmanager</a><br>解压之后文件结构：</p>
<pre class="line-numbers language-none"><code class="language-none">[root@client local]# cd alertmanager&#x2F;
[root@client alertmanager]# ll
总用量 49440
-rwxr-xr-x. 1 3434 3434 27610164 9月   3 23:02 alertmanager
-rw-r--r--. 1 root root      676 12月  6 10:52 alertmanager.yml
-rw-r--r--. 1 3434 3434      380 9月   3 23:37 alertmanager.yml.bak
-rw-r--r--. 1 root root     1359 12月  6 09:45 alertmanager.yml.youxiang
-rwxr-xr-x. 1 3434 3434 22935908 9月   3 23:02 amtool
drwxr-xr-x. 2 root root     4096 12月  6 17:36 data
-rw-r--r--. 1 3434 3434    11357 9月   3 23:37 LICENSE
-rw-------. 1 root root    37468 12月  6 17:20 nohup.out
-rw-r--r--. 1 3434 3434      457 9月   3 23:37 NOTICE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>启动alertmanager</p>
<pre class="line-numbers language-none"><code class="language-none">[root@client alertmanager]# nohup .&#x2F;alertmanager &amp;
[1] 22490
nohup: 忽略输入并把输出追加到&quot;nohup.out&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>查看进程</p>
<pre class="line-numbers language-none"><code class="language-none">[root@client alertmanager]# ps -ef |grep alertmanager
root       3334      1  0 15:36 ?        00:00:08 .&#x2F;alertmanager
root      22662  22093  0 17:45 pts&#x2F;1    00:00:00 grep alertmanager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="2、alertmanager配置文件"><a href="#2、alertmanager配置文件" class="headerlink" title="2、alertmanager配置文件"></a>2、alertmanager配置文件</h4><ul>
<li>邮箱报警配置文件</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[root@client alertmanager]# cat alertmanager.yml
global:
  # resolve_timeout：解析超时时间
  resolve_timeout: 5m
  #     # smtp_smarthost: 使用email打开服务配置
  smtp_smarthost: &#39;smtp.163.com:465&#39;
  # smtp_from：指定通知报警的邮箱
  smtp_from: &#39;xxx@163.com&#39;
  # smtp_auth_username：邮箱用户名
  smtp_auth_username: &#39;xxx@163.com&#39;
  # smtp_auth_password：授权密码
  smtp_auth_password: &#39;SHAbidaohaode123&#39;
  # smtp_require_tls：是否启用tls
  smtp_require_tls: false
  # route标记：告警如何发送分配
route:
  # group_by：采用哪个标签作为分组的依据
  group_by: [&#39;alertname&#39;]
  # group_wait：分组等待的时间
  group_wait: 10s
  # group_interval：上下两组发送告警的间隔时间
  group_interval: 10s
  # repeat_interval：重复发送告警时间。默认1h
  repeat_interval: 1m
  # receiver 定义谁来通知报警
  receiver: &#39;mail&#39;
 
  # receiver标记：告警接受者 
receivers:
  # name：报警来源自定义名称
- name: &#39;mail&#39;
  # email_configs：通过邮箱发送报警
  email_configs:
  # to：指定接收端email
    - to: &#39;xxx@163.com&#39;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>企业微信报警</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[root@client alertmanager]# cat alertmanager.yml.wechat 
global:
  resolve_timeout: 5m
  wechat_api_corp_id: &#39;wwf21db505fce2dde4&#39;  
  wechat_api_url: &#39;https:&#x2F;&#x2F;qyapi.weixin.qq.com&#x2F;cgi-bin&#x2F;&#39;
  wechat_api_secret: &#39;VmgazzYOKCeUe7JkdeKE_Je-PSIsZN85dHXaFQvFJME&#39;
 
route:
  group_by: [&#39;alertname&#39;]  #报警分组依据
  group_wait: 10s  #组等待时间
  group_interval: 10s  #发送前等待时间
  repeat_interval: 1h  #重复周期
  receiver: &#39;wechat&#39;   #默认报警接受者
receivers:
- name: &#39;wechat&#39;
  wechat_configs:
  - send_resolved: true
    to_party: &#39;1&#39;
    agent_id: &#39;1000002&#39;
    corp_id: &#39;xxxx&#39;
    api_url: &#39;https:&#x2F;&#x2F;qyapi.weixin.qq.com&#x2F;cgi-bin&#x2F;&#39;
    api_secret: &#39;xxxx-PSIsZN85dHXaFQvFJME&#39;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后在server端配置文件中填写alerting</p>
<pre class="line-numbers language-none"><code class="language-none">[root@bogon prometheus]# vim prometheus.yml 
alerting:
  alertmanagers:
  - static_configs:
    - targets: [&quot;172.16.5.25:9093&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="五、添加slave节点"><a href="#五、添加slave节点" class="headerlink" title="五、添加slave节点"></a>五、添加slave节点</h1><p>在两台slave节点安装prometheus server端，用来分布式监控</p>
<h4 id="1、启动prometheus"><a href="#1、启动prometheus" class="headerlink" title="1、启动prometheus"></a>1、启动prometheus</h4><p>解压完成放到后台启动prometheus</p>
<pre class="line-numbers language-none"><code class="language-none">[root@client node_exporter]# nohup .&#x2F;prometheus &amp;
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>启动之后查看进程已经启动</p>
<pre class="line-numbers language-none"><code class="language-none">[root@bogon prometheus]# ps -ef |grep prometheus
root      68158   2755  1 17:44 pts&#x2F;1    00:00:02 .&#x2F;prometheus
root      68725   2755  0 17:48 pts&#x2F;1    00:00:00 grep prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="2、添加文件自动发现"><a href="#2、添加文件自动发现" class="headerlink" title="2、添加文件自动发现"></a>2、添加文件自动发现</h4><p>在prometheus目录下创建targets&#x2F;nodes目录并创建nodes.json文件用来自动发现被监控节点</p>
<pre class="line-numbers language-none"><code class="language-none">[root@bogon nodes]# pwd
&#x2F;usr&#x2F;local&#x2F;prometheus&#x2F;targets&#x2F;nodes
[root@bogon nodes]# ll
总用量 4
-rw-r--r-- 1 root root 152 12月  9 17:44 nodes.json
#targetes 里面写的就是需要监控的机器，在prometheus配置文件直接调用这个文件就可以不用每次都手动改配置文件了
[root@bogon nodes]# cat nodes.json 
[&#123;
  &quot;targets&quot;: [
    &quot;172.16.5.25:9100&quot;,
    &quot;172.16.5.122:9100&quot;,
    &quot;172.16.1.32:9100&quot;
  ],
  &quot;labels&quot;: &#123;
    &quot;server&quot;: &quot;server&#x3D;172.16.5.122&quot;
  &#125;
&#125;]

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="3、slave端配置文件"><a href="#3、slave端配置文件" class="headerlink" title="3、slave端配置文件"></a>3、slave端配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@bogon prometheus]# cat prometheus.yml
# my global config
global:
  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).
  external_labels:
    slave: 1  # This is the 1nd slave. This prevents clashes between slaves.

# Alertmanager configuration
alerting:
  alertmanagers:
  - static_configs:
      - targets:
          - 172.16.5.25:9093

            # Load rules once and periodically evaluate them according to the global &#39;evaluation_interval&#39;.
rule_files:
  - &#x2F;usr&#x2F;local&#x2F;prometheus&#x2F;rules&#x2F;all.yml  #指定报警规则文件路径
    # A scrape configuration containing exactly one endpoint to scrape:
    # Here it&#39;s Prometheus itself.
scrape_configs:
      # The job name is added as a label &#96;job&#x3D;&lt;job_name&gt;&#96; to any timeseries scraped from this config.
  - job_name: &#39;prometheus-172.16.5.122&#39;   #增加一个节点，取名为prometheus-172.16.5.122
    # Add usual service discovery here, such as static_configs
    metrics_path: &quot;&#x2F;metrics&quot;   #获取数据的路径 http:&#x2F;&#x2F;slaveip:9100&#x2F;metrics
    file_sd_configs:  #这个配置表示通过文件发现
    - files: 
      - targets&#x2F;nodes&#x2F;nodes.json # 读取目录下nodes.json文件
      refresh_interval: 1m  # 刷新频率，1 分钟
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>报警规则跟上面相同</p>
<blockquote>
<p>地址规范：<br>我这里server端地址：<br>172.16.5.30<br>两个slave地址分别为<br>172.16.5.122<br>172.16.5.25<br>因为只开了3台虚拟机，所以两台slave 监控的节点是各自本身和对方的ip<br>172.16.5.122额外监控了172.16.1.32运维平台的机器</p>
</blockquote>
<p>下面看图：<br>这是172.16.5.122 的某一个监控值<br><img src="https://img-blog.csdnimg.cn/a7106a17954c4800886c14b31973ca68.png" alt="在这里插入图片描述"><br>这是172.16.5.25的监控值<br><img src="https://img-blog.csdnimg.cn/8b90cd90509f4acf9c84cad879ed3628.png" alt="在这里插入图片描述"><br>这是server端监控的值，可以看到server端可以收集到两台slave的所有监控信息</p>
<h1 id="六、安装grafana图形显示工具"><a href="#六、安装grafana图形显示工具" class="headerlink" title="六、安装grafana图形显示工具"></a>六、安装grafana图形显示工具</h1><h4 id="1、安装启动"><a href="#1、安装启动" class="headerlink" title="1、安装启动"></a>1、安装启动</h4><p>下载地址：</p>
<pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;dl.grafana.com&#x2F;oss&#x2F;release&#x2F;grafana-6.5.1-1.x86_64.rpm
yum localinstall grafana-6.5.1-1.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>启动grafana-server</p>
<pre class="line-numbers language-none"><code class="language-none">[root@bogon prometheus]# service grafana-server start <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查看进程</p>
<pre class="line-numbers language-none"><code class="language-none">[root@bogon prometheus]# ps -ef |grep grafana
grafana    5316      1  0 08:58 ?        00:00:05 &#x2F;usr&#x2F;sbin&#x2F;grafana-server --pidfile&#x3D;&#x2F;var&#x2F;run&#x2F;grafana-server.pid --config&#x3D;&#x2F;etc&#x2F;grafana&#x2F;grafana.ini --packaging&#x3D;rpm cfg:default.paths.provisioning&#x3D;&#x2F;etc&#x2F;grafana&#x2F;provisioning cfg:default.paths.data&#x3D;&#x2F;var&#x2F;lib&#x2F;grafana cfg:default.paths.logs&#x3D;&#x2F;var&#x2F;log&#x2F;grafana cfg:default.paths.plugins&#x3D;&#x2F;var&#x2F;lib&#x2F;grafana&#x2F;plugins
root       7355   2750  0 09:16 pts&#x2F;1    00:00:00 grep grafana<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>浏览器中访问ip:3000<br><img src="https://img-blog.csdnimg.cn/5c871f7b4dda4eab996099b097c371b1.png" alt="在这里插入图片描述"></p>
<h4 id="2、添加数据源"><a href="#2、添加数据源" class="headerlink" title="2、添加数据源"></a>2、添加数据源</h4><p><img src="https://img-blog.csdnimg.cn/33969fd6c549487188d29b4c7e0ed1ce.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a8624be165a848d2a10dc549a334eef2.png" alt="在这里插入图片描述"><br>URL地址是prometheus-server<br><img src="https://img-blog.csdnimg.cn/506441696e8842a39c4201db72db5525.png" alt="在这里插入图片描述"><br>填写完成之后添加Save&amp;test，出现下图则添加成功<br><img src="https://img-blog.csdnimg.cn/0855ba0c8d8b43d0a426d252e23c5b8b.png" alt="在这里插入图片描述"></p>
<h4 id="3、导入dashboard模板"><a href="#3、导入dashboard模板" class="headerlink" title="3、导入dashboard模板"></a>3、导入dashboard模板</h4><p><img src="https://img-blog.csdnimg.cn/13eebbdda90b410bb76cde44042045d4.png" alt="在这里插入图片描述"><br>常用的prometheus 模板有8919和1860，然后将Data Source 选择为刚才添加的Prometheus数据源<br><img src="https://img-blog.csdnimg.cn/2c2a9d918b3a4e808bf851d6c10f1830.png" alt="在这里插入图片描述"><br>整体的监控图形显示<br><img src="https://img-blog.csdnimg.cn/94cb1b103bcd49149c3e4727f08228df.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>prometheus</category>
      </categories>
      <tags>
        <tag>prometheus</tag>
        <tag>grafana</tag>
      </tags>
  </entry>
  <entry>
    <title>rsync+inotify 实时同步备份</title>
    <url>/2021/08/24/rsync+inotify%20%E5%AE%9E%E6%97%B6%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<h1 id="rsync-inotify-实时备份"><a href="#rsync-inotify-实时备份" class="headerlink" title="rsync+inotify 实时备份"></a>rsync+inotify 实时备份</h1><p>目标服务器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y <span class="token function">install</span> <span class="token function">rsync</span>
<span class="token function">vim</span> /etc/rsyncd.conf
log <span class="token function">file</span> <span class="token operator">=</span> /var/log/rsyncd.log
pidfile <span class="token operator">=</span> /var/run/rsyncd.pid
lock <span class="token function">file</span> <span class="token operator">=</span> /var/run/rsync.lock
secrets <span class="token function">file</span> <span class="token operator">=</span> /etc/rsync.password

<span class="token punctuation">[</span>backup<span class="token punctuation">]</span>
path <span class="token operator">=</span> /mnt2/backup/39.97.84.214
comment <span class="token operator">=</span> <span class="token function">sync</span> etc from client
uid <span class="token operator">=</span> root
gid <span class="token operator">=</span> root
port <span class="token operator">=</span> <span class="token number">873</span>
ignore errors
use <span class="token function">chroot</span> <span class="token operator">=</span> no
<span class="token builtin class-name">read</span> only <span class="token operator">=</span> no
list <span class="token operator">=</span> no
max connections <span class="token operator">=</span> <span class="token number">200</span>
<span class="token function">timeout</span> <span class="token operator">=</span> <span class="token number">600</span>
auth <span class="token function">users</span> <span class="token operator">=</span>  root

<span class="token comment">#说明：</span>
<span class="token function">vim</span> /etc/rsyncd.conf  //增加以下内容
log <span class="token function">file</span> <span class="token operator">=</span> /var/log/rsyncd.log <span class="token comment">#日志文件位置，启动rsync后自动产生，无需提前创建</span>
pidfile <span class="token operator">=</span> /var/run/rsyncd.pid <span class="token comment">#pid文件存放位置</span>
lock <span class="token function">file</span> <span class="token operator">=</span> /var/run/rsync.lock <span class="token comment">#支持max connections参数的锁文件</span>
secrets <span class="token function">file</span> <span class="token operator">=</span> /etc/rsync.password <span class="token comment">#用户认证配置文件,里面存放用户名称和密码，必须手动创建这个文件</span>
 
 <span class="token punctuation">[</span>backup<span class="token punctuation">]</span>  <span class="token comment">#自定义同步名称</span>
   path <span class="token operator">=</span> /mnt2/backup/39.97.84.214 <span class="token comment">#rsync服务端存放路径，客户端的数据将同步到此目录</span>
  comment <span class="token operator">=</span> <span class="token function">sync</span> etc from client
  uid <span class="token operator">=</span> root  <span class="token comment">#设置rsync运行权限为root</span>
  gid <span class="token operator">=</span> root   <span class="token comment">#设置rsync运行权限为root</span>
  port <span class="token operator">=</span> <span class="token number">873</span>    <span class="token comment">#默认端口为873</span>
  ignore errors  <span class="token comment">#表示出现错误忽视错误</span>
  use <span class="token function">chroot</span> <span class="token operator">=</span> no  <span class="token comment">#默认为true ，修改为no，增加对目录软链接的备份</span>
  <span class="token builtin class-name">read</span> only <span class="token operator">=</span> no <span class="token comment">#设置rsync服务端为读写权限</span>
  list <span class="token operator">=</span> no  <span class="token comment">#不显示rsync服务端资源列表</span>
  max connections <span class="token operator">=</span> <span class="token number">200</span> <span class="token comment">#最大连接数</span>
  <span class="token function">timeout</span> <span class="token operator">=</span> <span class="token number">600</span>  <span class="token comment">#设置超时时间</span>
  auth <span class="token function">users</span> <span class="token operator">=</span> admin  <span class="token comment">#执行数据同步的用户名，可以设置多个，用英文逗号隔开</span>
 <span class="token comment"># hosts allow =  #允许进行数据同步的IP地址，可以设置多个，用英文逗号隔开</span>
  <span class="token comment">#hosts deny = 192.168.24.188  #禁止进行数据同步的IP地址，可以设置多个，用英文逗号隔开</span>

<span class="token builtin class-name">echo</span> <span class="token string">'root:518'</span> <span class="token operator">></span> /etc/rsync.password
<span class="token function">chmod</span> <span class="token number">600</span> /etc/rsync*
systemctl start rsyncd
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>源服务器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y <span class="token function">rsync</span>
<span class="token builtin class-name">echo</span> <span class="token string">'518'</span> <span class="token operator">></span> /etc/rsync.pass
<span class="token function">chmod</span> <span class="token number">600</span> /etc/rsync.pass
<span class="token function">mkdir</span> /tmp/test
<span class="token builtin class-name">cd</span> /tmp/test/
<span class="token builtin class-name">echo</span> <span class="token number">222</span> <span class="token operator">></span>ee.txt
ehco <span class="token number">333</span> <span class="token operator">></span><span class="token number">23</span>.txt
<span class="token comment">#传输到目标服务器，注意防火墙</span>
<span class="token function">rsync</span> -avH --port <span class="token number">873</span> --progress --delete /tmp/test/ root@39.107.83.68::backup --password-file<span class="token operator">=</span>/etc/rsync.pass
<span class="token comment">#查看系统内核支持inotify吗</span>
<span class="token punctuation">[</span>root@iZ2zehl1ro7yd08bzf0h3sZ runLog<span class="token punctuation">]</span><span class="token comment"># ll /proc/sys/fs/inotify/</span>
total <span class="token number">0</span>
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Jun <span class="token number">15</span> <span class="token number">13</span>:15 max_queued_events
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Jun <span class="token number">15</span> <span class="token number">13</span>:15 max_user_instances
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Jun <span class="token number">15</span> <span class="token number">13</span>:15 max_user_watches
<span class="token comment">#安装inotify</span>
yum -y <span class="token function">install</span> <span class="token function">make</span> gcc gcc-c++ inotify-tools
<span class="token punctuation">[</span>root@iZ2zehl1ro7yd08bzf0h3sZ runLog<span class="token punctuation">]</span><span class="token comment"># </span>
 
<span class="token comment">#/bin/bash</span>
<span class="token assign-left variable">host</span><span class="token operator">=</span><span class="token number">39.107</span>.83.68
<span class="token assign-left variable">src</span><span class="token operator">=</span>/data/www/bibf-site/api-server/catalina/runLog
<span class="token assign-left variable">des</span><span class="token operator">=</span>backup  <span class="token comment">#目标服务器模块名</span>
<span class="token assign-left variable">password</span><span class="token operator">=</span>/etc/rsync.pass
<span class="token assign-left variable">user</span><span class="token operator">=</span>root
inotifywait -mrq --timefmt <span class="token string">'%Y%m%d %H:%M'</span> --format <span class="token string">'%T %w%f%e'</span> -e modify,delete,create,attrib <span class="token variable">$src</span> <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> files
 <span class="token keyword">do</span>
    <span class="token function">rsync</span> -avzP --delete  --timeout<span class="token operator">=</span><span class="token number">100</span> --password-file<span class="token operator">=</span><span class="token variable">$&#123;password&#125;</span>  <span class="token variable">$src</span>  <span class="token variable">$user</span>@<span class="token variable">$host</span>::<span class="token variable">$des</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;files&#125;</span> was rsynced"</span> <span class="token operator">>></span>/var/log/rsync-backup.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span>
 <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>




<p>同步多个服务器的数据目录：</p>
<p>目标服务器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@svn-zentao-redmine runLog<span class="token punctuation">]</span><span class="token comment"># cat /etc/rsyncd.conf </span>
<span class="token comment"># /etc/rsyncd: configuration file for rsync daemon mode</span>

<span class="token comment"># See rsyncd.conf man page for more options.</span>

<span class="token comment"># configuration example:</span>

<span class="token comment"># uid = nobody</span>
<span class="token comment"># gid = nobody</span>
<span class="token comment"># use chroot = yes</span>
<span class="token comment"># max connections = 4</span>
<span class="token comment"># pid file = /var/run/rsyncd.pid</span>
<span class="token comment"># exclude = lost+found/</span>
<span class="token comment"># transfer logging = yes</span>
<span class="token comment"># timeout = 900</span>
<span class="token comment"># ignore nonreadable = yes</span>
<span class="token comment"># dont compress   = *.gz *.tgz *.zip *.z *.Z *.rpm *.deb *.bz2</span>

<span class="token comment"># [ftp]</span>
<span class="token comment">#        path = /home/ftp</span>
<span class="token comment">#        comment = ftp export area</span>
log <span class="token function">file</span> <span class="token operator">=</span> /var/log/rsyncd.log 
pidfile <span class="token operator">=</span> /var/run/rsyncd.pid 
lock <span class="token function">file</span> <span class="token operator">=</span> /var/run/rsync.lock 
secrets <span class="token function">file</span> <span class="token operator">=</span> /etc/rsync.password 
 
<span class="token punctuation">[</span><span class="token number">39.97</span>.84.214<span class="token punctuation">]</span>  
path <span class="token operator">=</span> /mnt2/backup/39.97.84.214 
comment <span class="token operator">=</span> <span class="token function">sync</span> etc from client
uid <span class="token operator">=</span> root  
gid <span class="token operator">=</span> root   
port <span class="token operator">=</span> <span class="token number">873</span>    
ignore errors  
use <span class="token function">chroot</span> <span class="token operator">=</span> no  
<span class="token builtin class-name">read</span> only <span class="token operator">=</span> no 
list <span class="token operator">=</span> no  
max connections <span class="token operator">=</span> <span class="token number">200</span> 
<span class="token function">timeout</span> <span class="token operator">=</span> <span class="token number">600</span> 
auth <span class="token function">users</span> <span class="token operator">=</span>  root
 <span class="token comment"># hosts allow =  #允许进行数据同步的IP地址，可以设置多个，用英文逗号隔开</span>
 <span class="token comment">#   #hosts deny = 192.168.24.188  #禁止进行数据同步的IP地址，可以设置多个，用英文逗号隔开</span>
<span class="token punctuation">[</span><span class="token number">39.97</span>.88.214<span class="token punctuation">]</span>  
path <span class="token operator">=</span> /mnt2/backup/39.97.88.214 
comment <span class="token operator">=</span> <span class="token function">sync</span> etc from client
uid <span class="token operator">=</span> root  
gid <span class="token operator">=</span> root   
port <span class="token operator">=</span> <span class="token number">873</span>    
ignore errors  
use <span class="token function">chroot</span> <span class="token operator">=</span> no  
<span class="token builtin class-name">read</span> only <span class="token operator">=</span> no 
list <span class="token operator">=</span> no  
max connections <span class="token operator">=</span> <span class="token number">200</span> 
<span class="token function">timeout</span> <span class="token operator">=</span> <span class="token number">600</span> 
auth <span class="token function">users</span> <span class="token operator">=</span>  root


<span class="token punctuation">[</span><span class="token number">39.97</span>.82.249<span class="token punctuation">]</span>  
path <span class="token operator">=</span> /mnt2/backup/39.97.82.249 
comment <span class="token operator">=</span> <span class="token function">sync</span> etc from client
uid <span class="token operator">=</span> root  
gid <span class="token operator">=</span> root   
port <span class="token operator">=</span> <span class="token number">873</span>    
ignore errors  
use <span class="token function">chroot</span> <span class="token operator">=</span> no  
<span class="token builtin class-name">read</span> only <span class="token operator">=</span> no 
list <span class="token operator">=</span> no  
max connections <span class="token operator">=</span> <span class="token number">200</span> 
<span class="token function">timeout</span> <span class="token operator">=</span> <span class="token number">600</span>
auth <span class="token function">users</span> <span class="token operator">=</span>  root


<span class="token punctuation">[</span><span class="token number">39.97</span>.82.171<span class="token punctuation">]</span>  
path <span class="token operator">=</span> /mnt2/backup/39.97.82.171
comment <span class="token operator">=</span> <span class="token function">sync</span> etc from client
uid <span class="token operator">=</span> root  
gid <span class="token operator">=</span> root   
port <span class="token operator">=</span> <span class="token number">873</span>    
ignore errors  
use <span class="token function">chroot</span> <span class="token operator">=</span> no  
<span class="token builtin class-name">read</span> only <span class="token operator">=</span> no 
list <span class="token operator">=</span> no  
max connections <span class="token operator">=</span> <span class="token number">200</span> 
<span class="token function">timeout</span> <span class="token operator">=</span> <span class="token number">600</span>
auth <span class="token function">users</span> <span class="token operator">=</span>  root



<span class="token punctuation">[</span><span class="token number">8.210</span>.115.60<span class="token punctuation">]</span>  
path <span class="token operator">=</span> /mnt2/backup/8.210.115.60
comment <span class="token operator">=</span> <span class="token function">sync</span> etc from client
uid <span class="token operator">=</span> root  
gid <span class="token operator">=</span> root   
port <span class="token operator">=</span> <span class="token number">873</span>    
ignore errors  
use <span class="token function">chroot</span> <span class="token operator">=</span> no  
<span class="token builtin class-name">read</span> only <span class="token operator">=</span> no 
list <span class="token operator">=</span> no  
max connections <span class="token operator">=</span> <span class="token number">200</span> 
<span class="token function">timeout</span> <span class="token operator">=</span> <span class="token number">600</span>
auth <span class="token function">users</span> <span class="token operator">=</span>  root


<span class="token punctuation">[</span><span class="token number">8.210</span>.146.160<span class="token punctuation">]</span>  
path <span class="token operator">=</span> /mnt2/backup/8.210.146.160
comment <span class="token operator">=</span> <span class="token function">sync</span> etc from client
uid <span class="token operator">=</span> root  
gid <span class="token operator">=</span> root   
port <span class="token operator">=</span> <span class="token number">873</span>    
ignore errors  
use <span class="token function">chroot</span> <span class="token operator">=</span> no  
<span class="token builtin class-name">read</span> only <span class="token operator">=</span> no 
list <span class="token operator">=</span> no  
max connections <span class="token operator">=</span> <span class="token number">200</span> 
<span class="token function">timeout</span> <span class="token operator">=</span> <span class="token number">600</span>
auth <span class="token function">users</span> <span class="token operator">=</span>  root


<span class="token punctuation">[</span><span class="token number">8.210</span>.126.24<span class="token punctuation">]</span>  
path <span class="token operator">=</span> /mnt2/backup/8.210.126.24
comment <span class="token operator">=</span> <span class="token function">sync</span> etc from client
uid <span class="token operator">=</span> root  
gid <span class="token operator">=</span> root   
port <span class="token operator">=</span> <span class="token number">873</span>    
ignore errors  
use <span class="token function">chroot</span> <span class="token operator">=</span> no  
<span class="token builtin class-name">read</span> only <span class="token operator">=</span> no 
list <span class="token operator">=</span> no  
max connections <span class="token operator">=</span> <span class="token number">200</span> 
<span class="token function">timeout</span> <span class="token operator">=</span> <span class="token number">600</span>
auth <span class="token function">users</span> <span class="token operator">=</span>  root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes常用资源——secret</title>
    <url>/2022/07/03/secret/</url>
    <content><![CDATA[<h1 id="secret"><a href="#secret" class="headerlink" title="secret"></a>secret</h1><p>Secret 的功能类似于configmap给pod提供额外的配置信息，但是secret是一种包含少量敏感信息例如密码，令牌或秘钥的对象</p>
<p>Secret的名称必须是合法的DNS子域名</p>
<p>每个Secret的大小最多为1Mib，主要是为了避免用户创建非常大的Secret进而导致API服务器和kubelet内存耗尽，不过创建很多小的Secret也可能耗尽内存，可以使用资源配额来约束每个名字空间中的Secret个数</p>
<p>在通过yaml文件创建secret时，可以设置data或stringData字段，data和stringData字段都是可选的，data字段中所有的键值都必须是base64编码的字符串，如果不希望执行这种base64字符串的转换操作，也可以选择设置stringData字段，其中可以使用任何非加密的字符串作为其值。</p>
<p>Pod可以用三种方式的任意一种来使用Secret</p>
<ul>
<li>作为挂载到一个或多个容器上的卷中的文件（crt文件，key文件）</li>
<li>作为容器的环境变量</li>
<li>由kubelet在为pod拉取镜像时使用（与镜像仓库的认证）</li>
</ul>
<h5 id="一、Secret类型："><a href="#一、Secret类型：" class="headerlink" title="一、Secret类型："></a>一、Secret类型：</h5><p>kubernetes默认支持多种不同类型的secret，用于不同的使用场景，不同类型的secret的配置参数也不一样</p>
<table>
<thead>
<tr>
<th>Secret类型</th>
<th>使用场景</th>
</tr>
</thead>
<tbody><tr>
<td>Opaque</td>
<td>用户定义的任意数据</td>
</tr>
<tr>
<td>kubernetes.io&#x2F;service-account-token</td>
<td>ServiceAccount 令牌</td>
</tr>
<tr>
<td>kubernetes.io&#x2F;dockercfg</td>
<td>~&#x2F;.dockercfg文件的序列化形式</td>
</tr>
<tr>
<td>kuberentes.io&#x2F;dockerconfigjson</td>
<td>~&#x2F;.docker&#x2F;config.json文件的序列化形式 （harbor token）</td>
</tr>
<tr>
<td>kubernetes.io&#x2F;ssh-auth</td>
<td>用于SSH身份认证的凭据</td>
</tr>
<tr>
<td>kubernetes.io&#x2F;basic-auth</td>
<td>用于基本身份认证的凭据</td>
</tr>
<tr>
<td>kubernetes.io&#x2F;tls</td>
<td>用于TLS环境，保存crt证书和key证书（nginx）</td>
</tr>
<tr>
<td>bootstrap.kubernetes.io&#x2F;token</td>
<td>启动引导令牌数据</td>
</tr>
</tbody></table>
<p>1、Opaque类型：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 case11-secret<span class="token punctuation">]</span><span class="token comment"># cat 1-secret-Opaque-data.yaml </span>
apiVersion: v1
kind: Secret
metadata:
  name: mysecret-data
  namespace: myserver
type: Opaque
data:
  user: YWRtaW4K
  password: <span class="token assign-left variable">MTIzNDU2Cg</span><span class="token operator">==</span>
<span class="token comment">#使用该secret</span>
<span class="token punctuation">[</span>root@haproxy1 case11-secret<span class="token punctuation">]</span><span class="token comment"># cat 3-secret-Opaque-mount.yaml </span>
<span class="token comment">#apiVersion: extensions/v1beta1</span>
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myserver-myapp-app1-deployment
  namespace: myserver
spec:
  replicas: <span class="token number">1</span>
  selector:
    matchLabels:
      app: myserver-myapp-app1
  template:
    metadata:
      labels:
        app: myserver-myapp-app1
    spec:
      containers:
      - name: myserver-myapp-app1
        image: tomcat:7.0.94-alpine
        ports:
        - containerPort: <span class="token number">8080</span>
        volumeMounts:
        - mountPath: /data/myserver/auth
          name: myserver-auth-secret 
      volumes:
      - name: myserver-auth-secret
        secret:
          secretName: mysecret-data

---
apiVersion: v1
kind: Service
metadata:
  name: myserver-myapp-app1
  namespace: myserver
spec:
  ports:
  - name: http
    port: <span class="token number">8080</span>
    targetPort: <span class="token number">8080</span>
    nodePort: <span class="token number">30018</span>
    protocol: TCP
  type: NodePort
  selector:
    app: myserver-myapp-app1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其实secret文件在宿主机上</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 case11-secret<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -n myserver -o wide </span>
NAME                                READY   STATUS    RESTARTS   AGE    IP               NODE            NOMINATED NODE   READINESS GATES
nginx-deployment-74884bcb49-qlb4t   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          3d2h   <span class="token number">10.200</span>.169.187   <span class="token number">172.16</span>.92.141   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
<span class="token punctuation">[</span>root@haproxy1 case11-secret<span class="token punctuation">]</span><span class="token comment"># </span>
<span class="token comment">#切换到141节点</span>
<span class="token punctuation">[</span>root@k8s-node2 ~<span class="token punctuation">]</span><span class="token comment"># find / -name 'password'</span>
/var/lib/docker/overlay2/decf6b3c70bec605802f5824d982e12694f9aa75ecf085da17b7061cc36cfaa8/diff/var/lib/pam/password
/var/lib/docker/overlay2/1131ff1fd5fdc33c09af75345f10acc00cffff2e6b9f37402df3130606c7c00f/diff/etc/openldap/certs/password
/var/lib/docker/overlay2/18ac3e1b60586687ead24191c62597ca4a158506cbccceba53a770114c9cb0d0/diff/var/lib/pam/password
/var/lib/docker/overlay2/1cca6cd2f57a6d21aab637d8452ac1570a8434f8106d5b6f43823fafd0a0c263/diff/var/lib/pam/password
/var/lib/docker/overlay2/7358f47add11f41973fdf6c201d0f1961738ee879b56062b4e256854a6a60df1/diff/var/lib/pam/password
/var/lib/docker/overlay2/93756e042d8e6f52623036eca0a1ea732c7c31f05cdbe2771e70199efaba686e/merged/var/lib/pam/password
/var/lib/docker/overlay2/4ba8f3e91be4ef9317c60e320ee738b8b454df6fed0ed4008c4db16cdd3d17f0/merged/etc/openldap/certs/password
/var/lib/docker/overlay2/7580b8986873ffe858a426a12a1b36dd81ea97d1a6eb1bfd39bf28a0d615d7b3/merged/var/lib/pam/password
/var/lib/docker/overlay2/829c438193e680be085f965ab2eaa410e8990d6fc8d14e08c131ade7d152264b/merged/var/lib/pam/password
/var/lib/kubelet/pods/3e85f165-ec0e-4c9c-8d23-718f8a86fe39/volumes/kubernetes.io~secret/nginx-config/password
/var/lib/kubelet/pods/3e85f165-ec0e-4c9c-8d23-718f8a86fe39/volumes/kubernetes.io~secret/nginx-config/<span class="token punctuation">..</span>2022_05_21_05_38_53.1146412810/password
/etc/openldap/certs/password
<span class="token punctuation">[</span>root@k8s-node2 ~<span class="token punctuation">]</span><span class="token comment"># cat /var/lib/kubelet/pods/3e85f165-ec0e-4c9c-8d23-718f8a86fe39/volumes/kubernetes.io~secret/nginx-config/password</span>
<span class="token number">123456</span><span class="token punctuation">[</span>root@k8s-node2 ~<span class="token punctuation">]</span><span class="token comment"># cat /var/lib/kubelet/pods/3e85f165-ec0e-4c9c-8d23-718f8a86fe39/volumes/kubernetes.io~secret/nginx-config/..2022_05_21_05_38_53.1146412810/password</span>
<span class="token number">123456</span><span class="token punctuation">[</span>root@k8s-node2 ~<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可以通过etcd查询</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@etcd2 ~<span class="token punctuation">]</span><span class="token comment"># etcdctl get / --keys-only --prefix |grep mysecret </span>
/registry/secrets/myserver/mysecret-stringdata
<span class="token punctuation">[</span>root@etcd2 ~<span class="token punctuation">]</span><span class="token comment"># etcdctl  get /registry/secrets/myserver/mysecret-stringdata</span>
/registry/secrets/myserver/mysecret-stringdata
k8s


v1Secret
         mysecret-stringdatmyserver"*<span class="token variable">$7c1bcec5</span>-dd72-4ce3-9113-c86cad036a452<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2、创建tls类型</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 case11-secret<span class="token punctuation">]</span><span class="token comment"># </span>
<span class="token punctuation">[</span>root@haproxy1 case11-secret<span class="token punctuation">]</span><span class="token comment"># kubectl create secret --help</span>
Create a secret using specified subcommand.

Available Commands:
  docker-registry 创建一个给 Docker registry 使用的 secret
  generic         Create a secret from a <span class="token builtin class-name">local</span> file, directory, or literal value
  tls             创建一个 TLS secret

Usage:
  kubectl create secret <span class="token punctuation">[</span>flags<span class="token punctuation">]</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span>

Use <span class="token string">"kubectl &lt;command> --help"</span> <span class="token keyword">for</span> <span class="token function">more</span> information about a given command.
Use <span class="token string">"kubectl options"</span> <span class="token keyword">for</span> a list of global command-line options <span class="token punctuation">(</span>applies to all commands<span class="token punctuation">)</span>.

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>自签名证书</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 certs-test<span class="token punctuation">]</span><span class="token comment"># openssl  req -x509 -sha256 -newkey rsa:4096 -keyout ca.key -out ca.crt -days 3560 -nodes -subj '/CN=www.ca.com'</span>
Generating a <span class="token number">4096</span> bit RSA private key
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.++
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>++
writing new private key to <span class="token string">'ca.key'</span>
-----
<span class="token punctuation">[</span>root@haproxy1 certs-test<span class="token punctuation">]</span><span class="token comment"># </span>
<span class="token punctuation">[</span>root@haproxy1 certs-test<span class="token punctuation">]</span><span class="token comment"># openssl req -new -newkey rsa:4096 -keyout server.key -out server.csr -nodes -subj '/CN=www.mysite.com'</span>
Generating a <span class="token number">4096</span> bit RSA private key
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>++
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>++
writing new private key to <span class="token string">'server.key'</span>
-----
<span class="token punctuation">[</span>root@haproxy1 certs-test<span class="token punctuation">]</span><span class="token comment"># openssl x509 -req -sha256 -days 3650 -in server.csr -CA ca.crt  -CAkey ca.key  -set_serial 01 -out server.crt</span>
Signature ok
<span class="token assign-left variable">subject</span><span class="token operator">=</span>/CN<span class="token operator">=</span>www.mysite.com
Getting CA Private Key
<span class="token punctuation">[</span>root@haproxy1 certs-test<span class="token punctuation">]</span><span class="token comment"># ll</span>
总用量 <span class="token number">20</span>
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">1789</span> <span class="token number">5</span>月  <span class="token number">21</span> <span class="token number">20</span>:09 ca.crt
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">3272</span> <span class="token number">5</span>月  <span class="token number">21</span> <span class="token number">20</span>:09 ca.key
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">1667</span> <span class="token number">5</span>月  <span class="token number">21</span> <span class="token number">20</span>:11 server.crt
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">1590</span> <span class="token number">5</span>月  <span class="token number">21</span> <span class="token number">20</span>:10 server.csr
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">3268</span> <span class="token number">5</span>月  <span class="token number">21</span> <span class="token number">20</span>:10 server.key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建secret</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@haproxy1 certs-test<span class="token punctuation">]</span><span class="token comment"># kubectl create secret tls  myserver-tls --cert=./server.crt  --key=./server.key  -n myserver </span>
secret/myserver-tls created
<span class="token punctuation">[</span>root@haproxy1 certs-test<span class="token punctuation">]</span><span class="token comment"># kubectl get secrets  -n myserver </span>
NAME                  TYPE                                  DATA   AGE
default-token-2htdj   kubernetes.io/service-account-token   <span class="token number">3</span>      6d1h
myserver-tls          kubernetes.io/tls                     <span class="token number">2</span>      96s
<span class="token punctuation">[</span>root@haproxy1 certs-test<span class="token punctuation">]</span><span class="token comment"># </span>
<span class="token punctuation">[</span>root@haproxy1 certs-test<span class="token punctuation">]</span><span class="token comment"># kubectl describe secrets -n myserver myserver-tls </span>
Name:         myserver-tls
Namespace:    myserver
Labels:       <span class="token operator">&lt;</span>none<span class="token operator">></span>
Annotations:  <span class="token operator">&lt;</span>none<span class="token operator">></span>

Type:  kubernetes.io/tls

Data
<span class="token operator">==</span><span class="token operator">==</span>
tls.crt:  <span class="token number">1667</span> bytes
tls.key:  <span class="token number">3268</span> bytes

<span class="token punctuation">[</span>root@haproxy1 certs-test<span class="token punctuation">]</span><span class="token comment"># kubectl get secrets -n myserver  myserver-tls  -o yaml </span>
apiVersion: v1
data:
  tls.crt: <span class="token assign-left variable">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVvakNDQW9vQ0FRRXdEUVlKS29aSWh2Y05BUUVMQlFBd0ZURVRNQkVHQTFVRUF3d0tkM2QzTG1OaExtTnYKYlRBZUZ3MHlNakExTWpFeE1qRXhORGhhRncwek1qQTFNVGd4TWpFeE5EaGFNQmt4RnpBVkJnTlZCQU1NRG5kMwpkeTV0ZVhOcGRHVXVZMjl0TUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUEzby8xCmhJTjQzU0MycWVyU1dCeTRxZUNvOU5nMGJTWE1JMXNkajdBTzVlaEVhL0tQUnpPd0JzWTg3WXBpQUQ3NU5kZ3AKMnA4S1FtWDZmNUpvTDdBNXFWMzdoSzQzK0F4QVBWb1g0MGhCdk43V0h2TUZOSGJZN3FYRnFiRk5vRzNLZVB4ZApqalcvaC94b3I3d3B5eHJmMVlpSm9zaktyV3lLQ3JpR1lBemUxY2VURXU4YjdUN2Z5T0MxT0U4QWFqekFpM0RwCjZwTnUzL1BWNmpkMDN3azlJUnp1RW9BZTg4dTZmMVI2cEZGdEZ3K1JTa1R6R2RVWkRLOTlXMWNxTXpYUVlVdS8KY2Yxb1dTMmppdmtGK0dkdTlsRUM0NTdhakd1RStxQVNaNVNVOWIwcldJRGZxeGtYaCtqc21Udmg3WnZ2NkpxcAo3RXUxTVgvdUovUE9FUVMrcUpvOURDNnFEREFyM0R0TW5OczFXTjFibmp2UDhaUyt0TTN1MXd4UkhtLzU5MExCCkp1MWtYWU43cGxWcEdNZzh1WDd0ZXFZQVA4bEJoTVBIWVhnaHZZemwyNkJXMjZpcGJNM3Jhejc5elhlVk5ta0oKU1h6eU9aNmwxZEJGazJ5WHJDVllhQ1JpY1RGNDJsUlM2K05ld3lBay9vZDZkcHFDbWw2MHoxa0IrbmFTejVJRApKQTZpQVhCT2Yxemg1K21JVjdwUzZvZ0NVTUhMRnQ5NUZkdUtvYlFRSWgzcWxsZmQ1MFZIbkhZSkVjK2x4aXBYCnZhcEwrMFhFZXdxbFpJd3QzVDQ0VmdHWHh1bC83U0JQSWhTQVdVOHk1QVB3UXNmNEpuV1puK1VjMnNGUnYzanUKRWdjNWFOcWM2c3lCTHFLREZPbDI5L2d3SUdHNG1aT1J3dkRGQUpzQ0F3RUFBVEFOQmdrcWhraUc5dzBCQVFzRgpBQU9DQWdFQUZ1MGhzQlltR3VxOGZVb2VyWFNkSXRyNDZBMVY2QWRFdFRpZVdMZ0JUWnk4SThtVmR0MVNYUVNGCm1QaXpLdHU3ZWhuZGZnYUVIRDRlVHdyb1RGTDFIeTZNZW1uY2NhTThkcnRuVGNPclVVdlBMa252TEFyY3JMc3oKZUlqelZCdzJ2UGI4Ni8yVi9Nei9PUHdFOHZDTEhrN1p1YnNVbnZwZEhUY3lIekU1cVk1SGNtWUxINHB2a0xJcQpYV2V3WUZOMldnL2lETkc3engvSXJjd3MvOG50ZHlNWWVtdDEyV2VWVFRsa2tLekZhN3BhQ3BWSnlmL3hyWkJjCmdsTXhGdGozZDhKc29TbTdHZHlpay9NUlJKT1d5elNUSzEyNzJOVENURFFHeFU2cDFRcWdRYkw0QWRyd3FQWlgKUU9adkoxeUlUaVFFSS9hUW9FaWhYeEJleEszQ0J4V21keERpajU1dDhqakFQVDhlekxZWitQS2pXNElNYlhHYQpSeGhJY0RJVmhxck1XQzhFeW5CY3lxUndUdHNoV2M2bTlURHViMTVzcVV6VnZkVDRWZ3lER3AxRndvS250STJtCjRRU0d3UGduRlZ1d1BWM0ptaWR0bnArSldTRUd0cTErSXpFTEszZGowTk9aWnpkSnNNVWlrWmhRTS9NWGZIcDMKR1FEN2dPN0dia1lOb0w1Qm1OQUE1QTAxMTRPdGh1a21vcnNiUzk3MFh3YUxOU1hDd3BTL1V4cXNkMGdBRk9nVgpCbEw5cTl6djE3cjhBdVJmREZrbmFpTnYvdnA3VktkTFAzUTFSc0IwUVdyUkFHVCsvd3UzVFJIa3piblJYU1JsCnZWS3F4QTZNMSs1K085VGJ4ZXVmRlViZlYxNHZ6bmNLU2xKK2dBb0ljTGVtSE1aUkVMUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo</span><span class="token operator">=</span>
  tls.key: <span class="token assign-left variable">LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRUUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1Nzd2dna25BZ0VBQW9JQ0FRRGVqL1dFZzNqZElMYXAKNnRKWUhMaXA0S2owMkRSdEpjd2pXeDJQc0E3bDZFUnI4bzlITTdBR3hqenRpbUlBUHZrMTJDbmFud3BDWmZwLwprbWd2c0RtcFhmdUVyamY0REVBOVdoZmpTRUc4M3RZZTh3VTBkdGp1cGNXcHNVMmdiY3A0L0YyT05iK0gvR2l2CnZDbkxHdC9WaUltaXlNcXRiSW9LdUlaZ0RON1Z4NU1TN3h2dFB0L0k0TFU0VHdCcVBNQ0xjT25xazI3Zjg5WHEKTjNUZkNUMGhITzRTZ0I3enk3cC9WSHFrVVcwWEQ1RktSUE1aMVJrTXIzMWJWeW96TmRCaFM3OXgvV2haTGFPSworUVg0WjI3MlVRTGpudHFNYTRUNm9CSm5sSlQxdlN0WWdOK3JHUmVINk95Wk8rSHRtKy9vbXFuc1M3VXhmKzRuCjg4NFJCTDZvbWowTUxxb01NQ3ZjTzB5YzJ6VlkzVnVlTzgveGxMNjB6ZTdYREZFZWIvbjNRc0VtN1dSZGczdW0KVldrWXlEeTVmdTE2cGdBL3lVR0V3OGRoZUNHOWpPWGJvRmJicUtsc3pldHJQdjNOZDVVMmFRbEpmUEk1bnFYVgowRVdUYkplc0pWaG9KR0p4TVhqYVZGTHI0MTdESUNUK2gzcDJtb0thWHJUUFdRSDZkcExQa2dNa0RxSUJjRTUvClhPSG42WWhYdWxMcWlBSlF3Y3NXMzNrVjI0cWh0QkFpSGVxV1Y5M25SVWVjZGdrUno2WEdLbGU5cWt2N1JjUjcKQ3FWa2pDM2RQamhXQVpmRzZYL3RJRThpRklCWlR6TGtBL0JDeC9nbWRabWY1Unphd1ZHL2VPNFNCemxvMnB6cQp6SUV1b29NVTZYYjMrREFnWWJpWms1SEM4TVVBbXdJREFRQUJBb0lDQUJ0QXM0YXpkcVJWTWlqaVdUbHk0dVhpClhhNEZuMzNTQ0FvNFNRbGtQSjdJYjBCc3BrREl3b0JCM0FvV1RPUE0wa1ZXbitGbVlpSTVUSkE4aEVkNm84VHEKZmpjRUFsUjhZNDFmcjljajdQRE10Smw3bHFLUy93TlNCejg5TjgweVJIM0dJVXFkcUVObGxBZ1kyV0ZHZkN3dwptUEgyOW1LQURQTTlIeTg1eER1WFFab3E3MWVBd0hSZmw3RTZjMG1QQU9EU1JjSjBwVG9GS0tlU2ZOd216SFoyCmpXeDBoZFhDbDZhcDJJNndiZFJLRXJkdWMvb3d6dTF2dThEb2pvRlEwS0JwWHhyOU5iN2R5TTNtcW1WOWZPZnEKaVprSHhhazJMVVZuUG5teWh2OEVWLzl4WUhJYUUzaVAvQkRUZFZuY0kyZHZNT2wvWjhPVTc3dXlyZ1FGZWJiLwpCMlZHOGRBSnFoaUFnN2FvNGZDNG9KSHBPUXNtWThodWo5L1RuaEpFaFYyb0tzcHdDbGF4UFN6MUtWOEhWdmJTCnFGU3pKNk0rQmM4WnIzeXJ2Z3VRK20yY3FNallDL1VnMTdXNkROelgvTldsYlVBTnV1MVlkMnZzRTd0S0ltL1oKU3dvKzdPZ3VDWnNobDFscHo1Wno3WmM5d0xncTVZWU1wRGpLdTJEWGJyTzJPMEZiRjh6NExQNWJFZkFXNk9tbwpheGdDTkUrdXoxMDErVk9EaDhVckxvbU1McUVidTNOdngyb3gyWHpJOVN0Q0plTnJjeG5hSGdYUHNpTGhrYlFHCmd3STFvTHZaWHNWelo0K2dZdmloWHlib2M1NVhoZzJPTVJ4RTBYbjlzTEtoSUFCZDZSd05KNGp5Smc3eUVkWEcKT05kVjB0MFpUTDAreVl6WHF1RVpBb0lCQVFEOGNtdUh0N2p1bXdrc0lyTTBFZGhNQ2k3TGExbVlMMkVsVFA2dApEa1RxYVYvTHVKSS9YN2pnOHpCc0p5ajNVZEtpYmRBVW5aR0VmcEhxYWRCMGpUa2FPYnUramptMEpzTEcxS2RvClI2Q3dqL1UwTUM3RnN6WSt4MVJtdFhENldBK2RGQkhGRFB1L2RVenVzdFdsWG9EMlBiWjFrejk3M0EwdUEwYjIKMWhkK0psakliVDBCaGc1aDZSR3VvRmk5T2diQk9Ja1hTK0IxZ1BzZ2F1c2N5a0o1SGVDZzQvQVd5ZVJIbTYrMgpCRGFZNXYrbG9uNVg1Z09WMmNqK1lWK3lXWGtzQlRLRGg1dzU2NjhuOGkvQzg4RFM1SE42b0NSMnRaQTNGTDY0CkZqb3ZrdlRMSVJtL3VYMTM4UXdmVHVjRGtrV2pDcnRpb2NZdnBqQytLWnJHZktNMUFvSUJBUURoc2R6Miswb3UKWTY0aGtEWWhmVGZ4eG40R0twWklNcGtva3hoSTN0QmhIVXhheVpjY0RLaWFvRUIvMFFrWElXSGhpTGJ1QTJIQQpKbmxDMzN3cy91MU5zemd2N1VVaGJyQmgyYmkya2JkYmJsaVV2bU55K3VkU1VhYzY3NUdQTU5lV29DbEVOclFaCmJ2eTVCNEh1dW94QWJIVzlmd2dNRUFRRGUycCtqcW5mK0lCMGtvQ2JzdFgrN1B6aEVGMG9nbnl5cEtla3N6QTkKQWZzcVVhY0loeDdiWWVJMkNzbUdRSW9FZ01PM3hGVm81TnVIMUYwcmRwd2dWbVNxcnkrQzBhRGw2OGxhajFhTApvN2dzdGdzSy82Q3NTcHBHVGpZRHl5Wk1WN0d0dUVsQXVubVlEbklMcStFYTZLc3E2bGR3ZUFwQnh4SXE0QVVFClBJQWl6YlVZQXo2UEFvSUJBQzlTVDMvZ1c2VTJvTENLVEtkZEZQdWtDUU9PdXZ2QkhlZTlHQnhlaVdLYm9CNXoKR2M4UlpYbWRmSjA1ZGY5dWNocUtsUy9ZSFpnRmxkcW9QVEFyN09GU296UGtPMExlNVRJYVdNcythZ3ZPNEhzSQo4U3VVSFg0RkpYZ2ZXTzlFcEtDZ1MzaHhwNXRMSk1HMStrQ0doNHdoSTF2RTMyaWJaa2tTeWpHcERqeFNlZUFRClFoaFFCZEFxdldyTG1mYldzcjl6bHBjc1hRWUp5SWxhSVhxREc1VFNtZkh1NkdtTkxPS1RkNHVhSEpYcTcwOGcKTjZqSWNER2Q0b1Iwd2xpUFZ4eCtXT3E0OS9zUGlBVG43RFlTTlRvVEl1YUFzSFVrTWNWeGVSTE83OWROSitBUAo4MkN5SjZmZElwV1gxOHdlbGprcTROZHJWZGhHd2VwVHFEUysxbVVDZ2dFQU1IK3JEdnZTNWdNUGtURFBJUVVxCmQyOEM5OHBBL3dTNGVzcVpKbGVUQ2J0bEJBRmIwbkE1N3ZoT3craWtmbTd5L0tjSFFFQkR5aW02Vnc5MVBLb1AKVG1vYndkakh5VFppK3JQeGlISHBwK0VmY2Q4enVhcUcrTjZKQkJZay9sTXRrTFdjQ0llRXpnNVdpbUE5b0pJLwp2enhQVk1ndWI0RWxpNllDclcxMHZhZEYyMGI4RWZrdEdSbk9BWU1sc2FYUXJBYkw2NDJCNlNvNjBjNDRDWklYCnBHYjFXRTJiSHBsUnowUG9TdDRLeUg2ZFdpUGRYWkNnWGlhU2ZVY2wrNE9XZ3JIWFUvbUhUSHlEQUVDaVFOdkwKcUJwajZvVzEvN3l3M3lqZENvcVdXeTEzSWFEQkN4Y0ZTV1lFR2pXL1VuREpLM2RleFEzY3BodG1JWlI0dk04OQpxd0tDQVFCWGxhNXAxYkx5SEFCUnZOYWtSeE1YOUF2R0ZoS3ZFV2U1K3IvQmV0NDVlZ1Y3algrZ0lhaFVnU0Y0CjNUOWV0dDFjRjFxNVUyMUVJbm9va05XcmNieVM4MllUczZuaEhwUEJOTDlxTUM5MzhiNGkrTWhCODQrVXpIbW8KUDkyN0p4bWFWT1RzRkRqclV6anBqanRROW8zNTNvK1Znd3Rtc0FxUzU2ZUppeFhqd0JpaTlHbDhoSmpQZ3dXSAorVkh4Sy9rRE1xNGpWUy9ReGU2QVVEODlxR1lhT2J6UGtsZnVCWUFFZHkrR1duMkVJcmR4N0RsT0s5bks4QmtjCkNaN2k2eHFpZWdGUDNScmdsSFFBNTc0NndlTDhZelhtU3NMZUJvUFdVVGJyZGNSYXJmNU4zR1ZldmdHamNLakUKc1VCM1NZQ25EZS9jL1JvTVU1TzRpM0R6b0NHYwotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg</span><span class="token operator">==</span>
kind: Secret
metadata:
  creationTimestamp: <span class="token string">"2022-05-24T08:04:32Z"</span>
  name: myserver-tls
  namespace: myserver
  resourceVersion: <span class="token string">"2659813"</span>
  uid: dbfe8d83-bc9c-495b-8eb3-93bd61ff3584
type: kubernetes.io/tls


<span class="token comment">#上面的公钥和私钥其实都是通过base64加密的，可以进行解密查看</span>
<span class="token punctuation">[</span>root@haproxy1 certs-test<span class="token punctuation">]</span><span class="token comment"># echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVvakNDQW9vQ0FRRXdEUVlKS29aSWh2Y05BUUVMQlFBd0ZURVRNQkVHQTFVRUF3d0tkM2QzTG1OaExtTnYKYlRBZUZ3MHlNakExTWpFeE1qRXhORGhhRncwek1qQTFNVGd4TWpFeE5EaGFNQmt4RnpBVkJnTlZCQU1NRG5kMwpkeTV0ZVhOcGRHVXVZMjl0TUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUEzby8xCmhJTjQzU0MycWVyU1dCeTRxZUNvOU5nMGJTWE1JMXNkajdBTzVlaEVhL0tQUnpPd0JzWTg3WXBpQUQ3NU5kZ3AKMnA4S1FtWDZmNUpvTDdBNXFWMzdoSzQzK0F4QVBWb1g0MGhCdk43V0h2TUZOSGJZN3FYRnFiRk5vRzNLZVB4ZApqalcvaC94b3I3d3B5eHJmMVlpSm9zaktyV3lLQ3JpR1lBemUxY2VURXU4YjdUN2Z5T0MxT0U4QWFqekFpM0RwCjZwTnUzL1BWNmpkMDN3azlJUnp1RW9BZTg4dTZmMVI2cEZGdEZ3K1JTa1R6R2RVWkRLOTlXMWNxTXpYUVlVdS8KY2Yxb1dTMmppdmtGK0dkdTlsRUM0NTdhakd1RStxQVNaNVNVOWIwcldJRGZxeGtYaCtqc21Udmg3WnZ2NkpxcAo3RXUxTVgvdUovUE9FUVMrcUpvOURDNnFEREFyM0R0TW5OczFXTjFibmp2UDhaUyt0TTN1MXd4UkhtLzU5MExCCkp1MWtYWU43cGxWcEdNZzh1WDd0ZXFZQVA4bEJoTVBIWVhnaHZZemwyNkJXMjZpcGJNM3Jhejc5elhlVk5ta0oKU1h6eU9aNmwxZEJGazJ5WHJDVllhQ1JpY1RGNDJsUlM2K05ld3lBay9vZDZkcHFDbWw2MHoxa0IrbmFTejVJRApKQTZpQVhCT2Yxemg1K21JVjdwUzZvZ0NVTUhMRnQ5NUZkdUtvYlFRSWgzcWxsZmQ1MFZIbkhZSkVjK2x4aXBYCnZhcEwrMFhFZXdxbFpJd3QzVDQ0VmdHWHh1bC83U0JQSWhTQVdVOHk1QVB3UXNmNEpuV1puK1VjMnNGUnYzanUKRWdjNWFOcWM2c3lCTHFLREZPbDI5L2d3SUdHNG1aT1J3dkRGQUpzQ0F3RUFBVEFOQmdrcWhraUc5dzBCQVFzRgpBQU9DQWdFQUZ1MGhzQlltR3VxOGZVb2VyWFNkSXRyNDZBMVY2QWRFdFRpZVdMZ0JUWnk4SThtVmR0MVNYUVNGCm1QaXpLdHU3ZWhuZGZnYUVIRDRlVHdyb1RGTDFIeTZNZW1uY2NhTThkcnRuVGNPclVVdlBMa252TEFyY3JMc3oKZUlqelZCdzJ2UGI4Ni8yVi9Nei9PUHdFOHZDTEhrN1p1YnNVbnZwZEhUY3lIekU1cVk1SGNtWUxINHB2a0xJcQpYV2V3WUZOMldnL2lETkc3engvSXJjd3MvOG50ZHlNWWVtdDEyV2VWVFRsa2tLekZhN3BhQ3BWSnlmL3hyWkJjCmdsTXhGdGozZDhKc29TbTdHZHlpay9NUlJKT1d5elNUSzEyNzJOVENURFFHeFU2cDFRcWdRYkw0QWRyd3FQWlgKUU9adkoxeUlUaVFFSS9hUW9FaWhYeEJleEszQ0J4V21keERpajU1dDhqakFQVDhlekxZWitQS2pXNElNYlhHYQpSeGhJY0RJVmhxck1XQzhFeW5CY3lxUndUdHNoV2M2bTlURHViMTVzcVV6VnZkVDRWZ3lER3AxRndvS250STJtCjRRU0d3UGduRlZ1d1BWM0ptaWR0bnArSldTRUd0cTErSXpFTEszZGowTk9aWnpkSnNNVWlrWmhRTS9NWGZIcDMKR1FEN2dPN0dia1lOb0w1Qm1OQUE1QTAxMTRPdGh1a21vcnNiUzk3MFh3YUxOU1hDd3BTL1V4cXNkMGdBRk9nVgpCbEw5cTl6djE3cjhBdVJmREZrbmFpTnYvdnA3VktkTFAzUTFSc0IwUVdyUkFHVCsvd3UzVFJIa3piblJYU1JsCnZWS3F4QTZNMSs1K085VGJ4ZXVmRlViZlYxNHZ6bmNLU2xKK2dBb0ljTGVtSE1aUkVMUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=" |base64 -d</span>
-----BEGIN CERTIFICATE-----
MIIEojCCAooCAQEwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UEAwwKd3d3LmNhLmNv
bTAeFw0yMjA1MjExMjExNDhaFw0zMjA1MTgxMjExNDhaMBkxFzAVBgNVBAMMDnd3
dy5teXNpdGUuY29tMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA3o/1
hIN43SC2qerSWBy4qeCo9Ng0bSXMI1sdj7AO5ehEa/KPRzOwBsY87YpiAD75Ndgp
2p8KQmX6f5JoL7A5qV37hK43+AxAPVoX40hBvN7WHvMFNHbY7qXFqbFNoG3KePxd
jjW/h/xor7wpyxrf1YiJosjKrWyKCriGYAze1ceTEu8b7T7fyOC1OE8AajzAi3Dp
6pNu3/PV6jd03wk9IRzuEoAe88u6f1R6pFFtFw+RSkTzGdUZDK99W1cqMzXQYUu/
cf1oWS2jivkF+Gdu9lEC457ajGuE+qASZ5SU9b0rWIDfqxkXh+jsmTvh7Zvv6Jqp
7Eu1MX/uJ/POEQS+qJo9DC6qDDAr3DtMnNs1WN1bnjvP8ZS+tM3u1wxRHm/590LB
Ju1kXYN7plVpGMg8uX7teqYAP8lBhMPHYXghvYzl26BW26ipbM3raz79zXeVNmkJ
SXzyOZ6l1dBFk2yXrCVYaCRicTF42lRS6+NewyAk/od6dpqCml60z1kB+naSz5ID
JA6iAXBOf1zh5+mIV7pS6ogCUMHLFt95FduKobQQIh3qllfd50VHnHYJEc+lxipX
vapL+0XEewqlZIwt3T44VgGXxul/7SBPIhSAWU8y5APwQsf4JnWZn+Uc2sFRv3ju
Egc5aNqc6syBLqKDFOl29/gwIGG4mZORwvDFAJsCAwEAATANBgkqhkiG9w0BAQsF
AAOCAgEAFu0hsBYmGuq8fUoerXSdItr46A1V6AdEtTieWLgBTZy8I8mVdt1SXQSF
mPizKtu7ehndfgaEHD4eTwroTFL1Hy6MemnccaM8drtnTcOrUUvPLknvLArcrLsz
eIjzVBw2vPb86/2V/Mz/OPwE8vCLHk7ZubsUnvpdHTcyHzE5qY5HcmYLH4pvkLIq
XWewYFN2Wg/iDNG7zx/Ircws/8ntdyMYemt12WeVTTlkkKzFa7paCpVJyf/xrZBc
glMxFtj3d8JsoSm7Gdyik/MRRJOWyzSTK1272NTCTDQGxU6p1QqgQbL4AdrwqPZX
QOZvJ1yITiQEI/aQoEihXxBexK3CBxWmdxDij55t8jjAPT8ezLYZ+PKjW4IMbXGa
RxhIcDIVhqrMWC8EynBcyqRwTtshWc6m9TDub15sqUzVvdT4VgyDGp1FwoKntI2m
4QSGwPgnFVuwPV3Jmidtnp+JWSEGtq1+IzELK3dj0NOZZzdJsMUikZhQM/MXfHp3
GQD7gO7GbkYNoL5BmNAA5A0114OthukmorsbS970XwaLNSXCwpS/Uxqsd0gAFOgV
BlL9q9zv17r8AuRfDFknaiNv/vp7VKdLP3Q1RsB0QWrRAGT+/wu3TRHkzbnRXSRl
vVKqxA6M1+5+O9TbxeufFUbfV14vzncKSlJ+gAoIcLemHMZRELQ<span class="token operator">=</span>
-----END CERTIFICATE-----<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>




























]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>分析ExitCode定位Pod异常退出原因</title>
    <url>/2022/08/23/%E5%88%86%E6%9E%90%20ExitCode%20%E5%AE%9A%E4%BD%8D%20Pod%20%E5%BC%82%E5%B8%B8%E9%80%80%E5%87%BA%E5%8E%9F%E5%9B%A0%20/</url>
    <content><![CDATA[<p>使用<code>kubectl describe pod &lt;pod name&gt;</code>查看异常  pod 的状态:</p>
<pre class="line-numbers language-none"><code class="language-none">Containers :
  kubedns :  
      Container ID :
docker :&#x2F;&#x2F;5fb8adf9ee62afc6d3f6f3d9590041818750b392dff015d7091eaaf99cf1c945
      Image: ccr.ccs.tencentyun.com&#x2F;library&#x2F;kubedns-amd64:1.14.4
      Image ID: docker-pullable:&#x2F;&#x2F;ccr.ccs.tencentyun.com&#x2F;library&#x2F;kubedns- amd64@sha256:40790881bbe9ef4ae4ff7fe8b892498eecb7fe6dcc22661402f271e03f7de344
      Ports: 10053&#x2F;UDP, 10053&#x2F;TCP, 10055&#x2F;TCP
      Host Ports: 0&#x2F;UDP, 0&#x2F;TCP, 0&#x2F;TCP
      Args:
        --domain&#x3D;cluster.local.
        --dns-port&#x3D;10053
        --config-dir&#x3D;&#x2F;kube-dns-config
        --v&#x3D;2
      State: Running
        Started: Tue, 15 Aug 2022 10:58:49 +0800
      Last State: Terminated
        Reason: Error
        Exit Code: 255
        Started: Tue, 15 Aug 2022 10:40:42 +0800
        Finished: Tue, 15 Aug 2022 10:58:27 +0800
      Ready: True
      Restart Count: 1  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在容器列表里看 <code>Last State</code> 字段，其中 <code>ExitCode</code> 即程序上次退出时的状态码，如果不为 0，表示异常退出，我们可以分析下原因。</p>
<h1 id="退出状态码的区间"><a href="#退出状态码的区间" class="headerlink" title="退出状态码的区间"></a>退出状态码的区间</h1><ul>
<li>必须在 0-255 之间</li>
<li>0 表示正常退出</li>
<li>外界中断将程序退出的时候状态码区间在 129-255，(操作系统给程序发送中断信号，比如<code>kill -9</code>是<code>SIGKILL</code> ，<code>ctrl+c</code>是<code>SIGINT</code>）</li>
<li>一般程序自身原因导致的异常退出状态区间在 1-128 (这只是一般约定，程序如果一定要用 129-255的状态码也是可以的)</li>
</ul>
<p>假如写代码指定的退出状态码时不在 0-255 之间，例如: <code>exit(-1)</code> ，这时会自动做一个转换，最 终呈现的状态码还是会在 0-255 之间。我们把状态码记为 <code>code</code></p>
<ul>
<li>当指定的退出时状态码为负数，那么转换公式如下:</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">256 - (|code| % 256)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>当指定的退出时状态码为正数，那么转换公式如下:</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">code % 256<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="常见异常状态码"><a href="#常见异常状态码" class="headerlink" title="常见异常状态码"></a>常见异常状态码</h1><ul>
<li>137 (被 <code>SIGKILL</code> 中断信号杀死)<ul>
<li>此状态码一般是因为 pod 中容器内存达到了它的资源限制( <code>resources.limits</code> )，一般 是内存溢出(OOM)，CPU达到限制只需要不分时间片给程序就可以。因为限制资源是通过 linux 的 cgroup 实现的，所以 cgroup 会将此容器强制杀掉，类似于 <code>kill -9</code> ， 此时在 <code>describe pod</code> 中可以看到 Reason 是 OOMKilled</li>
<li>还可能是宿主机本身资源不够用了(OOM)，内核会选取一些进程杀掉来释放内存</li>
<li>不管是 cgroup 限制杀掉进程还是因为节点机器本身资源不够导致进程死掉，都可以从系 统日志中找到记录:ubuntu 的系统日志在 <code>/var/log/syslog</code> ，centos 的系统日志在 <code>/var/log/messages</code> ，都可以用 <code>journalctl -k</code> 来查看系统日志</li>
<li>也可能是 livenessProbe (存活检查) 失败，kubelet 杀死的 pod</li>
<li>还可能是被恶意木马进程杀死</li>
</ul>
</li>
<li>1 和 255<ul>
<li>这种可能是一般错误，具体错误原因只能看容器日志，因为很多程序员写异常退出时习惯用 <code>exit(1)</code> 或 <code>exit(-1)</code> ，-1 会根据转换规则转成 255</li>
</ul>
</li>
</ul>
<pre><code>
</code></pre>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>使用阿里云oss静态页面部署服务</title>
    <url>/2022/08/02/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91oss%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="一、使用阿里云OSS静态页面部署公司服务"><a href="#一、使用阿里云OSS静态页面部署公司服务" class="headerlink" title="一、使用阿里云OSS静态页面部署公司服务"></a>一、使用阿里云OSS静态页面部署公司服务</h3><p>场景：因公司新业务需要将项目部署在阿里云oss上，并配置域名解析</p>
<ol>
<li><p><strong>创建bucket桶</strong><br><img src="/images/pasted-4.png" alt="bucket"><br>注意：读写权限选择公共读<br><img src="/images/pasted-5.png" alt="bucket2"></p>
</li>
<li><p><strong>将bucket上传到bucket中</strong><br><img src="/images/pasted-6.png" alt="upload successful"></p>
</li>
<li><p><strong>配置静态页面</strong><br><img src="/images/pasted-7.png" alt="upload successful"></p>
</li>
</ol>
<p><strong>如果不配置静态页面会无法访问，注意要添加默认404规则，如果不添加则会报下面的错误：</strong></p>
<p><img src="/images/pasted-9.png" alt="upload successful"><br> <strong>添加域名解析</strong></p>
<p><strong>查看oss外网访问域名,在域名解析界面将二级域名指向oss的外网域名，如果公司有内网dns则需要在内网dns中也添加相关记录</strong></p>
<p><img src="/images/pasted-10.png" alt="upload successful"></p>
]]></content>
      <tags>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title>基于centos7的Openssh版本升级</title>
    <url>/2022/08/04/%E5%9F%BA%E4%BA%8Ecentos7%E7%9A%84Openssh%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/</url>
    <content><![CDATA[<hr>
<p>一、环境准备</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">yum <span class="token operator">-</span>y install wget tar gcc make<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>二、上传升级的软件包</p>
<p> zlib-1.2.11.tar.gz，openssl-1.1.1d .tar.gz，openssh-9.0p1.tar.gz<br> 下载地址：</p>
<blockquote>
<p><strong>zlib：</strong><br>官网<a href="http://www.zlib.net/">http://www.zlib.net/</a><br> wget <a href="https://nchc.dl.sourceforge.net/project/libpng/zlib/1.2.11/zlib-1.2.11.tar.gz">https://nchc.dl.sourceforge.net/project/libpng/zlib/1.2.11/zlib-1.2.11.tar.gz</a><br><strong>openssl：</strong><br>wget <a href="https://www.openssl.org/source/openssl-1.1.1d.tar.gz">https://www.openssl.org/source/openssl-1.1.1d.tar.gz</a><br><strong>openssh：</strong><br><a href="https://mirrors.sonic.net/pub/OpenBSD/OpenSSH/portable/">https://mirrors.sonic.net/pub/OpenBSD/OpenSSH/portable/</a></p>
</blockquote>
<p>上传到服务器并解压<br>三、安装libz</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">cd zlib-1<span class="token punctuation">.</span>2<span class="token punctuation">.</span>11
<span class="token punctuation">.</span><span class="token operator">/</span>configure <span class="token operator">--</span>prefix=<span class="token operator">/</span>usr/local/zlib
make &amp;&amp; make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>四、安装openssl</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">cd openssl-1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1d
<span class="token punctuation">.</span><span class="token operator">/</span>config <span class="token operator">--</span>prefix=<span class="token operator">/</span>usr/local/ssl <span class="token operator">-</span>d shared
make &amp;&amp; make install
<span class="token function">echo</span> <span class="token string">'/usr/local/ssl/lib'</span> >> <span class="token operator">/</span>etc/ld<span class="token punctuation">.</span>so<span class="token punctuation">.</span>conf
ldconfig <span class="token operator">-</span>v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>五、安装openssh-9.0</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">cd openssh-9<span class="token punctuation">.</span>0
<span class="token punctuation">.</span><span class="token operator">/</span>configure <span class="token operator">--</span>prefix=<span class="token operator">/</span>usr/local/openssh <span class="token operator">--</span>with-zlib=<span class="token operator">/</span>usr/local/zlib <span class="token operator">--</span>with-ssl-<span class="token function">dir</span>=<span class="token operator">/</span>usr/local/ssl
make &amp;&amp; make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>六、卸载yum安装的openssh</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">yum remove openssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>七、修改配置<br>启动前要将新生成的sshd_config修改以下几个地方</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">vim <span class="token operator">/</span>usr/local/openssh/etc/sshd_config
PermitRootLogin yes
PubkeyAuthentication yes
PasswordAuthentication yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>复制文件到相应的系统文件夹</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@pig4cloud openssh-9.0p1]</span><span class="token comment"># cd /usr/local/src/openssh-9.0p1/contrib/redhat</span>
<span class="token namespace">[root@pig4cloud redhat]</span><span class="token comment"># cp sshd.init  /etc/init.d/sshd </span>
<span class="token namespace">[root@pig4cloud redhat]</span><span class="token comment"># chkconfig --add sshd</span>
<span class="token namespace">[root@pig4cloud redhat]</span><span class="token comment"># cp /usr/local/openssh/etc/sshd_config /etc/ssh/sshd_config</span>
<span class="token namespace">[root@pig4cloud redhat]</span><span class="token comment"># cp /usr/local/openssh/sbin/sshd /usr/sbin/sshd</span>
<span class="token namespace">[root@pig4cloud redhat]</span><span class="token comment"># cp /usr/local/openssh/bin/ssh /usr/bin/ssh</span>
<span class="token namespace">[root@pig4cloud redhat]</span><span class="token comment"># cp /usr/local/openssh/bin/ssh-keygen /usr/bin/ssh-keygen</span>
<span class="token namespace">[root@pig4cloud redhat]</span><span class="token comment"># cp /usr/local/openssh/etc/ssh_host_ecdsa_key.pub /etc/ssh/ssh_host_ecdsa_key.pub</span>

<span class="token namespace">[root@pig4cloud redhat]</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>重启sshd服务</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">systemctl <span class="token function">start</span> sshd<span class="token punctuation">.</span>service
<span class="token comment">#查看版本</span>
<span class="token namespace">[root@pig4cloud redhat]</span><span class="token comment"># ssh -V</span>
OpenSSH_9<span class="token punctuation">.</span>0p1<span class="token punctuation">,</span> OpenSSL 1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1d  10 Sep 2019<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>容器进程退出原因</title>
    <url>/2022/08/23/%E5%AE%B9%E5%99%A8%E8%BF%9B%E7%A8%8B%E4%B8%BB%E5%8A%A8%E9%80%80%E5%87%BA%E5%8E%9F%E5%9B%A0/</url>
    <content><![CDATA[<p>容器进程如果是自己主动退出(不是被外界中断杀死)，  退出状态码一般在  0-128 之间，  根据约定，  正 常退出时状态码为  0，  1-127 说明是程序发生异常，  主动退出了，   比如检测到启动的参数和条件不满  足要求，  或者运行过程中发生  panic 但没有捕获处理导致程序退出。   除了可能是业务程序  BUG，  还   有其它许多可能原因</p>
<h1 id="DNS-无法解析"><a href="#DNS-无法解析" class="headerlink" title="DNS 无法解析"></a>DNS 无法解析</h1><p>可能程序依赖  集群  DNS 服务，   比如启动时连接数据库，  数据库使用  service 名称或外部域名都需 要  DNS 解析，  如果解析失败程序将报错并主动退出。   解析失败的可能原因:</p>
<ul>
<li>集群网络有问题，   Pod 连不上集群  DNS 服务</li>
<li>集群  DNS 服务挂了，  无法响应解析请求</li>
<li>Service 或域名地址配置有误，  本身是无法解析的地址</li>
</ul>
<h1 id="程序配置有误"><a href="#程序配置有误" class="headerlink" title="程序配置有误"></a>程序配置有误</h1><ul>
<li>配置文件格式错误，  程序启动解析配置失败报错退出</li>
<li>配置内容不符合规范，   比如配置中某个字段是必选但没有填写，  配置校验不通过，  程序报错主动退出</li>
</ul>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>扩容根分区</title>
    <url>/2019/06/10/%E6%89%A9%E5%AE%B9%E6%A0%B9%E5%88%86%E5%8C%BA/</url>
    <content><![CDATA[<p>基本的逻辑卷管理概念：</p>
<blockquote>
<p>PV（Physical Volume）- 物理卷<br>物理卷在逻辑卷管理中处于最底层，它可以是实际物理硬盘上的分区，也可以是整个物理硬盘，也可以是raid设备。</p>
</blockquote>
<blockquote>
<p>VG（Volumne Group）- 卷组<br>卷组建立在物理卷之上，一个卷组中至少要包括一个物理卷，在卷组建立之后可动态添加物理卷到卷组中。一个逻辑卷管理系统工程中可以只有一个卷组，也可以拥有多个卷组。</p>
</blockquote>
<blockquote>
<p>PE（Physical Extent）- 物理块</p>
<p>LVM 默认使用4MB的PE区块，而LVM的LV最多仅能含有65534个PE (lvm1<br>的格式)，因此默认的LVM的LV最大容量为4M*65534&#x2F;(1024M&#x2F;G)&#x3D;256G。PE是整个LVM<br>最小的储存区块，也就是说，其实我们的资料都是由写入PE 来处理的。简单的说，这个PE 就有点像文件系统里面的block 大小。所以调整PE<br>会影响到LVM 的最大容量！不过，在 CentOS 6.x 以后，由于直接使用 lvm2 的各项格式功能，因此这个限制已经不存在了。</p>
</blockquote>
<h1 id="一、增加新硬盘并分区"><a href="#一、增加新硬盘并分区" class="headerlink" title="一、增加新硬盘并分区"></a>一、增加新硬盘并分区</h1><pre class="line-numbers language-none"><code class="language-none">[root@test ~]# df -h

文件系统                                                         容量    已用   可用  已用%  挂载点

&#x2F;dev&#x2F;mapper&#x2F;centos_test2-root                        28G     14G   15G    48%    &#x2F;

devtmpfs                                                         1.9G     0    1.9G    0%   

 &#x2F;dev&#x2F;dev&#x2F;xvda1                                           497M    267M  231M   54%    &#x2F;boot

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">[root@test ~]# fdisk -l            #新添加一块100G硬盘并查看是否已有新磁盘&#x2F;dev&#x2F;sdb
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">[root@test ~]# fdisk &#x2F;dev&#x2F;sdb     #对新磁盘进行分区

在fdisk的交互模式中，依次输入：

n  　　　　--创建新分区

p  　　　　--创建主分区

分区号  　--默认分区编号 1

&lt;回车&gt;  　--默认起始扇区位置。

&lt;回车&gt;  　--默认结束扇区位置。 如果要把100G全部分给这个分区，直接两次回车。如果分60G输入+60GFDISK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">t 　　　　--修改分区类型
8e　　　　--修改为LVM
p　　　　 --打印分区查看类型
w　　     --保存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样就把整个磁盘分成了一个区。再看一下现有磁盘情况：</p>
<pre class="line-numbers language-none"><code class="language-none">[root@test ~]# fdisk -l

已经多出了一个新分区：

 Device Boot      Start         End      Blocks     Id  System

&#x2F;dev&#x2F;sdb1        2048     6291455     3144704       8e  Linux
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="二、初始化分区-加入卷组"><a href="#二、初始化分区-加入卷组" class="headerlink" title="二、初始化分区,加入卷组"></a>二、初始化分区,加入卷组</h1><ol>
<li>创建PV</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">[root@test ~]#pvcreate &#x2F;dev&#x2F;sdb1  

有可能会提示是否擦除xfs签名，我选了y：

WARNING: xfs signature detected on &#x2F;dev&#x2F;sdb1 at offset 0. Wipe it? [y&#x2F;n] y

  Wiping xfs signature on &#x2F;dev&#x2F;sdb1.

  Physical volume &quot;&#x2F;dev&#x2F;sdb1&quot; successfully created
  查看结果：

[root@test ~]#pvdisplay<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>查看卷组,并将初始化的分区加入到虚拟卷组</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">为卷组&quot;centos&quot;添加新的物理卷sdb1增加卷组的容量.&quot;centos&quot;是vgdisplay命令查到的卷分组名：

[root@test ~]#vgextend centos &#x2F;dev&#x2F;sdb1

下面查看一下逻辑卷：

# lvdisplay

可以看到&#x2F;dev&#x2F;centos&#x2F;root目前的LV Size是1000MiB。

下面扩展逻辑卷&#x2F;dev&#x2F;centos&#x2F;root:

# lvextend -L +60G &#x2F;dev&#x2F;centos&#x2F;root

注：+60G是我们新增加的分区大小。

扩展后，还要执行一步：

# xfs_growfs &#x2F;dev&#x2F;centos&#x2F;root

将文件系统扩大。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>命令总结：</p>
<pre class="line-numbers language-none"><code class="language-none">
fdisk &#x2F;dev&#x2F;sdb
fdisk -l
vgdisplay -v
fdisk -l
pvcreate &#x2F;dev&#x2F;xvdb1
 pvdisplay 
vgextend centos &#x2F;dev&#x2F;sdb1
lvextend -L +20G &#x2F;dev&#x2F;centos&#x2F;root 
xfs_growfs &#x2F;dev&#x2F;mapper&#x2F;centos-root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器压力测试</title>
    <url>/2021/03/06/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E4%BB%B6%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<blockquote>
<p>服务器压力测试是检验服务器性能稳定性的最有效方式。在利旧场景中，业务还未部署的情况下，可以通过对服务器进行简单压力测试，提前暴露硬件问题。本文以基于3.10内核的Linux  CentOS 7操作系统下压力测试为例</p>
</blockquote>
<p>注意：不要在生产服务器或已经部署业务的服务器上操作，可能会造成业务不可用、数据丢失，请谨慎操作。</p>
<h1 id="一、下载测试工具"><a href="#一、下载测试工具" class="headerlink" title="一、下载测试工具"></a>一、下载测试工具</h1><ul>
<li>CPU测试工具stress下载地址：<a href="https://fossies.org/linux/privat/stress-1.0.4.tar.gz">https://fossies.org/linux/privat/stress-1.0.4.tar.gz</a></li>
<li>磁盘测试工具fio下载地址：<a href="https://brick.kernel.dk/snaps/fio-2.1.10.tar.gz">https://brick.kernel.dk/snaps/fio-2.1.10.tar.gz</a></li>
<li>内存测试工具memtester下载地址：<a href="https://fossies.org/linux/misc/memtester-4.5.0.tar.gz">https://fossies.org/linux/misc/memtester-4.5.0.tar.gz</a></li>
</ul>
<h5 id="1、安装cpu测试工具stress"><a href="#1、安装cpu测试工具stress" class="headerlink" title="1、安装cpu测试工具stress"></a>1、安装cpu测试工具stress</h5><pre class="line-numbers language-none"><code class="language-none">
tar xf stress-1.0.4.tar.gz 

cd stress-1.0.4 

.&#x2F;configure

make

make install
                            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>安装完成后，执行stress –version命令，查看是否安装成功。</p>
<h5 id="2、安装磁盘测试工具fio"><a href="#2、安装磁盘测试工具fio" class="headerlink" title="2、安装磁盘测试工具fio"></a>2、安装磁盘测试工具fio</h5><p>安装fio工具依赖的软件包libaio-devel，可从操作系统镜像iso源获取，例如，使用CentOS-7-x86_64-DVD-1810.iso这个镜像，通过以下方法安装libaio-devel包：</p>
<pre class="line-numbers language-none"><code class="language-none">
mkdir &#x2F;home&#x2F;iso              

mount CentOS-7-x86_64-DVD-1810.iso &#x2F;home&#x2F;iso 

cd &#x2F;home&#x2F;iso      

find .&#x2F; -name “libaio-devel”   

rpm
-ivh .&#x2F;Packages&#x2F;libaio-devel-0.3.109-13.el7.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>安装fio</p>
<pre class="line-numbers language-none"><code class="language-none">tar xf fio-2.1.10.tar.gz 

cd fio-2.1.10

.&#x2F;configure

make

make install
                                    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>安装完成后，执行fio –version命令，查看是否安装成功。<br><img src="https://img-blog.csdnimg.cn/5aa1841932dc43a096d73f84e3725dc4.png" alt="在这里插入图片描述"></p>
<h5 id="3、安装内存测试工具memtester"><a href="#3、安装内存测试工具memtester" class="headerlink" title="3、安装内存测试工具memtester"></a>3、安装内存测试工具memtester</h5><pre class="line-numbers language-none"><code class="language-none">tar xf memtester-4.3.0.tar 

cd memtester-4.3.0

make 

make install
                            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>安装完成后，执行memtester –version命令，查看是否安装成功。<br><img src="https://img-blog.csdnimg.cn/b988556909f444e79e9a65e4c01692f1.png" alt="在这里插入图片描述"></p>
<h1 id="二、开始测试"><a href="#二、开始测试" class="headerlink" title="二、开始测试"></a>二、开始测试</h1><h5 id="1、cpu压力测试"><a href="#1、cpu压力测试" class="headerlink" title="1、cpu压力测试"></a>1、cpu压力测试</h5><ul>
<li>查看cpu核数</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/158e71551f5d4106baac432d8d535e3f.png"><br>执行stress -c $core -t 1000000 &amp;命令，进行CPU压力测试 。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>-c</td>
<td>指定CPU核数，实际的CPU逻辑核数</td>
<td>128</td>
</tr>
<tr>
<td>-t</td>
<td>指定运行时间，单位为秒，可按照需求自定义</td>
<td>1000000（达到测试7×24小时的要求）</td>
</tr>
</tbody></table>
<h5 id="2、磁盘压力测试"><a href="#2、磁盘压力测试" class="headerlink" title="2、磁盘压力测试"></a>2、磁盘压力测试</h5><ul>
<li>顺序读</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">fio -filename&#x3D;&#x2F;dev&#x2F;nvme0n1p1 -direct&#x3D;1 -ioengine&#x3D;libaio -iodepth&#x3D;128
-bs&#x3D;1m -rw&#x3D;read -numjobs&#x3D;1 --ramp_time&#x3D;10 -runtime&#x3D;20m -group_reporting
-name&#x3D;mytest --allow_mounted_write&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>顺序写</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">fio -filename&#x3D;&#x2F;dev&#x2F;nvme0n1p1 -direct&#x3D;1 -ioengine&#x3D;libaio -iodepth&#x3D;128
-bs&#x3D;1m -rw&#x3D;write -numjobs&#x3D;1 --ramp_time&#x3D;10 -runtime&#x3D;20m -group_reporting
-name&#x3D;mytest --allow_mounted_write&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>随机读</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">fio  -filename&#x3D;&#x2F;dev&#x2F;nvme0n1p1
-direct&#x3D;1 -ioengine&#x3D;libaio -iodepth&#x3D;128 -bs&#x3D;4k -rw&#x3D;randread -numjobs&#x3D;4
--ramp_time&#x3D;10 -runtime&#x3D;20m -group_reporting -name&#x3D;mytest
--allow_mounted_write&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>随机写</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">fio  -filename&#x3D;&#x2F;dev&#x2F;nvme0n1p1
-direct&#x3D;1 -ioengine&#x3D;libaio -iodepth&#x3D;128 -bs&#x3D;4k -rw&#x3D;randwrite -numjobs&#x3D;4
--ramp_time&#x3D;10 -runtime&#x3D;20m -group_reporting -name&#x3D;mytest
--allow_mounted_write&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>-rw</td>
<td>读写类型，各取值含义如下：1、read 读 2、write  写 3、randread：随机读 4、randwrite：随机写</td>
<td>read</td>
</tr>
<tr>
<td>-filename</td>
<td>测试文件名称</td>
<td>&#x2F;dev&#x2F;nvme0n1p1</td>
</tr>
<tr>
<td>-iodepth</td>
<td>队列深度</td>
<td>128</td>
</tr>
<tr>
<td>-bs</td>
<td>块大小，单位m为MB，k为KB</td>
<td>1m</td>
</tr>
<tr>
<td>-numjobs</td>
<td>线程数</td>
<td>4</td>
</tr>
<tr>
<td>-runtime</td>
<td>测试时间，单位m为分钟</td>
<td>20m</td>
</tr>
<tr>
<td>-allow_mounted_write</td>
<td>是否允许对存储设备写入数据，各取值含义如下：1：允许  0：不允许</td>
<td>1</td>
</tr>
</tbody></table>
<h5 id="3、内存压力测试"><a href="#3、内存压力测试" class="headerlink" title="3、内存压力测试"></a>3、内存压力测试</h5><blockquote>
<p>说明 需要等磁盘和CPU压力测试程序运行稳定之后，再进行内存压力测试。</p>
</blockquote>
<p>执行memtester ${test_mem}K 10000 &amp;命令，对内存进行压力测试。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>[B，K，M，G]</td>
<td>测试内存的大小，单位可以是B、K、M、G</td>
<td>3GB</td>
</tr>
<tr>
<td>[loops]</td>
<td>测试次数</td>
<td>10000</td>
</tr>
</tbody></table>
<h5 id="4、查看测试是否通过"><a href="#4、查看测试是否通过" class="headerlink" title="4、查看测试是否通过"></a>4、查看测试是否通过</h5><p>测试通过标准：</p>
<ul>
<li>未出现系统无响应现象，测试时间满足要求。</li>
<li>测试过程中监控内存和CPU频率、带宽、温度、功耗，无降频现象，过程中内存带宽保持满负载运行，温度与功耗平稳。</li>
<li>检查系统日志，无异常。</li>
</ul>
<p>满足测试要求后，可执行如下命令，终止测试相关进程。</p>
<pre class="line-numbers language-none"><code class="language-none">stress：执行命令ps -ef |grep stress|grep -v color|awk &#39;&#123;print $2&#125;&#39;|xargs kill
fio：执行命令ps -ef |grep fio|grep -v color|awk &#39;&#123;print $2&#125;&#39;|xargs kill
memtester：执行命令ps -ef |grep memtester|grep -v color|awk &#39;&#123;print $2&#125;&#39;|xargs kill<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>部署harbor服务器（https_http）</title>
    <url>/2022/05/04/%E9%83%A8%E7%BD%B2harbor%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88https_http%EF%BC%89/</url>
    <content><![CDATA[<h3 id="1、下载官方的harbor离线包"><a href="#1、下载官方的harbor离线包" class="headerlink" title="1、下载官方的harbor离线包"></a>1、下载官方的harbor离线包</h3><p><a href="https://github.com/goharbor/harbor/releases">https://github.com/goharbor/harbor/releases</a></p>
<p><img src="https://img-blog.csdnimg.cn/19f2d2466794475d94935b28ceaa3958.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN54ix5Luj56CB55qE5bCP5p2c,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h3 id="2、下载后上传到服务器并解压"><a href="#2、下载后上传到服务器并解压" class="headerlink" title="2、下载后上传到服务器并解压"></a>2、下载后上传到服务器并解压</h3><p><img src="https://img-blog.csdnimg.cn/a6d54354c2414dbcbb605c7225b468c0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN54ix5Luj56CB55qE5bCP5p2c,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h3 id="3、修改harbor-yml4、https需要生成签证"><a href="#3、修改harbor-yml4、https需要生成签证" class="headerlink" title="3、修改harbor.yml4、https需要生成签证"></a>3、修改harbor.yml<img src="https://img-blog.csdnimg.cn/d6ff0131d092476dbc297a84d89a39e1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN54ix5Luj56CB55qE5bCP5p2c,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述">4、https需要生成签证</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">mkdir ssl
<span class="token comment">#生成私有key</span>
openssl  genrsa <span class="token operator">-</span>out ~<span class="token operator">/</span>harbor-install/harbor/ssl/harbor-ca<span class="token punctuation">.</span>key
ll ssl/
touch <span class="token operator">/</span>root/<span class="token punctuation">.</span>rnd
<span class="token comment">#签证</span>
openssl req <span class="token operator">-</span>x509 <span class="token operator">-</span>new <span class="token operator">-</span>nodes <span class="token operator">-</span>key ~<span class="token operator">/</span>harbor-install/harbor/ssl/harbor-ca<span class="token punctuation">.</span>key  <span class="token operator">-</span>subj <span class="token string">"/CN=harbor.dujie.com"</span> <span class="token operator">-</span>days 7120 <span class="token operator">-</span>out ~<span class="token operator">/</span>harbor-install/harbor/ssl/harbor-ca<span class="token punctuation">.</span>crt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="5、安装docker-compose"><a href="#5、安装docker-compose" class="headerlink" title="5、安装docker-compose"></a>5、安装docker-compose</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">curl <span class="token operator">-</span>L <span class="token string">"https://github.com/docker/compose/releases/download/1.22.0/docker-compose-<span class="token function">$<span class="token punctuation">(</span>uname <span class="token operator">-</span>s<span class="token punctuation">)</span></span>-<span class="token function">$<span class="token punctuation">(</span>uname <span class="token operator">-</span>m<span class="token punctuation">)</span></span>"</span> <span class="token operator">-</span>o <span class="token operator">/</span>usr/local/bin/docker-compose
chmod <span class="token operator">+</span>x <span class="token operator">/</span>usr/local/bin/docker-compose
<span class="token namespace">[root@k8s-master harbor]</span><span class="token comment"># docker-compose --version</span>
docker-compose version 1<span class="token punctuation">.</span>22<span class="token punctuation">.</span>0<span class="token punctuation">,</span> build f46880fe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="6、运行install-sh-完成安装"><a href="#6、运行install-sh-完成安装" class="headerlink" title="6、运行install.sh 完成安装"></a>6、运行install.sh 完成安装</h3><p>注意配置好域名，浏览器访问，用户名admin，密码Harbor12345 密码可以在harbor配置文件中查看</p>
<h3 id="7、部署节点同步harbor-crt证书"><a href="#7、部署节点同步harbor-crt证书" class="headerlink" title="7、部署节点同步harbor crt证书"></a>7、部署节点同步harbor crt证书</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#需要将刚才生成的crt证书发送到需要登陆harbor的节点</span>
scp <span class="token operator">/</span>harbor/ssl/harbor-ca<span class="token punctuation">.</span>crt 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>150:<span class="token operator">/</span>etc/docker/certs<span class="token punctuation">.</span>d/harbor<span class="token punctuation">.</span>dujie<span class="token punctuation">.</span>com
vim <span class="token operator">/</span>etc/hosts <span class="token comment">#在需要登陆的节点添加host解析</span>
192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>17<span class="token punctuation">.</span>130 harbor<span class="token punctuation">.</span>dujie<span class="token punctuation">.</span>com
systemctl restart docker <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>记录服务器被挖矿的处理方法</title>
    <url>/2022/05/23/%E8%AE%B0%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A2%AB%E6%8C%96%E7%9F%BF%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>背景：并不是我公司的服务器被挖矿，是合作伙伴的有一台服务器的cpu连续3天被吃满，所以让我帮忙看下，因为之前也没有处理过类似的挖矿事件，所以记录一下。<br>首先登录服务器查看相关资源使用情况：<br>好家伙，这资源已经被占的不要不要的了。<br><img src="https://img-blog.csdnimg.cn/9b1abb01976e45a69c0bae34899e5a0c.png" alt="在这里插入图片描述"></p>
<p>通过观察可以看到top显示启动了很多不知道的服务，tssc用户启动的，还有esuser启动的，而他们的command都是bash，还是第一次看到这种情况。于是我单独查看某个pid号，就一个bash命令。<br><img src="https://img-blog.csdnimg.cn/54a8aeef7fc445888b7ceaf53cf48014.png" alt="在这里插入图片描述"><br>于是我查看了下定时任务，看看有没有定时执行的脚本，发现这些是什么玩意！赶紧删除了<br><img src="https://img-blog.csdnimg.cn/c3a4659fcedd4b84867ba47b276d897d.png" alt="在这里插入图片描述"><br>到这个时候，看了下阿里云的报警信息，如下图：<br><img src="https://img-blog.csdnimg.cn/134c36bbeff4461db803415b5a1eb7fe.png" alt="在这里插入图片描述"><br>看起来应该是被植入了挖矿程序，于是赶紧将此文件下的所有内容删除<br><img src="https://img-blog.csdnimg.cn/1d4db5f3cf23410e8d220ebbe2e9f6d4.png" alt="在这里插入图片描述"><br>但是删除之后top中的进程都还在呢，得全部kill掉，命令如下：</p>
<pre class="line-numbers language-none"><code class="language-none">[esuser@iZ2ze5f6uou33ntud78dr5Z ~]$ ps -ef |grep esuser |grep bash  |grep -v pts&#x2F;2 |awk &#39;&#123;print $2&#125;&#39; |xargs kill<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>经过几分钟之后发现系统负载已经降下来了<br><img src="https://img-blog.csdnimg.cn/fbabf774f640469aa2578b2ee7434e07.png" alt="在这里插入图片描述"><br>虽然操作没有几步，也不难，但还是记录一下第一次遇到这种情况我执行的一些操作，以便下次再遇到的时候会知道怎么一步一步排查</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>防止内存碎片化</title>
    <url>/2022/08/13/%E9%98%B2%E6%AD%A2%E5%86%85%E5%AD%98%E7%A2%8E%E7%89%87%E5%8C%96/</url>
    <content><![CDATA[<p>在长时间运行的Linux操作系统中，系统日志有时会出现无法分配高阶内存的报错信息：</p>
<pre class="line-numbers language-none"><code class="language-none">Aug  4 22:58:15 server1 kernel: : [69229257.683658] xenwatch: page allocation failure. order:4, mode:0xd0
Aug  4 22:58:15 server1 kernel: : [69229257.683665] Pid: 168, comm: xenwatch Tainted: GF          ---------------    2.6.32-358.23.2.el5.x86_64 #1
Aug  4 22:58:15 server1 kernel: : [69229257.683672] Call Trace:
Aug  4 22:58:15 server1 kernel: : [69229257.683688]  [&lt;ffffffff8112723a&gt;] ? __alloc_pages_nodemask+0x67a&#x2F;0x8c0
Aug  4 22:58:15 server1 kernel: : [69229257.683697]  [&lt;ffffffff8126082f&gt;] ? number+0x2ff&#x2F;0x330
Aug  4 22:58:15 server1 kernel: : [69229257.683706]  [&lt;ffffffff81162260&gt;] ? kmem_getpages+0x60&#x2F;0x150
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时使用<code>cat /proc/buddyinfo</code>观察内存order分配情况，可以看到内存碎片化严重（大量的低阶内存页，但是几乎没有高阶内存页）</p>
<pre class="line-numbers language-none"><code class="language-none">#cat &#x2F;proc&#x2F;buddyinfo
Node 0, zone      DMA      2      2      2      1      2      1      1      0      0      0      2
Node 0, zone    DMA32  32995   4377    762    211    157    108     68     23      3      0      0
Node 0, zone   Normal 127146  68215   1614      0      0      0      0      0      0      0      1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>处理的方法主要采用<code>drop_caches</code>（抛弃缓存），然后使用compact_memory合并低阶内存页来创造出足够的高阶内存页。</p>
<h1 id="drop-caches"><a href="#drop-caches" class="headerlink" title="drop_caches"></a>drop_caches</h1><p>Linux Kernel 2.6.16之后的内核提供了一个设置内核抛弃 页缓存 和&#x2F;或 目录(dentry)和索引节点（inode）缓存，这样可以释放出大量内存。</p>
<ul>
<li>释放页缓存</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;drop_caches
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>释放目录和索引节点缓存（inode and dentry cache）</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">echo 2 &gt; &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;drop_caches
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>同时释放 页、目录、索引节点缓存：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">echo 3 &gt; &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;drop_caches
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>上述操作是无害的操作，并且智慧释放完全没有使用的内存对象。脏对象（dirty objects）将继续被使用直到它们被写入到磁盘中，所以内存脏对象不会被释放。不过，如果在执行<code>drop_caches</code>之前执行sync指令，则会将脏对象刷新到磁盘中，这样<code>drop_caches</code>操作会释放出更多内存。</p>
<p>注意：<code>drop_caches</code>需要花费一些时间（在终端中可以看到大约几十秒时间），此时再次使用<code>cat /proc/buddyinfo</code>可以看到立即出现了大量高阶内存页。</p>
<p>但是<code>drop_caches</code>这个触发动作是一次性的，也就是说，并不因为<code>cat /proc/sys/vm/drop_caches</code>时显示输出内容是3就表示系统不缓存内容。相反，一旦完成<code>drop_caches</code>，系统立即自动对后续内存对象进行缓存。所以要再次触发缓存清理，需要再次执行 <code>echo 3 &gt; /proc/sys/vm/drop_caches</code>。</p>
<blockquote>
<p>如果重复echo 3 &gt; &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;drop_caches不能再次释放缓存，可以先尝试echo 0 &gt; &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;drop_caches然后再执行echo 3 &gt; &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;drop_caches。</p>
</blockquote>
<h1 id="compact-memory"><a href="#compact-memory" class="headerlink" title="compact_memory"></a>compact_memory</h1><p>当内核编译参数设置了CONFIG_COMPACTION，就会在<code>/proc/sys/vm/compact_memory</code>有入口文件。将1写入到这个文件，则所有的zones就会进行压缩，以便能够尽可能地提供连续内存块。对于需要分配大页的时候这个功能非常重要，不过，进程会在需要时直接进行内存压缩（compact memory）。</p>
<h1 id="实际操作案例"><a href="#实际操作案例" class="headerlink" title="实际操作案例"></a>实际操作案例</h1><ul>
<li>检查系统缺乏高阶内存</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">#cat &#x2F;proc&#x2F;buddyinfo
Node 0, zone      DMA      2      2      2      1      2      1      1      0      0      0      2
Node 0, zone    DMA32  32995   4377    762    211    157    108     68     23      3      0      0
Node 0, zone   Normal 127146  68215   1614      0      0      0      0      0      0      0      1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>执行缓存释放</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">#echo 3 &gt; &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;drop_caches
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>完成后检查内存页</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">#cat &#x2F;proc&#x2F;buddyinfo
Node 0, zone      DMA      2      2      2      1      2      1      1      0      0      0      2
Node 0, zone    DMA32  76826  65298  43784  20780   5272    616     90     32      4      0      0
Node 0, zone   Normal 524538 365499 176074  45644   4338    140      6      0      0      0      1
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>然后执行内存压缩</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">#echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;compact_memory
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>然后再次检查内存页分布，可以看到逐渐出现更多的高阶内存页</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">#cat &#x2F;proc&#x2F;buddyinfo
Node 0, zone      DMA      2      2      2      1      2      1      1      0      0      0      2
Node 0, zone    DMA32  18217  13464   8621   4666   2654   2087   1609   1040    517    130      3
Node 0, zone   Normal 145048 131183  76864  38454  20405  11854   5149   1143     96      3      1
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 数据损坏，通过ibd和frm文件批量恢复数据库数据</title>
    <url>/2023/01/13/%E3%80%90mysql%E6%95%B0%E6%8D%AE%E6%8D%9F%E5%9D%8F%EF%BC%8C%E9%80%9A%E8%BF%87ibd%E5%92%8Cfrm%E6%96%87%E4%BB%B6%E6%89%B9%E9%87%8F%E6%81%A2%E5%A4%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE%E3%80%91%20(1)/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>客户那边的测试服务器下午3:00左右因不明原因，所有服务访问不了，ssh也无法连接，客户手动进行强制重启服务器，重启后将所有应用、中间件重启，重启nacos时发现无法连接数据库，通过账号密码登录到数据库发现可以正常登录，但是奇怪的问题来了。。。<code>show tables</code> 时可以正常看到表，但是查询表中数据时发现提示表不存在。。如下图：<br><img src="/images/f4d20adcf89a424ab5536107427677bf.png" alt="image"></p>
<p>查看mysql日志：<br><img src="/images/25f622a0227b4a7095c879ae52aac671.png" alt="image"></p>
<p>作为一名mysql菜的不能再菜的小白。。这属实难到我了，看起来像是数据损坏。。没办法，通过多方查询资料，解决办法如下：</p>
<h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>首先了解InnoDB引擎创建数据库会产生的文件：</p>
<ul>
<li><strong>.ibd</strong>：包含每个表的数据和索引</li>
<li><strong>.frm</strong>：描述表的结构</li>
<li><strong>ibdata1</strong>：包含所有表的字典和历史操作</li>
</ul>
<p><img src="/images/bfba52d98a1e4b1f9d3a9acd4457017d.png" alt="image"></p>
<p>在test目录下，包含每个表的.ibd和.frm文件<br><img src="/images/e564e16a61ba434b900ae6112c836b44.png" alt="image"></p>
<p><strong>恢复前提：ibd文件的数据都是正常的</strong><br>之后也是需要通过这些文件进行恢复，我这边新启了一个mysql实例，过程略，<br><strong>大体的恢复步骤如下：</strong></p>
<ol>
<li>在新的mysql实例中创建数据库，需要跟原数据库的库名和字符集保持一致</li>
<li>创建数据表，表名要求一致，对应原库data目录下的表名（我这里用工具对原库表的表结构导出创建的）</li>
<li>通过.ibd文件批量恢复表数据信息<br>3.1 让表结构和表空间脱离<br>3.2 将需要恢复的.ibd替换到新实例的&#x2F;data的对应库下</li>
</ol>
<h3 id="1、安装mysqlfrm-工具"><a href="#1、安装mysqlfrm-工具" class="headerlink" title="1、安装mysqlfrm 工具"></a>1、安装mysqlfrm 工具</h3><p>下载链接：</p>
<pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;cdn.mysql.com&#x2F;archives&#x2F;mysql-utilities&#x2F;mysql-utilities-1.6.5.tar.gz
tar -xvf mysql-utilities-1.6.5.tar.gz
cd mysql-utilities-1.6.5&#x2F;
安装(需要Python环境，python2.6及以上)
python .&#x2F;setup.py build
python .&#x2F;setup.py install
检查是否安装成功
mysqlfrm --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2、使用mysqlfrm查看表结构创建语句"><a href="#2、使用mysqlfrm查看表结构创建语句" class="headerlink" title="2、使用mysqlfrm查看表结构创建语句"></a>2、使用mysqlfrm查看表结构创建语句</h3><blockquote>
<p>mysqlfrm 有–basedir模式以及–server 模式，推荐–server，能够还原最为准确的信息</p>
</blockquote>
<p>使用方式（需要启动原mysql）：</p>
<blockquote>
<p>格式：mysqlfrm –server&#x3D;用户名:密码@数据库地址:端口 需恢复的frm文件目录 –diagnostic &gt; 保存SQL文件名.sql</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">mysqlfrm --server&#x3D;root:password@x.x.x.x:13306 &#x2F;home&#x2F;mysql&#x2F;data&#x2F;test&#x2F;*.frm --diagnostic &gt; test_frm.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="/images/5a605348057d4eb2a68f37adcdd5c0ef.png" alt="image"><br>执行所生成的SQL文件<br>注：mysqlfrm仅仅显示整个数据库的表结构创建语句，可以显示在控制台也可以输出到文件，不过需要手动执行这些表的创建SQL语句。<br>先创建数据库</p>
<pre class="line-numbers language-none"><code class="language-none">CREATE database  test;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以查看生成的sql文件手动删除相关无用信息等，可命令行执行或者客户端执行等<br>命令行导入：</p>
<pre class="line-numbers language-none"><code class="language-none">mysql -uroot -ppassword test &lt; test_frm.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>此时执行完就可以通过desc命令查看到表结构了（报错1：这步我遇到报错，下面有解决方法）</p>
<h3 id="3、通过-ibd文件批量恢复表数据信息"><a href="#3、通过-ibd文件批量恢复表数据信息" class="headerlink" title="3、通过.ibd文件批量恢复表数据信息"></a>3、通过.ibd文件批量恢复表数据信息</h3><p><strong>1）让表结构和表空间脱离</strong><br>生成表结构和表空间脱离的sql：</p>
<pre class="line-numbers language-none"><code class="language-none">mysql -uroot -ppassword -h x.x.x.x  -P 13306 -e &quot; SELECT concat(&#39;alter table &#39;, table_name, &#39; discard tablespace;&#39;) FROM information_schema.tables WHERE table_schema &#x3D; &#39;test&#39;;&quot; &gt; &#x2F;root&#x2F;test.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>将sql文件中没有用的内容删除</p>
<pre class="line-numbers language-none"><code class="language-none">sed &#39;&#x2F;^c&#x2F;d&#39; &#x2F;root&#x2F;test.sql&gt; &#x2F;root&#x2F;test_discard_new.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>将sql文件导入到新库</p>
<pre class="line-numbers language-none"><code class="language-none">mysql -uroot -ppassword -h x.x.x.x -P 13307 test_AII &lt; test_discard_new.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>2）将需要恢复的.ibd文件替换到新库所在的&#x2F;data&#x2F;库名  目录下</strong></p>
<pre class="line-numbers language-none"><code class="language-none">cp &#x2F;home&#x2F;mysql&#x2F;data&#x2F;test&#x2F;*.ibd  &#x2F;home&#x2F;mysql-test&#x2F;data&#x2F;test&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>3）权限设置</strong></p>
<pre class="line-numbers language-none"><code class="language-none">chown -R mysql.  &#x2F;home&#x2F;mysql-test&#x2F;data&#x2F;test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>4）导入表空间</strong></p>
<pre class="line-numbers language-none"><code class="language-none">mysql -uroot -ppassword -h x.x.x.x -P 13306 -e &quot; SELECT concat(&#39;alter table &#39;, table_name, &#39; import tablespace;&#39;) FROM information_schema.tables WHERE table_schema &#x3D; &#39;test&#39;;&quot; &gt; &#x2F;root&#x2F;tem_import.sql
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>清除没用的数据</p>
<pre class="line-numbers language-none"><code class="language-none">sed &#39;&#x2F;^c&#x2F;d&#39; &#x2F;root&#x2F;tem_import.sql &gt; &#x2F;root&#x2F;config_import.sql
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>将sql文件导入（报错2：有报错，下面有解决方法）</p>
<pre class="line-numbers language-none"><code class="language-none">mysql -uroot -ppassword -h x.x.x.x -P 13307 test_aii &lt; &#x2F;root&#x2F;config_import.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>此时如果操作没问题，查看数据库表已经有了原始数据了（报错3：有报错，查看下面解决方法）</p>
<h3 id="恢复过程中遇到的问题："><a href="#恢复过程中遇到的问题：" class="headerlink" title="恢复过程中遇到的问题："></a>恢复过程中遇到的问题：</h3><p><strong>报错1、在导入创建表结构语句的时候报错了，显示语法错误我的创建表语句如下：</strong></p>
<pre class="line-numbers language-none"><code class="language-none">1064 - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;5, COMMENT &#39;config_info&#39;&#39; at line 21, Time: 0.011000s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>建表语句：</p>
<pre class="line-numbers language-none"><code class="language-none">CREATE TABLE &#96;test_config&#96;.&#96;config_info&#96; (
  &#96;id&#96; bigint(20) NOT NULL AUTO_INCREMENT comment &#39;id&#39;, 
  &#96;data_id&#96; varchar(255) COLLATE &#96;utf8_bin&#96; NOT NULL comment &#39;data_id&#39;, 
  &#96;group_id&#96; varchar(255) COLLATE &#96;utf8_bin&#96; DEFAULT NULL, 
  &#96;content&#96; longtext COLLATE &#96;utf8_bin&#96; comment &#39;content&#39;, 
  &#96;md5&#96; varchar(32) COLLATE &#96;utf8_bin&#96; DEFAULT NULL comment &#39;md5&#39;, 
  &#96;gmt_create&#96; datetime NOT NULL comment &#39;创建时间&#39;, 
  &#96;gmt_modified&#96; datetime NOT NULL comment &#39;修改时间&#39;, 
  &#96;src_user&#96; text COLLATE &#96;utf8_bin&#96; DEFAULT NULL comment &#39;source user&#39;, 
  &#96;src_ip&#96; varchar(50) COLLATE &#96;utf8_bin&#96; DEFAULT NULL comment &#39;source ip&#39;, 
  &#96;app_name&#96; varchar(128) COLLATE &#96;utf8_bin&#96; DEFAULT NULL, 
  &#96;tenant_id&#96; varchar(128) COLLATE &#96;utf8_bin&#96; DEFAULT NULL comment &#39;租户字段&#39;, 
  &#96;c_desc&#96; varchar(256) COLLATE &#96;utf8_bin&#96; DEFAULT NULL, 
  &#96;c_use&#96; varchar(64) COLLATE &#96;utf8_bin&#96; DEFAULT NULL, 
  &#96;effect&#96; varchar(64) COLLATE &#96;utf8_bin&#96; DEFAULT NULL, 
  &#96;type&#96; varchar(64) COLLATE &#96;utf8_bin&#96; DEFAULT NULL, 
  &#96;c_schema&#96; text COLLATE &#96;utf8_bin&#96; DEFAULT NULL, 
  &#96;encrypted_data_key&#96; text COLLATE &#96;utf8_bin&#96; comment &#39;秘钥&#39;, 
PRIMARY KEY &#96;PRIMARY&#96; (&#96;id&#96;) USING BTREE,
UNIQUE KEY &#96;uk_configinfo_datagrouptenant&#96; (&#96;data_id&#96;(255),&#96;group_id&#96;(255),&#96;tenant_id&#96;(128)) USING BTREE
) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8, ROW_FORMAT &#x3D; 5, COMMENT &#39;config_info&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>解决方法：</strong><br>将ROW_FORMAT 改为COMPACT或DYNAMIC就可以解决</p>
<p><strong>报错2：导入表空间时，报错</strong></p>
<pre class="line-numbers language-none"><code class="language-none">ERROR 1812 (HY000): Tablespace is missing for table ops.tt7.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>解决方法：</strong><br>查看从原库&#x2F;data&#x2F;目录copy的.ibd文件的属主和属组是否是mysql的启动用户，不是则修改即可</p>
<p><strong>报错3：所有步骤执行完成后，重启mysql时启动失败，查看mysql日志如下报错：</strong></p>
<pre class="line-numbers language-none"><code class="language-none">[InnoDB] [FATAL] Tablespace id is xx in the data dictionary but in file .\test\config.ibd it is xx!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个错误意思就是库名表名一致，但是表空间id已经不同了，说明上面的执行步骤有错误，导致表空间id记录在两个地方，一个在系统表空间中的字典表，一个记录在表对应的ibd文件里。这个时候，不管出于何种原因，ibd文件使用了旧文件，就会报这个错误。并且导致mysqld进程崩溃退出。</p>
<p><strong>解决方法：</strong><br>将对应的库中的某个表删除，并重新生成表结构并创建表，然后重新将原表结构和表空间脱离并重新导入表空间，操作上面都有，重新执行即可</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Django视图类View源码分析</title>
    <url>/2023/02/23/Django%E8%A7%86%E5%9B%BE%E7%B1%BBView%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="Django视图类View源码分析"><a href="#Django视图类View源码分析" class="headerlink" title="Django视图类View源码分析"></a>Django视图类View源码分析</h1><h3 id="一、视图函数"><a href="#一、视图函数" class="headerlink" title="一、视图函数"></a>一、视图函数</h3><p>django中的视图函数，就是视图功能由函数实现。</p>
<p>响应：或渲染模板后返回HTML，或直接返回JSON数据。</p>
<p>参数：视图函数的第一个参数必须是request对象。</p>
<h5 id="文本响应"><a href="#文本响应" class="headerlink" title="文本响应"></a>文本响应</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpRequest<span class="token punctuation">,</span>HttpResponse<span class="token punctuation">,</span>JsonResponse
<span class="token keyword">def</span> <span class="token function">test_index</span><span class="token punctuation">(</span>request<span class="token punctuation">:</span>HttpRequest<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token string">'Test String'</span>
    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="JSON响应"><a href="#JSON响应" class="headerlink" title="JSON响应"></a>JSON响应</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpRequest<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">,</span> JsonResponse
<span class="token keyword">def</span> <span class="token function">test_index</span><span class="token punctuation">(</span>request<span class="token punctuation">:</span>HttpRequest<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里会抛异常，<code>TypeError: In order to allow non-dict objects to be serialized set the safe</code></p>
<p><code>parameter to False.</code> 。意思是，safe参数为False才可使用非字典数据，所以，除非有必要，否则还</p>
<p>是使用字典</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpRequest<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">,</span> JsonResponse
<span class="token keyword">def</span> <span class="token function">test_index</span><span class="token punctuation">(</span>request<span class="token punctuation">:</span>HttpRequest<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token string">'abc'</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="请求方法限制装饰器"><a href="#请求方法限制装饰器" class="headerlink" title="请求方法限制装饰器"></a>请求方法限制装饰器</h5><p>需求：如果需要对请求方法进行限制，例如：只允许GET方法请求，可以自己判断，也可以使用Django提供的装饰器函数。</p>
<p>自己判断：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token punctuation">,</span> HttpRequest<span class="token punctuation">,</span> JsonResponse
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">:</span>HttpRequest<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'~'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">,</span> request<span class="token punctuation">.</span>method<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'~'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>method<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'post'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token string">'abc'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">405</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>装饰器函数</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpRequest<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">,</span> JsonResponse
<span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>decorators<span class="token punctuation">.</span>http <span class="token keyword">import</span> require_http_methods<span class="token punctuation">,</span> require_GET<span class="token punctuation">,</span> 
require_POST<span class="token punctuation">,</span> require_safe
<span class="token comment"># @require_http_methods(['GET', 'POST'])</span>
<span class="token comment"># @require_GET</span>
<span class="token decorator annotation punctuation">@require_POST</span>
<span class="token keyword">def</span> <span class="token function">test_index</span><span class="token punctuation">(</span>request<span class="token punctuation">:</span>HttpRequest<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token string">'abc'</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>url.py</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span>test_index<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">#路径映射，路径 为/emp</span>
    <span class="token comment">#as_view 当做视图函数，伪装成视图函数,封装成视图函数</span>
   <span class="token comment"># path('test/',TestView.as_view()),</span>
    path<span class="token punctuation">(</span><span class="token string">'dujie/'</span><span class="token punctuation">,</span>test_index<span class="token punctuation">)</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>测试过程中，当使用不被允许的方法请求时，会返回405状态码，表示<code>Method Not Allowed</code> ，如下图</p>
<p>装饰完后，test_index 就是新的视图函数，装饰器内部的inner函数。</p>
<p><img src="/images/an05QaHBTp7gybS2WAZA9-0y4YZdrDatRpKJp8TpEVc.png" alt="image"></p>
<p><img src="/images/sSSXFVDESR7Vg65AC1NsKMpx6CHd0D3BQ379bjDY4IY.png" alt="image"></p>
<h3 id="二、视图类"><a href="#二、视图类" class="headerlink" title="二、视图类"></a>二、视图类</h3><p>视图类就是视图功能由一个类和其方法实现</p>
<p>参考：<a href="https://docs.djangoproject.com/en/3.2/topics/class-based-views/">https://docs.djangoproject.com/en/3.2/topics/class-based-views/</a></p>
<p><img src="/images/WugGk16dhc-uVXrpjIqWqTtwGhKRFR-_k0HQQYJ-pnw.png" alt="image"></p>
<h4 id="View类实现原理分析"><a href="#View类实现原理分析" class="headerlink" title="View类实现原理分析"></a>View类实现原理分析</h4><p>可以看到官方文档上实现视图类，在urlpatterns定义中，路径映射的应该是函数，而AboutView是一个类并不是函数，所以他使用的是AboutView.as_view() ，下面来分析下，</p>
<p>一级路由配置如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 主路由，一级路由，根路由</span>
urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    path<span class="token punctuation">(</span><span class="token string">'emp/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'employee.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># /emp/</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>employee&#x2F;urls.py如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 二级路由，应用路由</span>
<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path
<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> TestView <span class="token comment"># 视图类</span>
urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    path<span class="token punctuation">(</span><span class="token string">'test/'</span><span class="token punctuation">,</span> TestView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># /emp/test/</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>django.views.View类，定义了http的方法的小写名称列表，这些小写名称其实就是处理请求方法名的小写。</p>
<p>View类的类方法<strong>as_view()方法</strong>调用后<strong>返回</strong>一个内建的view(request,<em>args,</em>*kwargs)<strong>新函数</strong>，本质上，其实url还是映射到这个函数上。</p>
<p>请求request到来后，直接发给TestView.as_view() 函数，TestView.as_view()函数内部</p>
<ul>
<li>构建TestView实例self。下面可以看源码，每一个请求都会创建一个实例</li>
<li>dispath派发请求，self.dispath(request,<em>args,</em>*kwargs)</li>
</ul>
<p>dispath方法内部对比请求方法method，如果存在请求的get、post等方法，则调用，否则返回405，</p>
<blockquote>
<p><strong>本质上，as_view()方法还是把一个类封装成一个视图函数。</strong><br><strong>这个视图函数，内部使用了一个分发函数，使用请求方法名称把请求分发给存在的同名函数处理</strong></p>
</blockquote>
<p>as_view源码分析</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token comment">##请求方法列表</span>
 http_method_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'put'</span><span class="token punctuation">,</span> <span class="token string">'patch'</span><span class="token punctuation">,</span> <span class="token string">'delete'</span><span class="token punctuation">,</span> <span class="token string">'head'</span><span class="token punctuation">,</span> <span class="token string">'options'</span><span class="token punctuation">,</span> <span class="token string">'trace'</span><span class="token punctuation">]</span>

  <span class="token comment">## classonlymethod 规定了as_view只能由class调用，所以只能是TestView.as_view()这么调用</span>
<span class="token decorator annotation punctuation">@classonlymethod</span>
<span class="token comment">## 这里的第一个参数cls就是TestView</span>
<span class="token keyword">def</span> <span class="token function">as_view</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">**</span>initkwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">## 这个函数其实就是url真正映射的视图函数，第一个参数必须是request</span>
    <span class="token keyword">def</span> <span class="token function">view</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment">## 这里就是将传入到class类实例化，每一个请求都会实例化一次，互补干扰</span>
        self <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token operator">**</span>initkwargs<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">'request'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span>
                <span class="token string">"%s instance has no 'request' attribute. Did you override "</span>
                <span class="token string">"setup() and forget to call super()?"</span> <span class="token operator">%</span> cls<span class="token punctuation">.</span>__name__
            <span class="token punctuation">)</span>
        <span class="token comment">##dispath 派发请求</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>dispatch<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
    <span class="token comment">## 将视图函数返回</span>
    <span class="token keyword">return</span> view

<span class="token keyword">def</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Try to dispatch to the right method; if a method doesn't exist,</span>
    <span class="token comment"># defer to the error handler. Also defer to the error handler if the</span>
    <span class="token comment"># request method isn't on the approved list.</span>
    <span class="token comment">## 这里判断请求的类型是否在定义好的method_names列表中</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>http_method_names<span class="token punctuation">:</span>
    <span class="token comment">#如果存在则调用反射函数，判断是否有相关get、post等方法，如果没有则调用默认值函数self.http_method_not_allowed返回405</span>
        handler <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">.</span>method<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>http_method_not_allowed<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment">#如果请求方法不存在定义好的列表中，则直接调用notallow函数返回405</span>
        handler <span class="token operator">=</span> self<span class="token punctuation">.</span>http_method_not_allowed
    <span class="token keyword">return</span> handler<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">http_method_not_allowed</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span>
        <span class="token string">'Method Not Allowed (%s): %s'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>method<span class="token punctuation">,</span> request<span class="token punctuation">.</span>path<span class="token punctuation">,</span>
        extra<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'status_code'</span><span class="token punctuation">:</span> <span class="token number">405</span><span class="token punctuation">,</span> <span class="token string">'request'</span><span class="token punctuation">:</span> request<span class="token punctuation">&#125;</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">return</span> HttpResponseNotAllowed<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_allowed_methods<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="视图类实现"><a href="#视图类实现" class="headerlink" title="视图类实现"></a>视图类实现</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpRequest<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">,</span> JsonResponse
<span class="token keyword">from</span> django<span class="token punctuation">.</span>views <span class="token keyword">import</span> View
<span class="token keyword">class</span> <span class="token class-name">TestIndex</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dispatch<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 支持GET</span>
        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token string">'abc'</span><span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 支持POST</span>
        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token string">'xyz'</span><span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>






















]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Channel通道</title>
    <url>/2023/05/20/Channel%E9%80%9A%E9%81%93/</url>
    <content><![CDATA[<h1 id="Channel通道"><a href="#Channel通道" class="headerlink" title="Channel通道"></a>Channel通道</h1><h3 id="通道的定义"><a href="#通道的定义" class="headerlink" title="通道的定义"></a>通道的定义</h3><p>通道（channel）是用来传递数据的一个数据结构。go语言提倡使用通信来代替共享内存。当一个资源需要在goroutine之间共享时，通道在goroutine之间架起了一个管道，并提供了确保同步交换数据的机制。</p>
<p>在声明通道时，需要指定要被共享的数据的类型。可以通过通道共享内置类型、命名类型、结构类型和引用类型的值或指针。</p>
<p>Go语言中的通道在任何时候，同时只能有一个goroutine访问通到进行发送和接受数据。</p>
<p><img src="/images/8d4B0AZilXjz-ObG8hrQHiEqgqMYnOD0pndKK3I-7l4.png" alt="image"></p>
<p><img src="/images/pBJqm0jtt8R1VWcFHS1DD8m9PWDQ7X4_7UnpXpYouCc.png" alt="image"></p>
<p>Channel底层是一个先进先出的环形队列（固定大小环形数组实现）</p>
<ul>
<li>full或empty就会阻塞</li>
<li>send发送</li>
<li>recv接受并移除</li>
<li>sendx表示最后一次插入的元素的index</li>
<li>recvx表示最后一次接受元素的index</li>
<li>发送、接受的操作符号都是&lt;-</li>
</ul>
<h3 id="通道构造"><a href="#通道构造" class="headerlink" title="通道构造"></a>通道构造</h3><p>源码runtime&#x2F;chan.go&#x2F;makechan</p>
<h5 id="nil通道"><a href="#nil通道" class="headerlink" title="nil通道"></a>nil通道</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> c1 <span class="token keyword">chan</span> <span class="token builtin">int</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c1: %d, %d, %v\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span> <span class="token comment">// c1: 0, 0, &lt;nil></span>
c1 <span class="token operator">&lt;-</span> <span class="token number">111</span> <span class="token comment">// 阻塞，不报错。由于没有初始化容器，111塞不进去</span>
<span class="token operator">&lt;-</span> c1 <span class="token comment">// 也阻塞，不报错，什么都拿不出来</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>nil通道：chan零值是nil，即可以理解为未被初始化通道这个容器。nil通道可以认为是一个只要操作就阻塞当前协程的容器。这种通道不要创建和使用，阻塞后无法解除，底层源码中写明了无法解除。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">var</span> c1 <span class="token keyword">chan</span> <span class="token builtin">int</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c1: %d, %d, %v\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"准备发送数据111"</span><span class="token punctuation">)</span>
 c1 <span class="token operator">&lt;-</span> <span class="token number">111</span> <span class="token comment">// 往c1里面发送，阻塞在这一句，无法解除，显示本程序死锁</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"发送数据111结束"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上例就算开新的协程来读取c1也没用，对nil通道读写都会阻塞。</p>
<h5 id="非缓冲通道"><a href="#非缓冲通道" class="headerlink" title="非缓冲通道"></a>非缓冲通道</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> c2 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c2 : %d %d %v\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">,</span> c2<span class="token punctuation">)</span>
<span class="token keyword">var</span> c3 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c3 : %d %d %v\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">,</span> c3<span class="token punctuation">)</span>
<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    c2 <span class="token operator">&lt;-</span> <span class="token number">300</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//fmt.Println(&lt;-c2)</span>
a <span class="token operator">:=</span> <span class="token operator">&lt;-</span>c2 <span class="token comment">// 这里读取会阻塞，因为通道内没有任何数据</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>说明：容量为0的通道，也叫同步通道。这中通道发送第一个元素时，如果没有接受操作就立即阻塞，直到被接受。同样接受时，如果没有数据被发送就立即阻塞，直到通道内有数据发送</p>
<h5 id="缓冲通道"><a href="#缓冲通道" class="headerlink" title="缓冲通道"></a>缓冲通道</h5><p>通道可以设置缓冲区——通过<code>make()</code>函数的第2个参数指定缓冲区大小</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>带缓冲区的通道，允许发送方的数据发送和接收端的数据获取处于异步状态。就是说发送方发送的数据可以放在缓冲区中，等待接收端去接受数据，而不是立即需要接收端去接受数据。</p>
<p>不过由于缓冲区的大小是有限的，所以还是必须有接收端来接受数据的，否则缓冲区一满，数据发送方就无法再 发送数据了。</p>
<p>如果通道不带缓冲，则发送方会阻塞，直到接收方从通道中接受了数据。如果通道带缓冲，则发送方会阻塞，直到发送的值被复制到缓冲区中；如果缓冲区已满，则意味着需要的等待直到某个接受方接受了数据。接收方在有值可以接受之前，会一直阻塞</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token comment">// 因为ch是带缓冲的通道，所以可以同时发送多个数据，而不用立刻去同步接受数据</span>
    ch <span class="token operator">&lt;-</span> <span class="token number">6</span>
    ch <span class="token operator">&lt;-</span> <span class="token number">7</span>
    ch <span class="token operator">&lt;-</span> <span class="token number">8</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">    c4 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment">// 缓冲通道，容量为8，长度为0</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c4 %d %d %v\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">,</span> c4<span class="token punctuation">)</span>
    c4 <span class="token operator">&lt;-</span> <span class="token number">111</span>
    c4 <span class="token operator">&lt;-</span> <span class="token number">222</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c4 %d %d %v\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">,</span> c4<span class="token punctuation">)</span>
    <span class="token operator">&lt;-</span>c4
    t <span class="token operator">:=</span> <span class="token operator">&lt;-</span>c4
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c4 %d %d %v\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">,</span> c4<span class="token punctuation">)</span>  <span class="token comment">// 拿出来两个之后len变成0</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T %[1]v"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token comment">// 输出</span>
c4 <span class="token number">0</span> <span class="token number">8</span> <span class="token number">0x1400017a000</span>
c4 <span class="token number">2</span> <span class="token number">8</span> <span class="token number">0x1400017a000</span>
c4 <span class="token number">0</span> <span class="token number">8</span> <span class="token number">0x1400017a000</span>
<span class="token builtin">int</span> <span class="token number">222</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>说明：容量不为0的通道。通道已满，再往该通道发送数据的操作会被阻塞；通道为空，再从该通道接受数据的操作会被阻塞</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token comment">// 构建一个通道</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"开始goroutine"</span><span class="token punctuation">)</span>
        ch <span class="token operator">&lt;-</span> <span class="token string">"signal"</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"退出goroutine"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"等待goroutine"</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;-</span>ch <span class="token comment">// 这里会阻塞，直到往通道里写入数据</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"完成"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 输出</span>
等待goroutine
开始goroutine
退出goroutine
完成<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="单向通道"><a href="#单向通道" class="headerlink" title="单向通道"></a>单向通道</h3><ul>
<li><code>&lt;- chan type</code>  这种定义表示只从一个channel里面拿，说明这是只读的</li>
<li><code>chan &lt;- type</code> 这种定义标识只往一个channel里面写，说明这是只写的。</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">produce</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 生产者，只写，只要该通道具有写的能力就行</span>
    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
        r <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        ch <span class="token operator">&lt;-</span> r<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">consume</span><span class="token punctuation">(</span>ch <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 消费者，只读。只要该通道有读的能力就行</span>
    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
        t <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"正在消费%d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
        <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token number">9</span> <span class="token punctuation">&#123;</span>
            wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"消费完成"</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token comment">// 创建可读/写非缓冲通道</span>
    <span class="token keyword">go</span> <span class="token function">produce</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token function">consume</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wg<span class="token punctuation">)</span>
    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="通道关闭"><a href="#通道关闭" class="headerlink" title="通道关闭"></a>通道关闭</h3><ul>
<li>使用<code>close(ch)</code>关闭一个通道</li>
<li>只有发送方才能关闭通道，一旦通道关闭，发送者不能再往其中发送数据，否则panic</li>
<li>通道关闭作用：告诉接受者再无新数据可以到达了</li>
<li>通道关闭<ul>
<li><code>t,ok := &lt;-ch</code>  或<code>t :=&lt;-ch</code>  从通道中读取数据</li>
<li>正在阻塞等待通道中的数据的接受者，由于通道被关闭，接受者不再阻塞，获取数据失败ok位false，返回零值</li>
<li>接受者依然可以访问关闭的通道而不阻塞<ul>
<li>如果通道内还有剩余数据，ok为true，接受数据</li>
<li>如果通道内剩余的数据被拿完了，继续接受不阻塞，ok为false，返回零值</li>
</ul>
</li>
</ul>
</li>
<li>已经关闭的通道，若再次关闭则panic，因此不要重复关闭</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">produce</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token builtin">int</span><span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 生产者，只写，只要该通道具有写的能力就行</span>
    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
        r <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        a <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">4</span> <span class="token punctuation">&#123;</span>
            wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            ch <span class="token operator">&lt;-</span> a
            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">consume</span><span class="token punctuation">(</span>ch <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 消费者，只读。只要该通道有读的能力就行</span>
    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
        t<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch
        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"生产者遇到瓶颈，已关闭"</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"正在消费%d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>

        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token function">produce</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wg<span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token function">consume</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wg<span class="token punctuation">)</span>
    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="通道遍历"><a href="#通道遍历" class="headerlink" title="通道遍历"></a>通道遍历</h3><p>1、nil通道</p>
<p>发送、接受、遍历都阻塞</p>
<p>2、缓冲的、未关闭的通道</p>
<p>相当于一个无限元素的通道，迭代不完，阻塞在等下一个元素到达。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> data <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>通道是可以被遍历的，遍历的结果就是接收到的数据，数据类型的就是通道的数据类型。通过for遍历获得变量只有一个，就是上面例子的data</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">6</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
            ch <span class="token operator">&lt;-</span> i
            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> receive <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>receive<span class="token punctuation">)</span>
        <span class="token keyword">if</span> receive <span class="token operator">==</span> <span class="token number">8</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通道可用于在两个goroutine之间通过传递一个指定类型的值来同步运行和通信。操作符 <code>&lt;-</code> 用于指定通道的方向、发送和接受。如果未指定方向，则为双向通道</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">ch <span class="token operator">&lt;-</span> v 
v <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<blockquote>
<p>默认情况，通道是不带缓冲区的。在发送方发送数据的同时必须有接收方相应的接受数据。</p>
</blockquote>
<blockquote>
</blockquote>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Sum</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    sum <span class="token operator">:=</span> <span class="token number">0</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">&#123;</span>
        sum <span class="token operator">+=</span> v
    <span class="token punctuation">&#125;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>
    ch <span class="token operator">&lt;-</span> sum
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span>
    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token function">Sum</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token function">Sum</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span>
    a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">,</span> <span class="token operator">&lt;-</span>ch
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 输出结果为</span>
<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">9</span> <span class="token number">1</span> <span class="token number">8</span><span class="token punctuation">]</span>
<span class="token number">0</span>
<span class="token punctuation">[</span><span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span><span class="token punctuation">]</span>
<span class="token number">21</span>
<span class="token number">0</span> <span class="token number">21</span> <span class="token number">21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><ul>
<li><code>time.NewTicker</code>  每xx（时间）秒调用一次</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>t<span class="token punctuation">.</span>C<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>time.NewTimer</code> xx秒后调用</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTimer</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
 <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>t<span class="token punctuation">.</span>C<span class="token punctuation">)</span> <span class="token comment">// 通道阻塞2秒后只能接受一次</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="通道死锁"><a href="#通道死锁" class="headerlink" title="通道死锁"></a>通道死锁</h3><p>channel满了，就阻塞写；channel空了，就阻塞读。容量为0的通道可以理解为0个元素就满了</p>
<p>阻塞了当前协程之后就会交出cpu，去执行其他协程，希望其他协程帮助自己解除阻塞。</p>
<p>main函数结束了，整个进程就结束了</p>
<p>如果在main协程中，执行语句阻塞时，如果没有其他字写成可以执行，就剩主协程自己了，无法解锁，就自己把自己杀掉，报错fatal error deadlock</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 c1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// 非缓冲，未关闭通道</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c1: %d, %d, %v\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span>
 c1 <span class="token operator">&lt;-</span> <span class="token number">111</span> <span class="token comment">// 当前协程阻塞，无人能解，死锁</span>
<span class="token punctuation">&#125;</span>
运行结果如下
$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>
c1<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xc00001a120</span>
fatal <span class="token builtin">error</span><span class="token punctuation">:</span> all goroutines are asleep <span class="token operator">-</span> deadlock<span class="token operator">!</span>
goroutine <span class="token number">1</span> <span class="token punctuation">[</span><span class="token keyword">chan</span> send<span class="token punctuation">]</span><span class="token punctuation">:</span>
main<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        O<span class="token punctuation">:</span><span class="token operator">/</span>pros<span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">10</span> <span class="token operator">+</span><span class="token number">0xea</span>
exit status <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>如果通道阻塞不在main协程中发生，而是发生在子协程中，子协程会继续阻塞着，也可能发生死锁。但是由于至少main协程是一个值得等待的希望，编译器不能帮你识别出死锁。如果真的无任何协程帮助该协程解除阻塞状态，那么事实上该子协程解锁无望，已经死锁了。</p>
<p>死锁的危害可能会导致进程活着，但实际上某些协程未真正工作而阻塞，应该有良好的编码习惯，来减少死锁的出现。</p>
<h3 id="struct-型通道"><a href="#struct-型通道" class="headerlink" title="struct{}型通道"></a>struct{}型通道</h3><p>如果一个结构体类型就是struct{} ，说明该结构体的实例没有数据成员，也就是实例内存占用为0</p>
<p>这种类型构成的通道，非常借阅内存，仅仅只是为了传递一个信号标志</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    flag <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>
        flag <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"等到信号了%T %[1]v\n"</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span>flag<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="select-多路复用"><a href="#select-多路复用" class="headerlink" title="select 多路复用"></a>select 多路复用</h3><p>在Unix中，select() 函数用来监控一组描述符，该机制常用语实现高并发的Socket服务器程序。go语言直接在语言级别支持select关键字，用于处理异步I&#x2F;O问题</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">case</span> <span class="token operator">&lt;-</span> ch1<span class="token punctuation">:</span>
    <span class="token comment">// 如果ch1通道发送成功，则该case会接收到数据 </span>
<span class="token keyword">case</span> ch2 <span class="token operator">&lt;-</span> <span class="token number">1</span><span class="token punctuation">:</span>
    <span class="token comment">// 如果ch2接受数据成功，则该case会收到数据</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
    <span class="token comment">// 默认分支</span>
    
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>select 默认是阻塞的，只有当监听的通道中有发送或接受可以进行时才会运行。当多个通道都准备好后，select会随机的选择一个操作（发送或接受）来执行。</p>
<p>Go语言没有对通道提供直接的超时处理机制，但可以利用select来间接实现：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> wh sync<span class="token punctuation">.</span>WaitGroup
    wh<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
    timeout <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span>
        ch <span class="token operator">&lt;-</span> <span class="token number">111</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>
        timeout <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>timeout<span class="token punctuation">:</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"已超时，无法收到消息"</span><span class="token punctuation">)</span>
            wh<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">case</span> s <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"成功收到消息："</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
            <span class="token function">close</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>
            <span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
            wh<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    wh<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    count <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
    flag <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> flag <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
            count <span class="token operator">&lt;-</span> i
            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> n <span class="token operator">:=</span> <span class="token operator">&lt;-</span>count<span class="token punctuation">:</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"count= "</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>flag<span class="token punctuation">:</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"结束了"</span><span class="token punctuation">)</span>
            <span class="token keyword">goto</span> END

        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
END<span class="token punctuation">:</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    count <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
    flag <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    newBase <span class="token operator">:=</span> <span class="token number">1000</span>
    t1 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
    t2 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> flag <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
            count <span class="token operator">&lt;-</span> i
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"~~~~@@@"</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>t1<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"每一秒看看长度"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>t2<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"每隔5秒取一次"</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span>count<span class="token punctuation">)</span>
        <span class="token keyword">case</span> count <span class="token operator">&lt;-</span> newBase<span class="token punctuation">:</span> <span class="token comment">// 发送数据成功进入通道执行该case</span>
            newBase<span class="token operator">++</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="通道并发"><a href="#通道并发" class="headerlink" title="通道并发"></a>通道并发</h3><p>Go语言采用并发同步模型叫做Communication Sequential Process 通讯顺序进程，这是一种消息传递模型，在goroutine间传递消息，而不是对数据进行加锁来实现同步访问。在goroutine之间使用channel来同步和传递数据。</p>
<ul>
<li>多个协程之间通讯的管道</li>
<li>一端推入数据，一端拿走数据</li>
<li>同一时间，只有一个协程可以访问通道的数据</li>
<li>协调协程的执行顺序</li>
</ul>
<p>如果多个线程都使用了同一个数据，就会出现竞争问题。因为线程的切换不会听从程序员的意志，时间片用完就切换了。解决办法往往需要加锁，让其他线程不能对共享数据进行修改，从而保证逻辑正确。</p>
<p>但锁的引入严重影响并行效率。</p>
<p>需求：</p>
<p>1、有一个全局数count，初始为0。编写一个函数inc，能够对count增加10万次。执行5次inc函数，请问最终count值是多少？</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">func</span> <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        count<span class="token operator">++</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Go协程数："</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"执行时长:"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Microseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"count="</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span>
<span class="token comment">// 输出</span>
Go协程数： <span class="token number">1</span>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
执行时长<span class="token punctuation">:</span> <span class="token number">1531</span>
count<span class="token operator">=</span> <span class="token number">500000</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这是串行，一条一条执行，没有并发</p>
<p>2、如果并发执行inc函数，该怎么做呢，请问最终count值是多少？</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">var</span> sw sync<span class="token punctuation">.</span>WaitGroup

<span class="token keyword">func</span> <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">defer</span> sw<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        count<span class="token operator">++</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    sw<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Go协程数："</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
    sw<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"执行时长:"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Microseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"count="</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span>
<span class="token comment">// 输出</span>
Go协程数： <span class="token number">6</span>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
执行时长<span class="token punctuation">:</span> <span class="token number">559</span>
count<span class="token operator">=</span> <span class="token number">159255</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>开了5个协程并发，count结果不为50万了。为什么？count随机了吗？</p>
<p>在上面代码中设置<code>runtime.GOMAXPROCS(1)</code>，输出会怎么样？</p>
<p><code>runtime.GOMAXPROCS(1)</code>  表示只使用一个CPU核心来并发执行go程序，设置为1会降低并发性能，大多数情况，go会自动管理并发的核心数，获得最佳的性能，最好不要手动设置该参数。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">runtime<span class="token punctuation">.</span><span class="token function">GOMAXPROCS</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>原因在于count++不是原子操作，会被打断。所以，即使使用goroutine也会有竞争，一样会有并发安全问题。换成下句试一试</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">defer</span> sw<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//count++</span>
        atomic<span class="token punctuation">.</span><span class="token function">AddInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>count<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 输出</span>
Go协程数： <span class="token number">6</span>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
执行时长<span class="token punctuation">:</span> <span class="token number">25306</span>
count<span class="token operator">=</span> <span class="token number">500000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果正确了，但是这种共享内存的方式执行时长明显增加。</p>
<p>也可以使用互斥锁来保证count++的原子性操作</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> count <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">var</span> sw sync<span class="token punctuation">.</span>WaitGroup
<span class="token keyword">var</span> lock sync<span class="token punctuation">.</span>Mutex

<span class="token keyword">func</span> <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">defer</span> sw<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//count++</span>
        lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        count<span class="token operator">++</span>
        lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3、能否使用通道，来同步多个协程</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> count <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">var</span> sw sync<span class="token punctuation">.</span>WaitGroup
<span class="token keyword">var</span> lock sync<span class="token punctuation">.</span>Mutex
<span class="token keyword">var</span> ch <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">defer</span> sw<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//count++</span>
        t <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch
        t<span class="token operator">++</span>
        ch <span class="token operator">&lt;-</span> t
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    ch <span class="token operator">&lt;-</span> <span class="token number">0</span>
    sw<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Go协程数："</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
    sw<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"执行时长:"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Microseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"count="</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">// 输出</span>
Go协程数： <span class="token number">6</span>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
执行时长<span class="token punctuation">:</span> <span class="token number">78612</span>
count<span class="token operator">=</span> <span class="token number">500000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上例是计算密集型，对同一个数据进行争抢，不是能发挥并行计算优势的例子，也不适合通道，用锁实现更有效率，更有优势。</p>
<p>通道适合数据流动的场景</p>
<ul>
<li>如同管道一样，一级一级处理，一个协程处理完，发给其他协程</li>
<li>生产者、消费者模型</li>
</ul>
<h3 id="协程泄露"><a href="#协程泄露" class="headerlink" title="协程泄露"></a>协程泄露</h3><p>原因：</p>
<ul>
<li>协程阻塞，未能如期结束，之后就会有大量累积</li>
<li>协程阻塞最常见的原因都跟通道有关</li>
<li>由于每个协程都要占用内存，所以携程泄露也会导致内存泄露</li>
</ul>
<p>因此，如果你不知道你创建的协程何时能够结束，就不要使用它。否则可能协程泄露。</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Gin框架</title>
    <url>/2023/06/23/Gin%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="Gin框架"><a href="#Gin框架" class="headerlink" title="Gin框架"></a>Gin框架</h1><h3 id="一、Gin框架使用"><a href="#一、Gin框架使用" class="headerlink" title="一、Gin框架使用"></a>一、Gin框架使用</h3><h5 id="1、Gin框架简介"><a href="#1、Gin框架简介" class="headerlink" title="1、Gin框架简介"></a>1、Gin框架简介</h5><p>Gin是一个用Go语言编写的Web框架。Gin框架拥有很好的性能，借助高性能的<strong>HttpRouter</strong>包，运行速度得到了极大的提升。</p>
<h5 id="2、Gin框架安装与示例"><a href="#2、Gin框架安装与示例" class="headerlink" title="2、Gin框架安装与示例"></a>2、Gin框架安装与示例</h5><p>（1）、安装</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>gin<span class="token operator">-</span>gonic<span class="token operator">/</span>gin
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>（2）、示例</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Get</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    name <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token comment">// 从url中获取name字段</span>
    <span class="token comment">// 返回字符串格式的数据</span>
    <span class="token comment">//c.String(200, "欢迎您：%s", name)</span>
    <span class="token comment">// c.JSON ：返回JSON格式的数据</span>
    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
        <span class="token string">"code"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span>
        <span class="token string">"msg"</span><span class="token punctuation">:</span>  <span class="token string">"返回信息"</span><span class="token punctuation">,</span>
        <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token string">"欢迎您"</span> <span class="token operator">+</span> name<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 创建一个默认的路由引擎</span>
    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// GET：请求方式：/hello：请求的路径，当客户端以Get方法请求/hello路径时，会执行后面的函数</span>
    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> Get<span class="token punctuation">)</span>
    <span class="token comment">//r.POST("/user/login", Post)</span>
    <span class="token comment">// 启动HTTP服务，默认在0.0.0.0:8080启动服务</span>
    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1:8090"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/images/jrXRa7egP8ZJprErQGCJzH2QvcwBf7f_gjPuRZLOiGA.png" alt="image"></p>
<h5 id="3、Gin路由和控制器"><a href="#3、Gin路由和控制器" class="headerlink" title="3、Gin路由和控制器"></a>3、Gin路由和控制器</h5><p>路由：一个HTTP请求找到对应 的处理器函数的过程。处理器函数主要负责执行HTTP请求和响应任务。如下代码中的goLogin() 函数就是Gin的处理器函数。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">goLogin</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    name <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>
    password <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"dujie"</span> <span class="token operator">&amp;&amp;</span> password <span class="token operator">==</span> <span class="token string">"123456"</span> <span class="token punctuation">&#123;</span>
        context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
            <span class="token string">"code"</span><span class="token punctuation">:</span>     http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span>
            <span class="token string">"msg"</span><span class="token punctuation">:</span>      <span class="token string">"登录成功"</span><span class="token punctuation">,</span>
            <span class="token string">"username"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
            <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">403</span><span class="token punctuation">,</span>
            <span class="token string">"msg"</span><span class="token punctuation">:</span>  <span class="token string">"用户或密码错误"</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//context.String(200, "username=%s password=%s", name, password)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>####### <strong>（1）、路由规则</strong><br>一条路由规则由HTTP请求方法、URL路径、处理器函数这3个部分组成</p>
<ol>
<li><strong>HTTP请求方法</strong></li>
</ol>
<p>常用的HTTP请求方法有GET、POST、PUT、DELETE等</p>
<ol start="2">
<li><strong>URL路径</strong></li>
</ol>
<p>Gin框架的URL路径有3种写法</p>
<p>1）静态URL路径，即不带任何参数的URL路径，例如：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token operator">/</span>users<span class="token operator">/</span>dujie
<span class="token operator">/</span>user<span class="token operator">/</span><span class="token number">1</span>
<span class="token operator">/</span>article<span class="token operator">/</span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>2）带路径参数的URL路径，URL路径中带有参数，参数由英文冒号”:” 跟着一个字符串定义。例如：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">定义参数<span class="token punctuation">:</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>3）带星号(*)模糊匹配参数的URL路径</p>
<p>星号（*）代表匹配任意路径的意思。必须在 * 后面指定一个参数名，之后可以通过这个参数获取 * 号匹配的内容。例如：”&#x2F;user&#x2F;*path” 可以通过path参数获取 * 号匹配的内容，如&#x2F;user&#x2F;1 、&#x2F;user&#x2F;dujie&#x2F;comment&#x2F;1等。</p>
<p> </p>
<ol start="3">
<li><strong>处理器函数</strong></li>
</ol>
<p>Gin框架的处理器函数定义如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> HandlerFunc <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Context<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>处理器函数接受一个上下文参数。可以通过上下文参数获取HTTP的请求参数，返回HTTP请求的响应。</p>
<p>####### <strong>（1）、分组路由</strong><br>在做API开发时，如果要支持多个API版本，则可以通过分组路由来处理API版本。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 创建一个默认的路由引擎</span>
    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// GET：请求方式：/hello：请求的路径，当客户端以Get方法请求/hello路径时，会执行后面的函数</span>
    v1 <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/v1"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        v1<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> goLogin<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    v2 <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/v2"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        v2<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> goLogin<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8090"</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">goLogin</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"1："</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>Params<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2："</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"3："</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>Keys<span class="token punctuation">)</span>

    name <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>
    password <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"dujie"</span> <span class="token operator">&amp;&amp;</span> password <span class="token operator">==</span> <span class="token string">"123456"</span> <span class="token punctuation">&#123;</span>
        context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
            <span class="token string">"code"</span><span class="token punctuation">:</span>     http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span>
            <span class="token string">"msg"</span><span class="token punctuation">:</span>      <span class="token string">"登录成功"</span><span class="token punctuation">,</span>
            <span class="token string">"username"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
            <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">403</span><span class="token punctuation">,</span>
            <span class="token string">"msg"</span><span class="token punctuation">:</span>  <span class="token string">"用户或密码错误"</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//context.String(200, "username=%s password=%s", name, password)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的例子会将注册下面的路由信息：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token operator">/</span>v1<span class="token operator">/</span>login
<span class="token operator">/</span>v2<span class="token operator">/</span>login<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h5 id="4、Gin处理请求参数"><a href="#4、Gin处理请求参数" class="headerlink" title="4、Gin处理请求参数"></a>4、Gin处理请求参数</h5><p>（1）、获取GET请求参数</p>
<p>Gin获取GET请求参数常用方法如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Query returns the keyed url query value if it exists,</span>
<span class="token comment">// otherwise it returns an empty string `("")`.</span>
<span class="token comment">// It is shortcut for `c.Request.URL.Query().Get(key)`</span>
<span class="token comment">//</span>
<span class="token comment">//	    GET /path?id=1234&amp;name=Manu&amp;value=</span>
<span class="token comment">//		   c.Query("id") == "1234"</span>
<span class="token comment">//		   c.Query("name") == "Manu"</span>
<span class="token comment">//		   c.Query("value") == ""</span>
<span class="token comment">//		   c.Query("wtf") == ""</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Query</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	value<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">GetQuery</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
	<span class="token keyword">return</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// DefaultQuery returns the keyed url query value if it exists,</span>
<span class="token comment">// otherwise it returns the specified defaultValue string.</span>
<span class="token comment">// See: Query() and GetQuery() for further information.</span>
<span class="token comment">//</span>
<span class="token comment">//	GET /?name=Manu&amp;lastname=</span>
<span class="token comment">//	c.DefaultQuery("name", "unknown") == "Manu"</span>
<span class="token comment">//	c.DefaultQuery("id", "none") == "none"</span>
<span class="token comment">//	c.DefaultQuery("lastname", "none") == ""</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">DefaultQuery</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> defaultValue <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetQuery</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> value
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> defaultValue
<span class="token punctuation">&#125;</span>
<span class="token comment">// DefaultQuery returns the keyed url query value if it exists,</span>
<span class="token comment">// otherwise it returns the specified defaultValue string.</span>
<span class="token comment">// See: Query() and GetQuery() for further information.</span>
<span class="token comment">//</span>
<span class="token comment">//	GET /?name=Manu&amp;lastname=</span>
<span class="token comment">//	c.DefaultQuery("name", "unknown") == "Manu"</span>
<span class="token comment">//	c.DefaultQuery("id", "none") == "none"</span>
<span class="token comment">//	c.DefaultQuery("lastname", "none") == ""</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">DefaultQuery</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> defaultValue <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetQuery</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> value
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> defaultValue
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>（2）、获取POST请求参数</strong></p>
<p>Gin获取POST请求参数的常用方法如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// PostForm returns the specified key from a POST urlencoded form or multipart form</span>
<span class="token comment">// when it exists, otherwise it returns an empty string `("")`.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">PostForm</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	value<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">GetPostForm</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
	<span class="token keyword">return</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// DefaultPostForm returns the specified key from a POST urlencoded form or multipart form</span>
<span class="token comment">// when it exists, otherwise it returns the specified defaultValue string.</span>
<span class="token comment">// See: PostForm() and GetPostForm() for further information.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">DefaultPostForm</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> defaultValue <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetPostForm</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> value
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> defaultValue
<span class="token punctuation">&#125;</span>
<span class="token comment">// GetPostForm is like PostForm(key). It returns the specified key from a POST urlencoded</span>
<span class="token comment">// form or multipart form when it exists `(value, true)` (even when the value is an empty string),</span>
<span class="token comment">// otherwise it returns ("", false).</span>
<span class="token comment">// For example, during a PATCH request to update the user's email:</span>
<span class="token comment">//</span>
<span class="token comment">//	    email=mail@example.com  -->  ("mail@example.com", true) := GetPostForm("email") // set email to "mail@example.com"</span>
<span class="token comment">//		   email=                  -->  ("", true) := GetPostForm("email") // set email to ""</span>
<span class="token comment">//	                            -->  ("", false) := GetPostForm("email") // do nothing with email</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">GetPostForm</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> values<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetPostFormArray</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ok
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用方法示例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 跟PostForm的区别是：可以通过第2个参数设置参数默认值</span>
name <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">DefaultPostForm</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span>
<span class="token comment">//name := context.PostForm("username")</span>
password<span class="token punctuation">,</span> ok <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">GetPostForm</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>
    log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span><span class="token string">"参数不存在"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>（3）、获取URL路径参数</strong></p>
<p>Gin获取URL路径参数是指，获取&#x2F;user&#x2F;:id 这类路由绑定的参数。&#x2F;user&#x2F;:id 绑定了一个参数id。获取URL路径参数的函数如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Param</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> c<span class="token punctuation">.</span>Params<span class="token punctuation">.</span><span class="token function">ByName</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/:id"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    id <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    <span class="token keyword">if</span> id <span class="token operator">==</span> <span class="token string">"1"</span> <span class="token punctuation">&#123;</span>
        context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
            <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
            <span class="token string">"msg"</span><span class="token punctuation">:</span> User<span class="token punctuation">&#123;</span>
                UserName<span class="token punctuation">:</span> <span class="token string">"dujie"</span><span class="token punctuation">,</span>
                Age<span class="token punctuation">:</span>      <span class="token number">32</span><span class="token punctuation">,</span>
                Phone<span class="token punctuation">:</span>    <span class="token string">"15811047166"</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
            <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token punctuation">,</span>
            <span class="token string">"msg"</span><span class="token punctuation">:</span>  <span class="token string">"无此用户！！！"</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>（4）、将请求参数绑定到结构体</strong></p>
<p>前面获取参数的方式都是逐个进行参数的读取，比较麻烦。Gin支持将请求参数自动绑定到一个结构体对象，这种方式支持GET&#x2F;POST请求，也支持HTTP请求体中内容为JSON或XML格式的参数。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    UserName <span class="token builtin">string</span> <span class="token string">`json:"userName" form:"username"`</span>
    Phone    <span class="token builtin">string</span> <span class="token string">`json:"phone" form:"phone"`</span>
    Age      <span class="token builtin">int</span>    <span class="token string">`json:"age" form:"age"`</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>标签</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>json:”userName”</td>
<td>数据为JSON格式，并且json字段名为userName</td>
</tr>
<tr>
<td>form:”phone”</td>
<td>表单参数名为phone</td>
</tr>
</tbody></table>
<p>模拟添加用户：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/user/:id"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    u <span class="token operator">:=</span> User<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> context<span class="token punctuation">.</span><span class="token function">ShouldBind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>UserName<span class="token punctuation">)</span>
        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Phone<span class="token punctuation">)</span>
        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Age<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
        <span class="token string">"code"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span>
        <span class="token string">"msg"</span><span class="token punctuation">:</span>  u<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token comment">//context.String(200, "Success")</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>context.ShouldBind(&amp;u) </code>用于将请求中的数据绑定到指定的结构体</p>
<h5 id="5、Gin生成HTTP请求响应"><a href="#5、Gin生成HTTP请求响应" class="headerlink" title="5、Gin生成HTTP请求响应"></a>5、Gin生成HTTP请求响应</h5><p>Gin支持以字符串、JSON、XML、文件等格式生成HTTP请求响应。gin.Context 上下文对象支持多种返回处理结果。</p>
<p><strong>（1）以字符串方式生成HTTP请求响应。</strong></p>
<p>通过String()方法生成字符串方式的HTTP请求响应。String()方法的定义如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// String writes the given string into the response body.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span>code <span class="token builtin">int</span><span class="token punctuation">,</span> format <span class="token builtin">string</span><span class="token punctuation">,</span> values <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c<span class="token punctuation">.</span><span class="token function">Render</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> render<span class="token punctuation">.</span>String<span class="token punctuation">&#123;</span>Format<span class="token punctuation">:</span> format<span class="token punctuation">,</span> Data<span class="token punctuation">:</span> values<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>该方法使用示例如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Handler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

        c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"hello%s ,欢迎%s"</span><span class="token punctuation">,</span><span class="token string">"go"</span><span class="token punctuation">,</span><span class="token string">"dujie"</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>（2）以JSON格式生成HTTP请求响应。</strong></p>
<p>实际开发API接口时，最常用的就是JSON</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/user/:id"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    u <span class="token operator">:=</span> User<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> context<span class="token punctuation">.</span><span class="token function">ShouldBind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>UserName<span class="token punctuation">)</span>
        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Phone<span class="token punctuation">)</span>
        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Age<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
        <span class="token string">"code"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span>
        <span class="token string">"msg"</span><span class="token punctuation">:</span>  u<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>（3）以XML格式生成HTTP请求响应。</strong></p>
<p>定义一个User结构体，默认结构体的名字就是XML的根节点名字。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    UserName <span class="token builtin">string</span> <span class="token string">`xml:"userName" form:"username"`</span>
    Phone    <span class="token builtin">string</span> <span class="token string">`xml:"phone" form:"phone"`</span>
    Age      <span class="token builtin">int</span>    <span class="token string">`xml:"age" form:"age"`</span>
<span class="token punctuation">&#125;</span>
    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/:id"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        id <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
        <span class="token keyword">if</span> id <span class="token operator">==</span> <span class="token string">"1"</span> <span class="token punctuation">&#123;</span>
            u <span class="token operator">:=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">&#123;</span>
                UserName<span class="token punctuation">:</span> <span class="token string">"dujie"</span><span class="token punctuation">,</span>
                Age<span class="token punctuation">:</span>      <span class="token number">32</span><span class="token punctuation">,</span>
                Phone<span class="token punctuation">:</span>    <span class="token string">"15811047166"</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span>
            context<span class="token punctuation">.</span><span class="token function">XML</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>

        <span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/images/ximOXiVaTWYZnsZ9N_87_7NuNaY7VOlqtqA3kDWSJJ4.png" alt="image"></p>
<p><strong>（4）以文件格式生成HTTP请求响应。</strong></p>
<p>通过File() 方法直接返回本地文件，参数为本地文件地址</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span>（c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token comment">// 通过File（）方法直接返回本地丈件’参数为本地丈件地址  ′</span>
      c<span class="token punctuation">.</span><span class="token function">File</span><span class="token punctuation">(</span><span class="token string">"/var/www/gin/test.jpg"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>（5）设置HTTP响应头。</strong></p>
<p>Gin中提供了<code>Header()</code>方法来设置HTTP响应头。默认采用key&#x2F;value方式，支持设置多个Header</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/:id"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        id <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
        context<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span>
        context<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"site"</span><span class="token punctuation">,</span> <span class="token string">"dujie"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/images/9ursxjNtKpQ9LIfDPeKTakw4TRCipaBkRqmaCp67lD0.png" alt="image"></p>
<p><strong>（6）Gin处理静态文件</strong></p>
<p>如果项目中包含JS、CSS、JPG之类的静态文件，下面的例子：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 创建一个默认的路由引擎</span>
    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span><span class="token function">Static</span><span class="token punctuation">(</span><span class="token string">"/assets"</span><span class="token punctuation">,</span><span class="token string">"/var/www/gin/assets"</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span><span class="token function">StaticFile</span><span class="token punctuation">(</span><span class="token string">"/favicon.ico"</span><span class="token punctuation">,</span><span class="token string">"./static/favicon.ico"</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>（7）Gin处理cookie</strong></p>
<p>Gin主要通过上下文对象提供的<code>SetCookie()</code> 和<code>Cookie()</code> 两个方法操作cookie，这两个函数都是对go语言<code>net/http</code>包中<code>http.SetCookie()</code>方法的重新封装，本质是一样</p>
<ol>
<li>设置cookie</li>
</ol>
<p>Gin使用SetCookie()方法设置cookie。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// SetCookie adds a Set-Cookie header to the ResponseWriter's headers.</span>
<span class="token comment">// The provided cookie must have a valid Name. Invalid cookies may be</span>
<span class="token comment">// silently dropped.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">SetCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value <span class="token builtin">string</span><span class="token punctuation">,</span> maxAge <span class="token builtin">int</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> domain <span class="token builtin">string</span><span class="token punctuation">,</span> secure<span class="token punctuation">,</span> httpOnly <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> path <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>
		path <span class="token operator">=</span> <span class="token string">"/"</span>
	<span class="token punctuation">&#125;</span>
	http<span class="token punctuation">.</span><span class="token function">SetCookie</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Cookie<span class="token punctuation">&#123;</span>
		Name<span class="token punctuation">:</span>     name<span class="token punctuation">,</span>  <span class="token comment">// Cookie 的名称</span>
		Value<span class="token punctuation">:</span>    url<span class="token punctuation">.</span><span class="token function">QueryEscape</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// Cookie的值</span>
		MaxAge<span class="token punctuation">:</span>   maxAge<span class="token punctuation">,</span> <span class="token comment">// 过期时间（秒）</span>
		Path<span class="token punctuation">:</span>     path<span class="token punctuation">,</span> <span class="token comment">// 路径</span>
		Domain<span class="token punctuation">:</span>   domain<span class="token punctuation">,</span> <span class="token comment">// 域</span>
		SameSite<span class="token punctuation">:</span> c<span class="token punctuation">.</span>sameSite<span class="token punctuation">,</span> 
		Secure<span class="token punctuation">:</span>   secure<span class="token punctuation">,</span> <span class="token comment">// 是否只允许HTTPs访问</span>
		HttpOnly<span class="token punctuation">:</span> httpOnly<span class="token punctuation">,</span> <span class="token comment">// 是否允许浏览器仅通过HTTP获取Cookie</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/:id"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    context<span class="token punctuation">.</span><span class="token function">SetCookie</span><span class="token punctuation">(</span><span class="token string">"my_cookie"</span><span class="token punctuation">,</span> <span class="token string">"cookievalue"</span><span class="token punctuation">,</span> <span class="token number">3600</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    id <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    context<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span>
    context<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"site"</span><span class="token punctuation">,</span> <span class="token string">"dujie"</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> id <span class="token operator">==</span> <span class="token string">"1"</span> <span class="token punctuation">&#123;</span>
        u <span class="token operator">:=</span> User<span class="token punctuation">&#123;</span>
            UserName<span class="token punctuation">:</span> <span class="token string">"dujie"</span><span class="token punctuation">,</span>
            Age<span class="token punctuation">:</span>      <span class="token number">32</span><span class="token punctuation">,</span>
            Phone<span class="token punctuation">:</span>    <span class="token string">"15811047166"</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//context.XML(200, u)</span>
        context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
            <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
            <span class="token string">"msg"</span><span class="token punctuation">:</span>  u<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
            <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token punctuation">,</span>
            <span class="token string">"msg"</span><span class="token punctuation">:</span>  <span class="token string">"无此用户！！！"</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p><img src="/images/cGczYh95uVn_E_XRJd719AQyRgUMRg69MAIwRrYI2xY.png" alt="image"></p>
<ol start="2">
<li>读取Cookie</li>
</ol>
<p>Gin使用Cookie() 方法读取cookie</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/:id"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//context.SetCookie("cookie", "value", 3600, "/", "127.0.0.1", false, true)</span>
        cookie<span class="token punctuation">,</span> err <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Cookie</span><span class="token punctuation">(</span><span class="token string">"cookie"</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
            log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>删除Cookie</li>
</ol>
<p>将SetCookie() 方法的MaxAge参数设置为-1，就可以删除cookie</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">context<span class="token punctuation">.</span><span class="token function">SetCookie</span><span class="token punctuation">(</span><span class="token string">"cookie"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>（8）Gin文件上传</strong></p>
<p>Gin使用<code>SaveUploadFile()</code> 方法实现文件上传</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>MaxMultipartMemory <span class="token operator">=</span> <span class="token number">64</span> <span class="token operator">&lt;&lt;</span><span class="token number">20</span>
    r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// file 是表单字段名字</span>
        file<span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">FormFile</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span>
        <span class="token comment">// 打印上传的文件名</span>
        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>Filename<span class="token punctuation">)</span>
        <span class="token comment">// 将上传的文件保存到./dujie.jpg中</span>
        context<span class="token punctuation">.</span><span class="token function">SaveUploadedFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token string">"./dujie.jpg"</span><span class="token punctuation">)</span>
        context<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"'%s' uploaded!"</span><span class="token punctuation">,</span>file<span class="token punctuation">.</span>Filename<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8090"</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>（9）Gin中间件</strong></p>
<p>Gin中，中间件(Middleware)是指可以拦截HTTP请求——响应生命周期的特殊函数。在请求——响应生命周期中可以注册多个中间件。每个中间件执行不同的功能，一个中间件执行完，才轮到下一个中间件执行，中间件常用的应用场景如下：</p>
<ul>
<li>请求限速</li>
<li>API接口签名处理</li>
<li>权限校验</li>
<li>统一错误处理</li>
</ul>
<p>如果想拦截所有请求，则可以开发一个中间件函数来实现。Gin支持设置全局中间件和针对路由分组的中间件。在设置全局中间件后，会拦截所有请求。通过分组路由设置的中间件，仅对这个分组下的路由起作用</p>
<p><strong>（9.1）使用中间件</strong></p>
<p>Gin中使用<code>Use()</code>方法来使用中间件</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 通过Use()方法设置中间件</span>
    <span class="token comment">// 设置日志中间件，主要用于打印请求日志</span>
    r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>gin<span class="token punctuation">.</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// 设置Recovery中间件，主要用于拦截panic错误，不至于导致程序崩溃</span>
    r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>gin<span class="token punctuation">.</span><span class="token function">Recovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/:id"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
            <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
            <span class="token string">"msg"</span><span class="token punctuation">:</span>  <span class="token string">"成功"</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8090"</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>（9.2）自定义中间件</strong></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> gin<span class="token punctuation">.</span>HandlerFunc <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 可以通过上下文对象，设置一些依附在上下文对象里面的键值数据</span>
        context<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"example"</span><span class="token punctuation">,</span> <span class="token string">"这是一个中间件数据"</span><span class="token punctuation">)</span>
        <span class="token comment">// 在这里处理请求到达处理器函数之前的逻辑</span>

        <span class="token comment">// 调用下一个中间件，或者处理器的处理函数，具体得看注册了多少个中间件</span>
        context<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 在这里可以处理返给客户端之前的响应逻辑</span>
        latency <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>latency<span class="token punctuation">)</span>

        <span class="token comment">// 例如，查询请求状态码</span>
        status <span class="token operator">:=</span> context<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">Status</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 注册上面自定义的日志中间件</span>
    r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 获取日志中间件中注入的键值数据，接口断言是否是string类型</span>
        example <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">MustGet</span><span class="token punctuation">(</span><span class="token string">"example"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>
        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8090"</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span>
<span class="token comment">// 运行访问后输出</span>
<span class="token punctuation">[</span>GIN<span class="token operator">-</span>debug<span class="token punctuation">]</span> GET    <span class="token operator">/</span>hello                    <span class="token operator">--</span><span class="token operator">></span> main<span class="token punctuation">.</span>main<span class="token punctuation">.</span>func1 <span class="token punctuation">(</span><span class="token number">4</span> handlers<span class="token punctuation">)</span>
<span class="token punctuation">[</span>GIN<span class="token operator">-</span>debug<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> You trusted all proxies<span class="token punctuation">,</span> this is NOT safe<span class="token punctuation">.</span> We recommend you to set a value<span class="token punctuation">.</span>
Please check https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>pkg<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">.</span>dev<span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>gin<span class="token operator">-</span>gonic<span class="token operator">/</span>gin#readme<span class="token operator">-</span>don<span class="token operator">-</span>t<span class="token operator">-</span>trust<span class="token operator">-</span>all<span class="token operator">-</span>proxies <span class="token keyword">for</span> details<span class="token punctuation">.</span>
<span class="token punctuation">[</span>GIN<span class="token operator">-</span>debug<span class="token punctuation">]</span> Listening and serving HTTP on <span class="token punctuation">:</span><span class="token number">8090</span>
<span class="token number">2023</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">30</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">07</span><span class="token punctuation">:</span><span class="token number">53</span> 这是一个中间件数据
<span class="token number">2023</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">30</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">07</span><span class="token punctuation">:</span><span class="token number">53</span> <span class="token number">256.417</span>µs
<span class="token number">2023</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">30</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">07</span><span class="token punctuation">:</span><span class="token number">53</span> <span class="token number">200</span>
<span class="token punctuation">[</span>GIN<span class="token punctuation">]</span> <span class="token number">2023</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">30</span> <span class="token operator">-</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">07</span><span class="token punctuation">:</span><span class="token number">53</span> <span class="token operator">|</span> <span class="token number">200</span> <span class="token operator">|</span>     <span class="token number">369.125</span>µs <span class="token operator">|</span>       <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token operator">|</span> GET      <span class="token string">"/hello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>（10）Gin处理session</strong></p>
<p>在Gin中，依赖”github.com&#x2F;gin-contrib&#x2F;sessions”包中的中间件处理session。该包中的中间件支持cookie、MemStore、Redis、Memcached、Mongodb引擎。</p>
<p>1、安装</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>gin<span class="token operator">-</span>contrib<span class="token operator">/</span>sessions
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>2、用法示例</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 创建基于cookie的存储引擎，password123456参数是用于加密的秘钥</span>
    store <span class="token operator">:=</span> cookie<span class="token punctuation">.</span><span class="token function">NewStore</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"password123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// 设置session中间件，参数my_session 指的是session的名字，也是cookie的名字</span>
    <span class="token comment">// store是前面创建的存储引擎，可以将其替换成其他存储引擎，如Redis等</span>
    r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>sessions<span class="token punctuation">.</span><span class="token function">Sessions</span><span class="token punctuation">(</span><span class="token string">"my_session"</span><span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 初始化session对象</span>
        session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
        <span class="token comment">// 通过session Get()函数读取session值</span>
        <span class="token comment">// session 是键值对格式数据，因此需要通过key查询数据</span>
        <span class="token keyword">if</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"world"</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 设置session数据</span>
            session<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span>
            <span class="token comment">// 删除session数据</span>
            session<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token string">"dujie"</span><span class="token punctuation">)</span>
            <span class="token comment">// 保存session数据</span>
            session<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment">// 删除整个session</span>
            <span class="token comment">// session.Clear()</span>
        <span class="token punctuation">&#125;</span>
        context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
            <span class="token string">"hello"</span><span class="token punctuation">:</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token comment">// 获取session</span>
    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/session"</span><span class="token punctuation">,</span> Handler<span class="token punctuation">)</span>

    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8090"</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span>
<span class="token comment">// 获取session的handler函数</span>
<span class="token keyword">func</span> <span class="token function">Handler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    data<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Cookie</span><span class="token punctuation">(</span><span class="token string">"my_session"</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">&#125;</span>
    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"not found"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/images/PdOQSGRA-04_7y1ZYpow_iacKReUL_XvlN8eZfqWmCE.png" alt="image"></p>
<p>3、基于Redis存储引擎的session</p>
<p>如果想将session数据保存到Redis中，则只要将session的存储引擎改成Redis即可</p>
<p>安装Gin的Redis存储引擎包</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>gin<span class="token operator">-</span>contrib<span class="token operator">/</span>sessions<span class="token operator">/</span>redis
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>基于Redis存储引擎示例</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//store := cookie.NewStore([]byte("password123456"))</span>
    <span class="token comment">// 初始化基于redis的存储引擎</span>
    store<span class="token punctuation">,</span> err <span class="token operator">:=</span> redis<span class="token punctuation">.</span><span class="token function">NewStore</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"localhost:6379"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>sessions<span class="token punctuation">.</span><span class="token function">Sessions</span><span class="token punctuation">(</span><span class="token string">"my_session"</span><span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
        <span class="token keyword">var</span> count <span class="token builtin">int</span>
        v <span class="token operator">:=</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> v <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
            count <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            count <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
            count<span class="token operator">++</span>
        <span class="token punctuation">&#125;</span>
        session<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>
        session<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        context<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
            <span class="token string">"count"</span><span class="token punctuation">:</span> count<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/session"</span><span class="token punctuation">,</span> Handler<span class="token punctuation">)</span>
    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8090"</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">Handler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 上下文中获取session</span>
    session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
    count <span class="token operator">:=</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"————————"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>
    <span class="token keyword">if</span> count <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
            <span class="token string">"count"</span><span class="token punctuation">:</span> count<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">&#125;</span>
    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"not found"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>




































































]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go文件处理</title>
    <url>/2023/05/26/Go%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="Go文件处理"><a href="#Go文件处理" class="headerlink" title="Go文件处理"></a>Go文件处理</h1><h3 id="一、操作目录"><a href="#一、操作目录" class="headerlink" title="一、操作目录"></a>一、操作目录</h3><p>Go语言对文件和目录操作，主要通过os包和path包实现。</p>
<h5 id="1、创建目录"><a href="#1、创建目录" class="headerlink" title="1、创建目录"></a>1、创建目录</h5><p>Go语言创建目录，主要使用<code>Mkdir()</code> 、<code>MkdirAll()</code> 两个函数。其中<code>Mkdir()</code> 函数的定义如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Mkdir</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> perm FileMode<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>其中，name是需要创建的目录名字，perm 为权限设置码。比如perm为0700，表示该目录对所有用户都可读写及可执行</p>
<p>例如，创建一个名为”test”的目录，perm权限为0700的示例如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"log"</span>
	<span class="token string">"os"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">// 创建一个名为"test"的目录，权限为777</span>
	err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Mkdir</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>MkdirAll()函数的定义如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">MkdirAll</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> perm FileMode<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>其中path为目录的路径（例如 “dir1&#x2F;dir2&#x2F;dir3”），perm为权限设置码</p>
<p>用MkdirAll()函数创建目录的示例如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"log"</span>
	<span class="token string">"os"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">// 根据path创建多级子目录</span>
	err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">MkdirAll</span><span class="token punctuation">(</span><span class="token string">"test1/test2/test3"</span><span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>多级目录一般用的比较多的地方是上传文件，例如可以创建一个目录结构为”static&#x2F;upload&#x2F;2020&#x2F;10&#x2F;1”的多级目录来保存上传的文件。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"log"</span>
	<span class="token string">"os"</span>
	<span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        
	uploadPath <span class="token operator">:=</span> <span class="token string">"static/upload/"</span> <span class="token operator">+</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006/01/02"</span><span class="token punctuation">)</span>
	err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">MkdirAll</span><span class="token punctuation">(</span>uploadPath<span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 创建成功后可以查看目录结构</span>
<span class="token punctuation">[</span>root@newperiodical ~<span class="token punctuation">]</span># ll static<span class="token operator">/</span>
total <span class="token number">0</span>
dr<span class="token operator">--</span><span class="token operator">--</span>x<span class="token operator">--</span>x <span class="token number">3</span> root root <span class="token number">18</span> Aug <span class="token number">25</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">10</span> upload
<span class="token punctuation">[</span>root@newperiodical ~<span class="token punctuation">]</span># ll static<span class="token operator">/</span>upload<span class="token operator">/</span>
total <span class="token number">0</span>
dr<span class="token operator">--</span><span class="token operator">--</span>x<span class="token operator">--</span>x <span class="token number">3</span> root root <span class="token number">16</span> Aug <span class="token number">25</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">10</span> <span class="token number">2023</span>
<span class="token punctuation">[</span>root@newperiodical ~<span class="token punctuation">]</span># 
<span class="token punctuation">[</span>root@newperiodical ~<span class="token punctuation">]</span># ll static<span class="token operator">/</span>upload<span class="token operator">/</span><span class="token number">2023</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span>
total <span class="token number">0</span>
dr<span class="token operator">--</span><span class="token operator">--</span>x<span class="token operator">--</span>x <span class="token number">2</span> root root <span class="token number">6</span> Aug <span class="token number">25</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">10</span> <span class="token number">25</span>
<span class="token punctuation">[</span>root@newperiodical ~<span class="token punctuation">]</span># ll static<span class="token operator">/</span>upload<span class="token operator">/</span><span class="token number">2023</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">25</span><span class="token operator">/</span>
total <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="2、重命名目录"><a href="#2、重命名目录" class="headerlink" title="2、重命名目录"></a>2、重命名目录</h5><p>在Go中的os包邮一个<code>Rename()</code>函数用来对目录和文件进行重命名。该函数也可以用于移动一个文件。该函数定义为：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Rename</span><span class="token punctuation">(</span>oldpath<span class="token punctuation">,</span> newpath <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token function">rename</span><span class="token punctuation">(</span>oldpath<span class="token punctuation">,</span> newpath<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>其中，参数oldpath 为旧的目录名或多级目录的路径，参数newpath为新目录的路径。如果newpath已经存在，则替换它。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"log"</span>
	<span class="token string">"os"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 创建一个名为"dir_name1" 的目录，权限为777</span>
	err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Mkdir</span><span class="token punctuation">(</span><span class="token string">"dir_name1"</span><span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	oldName <span class="token operator">:=</span> <span class="token string">"dir_name1"</span>
	newName <span class="token operator">:=</span> <span class="token string">"dir_new"</span>
        <span class="token comment">// 将dir_name1 重命名为dir_new</span>
	err <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">Rename</span><span class="token punctuation">(</span>oldName<span class="token punctuation">,</span> newName<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>mac电脑可能会报权限错误</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">2023</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">25</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">40</span><span class="token punctuation">:</span><span class="token number">13</span> rename dir_name1 dir_new<span class="token punctuation">:</span> permission denied
<span class="token builtin">panic</span><span class="token punctuation">:</span> rename dir_name1 dir_new<span class="token punctuation">:</span> permission denied<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>可以使用exec包来执行命令</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"log"</span>
	<span class="token string">"os"</span>
	<span class="token string">"os/exec"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span><span class="token string">"dir_name1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"原目录已存在不需要创建"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Mkdir</span><span class="token punctuation">(</span><span class="token string">"dir_name1"</span><span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	oldName <span class="token operator">:=</span> <span class="token string">"dir_name1"</span>
	newName <span class="token operator">:=</span> <span class="token string">"dir_new"</span>
	cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">"sudo"</span><span class="token punctuation">,</span> <span class="token string">"mv"</span><span class="token punctuation">,</span> oldName<span class="token punctuation">,</span> newName<span class="token punctuation">)</span>
	cmd<span class="token punctuation">.</span>Stdin <span class="token operator">=</span> os<span class="token punctuation">.</span>Stdin
	cmd<span class="token punctuation">.</span>Stdout <span class="token operator">=</span> os<span class="token punctuation">.</span>Stdout
	cmd<span class="token punctuation">.</span>Stderr <span class="token operator">=</span> os<span class="token punctuation">.</span>Stderr
	err <span class="token operator">:=</span> cmd<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="3、删除目录"><a href="#3、删除目录" class="headerlink" title="3、删除目录"></a>3、删除目录</h5><p>go删除目录的函数定义如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Remove</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>其中，参数name为目录的名字。Remove()函数有一个局限性：当目录下有文件或其他目录时会出错。如下</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">2023</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">25</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span><span class="token number">46</span> remove dir<span class="token punctuation">:</span> directory not empty
<span class="token builtin">panic</span><span class="token punctuation">:</span> remove dir<span class="token punctuation">:</span> directory not empty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>如果要删除多级目录，则可以使用RemoveAll()函数</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">RemoveAll</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token function">removeAll</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>其中，参数path为要删除的多级子目录。如果path是单个名称，则该目录下的子目录将<strong>全部被删除</strong></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">RemoveAll</span><span class="token punctuation">(</span><span class="token string">"dir"</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="4、遍历目录"><a href="#4、遍历目录" class="headerlink" title="4、遍历目录"></a>4、遍历目录</h5><p>在go语言的path&#x2F;filepath包中，提供了Walk()函数来遍历目录</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Walk</span><span class="token punctuation">(</span>root <span class="token builtin">string</span><span class="token punctuation">,</span> fn WalkFunc<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	info<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Lstat</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		err <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		err <span class="token operator">=</span> <span class="token function">walk</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> info<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> err <span class="token operator">==</span> SkipDir <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> err
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中，参数root为遍历的初始根目录，参数walkFn为自定义函数（例如，显示所有文件夹、文件、子文件）用Walk()函数遍历目录的示例如下:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"io/fs"</span>
	<span class="token string">"path/filepath"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">scan</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> info fs<span class="token punctuation">.</span>FileInfo<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Scan:%s\n"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>     
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">IsDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// 是否是目录</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 文件或目录名</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">Mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 文件或目录权限</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">ModTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 创建时间</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	root <span class="token operator">:=</span> <span class="token string">"./test_walk"</span>
	err <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Walk</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> scan<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"filepath.Walk() returned %v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 输出</span>
Scan<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token operator">/</span>test_walk
<span class="token boolean">true</span>
test_walk
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x
<span class="token number">2023</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">48</span><span class="token punctuation">:</span><span class="token number">38.415947217</span> <span class="token operator">+</span><span class="token number">0800</span> CST
<span class="token number">96</span>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Scan<span class="token punctuation">:</span>test_walk<span class="token operator">/</span>dir2
<span class="token boolean">true</span>
dir2
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x
<span class="token number">2023</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">48</span><span class="token punctuation">:</span><span class="token number">43.947354911</span> <span class="token operator">+</span><span class="token number">0800</span> CST
<span class="token number">96</span>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Scan<span class="token punctuation">:</span>test_walk<span class="token operator">/</span>dir2<span class="token operator">/</span>dir3
<span class="token boolean">true</span>
dir3
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x
<span class="token number">2023</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">55</span><span class="token punctuation">:</span><span class="token number">53.152220343</span> <span class="token operator">+</span><span class="token number">0800</span> CST
<span class="token number">96</span>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Scan<span class="token punctuation">:</span>test_walk<span class="token operator">/</span>dir2<span class="token operator">/</span>dir3<span class="token operator">/</span>test
<span class="token boolean">false</span>
test
<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span>
<span class="token number">2023</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">55</span><span class="token punctuation">:</span><span class="token number">53.152114752</span> <span class="token operator">+</span><span class="token number">0800</span> CST
<span class="token number">665464</span>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将需要遍历的目录下的所有文件移动到static目录中</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"io/fs"</span>
	<span class="token string">"os"</span>
	<span class="token string">"os/exec"</span>
	<span class="token string">"path/filepath"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">scan</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> info fs<span class="token punctuation">.</span>FileInfo<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Scan:%s\n"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">IsDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// 是否是目录</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 文件或目录名</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">Mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 文件或目录权限</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">ModTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 创建时间</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
        <span class="token comment">// 判断是否是目录，如果不是则将文件移动</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>info<span class="token punctuation">.</span><span class="token function">IsDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">"mv"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token string">"static"</span><span class="token punctuation">)</span>
		cmd<span class="token punctuation">.</span>Stdout <span class="token operator">=</span> os<span class="token punctuation">.</span>Stdin
		cmd<span class="token punctuation">.</span>Stderr <span class="token operator">=</span> os<span class="token punctuation">.</span>Stderr
		cmd<span class="token punctuation">.</span>Stdin <span class="token operator">=</span> os<span class="token punctuation">.</span>Stdin
		err <span class="token operator">=</span> cmd<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	root <span class="token operator">:=</span> <span class="token string">"./test_walk"</span>
	err <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Walk</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> scan<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"filepath.Walk() returned %v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="二、文件操作"><a href="#二、文件操作" class="headerlink" title="二、文件操作"></a>二、文件操作</h3><h5 id="2-1、创建文件"><a href="#2-1、创建文件" class="headerlink" title="2.1、创建文件"></a>2.1、创建文件</h5><p>Go语言os包中提供了Create()函数来创建文件，其定义如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Create</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>File<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token function">OpenFile</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> O_RDWR<span class="token operator">|</span>O_CREATE<span class="token operator">|</span>O_TRUNC<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>其中，参数name为文件名字的字符串，返回值为指针型文件描述符</p>
<p>用Create()函数创建一个名为name的文件，默认采用666.如果文件存在，则他会被重置为空文件，如果成功，则返回文件描述符对象，可用于文件的读写</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// 创建文件，Create()函数会根据传入的文件名创建文件，默认权限是666</span>
    file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"./demo.test"</span><span class="token punctuation">)</span> <span class="token comment">// 如果已经存在则将文件清空</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 创建文件失败的原因有：</span>
        <span class="token comment">// 1、路径不存在，2、权限不足 3、打开文件数量超过上限 4、磁盘空间不足等</span>
        log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
    <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 关闭文件，释放资源</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="2-2、打开与关闭文件"><a href="#2-2、打开与关闭文件" class="headerlink" title="2.2、打开与关闭文件"></a>2.2、打开与关闭文件</h5><p>在go语言的os包中提供了<code>Open()</code>函数和<code>OpenFile()</code>函数用来打开文件。在<code>Open()</code>、<code>OpenFile()</code> 函数使用完毕后，必须调用Close()方法来关闭文件</p>
<p>####### <strong>1、Open()函数</strong><br>文件的打开使用os包中的<code>Open()</code> 函数，其定义如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Open</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>File<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token function">OpenFile</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>其中参数name为文件名字的字符串，返回值为文件描述符对象。</p>
<p>文件关闭用Close()方法</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>FIle<span class="token punctuation">)</span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>其中，参数f为文件描述符指针；Close() 方法可使文件不能用于读写，他的返回值为可能出现的错误。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"demo.test"</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"打开文件出错%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
<span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果在代码所在文件夹中没有名为demo.test的文件，则报如下错误：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">打开文件出错open demo<span class="token punctuation">.</span>tests<span class="token punctuation">:</span> no such file or directory
<span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h6 id="2、OpenFile-函数"><a href="#2、OpenFile-函数" class="headerlink" title="2、OpenFile()函数"></a><strong>2、OpenFile()函数</strong></h6><p><code>OpenFile()</code>函数比<code>Open()</code>函数更加强大，可以定义文件的名字、文件打开方式，以及文件权限设置，其定义如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">	file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"demo.test"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_APPEND<span class="token operator">|</span>os<span class="token punctuation">.</span>O_CREATE<span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"文件打开失败"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 所有权限</span>
<span class="token keyword">const</span> <span class="token punctuation">(</span>
	<span class="token comment">// Exactly one of O_RDONLY, O_WRONLY, or O_RDWR must be specified.</span>
	O_RDONLY <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_RDONLY <span class="token comment">// open the file read-only.  // 只读</span>
	O_WRONLY <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_WRONLY <span class="token comment">// open the file write-only. // 只写</span>
	O_RDWR   <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_RDWR   <span class="token comment">// open the file read-write.  // 读写</span>
	<span class="token comment">// The remaining values may be or'ed in to control behavior.  </span>
	O_APPEND <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_APPEND <span class="token comment">// append data to the file when writing.   // 追加</span>
	O_CREATE <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_CREAT  <span class="token comment">// create a new file if none exists.  // 如果不存在则创建</span>
	O_EXCL   <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_EXCL   <span class="token comment">// used with O_CREATE, file must not exist.  // 和create搭配使用，文件必须不存在</span>
	O_SYNC   <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_SYNC   <span class="token comment">// open for synchronous I/O.  </span>
	O_TRUNC  <span class="token builtin">int</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span>O_TRUNC  <span class="token comment">// truncate regular writable file when opened.   // 清空文件</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h6 id="3、读写文件"><a href="#3、读写文件" class="headerlink" title="3、读写文件"></a><strong>3、读写文件</strong></h6><p>####### 3.1、读文件<br>读文件有如下两种函数</p>
<ol>
<li><strong>用带缓冲方式读取</strong></li>
</ol>
<p>这种方式使用<code>bufio</code>包中的<code>NewReader()</code>函数</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewReader</span><span class="token punctuation">(</span>rd io<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span> <span class="token operator">*</span>Reader <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token function">NewReaderSize</span><span class="token punctuation">(</span>rd<span class="token punctuation">,</span> defaultBufSize<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 打开文件</span>
file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"demo.test"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_APPEND<span class="token operator">|</span>os<span class="token punctuation">.</span>O_CREATE<span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"文件打开失败"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
	line<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span> <span class="token comment">// 读取一个换行符就结束</span>
	<span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">&#123;</span>                   <span class="token comment">// io.EOF 表示文件的末尾</span>
		<span class="token keyword">break</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 输出每行内容</span>
	fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li><strong>直接读取到内存(ioutil.ReadFile)</strong></li>
</ol>
<p>如果想将文件直接读取到内存中，则可以使用<code>io/ioutil</code> 包中的<code>ReadFile()</code> 函数，其定义如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ReadFile</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">	filePath <span class="token operator">:=</span> <span class="token string">"demo.test"</span>
	content<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 输出</span>
<span class="token punctuation">[</span><span class="token number">231</span> <span class="token number">172</span> <span class="token number">172</span> <span class="token number">228</span> <span class="token number">184</span> <span class="token number">128</span> <span class="token number">232</span> <span class="token number">161</span> <span class="token number">140</span> <span class="token number">97</span> <span class="token number">98</span> <span class="token number">99</span> <span class="token number">10</span> <span class="token number">231</span> <span class="token number">172</span> <span class="token number">172</span> <span class="token number">228</span> <span class="token number">186</span> <span class="token number">140</span> <span class="token number">232</span> <span class="token number">161</span> <span class="token number">140</span> <span class="token number">100</span> <span class="token number">101</span> <span class="token number">114</span> <span class="token number">10</span> <span class="token number">231</span> <span class="token number">172</span> <span class="token number">172</span> <span class="token number">228</span> <span class="token number">184</span> <span class="token number">137</span> <span class="token number">232</span> <span class="token number">161</span> <span class="token number">140</span> <span class="token number">99</span> <span class="token number">99</span> <span class="token number">99</span> <span class="token number">10</span> <span class="token number">100</span> <span class="token number">100</span> <span class="token number">100</span> <span class="token number">10</span><span class="token punctuation">]</span>
第一行abc
第二行der
第三行ccc
ddd
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>####### <strong>3.2、写文件</strong><br>Go语言中os包中提供了一个名为File的对象来处理文件，该对象有<code>Write()</code>、<code>WriteAt()</code>、<code>WriteString()</code> 3种方法可以用于写文件</p>
<ol>
<li><strong>Write()方法</strong></li>
</ol>
<p><code>Write()</code> 方法用于写入<code>[]byte</code> 类型的信息到文件中，其定义如下</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"demo.test"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_WRONLY<span class="token operator">|</span>os<span class="token punctuation">.</span>O_APPEND<span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

n<span class="token punctuation">,</span> err <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"你好世界！"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li><strong>WriteAt()方法</strong></li>
</ol>
<p>WriteAt()方法用于在指定位置开始写入[]byte 类型的信息，其定义如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"demo.test"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_WRONLY<span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
n<span class="token punctuation">,</span> err <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">WriteAt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"测试一下"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>该方法表示从基本输入源的偏移量off处开始，将len(p)个字节读取到p中。他返回读取的字节数n(0&lt;&#x3D; n &lt;&#x3D;len(p))，以及任何遇到的错误</p>
<ol start="3">
<li><strong>WriteString()方法</strong></li>
</ol>
<p>WriteString()方法用于将字符串写入文件，其定义如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>File<span class="token punctuation">)</span> <span class="token function">WriteString</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>其中参数s为string类型的字符串。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"demo.test"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_WRONLY<span class="token operator">|</span>os<span class="token punctuation">.</span>O_TRUNC<span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
n<span class="token punctuation">,</span> err <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">"我擦擦擦擦擦擦"</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>WriteString()</code> 方法的本质上是对 <code>Write()</code> 方法的调用。<code>WriteString()</code>方法的返回值就是<code>Write()</code>的返回值。<code>WriteString()</code>的方法体如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>File<span class="token punctuation">)</span> <span class="token function">WriteString</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
	hdr <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>unsafeheader<span class="token punctuation">.</span>Slice<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
	hdr<span class="token punctuation">.</span>Data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>unsafeheader<span class="token punctuation">.</span>String<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Data
	hdr<span class="token punctuation">.</span>Cap <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	hdr<span class="token punctuation">.</span>Len <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	<span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>WriteString() </code>方法和 <code>Write() </code>方法的区别是参数形式：<code>WriteString()</code> 方法的参数是字符串，<code>Write()</code>方法的参数是<code>[]byte(s)</code> </p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">fout<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"demo.test"</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">defer</span> fout<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
	outstr <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s:%d\r\n"</span><span class="token punctuation">,</span> <span class="token string">"Hello Go"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>  <span class="token comment">// sprintf格式化</span>
	fout<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>outstr<span class="token punctuation">)</span> <span class="token comment">// string 信息</span>
	fout<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"i love go \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// byte 类型</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="2-3、移动与重命名文件"><a href="#2-3、移动与重命名文件" class="headerlink" title="2.3、移动与重命名文件"></a>2.3、移动与重命名文件</h5><p>Go语言的移动和重命名可以通过Rename()函数实现，其参数既可以是目录也可以是文件。</p>
<p>定义如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 创建一个名为demo.test 的文件</span>
fout<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"demo.test"</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">defer</span> fout<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 创建一个名为fuck的目录，权限为777</span>
err <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">Mkdir</span><span class="token punctuation">(</span><span class="token string">"fuck"</span><span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 将demo.test 文件移动到fuck目录下，并改名为demo.txt</span>
err <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">Rename</span><span class="token punctuation">(</span><span class="token string">"demo.test"</span><span class="token punctuation">,</span> <span class="token string">"fuck/demo.txt"</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="2-4、删除文件"><a href="#2-4、删除文件" class="headerlink" title="2.4、删除文件"></a>2.4、删除文件</h5><p>和删除目录一样，在Go语言中删除文件也可以通过<code>Remove()</code>函数和<code>RemoveAll()</code>函数来实现</p>
<ol>
<li>Remove()函数</li>
</ol>
<p>Remove()函数用于删除指定的文件或目录，如果出错，则返回*PathError类型的错误，其定义为</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Remove</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="2">
<li>RemoveAll()函数</li>
</ol>
<p><code>RemoveAll()</code> 函数用于删除指定的文件或目录及它的所有下级对象。他会尝试删除所有内容，除非遇到错误并返回。如果参数path指定的对象不存在，则<code>RemoveAll()</code> 会返回nil，而不返回错误</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">RemoveAll</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token function">removeAll</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 创建一个名为demo.test 的文件</span>
fout<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"demo.test"</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">defer</span> fout<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 创建一个名为fuck的目录，权限为777</span>
err <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">Mkdir</span><span class="token punctuation">(</span><span class="token string">"fuck"</span><span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 将demo.test 文件移动到fuck目录下，并改名为demo.txt</span>
err <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">Rename</span><span class="token punctuation">(</span><span class="token string">"demo.test"</span><span class="token punctuation">,</span> <span class="token string">"fuck/demo.txt"</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
err <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">RemoveAll</span><span class="token punctuation">(</span><span class="token string">"fuck/demo.txt"</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="2-5、复制文件"><a href="#2-5、复制文件" class="headerlink" title="2.5、复制文件"></a>2.5、复制文件</h5><p>在Go语言中，可以使用io包的Copy() 函数来实现文件复制功能，定义如下</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Copy</span><span class="token punctuation">(</span>dst Writer<span class="token punctuation">,</span> src Reader<span class="token punctuation">)</span> <span class="token punctuation">(</span>written <span class="token builtin">int64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token function">copyBuffer</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> src<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>其中，参数dst为源文件指针，参数src为目标文件指针。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">	src<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"test.zip"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_WRONLY<span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">defer</span> src<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	dst<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"test.zip.bak"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_WRONLY<span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">defer</span> dst<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	result<span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> src<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"复制成功，复制的字节数为："</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>




<span class="token comment">// 这里用exec</span>

<span class="token punctuation">[</span>root@newperiodical ~<span class="token punctuation">]</span># cat test<span class="token punctuation">.</span><span class="token keyword">go</span> 
<span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"log"</span>
    <span class="token string">"os"</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"os/exec"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                src<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_WRONLY<span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
                log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        dst<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"test.txt.bak"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_WRONLY<span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
                log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">"cp"</span><span class="token punctuation">,</span> <span class="token string">"-rp"</span><span class="token punctuation">,</span> <span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test.txt.bak"</span><span class="token punctuation">)</span>
        cmd<span class="token punctuation">.</span>Stdout <span class="token operator">=</span> os<span class="token punctuation">.</span>Stdout
        cmd<span class="token punctuation">.</span>Stdin <span class="token operator">=</span> os<span class="token punctuation">.</span>Stdin
        cmd<span class="token punctuation">.</span>Stderr <span class="token operator">=</span> os<span class="token punctuation">.</span>Stderr
        err <span class="token operator">=</span> cmd<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
                log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token keyword">defer</span> dst<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">defer</span> src<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>除此之外，还可以自己封装成一个函数：先通过使用os包中的<code>os.Open()</code>和<code>os.Create()</code> 函数获取文件句柄（文件指针），然后通过文件指针的<code>Read()</code>和<code>Write()</code>方法，按照字节读取和写入来实现复制文件的功能。</p>
<p>把复制文件封装成一个公共函数，以便在以后每次需要用到该功能时，直接调用封装好的函数。对于较大文件，可以自定义一个名为DoCopy()的函数，如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">DoCopy</span><span class="token punctuation">(</span>srcFileName<span class="token punctuation">,</span> dstFileName <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	srcFile<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>srcFileName<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"源文件读取失败，err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		err <span class="token operator">=</span> srcFile<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"源文件关闭失败,err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	distFile<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>dstFileName<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"目标文件创建失败,err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		err <span class="token operator">:=</span> distFile<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"目标文件关闭失败,err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 指定长度的字节切片，每次最多读取指定长度</span>
	<span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span>
	<span class="token comment">// 循环读取并写入</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		n<span class="token punctuation">,</span> err <span class="token operator">:=</span> srcFile<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>
		n<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> distFile<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">&#123;</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
				log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"复制过程发生错误，错误err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">DoCopy</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"shit.txt"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>或者</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">FileCopy</span><span class="token punctuation">(</span>dstStr<span class="token punctuation">,</span> srcStr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	dst<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span>dstStr<span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_RDWR<span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">defer</span> dst<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	src<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>srcStr<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">defer</span> src<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		str<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">&#125;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
		n<span class="token punctuation">,</span> err <span class="token operator">:=</span> src<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"已更新%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

	err <span class="token operator">:=</span> <span class="token function">FileCopy</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"fuck.txt"</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="2-6、修改文件权限"><a href="#2-6、修改文件权限" class="headerlink" title="2.6、修改文件权限"></a>2.6、修改文件权限</h5><h6 id="1、Linux中的文件权限"><a href="#1、Linux中的文件权限" class="headerlink" title="1、Linux中的文件权限"></a>1、Linux中的文件权限</h6><ol>
<li><p><strong>linux中的文件权限有以下设定</strong></p>
<ul>
<li>文件的权限类型一般包括读、写、执行(对应字母为r、w、x)</li>
<li>权限的属组拥有者、群组、其他组这3种。每个文件都可以针对这3个属组（粒度），设置不同的r、w、x(读、写、执行)权限</li>
<li>通常情况下，一个文件只能归属与一个用户和组。如果其他的用户想具有这个文件的权限，则可以将用户加入具备权限的群组。一个用户可以同时归属与多个组。</li>
</ul>
</li>
<li><p><strong>十位二进制表示法</strong></p>
</li>
</ol>
<p><code>-rwxrwxrwx(777)</code> </p>
<p>以上权限表示所有用户（拥有者、所在群组的用户、其他组的用户）都有这个文件的读、写、执行权限。</p>
<p>**① **<strong>：</strong>在十位二进制表示法中，第一位表示的是文件的类型，类型可以是下面几个中的一个</p>
<ul>
<li>d：目录(directory)</li>
<li>-：文件(regular file)</li>
<li>s：套接字(socket)</li>
<li>p：管道文件(pipe)或命名管道文件(named pipe)</li>
<li>l：符号链接文件(symbolic link)</li>
<li>b：该文件是面向块的设备文件</li>
<li>c：该文件是面向字符的设备文件</li>
</ul>
<p>②：在十位二进制表示法中，后9位每个位置的意义（代表某个属组的某个权限）都是固定的。如果将各个位置权限的有无用二进制数1和0来代替，则只读、只写、只执行权限可以用3位二进制数表示：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">r<span class="token operator">--</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token number">100</span>  <span class="token number">4</span>
<span class="token operator">-</span>w<span class="token operator">-</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token number">010</span>  <span class="token number">2</span>
<span class="token operator">--</span>x  <span class="token operator">=</span><span class="token operator">></span> <span class="token number">001</span>  <span class="token number">1</span>
<span class="token operator">--</span><span class="token operator">-</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token number">000</span>  <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>转换成八进制数，则为r&#x3D;4，w&#x3D;2，x&#x3D;1 （这也就是在用数字设置权限时，为何4代表读，2代表写，1代表执行）</p>
<p>可以将所有的权限用二进制形式表现出来，并进一步转换成八进制数字</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">rwx <span class="token operator">=</span> <span class="token number">111</span>  <span class="token operator">=</span> <span class="token number">7</span>
rw<span class="token operator">-</span> <span class="token operator">=</span> <span class="token number">110</span>  <span class="token operator">=</span> <span class="token number">6</span>
r<span class="token operator">-</span>x <span class="token operator">=</span> <span class="token number">101</span>  <span class="token operator">=</span> <span class="token number">5</span>
<span class="token operator">-</span>wx <span class="token operator">=</span> <span class="token number">011</span>  <span class="token operator">=</span> <span class="token number">3</span>
<span class="token operator">-</span>w<span class="token operator">-</span> <span class="token operator">=</span> <span class="token number">010</span>  <span class="token operator">=</span> <span class="token number">2</span>
<span class="token operator">--</span>x <span class="token operator">=</span> <span class="token number">001</span>  <span class="token operator">=</span> <span class="token number">1</span>
<span class="token operator">--</span><span class="token operator">-</span> <span class="token operator">=</span> <span class="token number">000</span>  <span class="token operator">=</span> <span class="token number">0</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由上可以看出，每个属组的所有的权限都可以用1位八进制数表示，每个数字都代表不同的权限。如最高的权限是7，则代表可读、可写、可执行。</p>
<h6 id="2、修改文件权限"><a href="#2、修改文件权限" class="headerlink" title="2、修改文件权限"></a>2、修改文件权限</h6><p>在Go语言中，可使用os.Chmod()方法来修改文件的权限，该方法是对操作系统权限控制的一种封装。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Chmod</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> mode FileMode<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">chmod</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> mode<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>其中参数f为文件指针。如果出错，则返回底层错误类型*PathError。用Chmod()方法修改文件权限的实例如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">	file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"chmod1.txt"</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	info<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	mode <span class="token operator">:=</span> info<span class="token punctuation">.</span><span class="token function">Mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span>
	os<span class="token punctuation">.</span><span class="token function">Chmod</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">)</span>
	fileinfo<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	filemode <span class="token operator">:=</span> fileinfo<span class="token punctuation">.</span><span class="token function">Mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>filemode<span class="token punctuation">)</span>
<span class="token comment">//输出</span>
<span class="token operator">-</span>r<span class="token operator">--</span><span class="token operator">--</span>x<span class="token operator">--</span>x
<span class="token operator">-</span>rwxrwxrwx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
































]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>ServeMux、httprouter</title>
    <url>/2023/06/04/ServeMux%E3%80%81httprouter/</url>
    <content><![CDATA[<h1 id="ServeMux、httprouter"><a href="#ServeMux、httprouter" class="headerlink" title="ServeMux、httprouter"></a>ServeMux、httprouter</h1><h3 id="一、创建一个简单的goWeb服务器"><a href="#一、创建一个简单的goWeb服务器" class="headerlink" title="一、创建一个简单的goWeb服务器"></a>一、创建一个简单的goWeb服务器</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Hello</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>RemoteAddr<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Method<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Host<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">)</span>
    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"这是测试页面"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> Hello<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span>err<span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">&#123;</span>
        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上例代码，main()函数通过代码<code>http.ListenAndServe(&quot;:8080&quot;,nil)</code> 启动一个8080 端口的服务器。如果这个函数传入第一个参数(网络地址)为空，则服务器在启动后默认使用 <a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a> 地址进行访问；如果这个函数传入的第二个参数为nil，则服务器在启动后将使用<strong>默认的多路复用器(DefaultServeMux)</strong></p>
<p>运行上例代码，在浏览器中访问<a href="http://127.0.0.1:8080%EF%BC%8C%E9%BB%98%E8%AE%A4%E4%BC%9A%E6%98%BE%E7%A4%BA/">http://127.0.0.1:8080，默认会显示</a> “这是测试页面”字符串</p>
<p><img src="/images/hIeiHevWkLJZiTON48hDf12pL6vr4fRGnCp20P0Utls.png" alt="image"></p>
<p>用户可以通过Server结构体对服务器进行更加详细的配置，包括为请求读取操作设置超时时间等。GoWeb服务器的请求和响应流程如下：</p>
<p><img src="/images/12cHr9ikXtyQXMGMLAsneQmfz5lpgER4HJ8TZ6WRzfk.png" alt="image"></p>
<ol>
<li>客户端发送请求；</li>
<li>服务器端的多路复用器收到请求；</li>
<li>多路复用器请求的URL找到注册的处理器，将请求交由处理器处理</li>
<li>处理器执行程序逻辑，如果必要，则与数据库进行交互，得到处理结果</li>
<li>处理器调用模板引擎将指定的模板和上一步得到的结果渲染成客户端可识别的数据格式（通常是HTML）</li>
<li>服务器端将数据通过HTTP相应返回给客户端。</li>
<li>客户端拿到数据，执行对应的操作（例如渲染出来呈现给用户）</li>
</ol>
<h3 id="二、接受请求"><a href="#二、接受请求" class="headerlink" title="二、接受请求"></a><strong>二、接受请求</strong></h3><h5 id="2-1、ServeMux和DefaultServeMux"><a href="#2-1、ServeMux和DefaultServeMux" class="headerlink" title="2.1、ServeMux和DefaultServeMux"></a><strong>2.1、ServeMux和DefaultServeMux</strong></h5><p>####### <strong>1、ServeMux和DefaultServeMux简介</strong><br><img src="/images/c0wZVZywXOppPf_EakxP_EqF14PsEzNpA9kXDIHvnXU.png" alt="image"></p>
<p>ServeMux 是一个结构体，其中包括一个映射，这个映射将会URL映射至相应的处理器。它会在映射中找出与被请求URL最为匹配的URL，然后调用与之相对应的处理器<code>ServeHTTP()</code>方法来处理请求</p>
<p>DefaultServeMux 是 net&#x2F;http 包中默认提供的一个多路复用器，其本质是ServeMux的一个实例。多路服务器的任务是——根据请求的URL将请求重定向到不同的处理器。如果用户没有为Serve对象指定处理器，则服务器默认使用DefaultServeMux作为ServeMux结构体的实例。</p>
<p><code>HandleFunc()</code> 函数用于为指定的URL注册一个处理器。<code>HandleFunc()</code> 处理器函数会在内部调用DefaultServeMux对象的对应方法，其内部实现如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">HandleFunc</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler <span class="token keyword">func</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	DefaultServeMux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>上面的方法可以看出，<code>http.HandleFunc()</code> 函数将处理器注册到多路复用器中。用默认多路复用器还可以指定多个处理器，其使用方法如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// The HandlerFunc type is an adapter to allow the use of</span>
<span class="token comment">// ordinary functions as HTTP handlers. If f is a function</span>
<span class="token comment">// with the appropriate signature, HandlerFunc(f) is a</span>
<span class="token comment">// Handler that calls f.</span>
<span class="token keyword">type</span> HandlerFunc <span class="token keyword">func</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span>

<span class="token comment">// ServeHTTP calls f(w, r).</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>f HandlerFunc<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">f</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面的代码中，自定义了两个Handle，都实现了http.Handler接口，因为他们都实现了ServeHTTP方法</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"net/http"</span>
<span class="token punctuation">)</span>

<span class="token comment">// 定义Handle1结构体，</span>
<span class="token keyword">type</span> Handle1 <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token comment">// Handle1 实现了http.Handler接口</span>
<span class="token comment">/*
源码：
type Handler interface &#123;
	ServeHTTP(ResponseWriter, *Request)
&#125;
*/</span>
<span class="token comment">// 实现了Handle1 的ServerHTTP方法，用于处理HTTP请求</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>h1 <span class="token operator">*</span>Handle1<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"这是handle1"</span><span class="token punctuation">)</span> <span class="token comment">// 向相应写入内容</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 定义类型 Handle2，同样实现了 http.Handler 接口</span>
<span class="token keyword">type</span> Handle2 <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token comment">// 实现 Handle2 的 ServeHTTP 方法，用于处理 HTTP 请求</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>h2 <span class="token operator">*</span>Handle2<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"这是handle2"</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">// 定义一个函数 Hello，用于处理根路径的 HTTP 请求</span>
<span class="token keyword">func</span> <span class="token function">Hello</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>RemoteAddr<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Method<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Host<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">)</span>
    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"这是测试页面"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 定义一个函数 Test，用于处理 "/test" 路径的 HTTP 请求</span>
<span class="token keyword">func</span> <span class="token function">Test</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"testtesttest"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 创建Handle1和Handle2的实例</span>
    handle1 <span class="token operator">:=</span> Handle1<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    handle2 <span class="token operator">:=</span> Handle2<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token comment">// 创建一个HTTP服务器配置</span>
    server <span class="token operator">:=</span> http<span class="token punctuation">.</span>Server<span class="token punctuation">&#123;</span>
        Addr<span class="token punctuation">:</span>    <span class="token string">"0.0.0.0:8085"</span><span class="token punctuation">,</span>
        Handler<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 注册Handle1和Handle2 为不同路径的处理器</span>
    http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/handle1"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>handle1<span class="token punctuation">)</span>
    http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/handle2"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>handle2<span class="token punctuation">)</span>
    <span class="token comment">// 注册函数 Hello为根路径的处理器</span>
    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> Hello<span class="token punctuation">)</span>
    <span class="token comment">// 启动HTTP服务器监听</span>
    server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的代码中，直接用<code>http.Handle()</code> 函数来指定多个处理器。Handle()函数的代码如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Handle</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler Handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> DefaultServeMux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以看到在<code>http.Handle()</code> 函数中调用了<code>DefaultServeMux.Handle()</code> 方法来处理请求。服务器收到的每个请求都会调用对应多路复用器的<code>ServeHTTP()</code> 方法。该方法的代码如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>sh serverHandler<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>rw ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	handler <span class="token operator">:=</span> sh<span class="token punctuation">.</span>srv<span class="token punctuation">.</span>Handler
	<span class="token keyword">if</span> handler <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		handler <span class="token operator">=</span> DefaultServeMux
	<span class="token punctuation">&#125;</span>
	handler<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> req<span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在ServeMux对象的ServeHTTP()方法中，会根据URL查找我们注册的处理器，然后将请求交由它处理。</p>
<p>虽然默认的多路复用器用起来很方便，但是生产环境不建议使用。因为DefaultServeMux是一个全局变量，所有代码（包括第三方代码）都可以修改它。有些第三方代码会在DefaultServeMux中注册一些处理器，可能会与自己注册的处理器冲突。比较推荐的做法是自定义多路复用器。</p>
<p>自定义多路复用器直接调用<code>http.NewServeMux()</code> 函数即可。然后再新创建的多路复用器上注册处理器。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">mux <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span>hi<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 定义一个函数 Hello，用于处理根路径的 HTTP 请求</span>
<span class="token keyword">func</span> <span class="token function">Hello</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>RemoteAddr<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Method<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Host<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">)</span>
    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"这是测试页面"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 定义一个函数 Test，用于处理 "/test" 路径的 HTTP 请求</span>
<span class="token keyword">func</span> <span class="token function">Test</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"testtesttest"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 创建新的ServeMux（路由器）</span>
    mux <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> Hello<span class="token punctuation">)</span>
    mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">,</span> Test<span class="token punctuation">)</span>
    <span class="token comment">// 创建一个HTTP服务器配置</span>
    server <span class="token operator">:=</span> http<span class="token punctuation">.</span>Server<span class="token punctuation">&#123;</span>
        Addr<span class="token punctuation">:</span>    <span class="token string">"0.0.0.0:8085"</span><span class="token punctuation">,</span> <span class="token comment">// 监听的地址和端口</span>
        Handler<span class="token punctuation">:</span> mux<span class="token punctuation">,</span>  <span class="token comment">// 使用自定义的ServeMux</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 启动HTTP服务器监听</span>
    <span class="token keyword">if</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> 上面例子中与默认多路复用器的功能相同，都是启动一个HTTP服务器端。<strong>这里还创建了服务器对象Server。通过指定服务器的参数</strong>，可以创建定制化的服务器，如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 创建一个HTTP服务器配置</span>
server <span class="token operator">:=</span> http<span class="token punctuation">.</span>Server<span class="token punctuation">&#123;</span>
    Addr<span class="token punctuation">:</span>    <span class="token string">"0.0.0.0:8085"</span><span class="token punctuation">,</span>
    Handler<span class="token punctuation">:</span> mux<span class="token punctuation">,</span>
    ReadTimeout<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
    WriteTimeout<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面代码，创建了一个读超时和写超时都为10s的服务器，下面是源码中定义的一些相关服务器配置的参数：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Server <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Addr optionally specifies the TCP address for the server to listen on,</span>
	<span class="token comment">// in the form "host:port". If empty, ":http" (port 80) is used.</span>
	<span class="token comment">// The service names are defined in RFC 6335 and assigned by IANA.</span>
	<span class="token comment">// See net.Dial for details of the address format.</span>
	Addr <span class="token builtin">string</span>

	Handler Handler <span class="token comment">// handler to invoke, http.DefaultServeMux if nil</span>

	<span class="token comment">// TLSConfig optionally provides a TLS configuration for use</span>
	<span class="token comment">// by ServeTLS and ListenAndServeTLS. Note that this value is</span>
	<span class="token comment">// cloned by ServeTLS and ListenAndServeTLS, so it's not</span>
	<span class="token comment">// possible to modify the configuration with methods like</span>
	<span class="token comment">// tls.Config.SetSessionTicketKeys. To use</span>
	<span class="token comment">// SetSessionTicketKeys, use Server.Serve with a TLS Listener</span>
	<span class="token comment">// instead.</span>
	TLSConfig <span class="token operator">*</span>tls<span class="token punctuation">.</span>Config

	<span class="token comment">// ReadTimeout is the maximum duration for reading the entire</span>
	<span class="token comment">// request, including the body. A zero or negative value means</span>
	<span class="token comment">// there will be no timeout.</span>
	<span class="token comment">//</span>
	<span class="token comment">// Because ReadTimeout does not let Handlers make per-request</span>
	<span class="token comment">// decisions on each request body's acceptable deadline or</span>
	<span class="token comment">// upload rate, most users will prefer to use</span>
	<span class="token comment">// ReadHeaderTimeout. It is valid to use them both.</span>
	ReadTimeout time<span class="token punctuation">.</span>Duration

	<span class="token comment">// ReadHeaderTimeout is the amount of time allowed to read</span>
	<span class="token comment">// request headers. The connection's read deadline is reset</span>
	<span class="token comment">// after reading the headers and the Handler can decide what</span>
	<span class="token comment">// is considered too slow for the body. If ReadHeaderTimeout</span>
	<span class="token comment">// is zero, the value of ReadTimeout is used. If both are</span>
	<span class="token comment">// zero, there is no timeout.</span>
	ReadHeaderTimeout time<span class="token punctuation">.</span>Duration

	<span class="token comment">// WriteTimeout is the maximum duration before timing out</span>
	<span class="token comment">// writes of the response. It is reset whenever a new</span>
	<span class="token comment">// request's header is read. Like ReadTimeout, it does not</span>
	<span class="token comment">// let Handlers make decisions on a per-request basis.</span>
	<span class="token comment">// A zero or negative value means there will be no timeout.</span>
	WriteTimeout time<span class="token punctuation">.</span>Duration

	<span class="token comment">// IdleTimeout is the maximum amount of time to wait for the</span>
	<span class="token comment">// next request when keep-alives are enabled. If IdleTimeout</span>
	<span class="token comment">// is zero, the value of ReadTimeout is used. If both are</span>
	<span class="token comment">// zero, there is no timeout.</span>
	IdleTimeout time<span class="token punctuation">.</span>Duration

	<span class="token comment">// MaxHeaderBytes controls the maximum number of bytes the</span>
	<span class="token comment">// server will read parsing the request header's keys and</span>
	<span class="token comment">// values, including the request line. It does not limit the</span>
	<span class="token comment">// size of the request body.</span>
	<span class="token comment">// If zero, DefaultMaxHeaderBytes is used.</span>
	MaxHeaderBytes <span class="token builtin">int</span>

	<span class="token comment">// TLSNextProto optionally specifies a function to take over</span>
	<span class="token comment">// ownership of the provided TLS connection when an ALPN</span>
	<span class="token comment">// protocol upgrade has occurred. The map key is the protocol</span>
	<span class="token comment">// name negotiated. The Handler argument should be used to</span>
	<span class="token comment">// handle HTTP requests and will initialize the Request's TLS</span>
	<span class="token comment">// and RemoteAddr if not already set. The connection is</span>
	<span class="token comment">// automatically closed when the function returns.</span>
	<span class="token comment">// If TLSNextProto is not nil, HTTP/2 support is not enabled</span>
	<span class="token comment">// automatically.</span>
	TLSNextProto <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Server<span class="token punctuation">,</span> <span class="token operator">*</span>tls<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> Handler<span class="token punctuation">)</span>

	<span class="token comment">// ConnState specifies an optional callback function that is</span>
	<span class="token comment">// called when a client connection changes state. See the</span>
	<span class="token comment">// ConnState type and associated constants for details.</span>
	ConnState <span class="token keyword">func</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> ConnState<span class="token punctuation">)</span>

	<span class="token comment">// ErrorLog specifies an optional logger for errors accepting</span>
	<span class="token comment">// connections, unexpected behavior from handlers, and</span>
	<span class="token comment">// underlying FileSystem errors.</span>
	<span class="token comment">// If nil, logging is done via the log package's standard logger.</span>
	ErrorLog <span class="token operator">*</span>log<span class="token punctuation">.</span>Logger

	<span class="token comment">// BaseContext optionally specifies a function that returns</span>
	<span class="token comment">// the base context for incoming requests on this server.</span>
	<span class="token comment">// The provided Listener is the specific Listener that's</span>
	<span class="token comment">// about to start accepting requests.</span>
	<span class="token comment">// If BaseContext is nil, the default is context.Background().</span>
	<span class="token comment">// If non-nil, it must return a non-nil context.</span>
	BaseContext <span class="token keyword">func</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span>Listener<span class="token punctuation">)</span> context<span class="token punctuation">.</span>Context

	<span class="token comment">// ConnContext optionally specifies a function that modifies</span>
	<span class="token comment">// the context used for a new connection c. The provided ctx</span>
	<span class="token comment">// is derived from the base context and has a ServerContextKey</span>
	<span class="token comment">// value.</span>
	ConnContext <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> c net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> context<span class="token punctuation">.</span>Context

	inShutdown atomicBool <span class="token comment">// true when server is in shutdown</span>

	disableKeepAlives <span class="token builtin">int32</span>     <span class="token comment">// accessed atomically.</span>
	nextProtoOnce     sync<span class="token punctuation">.</span>Once <span class="token comment">// guards setupHTTP2_* init</span>
	nextProtoErr      <span class="token builtin">error</span>     <span class="token comment">// result of http2.ConfigureServer if used</span>

	mu         sync<span class="token punctuation">.</span>Mutex
	listeners  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token operator">*</span>net<span class="token punctuation">.</span>Listener<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	activeConn <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token operator">*</span>conn<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	doneChan   <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	onShutdown <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	listenerGroup sync<span class="token punctuation">.</span>WaitGroup
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li><code>Addr</code>: 指定服务器监听的 TCP 地址和端口。如果留空，则默认使用 <code>&quot;:http&quot;</code>（端口 80）。</li>
<li><code>Handler</code>: 指定用于处理 HTTP 请求的处理器。如果为 <code>nil</code>，则使用 <code>http.DefaultServeMux</code>。</li>
<li><code>TLSConfig</code>: 提供 TLS 配置，用于在使用 <code>ServeTLS</code> 和 <code>ListenAndServeTLS</code> 时使用。注意，该值会被 <code>ServeTLS</code> 和 <code>ListenAndServeTLS</code> 克隆，因此无法通过诸如 <code>tls.Config.SetSessionTicketKeys</code> 之类的方法修改配置。</li>
<li><code>ReadTimeout</code>: 读取整个请求（包括请求体）的最大持续时间。零或负值表示没有超时。</li>
<li><code>ReadHeaderTimeout</code>: 读取请求头的最大持续时间。在读取完请求头后，连接的读取截止时间会重置，处理程序可以决定请求体的速度。如果为零，则使用 <code>ReadTimeout</code> 的值。如果两者都为零，则没有超时。</li>
<li><code>WriteTimeout</code>: 写入响应的最大持续时间。在读取新请求的头部时，会重置这个时间。与 <code>ReadTimeout</code> 类似，它不允许处理程序对每个请求进行超时设置。零或负值表示没有超时。</li>
<li><code>IdleTimeout</code>: 在启用了 Keep-Alive 时等待下一个请求的最大持续时间。如果 <code>IdleTimeout</code> 为零，则使用 <code>ReadTimeout</code> 的值。如果两者都为零，则没有超时。</li>
<li><code>MaxHeaderBytes</code>: 控制服务器解析请求头键和值的最大字节数，包括请求行。不限制请求体的大小。如果为零，则使用 <code>DefaultMaxHeaderBytes</code>。</li>
<li><code>TLSNextProto</code>: 可选地指定一个函数，用于在 ALPN 协议升级发生时接管提供的 TLS 连接。映射键是协议名称。处理程序参数用于处理 HTTP 请求，并将初始化请求的 TLS 和 RemoteAddr（如果尚未设置）。函数返回时，连接会自动关闭。如果 <code>TLSNextProto</code> 不为 <code>nil</code>，则不会自动启用 HTTP&#x2F;2 支持。</li>
<li><code>ConnState</code>: 指定一个可选的回调函数，在客户端连接状态发生变化时调用。</li>
<li><code>ErrorLog</code>: 指定一个可选的错误记录器，用于记录连接接受错误、处理程序的意外行为以及底层文件系统错误。如果为 <code>nil</code>，则使用 <code>log</code> 包的标准记录器。</li>
<li><code>BaseContext</code>: 可选地指定一个函数，用于为该服务器上的传入请求返回基本上下文。</li>
<li><code>ConnContext</code>: 可选地指定一个函数，用于修改新连接的上下文。提供的 <code>ctx</code> 是从基本上下文派生的，具有 <code>ServerContextKey</code> 值。</li>
<li><code>inShutdown</code>: 标志，当服务器正在关闭时为 <code>true</code>。</li>
<li><code>disableKeepAlives</code>: 禁用 Keep-Alive 的标志，通过原子方式访问。</li>
<li><code>nextProtoOnce</code>: 用于保护 <code>setupHTTP2_*</code> 初始化的 <code>sync.Once</code> 互斥锁。</li>
<li><code>nextProtoErr</code>: 如果使用了 <code>http2.ConfigureServer</code>，则为该函数的结果，表示 HTTP&#x2F;2 的初始化结果。</li>
<li><code>mu</code>: 用于保护以下字段的 <code>sync.Mutex</code> 互斥锁。</li>
<li><code>listeners</code>: 跟踪服务器正在监听的网络连接。</li>
<li><code>activeConn</code>: 跟踪服务器中当前活动的连接。</li>
<li><code>doneChan</code>: 在服务器关闭时发送信号的通道。</li>
<li><code>onShutdown</code>: 在服务器关闭时执行的回调函数列表。</li>
<li><code>listenerGroup</code>: 等待活动监听器完成的 <code>sync.WaitGroup</code>。</li>
</ol>
<p>*<em>简单总结：ServeMux 实现了</em><em><strong>http.Handler</strong></em><em>接口的</em><em>*<em>ServeHTTP(ResponseWriter,*Request)<strong><strong>方法。在创建Server时，如果设置Handler为空，则使用默认的</strong></strong>DefaultServeMux</em>*</em><em>作为默认的处理器，而</em><em><strong>DefaultServeMux</strong></em><em>是</em><em><strong>ServeMux</strong></em><em>的一个全局变量。</em>*</p>
<p>####### <strong>2、ServeMux的URL路由匹配</strong><br>实际应用中，一个web服务器会有很多的URL绑定，不同的URL对应不同的处理器。</p>
<p>如果现在绑定了3个URL，分别是&#x2F;、&#x2F;user、&#x2F;role</p>
<ul>
<li>如果请求的URL为&#x2F;，则调用&#x2F;对应的处理器。</li>
<li>如果请求的URL为&#x2F;user，则调用&#x2F;user对应的处理器。</li>
<li>如果请求的URL为&#x2F;role，则调用&#x2F;role对应的处理器。</li>
</ul>
<blockquote>
<p>如果注册的URL不是以／结尾的,则它只能精确匹配请求的URL。反之,即使请求的URL只有前缀与被绑定的URL相同,则ServeMux也认为它们是匹配的。例如′如果请求的URL为&#x2F;user&#x2F; 则不能匹配到&#x2F;user因为&#x2F;user不以&#x2F;结尾，必须精确匹配。如果我们绑定的URL为&#x2F;user&#x2F;，则当服务器找不到与&#x2F;user&#x2F;others完全匹配的处理器时，就会退而求其次，开始寻找能够与&#x2F;user&#x2F;匹配的处理器。</p>
</blockquote>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">indexHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"欢迎来到Go Web首页！处理器为：indexHandler"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">userHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"欢迎来到Go Web用户页！处理器为：userHandler"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">roleHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"欢迎来到Go Web权限页！处理器为：roleHandler"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    mux <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> indexHandler<span class="token punctuation">)</span>
    mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span> userHandler<span class="token punctuation">)</span>
    mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/role/web"</span><span class="token punctuation">,</span> roleHandler<span class="token punctuation">)</span>
    <span class="token comment">// 创建一个HTTP服务器配置</span>
    server <span class="token operator">:=</span> http<span class="token punctuation">.</span>Server<span class="token punctuation">&#123;</span>
        Addr<span class="token punctuation">:</span>         <span class="token string">"0.0.0.0:8085"</span><span class="token punctuation">,</span>
        Handler<span class="token punctuation">:</span>      mux<span class="token punctuation">,</span>
        ReadTimeout<span class="token punctuation">:</span>  <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
        WriteTimeout<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 启动HTTP服务器监听</span>
    <span class="token keyword">if</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/images/7S0BLT5M_pHphocDPiOZMGnDg2nKU8_qoATFiQZg66E.png" alt="image"></p>
<p><img src="/images/xLBNIVYLG-AcXxWFv1hmKTRmdzwGiXmMTF_dRmoz-NQ.png" alt="image"></p>
<p>输入<a href="http://127.0.0.1:8085/role/%EF%BC%8C%E5%B0%86%E8%BF%94%E5%9B%9E%E9%A6%96%E9%A1%B5%E7%9A%84%E5%A4%84%E7%90%86%E5%99%A8">http://127.0.0.1:8085/role/，将返回首页的处理器</a>:indexHandler，因为绑定的&#x2F;role需要精确匹配，而请求的&#x2F;role&#x2F;不能与之精确匹配所以向上查找到&#x2F;</p>
<p>处理器和处理器函数都可以进行URL路由匹配。通常情况下，可以使用处理器和处理器函数中的一种或同时使用两者，</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 定义类型 Handle2，同样实现了 http.Handler 接口</span>
<span class="token keyword">type</span> Handle2 <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token comment">// 实现 Handle2 的 ServeHTTP 方法，用于处理 HTTP 请求</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>h2 <span class="token operator">*</span>Handle2<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"这是handle2"</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">// 定义一个函数 Hello，用于处理根路径的 HTTP 请求</span>
<span class="token keyword">func</span> <span class="token function">Hello</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>RemoteAddr<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Method<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Host<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">)</span>
    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"这是测试页面"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">indexHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"欢迎来到Go Web首页！处理器为：indexHandler"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">userHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"欢迎来到Go Web用户页！处理器为：userHandler"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">roleHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"欢迎来到Go Web权限页！处理器为：roleHandler"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    handler2 <span class="token operator">:=</span> Handle2<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    mux <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> indexHandler<span class="token punctuation">)</span>
    mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span> userHandler<span class="token punctuation">)</span>
    mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/role/web"</span><span class="token punctuation">,</span> roleHandler<span class="token punctuation">)</span>
    <span class="token comment">// 注册处理器</span>
    mux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/test/"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>handler2<span class="token punctuation">)</span>
    <span class="token comment">// 创建一个HTTP服务器配置</span>
    server <span class="token operator">:=</span> http<span class="token punctuation">.</span>Server<span class="token punctuation">&#123;</span>
        Addr<span class="token punctuation">:</span>         <span class="token string">"0.0.0.0:8085"</span><span class="token punctuation">,</span>
        Handler<span class="token punctuation">:</span>      mux<span class="token punctuation">,</span>
        ReadTimeout<span class="token punctuation">:</span>  <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
        WriteTimeout<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 启动HTTP服务器监听</span>
    <span class="token keyword">if</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>####### <strong>3、HttpRouter简介</strong><br>ServeMux一个缺陷是：无法使用变量实现URL模式匹配。而HttpRouter则可以。HttpRouter是一个高性能、可扩展的第三方HTTP路由包。HttpRouter包弥补了net&#x2F;http 包中默认路由不足的问题</p>
<p>（1）、安装HttpRouter</p>
<p><a href="https://github.com/julienschmidt/httprouter">https://github.com/julienschmidt/httprouter</a></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>julienschmidt<span class="token operator">/</span>httprouter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>(2)、HttpRouter使用方法如下：首先使用<code>httprouter.New()</code>函数生成了一个*Router 路由对象，然后使用**GET()*<em>方法注册一个适配&#x2F;路径的index函数，最后将</em>Router对象作为参数传给<code>ListenAndServe()</code>函数即可启动HTTP服务</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Index</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> <span class="token boolean">_</span> httprouter<span class="token punctuation">.</span>Params<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"首页Index"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    router <span class="token operator">:=</span> httprouter<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> Index<span class="token punctuation">)</span>
    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>HttpRouter包为常用的HTTP方法提供了快捷的使用方式。常用请求方法定义如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// GET is a shortcut for router.Handle(http.MethodGet, path, handle)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Router<span class="token punctuation">)</span> <span class="token function">GET</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> handle Handle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	r<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>MethodGet<span class="token punctuation">,</span> path<span class="token punctuation">,</span> handle<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// HEAD is a shortcut for router.Handle(http.MethodHead, path, handle)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Router<span class="token punctuation">)</span> <span class="token function">HEAD</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> handle Handle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	r<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>MethodHead<span class="token punctuation">,</span> path<span class="token punctuation">,</span> handle<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// OPTIONS is a shortcut for router.Handle(http.MethodOptions, path, handle)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Router<span class="token punctuation">)</span> <span class="token function">OPTIONS</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> handle Handle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	r<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>MethodOptions<span class="token punctuation">,</span> path<span class="token punctuation">,</span> handle<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// POST is a shortcut for router.Handle(http.MethodPost, path, handle)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Router<span class="token punctuation">)</span> <span class="token function">POST</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> handle Handle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	r<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>MethodPost<span class="token punctuation">,</span> path<span class="token punctuation">,</span> handle<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// PUT is a shortcut for router.Handle(http.MethodPut, path, handle)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Router<span class="token punctuation">)</span> <span class="token function">PUT</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> handle Handle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	r<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>MethodPut<span class="token punctuation">,</span> path<span class="token punctuation">,</span> handle<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// PATCH is a shortcut for router.Handle(http.MethodPatch, path, handle)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Router<span class="token punctuation">)</span> <span class="token function">PATCH</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> handle Handle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	r<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>MethodPatch<span class="token punctuation">,</span> path<span class="token punctuation">,</span> handle<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// DELETE is a shortcut for router.Handle(http.MethodDelete, path, handle)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Router<span class="token punctuation">)</span> <span class="token function">DELETE</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> handle Handle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	r<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>MethodDelete<span class="token punctuation">,</span> path<span class="token punctuation">,</span> handle<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>HttpRouter包提供了对命名参数的支持，可以很方便的开发RestfulAPI。比如，设计example&#x2F;user&#x2F;dujie这样一个URL，可以查看dujie这个用户的信息。如果要查看其他用户（比如zhangsan）的信息，则只需要访问example&#x2F;user&#x2F;zhangsan</p>
<p>在HttpRouter包中对URL使用两种匹配模式：</p>
<ol>
<li>形如&#x2F;user&#x2F;:name 的精确匹配</li>
<li>形如&#x2F;user&#x2F;*name 的匹配所有的模式</li>
</ol>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    router <span class="token operator">:=</span> httprouter<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/default"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>writer http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> params httprouter<span class="token punctuation">.</span>Params<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"default get"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    router<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/default"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>writer http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> params httprouter<span class="token punctuation">.</span>Params<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"default post"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token comment">// 精确匹配</span>
    <span class="token comment">//router.GET("/user/zhangsan", func(writer http.ResponseWriter, request *http.Request, params httprouter.Params) &#123;</span>
    <span class="token comment">//    fmt.Println(params)</span>
    <span class="token comment">//    // fmt.Println(request.URL.Query().Get("name"))</span>
    <span class="token comment">//    writer.Write([]byte("user name:" + params.ByName("name")))</span>
    <span class="token comment">//&#125;)</span>
    router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/*name"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>writer http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> params httprouter<span class="token punctuation">.</span>Params<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>
        rawName <span class="token operator">:=</span> params<span class="token punctuation">.</span><span class="token function">ByName</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>
        <span class="token comment">// 去掉params对应name 前面的/</span>
        name <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">TrimLeft</span><span class="token punctuation">(</span>rawName<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
        writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"user name:"</span> <span class="token operator">+</span> params<span class="token punctuation">.</span><span class="token function">ByName</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span>
<span class="token comment">// params的值： "user/*names" * 后面的names对应 params中的names</span>
<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>names <span class="token operator">/</span>张三<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>






























































]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Sync包实现并发</title>
    <url>/2023/06/01/Sync%E5%8C%85%E5%AE%9E%E7%8E%B0%E5%B9%B6%E5%8F%91/</url>
    <content><![CDATA[<h1 id="Sync包实现并发"><a href="#Sync包实现并发" class="headerlink" title="Sync包实现并发"></a>Sync包实现并发</h1><h3 id="一、静态"><a href="#一、静态" class="headerlink" title="一、静态"></a>一、静态</h3><p>Go语言以构建高并发容易、性能优异而文明，但是随着并发的使用，可能发生数据争用的静态问题。由于不知道什么时候发生，所以讲产生难以发现和调试的错误。</p>
<p>例子：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> i <span class="token builtin">int</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        i <span class="token operator">=</span> <span class="token number">6</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> i
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上例，<code>getNumber()</code> 函数先声明一个变量i，之后在goroutine中单独对i进行设置。而这时程序也正在从函数中返回i，由于不知道goroutine是否已经完成对i值的修改，所以将有两种操作发生：</p>
<ol>
<li>如果goroutine已完成对i值的修改，则最后返回的i值为6；</li>
<li>如果goroutine未完成对i值的修改，则变量i的值从函数返回，为默认值0</li>
</ol>
<p>现在根据这两个操作中的哪一个先完成，输出的记过将是0（默认整数值）或6。这就是为什么将其称为数据竟态：从<code>getNumber()</code> 函数返回的值会根据1、或2哪个操作先完成而得名。</p>
<p>解决方法：通道阻塞、互斥锁等。</p>
<h3 id="二、互斥锁"><a href="#二、互斥锁" class="headerlink" title="二、互斥锁"></a>二、互斥锁</h3><h5 id="1、什么是互斥锁"><a href="#1、什么是互斥锁" class="headerlink" title="1、什么是互斥锁"></a>1、什么是互斥锁</h5><p><strong>（1）sync.Mutex的定义</strong></p>
<p><code>sync.Mutex</code> 是一个结构体对象，用于实现互斥锁，适用于读写不确定的场景（即读写次数没有明显区别，并且只允许有一个写或读的场景）。所以该锁也称为“全局锁”。</p>
<p><code>sync.Mutex</code> 结构体由两个字段state和sema组成，其中state表示当前互斥锁的状态，而sema用于控制锁状态的信号量。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Mutex <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	state <span class="token builtin">int32</span>
	sema  <span class="token builtin">uint32</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>（2）sync.Mutex的方法</strong></p>
<p><code>sync.Mutex</code> 结构体对象有<code>Lock()</code> 、<code>Unlock()</code> 两个方法。<code>Lock()</code> 方法用于加锁，<code>Unlock()</code> 方法用于解锁。</p>
<p>在使用<code>Lock()</code> 加锁后，就不能再次对其进行加速（如果再次加锁，会造成死锁）。直到利用<code>Unlock()</code> 对其解锁才能再次加锁。</p>
<p>在用<code>Unlock()</code> 解锁Mutex时，如果未加锁，会导致运行时错误</p>
<blockquote>
<p>Lock()和Unlock() 使用注意：</p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<ul>
<li>在一个goroutine获得Mutex后，其他goroutine只能等到这个goroutine释放该Mutex</li>
<li>在使用Lock()方法加锁后，不能再继续对其加锁，直到利用Unlock()解锁才能再次加锁</li>
<li>在Lock()方法之前使用Unlock() 会导致panic异常</li>
<li>已经锁定的Mutex并不与特定的goroutine关联，可以利用一个goroutine对其加锁，再利用其他goroutine对其解锁。</li>
<li>在同一个goroutine中的Mutex被解锁前再次进行加锁，会导致死锁。</li>
<li>该方法适用于读写不确定，并且只有一个读或写的场景。</li>
</ul>
</blockquote>
<blockquote>
</blockquote>
<h5 id="2、互斥锁的使用"><a href="#2、互斥锁的使用" class="headerlink" title="2、互斥锁的使用"></a>2、互斥锁的使用</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> mutex sync<span class="token punctuation">.</span>Mutex
    wait <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"锁定主协程"</span><span class="token punctuation">)</span>
    mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        wait<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d 协程还未锁定:\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
            mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d 协程已锁定\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d 协程已解锁:\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
            mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">defer</span> wait<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"解锁主协程"</span><span class="token punctuation">)</span>
    mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    wait<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出结果为：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">锁定主协程
<span class="token number">0</span> 协程还未锁定<span class="token punctuation">:</span>
<span class="token number">3</span> 协程还未锁定<span class="token punctuation">:</span>
<span class="token number">2</span> 协程还未锁定<span class="token punctuation">:</span>
<span class="token number">4</span> 协程还未锁定<span class="token punctuation">:</span>
<span class="token number">1</span> 协程还未锁定<span class="token punctuation">:</span>
解锁主协程
<span class="token number">0</span> 协程已锁定
<span class="token number">0</span> 协程已解锁<span class="token punctuation">:</span>
<span class="token number">3</span> 协程已锁定
<span class="token number">3</span> 协程已解锁<span class="token punctuation">:</span>
<span class="token number">2</span> 协程已锁定
<span class="token number">2</span> 协程已解锁<span class="token punctuation">:</span>
<span class="token number">4</span> 协程已锁定
<span class="token number">4</span> 协程已解锁<span class="token punctuation">:</span>
<span class="token number">1</span> 协程已锁定
<span class="token number">1</span> 协程已解锁<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="三、读写互斥锁"><a href="#三、读写互斥锁" class="headerlink" title="三、读写互斥锁"></a>三、读写互斥锁</h3><h5 id="1、什么是读写互斥锁"><a href="#1、什么是读写互斥锁" class="headerlink" title="1、什么是读写互斥锁"></a>1、什么是读写互斥锁</h5><p><strong>（1）读写互斥锁的定义</strong></p>
<p>读写互斥锁（sync.RWMutex）是一个控制goroutine访问的读写锁。该锁可以加多个读锁或写锁，<strong>其经常用于读次数远远多于写次数的场景。</strong></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> RWMutex <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	w           Mutex  <span class="token comment">// held if there are pending writers</span>
	writerSem   <span class="token builtin">uint32</span> <span class="token comment">// semaphore for writers to wait for completing readers</span>
	readerSem   <span class="token builtin">uint32</span> <span class="token comment">// semaphore for readers to wait for completing writers</span>
	readerCount <span class="token builtin">int32</span>  <span class="token comment">// number of pending readers</span>
	readerWait  <span class="token builtin">int32</span>  <span class="token comment">// number of departing readers</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>（2）读写互斥锁的方法</strong></p>
<p>有4个方法进行读写操作</p>
<ul>
<li>写操作的Lock()和Unlock()方法</li>
</ul>
<p><code>func (*RWMutex) Lock()</code> </p>
<p><code>func (*RWMutex) Unlock()</code></p>
<p>对于写锁，如果在添加写锁之前已经有其他的读锁和写锁，则Lock()方法会阻塞，直到该写锁可写。写锁权限高于读锁，有写锁时有限进行写锁定。</p>
<ul>
<li>读操作的RLock()和RUnlock()方法</li>
</ul>
<p><code>func (*RWMutex) RLock()</code> </p>
<p><code>func (*RWMutex) RUnlock()</code></p>
<p>如果已有写锁，则无法加载读锁。在只有读锁或者没有锁时，才可以加载读锁。读锁可以加载多个，所以适用于“读多写少”的场景。</p>
<p>读写互斥锁在读锁占用的情况下，会阻止写，但不阻止读。即多个goroutine可以同时获取读锁（读锁调用RLock()方法，而写锁调用Lock()方法），会阻止任何其他goroutine（无论读和写）进来，整个锁相当于该goroutine独占。</p>
<p><code>sync.RWMutex</code> 用于读锁和写锁分开的情况</p>
<h5 id="2、读写互斥锁使用"><a href="#2、读写互斥锁使用" class="headerlink" title="2、读写互斥锁使用"></a>2、读写互斥锁使用</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> count <span class="token builtin">int</span>
<span class="token keyword">var</span> rw sync<span class="token punctuation">.</span>RWMutex

<span class="token keyword">func</span> <span class="token function">ReadCount</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> ch <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    rw<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"goroutine %d 进入读操作...\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
    v <span class="token operator">:=</span> count
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"goroutine %d 读取结束，值为%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
    rw<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    ch <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">WriteCount</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> ch <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    rw<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"goroutine %d 进入写操作\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
    v <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    count <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"goroutine %d 写入结束，新值为%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> count<span class="token punctuation">)</span>
    rw<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    ch <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">go</span> <span class="token function">ReadCount</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> ch<span class="token punctuation">)</span>

    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">go</span> <span class="token function">WriteCount</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> ch<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">&lt;-</span>ch
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>多个读操作可以同时读一个数据，虽然加了锁，但读都是不受影响的，即“读和写都是互斥的，读和读不互斥”。多个读操作同时操作一个数据的实例如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> m sync<span class="token punctuation">.</span>RWMutex

<span class="token keyword">func</span> <span class="token function">Reading</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"reading start"</span><span class="token punctuation">)</span>
    m<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"reading"</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
    m<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"reading over"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//m = new(sync.RWMutex)</span>
    <span class="token keyword">go</span> <span class="token function">Reading</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token function">Reading</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到协程1和协程2 同时开始读，不互斥</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 下面4行同时输出</span>
<span class="token number">2</span> reading start
<span class="token number">1</span> reading start
<span class="token number">1</span> reading
<span class="token number">2</span> reading

<span class="token number">2</span> reading over
<span class="token number">1</span> reading over<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>由于读写互斥，所以在写开始后，读必须等写进行完才能继续。读写互斥锁示例如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> m sync<span class="token punctuation">.</span>RWMutex

<span class="token keyword">func</span> <span class="token function">Reading</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    m<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"reading start"</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"reading"</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"reading over"</span><span class="token punctuation">)</span>
    m<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">Writeing</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    m<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"writing start"</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"writing"</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"writing over"</span><span class="token punctuation">)</span>
    m<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//m = new(sync.RWMutex)</span>
    <span class="token keyword">go</span> <span class="token function">Writeing</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token function">Reading</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token function">Writeing</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出，可以看到在写完成后读才开始操作</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">0</span> writing start
<span class="token number">0</span> writing
<span class="token number">0</span> writing over
<span class="token number">1</span> reading start
<span class="token number">1</span> reading
<span class="token number">1</span> reading over
<span class="token number">2</span> writing start
<span class="token number">2</span> writing
<span class="token number">2</span> writing over<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="四、sync-Once结构体"><a href="#四、sync-Once结构体" class="headerlink" title="四、sync.Once结构体"></a>四、sync.Once结构体</h3><h5 id="1、sync-Once结构体定义"><a href="#1、sync-Once结构体定义" class="headerlink" title="1、sync.Once结构体定义"></a>1、sync.Once结构体定义</h5><p><code>sync.Once</code> 用于解决一次性初始化问题。它的作用与<code>init()</code>函数类似，使方法只执行一次</p>
<p><code>sync.Once</code> 和<code>init()</code> 也有所不同：<code>init()</code> 是在文件包首次被加载时才执行，且只执行一次；而<code>sync.Once</code> 结构体是在代码运行中有需要才执行，且只执行一次。</p>
<p>在很多高并发的场景中需要确保某些操作只执行一次’例如只加载一次配置文件、只关闭一次通道等。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Once <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// done indicates whether the action has been performed.</span>
	<span class="token comment">// It is first in the struct because it is used in the hot path.</span>
	<span class="token comment">// The hot path is inlined at every call site.</span>
	<span class="token comment">// Placing done first allows more compact instructions on some architectures (amd64/386),</span>
	<span class="token comment">// and fewer instructions (to calculate offset) on other architectures.</span>
	done <span class="token builtin">uint32</span>
	m    Mutex
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>sync.Once</code> 结构体包括一个互斥锁和一个布尔值。互斥锁保证布尔值和数据的安全，布尔值用来记录初始化是否完成。这样就能保证初始化操作时是并发安全的，并且初始化操作也不会被执行多次。</p>
<h5 id="2、sync-Once的使用"><a href="#2、sync-Once的使用" class="headerlink" title="2、sync.Once的使用"></a>2、sync.Once的使用</h5><p>sync.Once结构体只有一个<code>Do()</code>方法</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//m = new(sync.RWMutex)</span>
    <span class="token keyword">var</span> once sync<span class="token punctuation">.</span>Once
    <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    onceBody <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"这里只打印一次"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            once<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>onceBody<span class="token punctuation">)</span>
            flag <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面通过一个关闭通道例子可以看到。调用<code>close()</code>方法来关闭通道，但如果关闭一个已经关闭的通道，则会使程序宕掉，可以借助<code>sync.Once.Do()</code> 方法来保证通道在运行的过程中只被关闭一次。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
<span class="token keyword">var</span> once sync<span class="token punctuation">.</span>Once

<span class="token comment">// 只写通道</span>
<span class="token keyword">func</span> <span class="token function">func1</span><span class="token punctuation">(</span>ch1 <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        ch1 <span class="token operator">&lt;-</span> i
    <span class="token punctuation">&#125;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>ch1<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">func2</span><span class="token punctuation">(</span>ch1 <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> ch2 <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
        x<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch1
        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span>
        <span class="token punctuation">&#125;</span>
        ch2 <span class="token operator">&lt;-</span> <span class="token number">2</span> <span class="token operator">*</span> x
    <span class="token punctuation">&#125;</span>
    once<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">close</span><span class="token punctuation">(</span>ch2<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ch1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
    ch2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token function">func1</span><span class="token punctuation">(</span>ch1<span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token function">func2</span><span class="token punctuation">(</span>ch1<span class="token punctuation">,</span> ch2<span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token function">func2</span><span class="token punctuation">(</span>ch1<span class="token punctuation">,</span> ch2<span class="token punctuation">)</span>
    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> ret <span class="token operator">:=</span> <span class="token keyword">range</span> ch2 <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 输出结果</span>
<span class="token number">2</span>
<span class="token number">10</span>
<span class="token number">12</span>
<span class="token number">14</span>
<span class="token number">16</span>
<span class="token number">18</span>
<span class="token number">0</span>
<span class="token number">4</span>
<span class="token number">6</span>
<span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>代码解析：</p>
<ol>
<li>声明一个 <code>sync.WaitGroup</code> 变量 <code>wg</code>，用于等待所有协程完成。</li>
<li>声明一个 <code>sync.Once</code> 变量 <code>once</code>，用于确保在关闭 <code>ch2</code> 通道时只执行一次操作。</li>
<li>定义 <code>func1</code> 函数，该函数接受一个只写通道 <code>ch1</code>。在该函数内部，一个循环将整数从 0 到 9 写入通道 <code>ch1</code>，然后关闭 <code>ch1</code> 通道，表示写入操作已完成。<code>defer wg.Done()</code> 在函数结束时标记协程已完成。</li>
<li>定义 <code>func2</code> 函数，该函数接受一个只读通道 <code>ch1</code> 和一个只写通道 <code>ch2</code>。在该函数内部，一个无限循环从 <code>ch1</code> 读取数据并将其乘以 2 后写入 <code>ch2</code>。当 <code>ch1</code> 关闭后，循环会退出，然后 <code>once.Do</code> 保证关闭 <code>ch2</code> 通道只执行一次。<code>defer wg.Done()</code> 在函数结束时标记协程已完成。</li>
<li>在 <code>main</code> 函数中，创建两个通道 <code>ch1</code> 和 <code>ch2</code>，分别用于协程之间的通信。</li>
<li>通过 <code>wg.Add(3)</code> 增加等待组的计数器，因为后续会启动 3 个协程。</li>
<li>启动一个协程运行 <code>func1(ch1)</code>，这个协程会将 0 到 9 的整数写入 <code>ch1</code>，然后关闭通道。</li>
<li>启动两个协程运行 <code>func2(ch1, ch2)</code>，这两个协程会并发地从 <code>ch1</code> 中读取数据，将数据乘以 2 后写入 <code>ch2</code>。</li>
<li><code>wg.Wait()</code> 阻塞主协程，等待所有的协程（包括 <code>func1</code> 和两个 <code>func2</code>）都完成后继续执行。</li>
<li>在主协程中，使用 <code>range ch2</code> 循环从 <code>ch2</code> 通道中读取数据，直到 <code>ch2</code> 通道被关闭。这时，从 <code>ch2</code> 中读取的数据是 <code>func2</code> 处理后的结果，然后通过 <code>fmt.Println(ret)</code> 打印输出。</li>
</ol>
<p>总的来说，这段代码通过并发地使用多个协程，实现了将 0 到 9 的整数通过通道传递给 <code>func2</code> 处理，并将处理后的结果输出到控制台。两个 <code>func2</code> 协程可以并发地从 <code>ch1</code> 中读取数据，但由于通道的关闭，每个协程在读取完数据后会退出。主协程等待所有协程完成后，循环从 <code>ch2</code> 中读取并打印处理结果。同时，<code>once.Do</code> 确保通道 <code>ch2</code> 仅被关闭一次。</p>
<p>上面代码中，开启了两个goroutine 去执行func2 函数，当func2函数执行完后，会掉用close方法关闭参数所指的ch2通道。为了防止多个goroutine同时关闭同一个通道而产生错误，可以调用<code>sync.Once.Do()</code>方法来关闭通道，这样就不会产生多次关闭通道而使得程序崩溃的错误。</p>
<h3 id="五、同步等待组sync-WaitGroup"><a href="#五、同步等待组sync-WaitGroup" class="headerlink" title="五、同步等待组sync.WaitGroup"></a>五、同步等待组sync.WaitGroup</h3><h5 id="1、同步等待组sync-WaitGroup简介"><a href="#1、同步等待组sync-WaitGroup简介" class="headerlink" title="1、同步等待组sync.WaitGroup简介"></a>1、同步等待组sync.WaitGroup简介</h5><p><code>sync.WaitGroup</code> 是一个结构体对象，用于等待一组线程的结束</p>
<p><code>sync.WaitGroup</code> 结构体对象只有3个方法：<code>Add()</code> 、<code>Done()</code> 、<code>Wait()</code> </p>
<ul>
<li>Add()：向内部计数器加上delta，delta可以是负数。如果内部计数器为0，则Wait()方法会将处于阻塞等待的所有goroutine释放。如果计数器小于0，则调用panic函数。Add()方法加上正数的调用应在<code>Wait()</code>方法之前，否则<code>Wait()</code>方法可能只会等待很少的goroutine。</li>
<li>Done()方法：会减少WaitGroup计数器的值，一般在goroutine的最后执行。</li>
<li>Wait()方法：会阻塞，直到WaitGroup计数器减为0</li>
</ul>
<p>在以上3个方法中<code>Done()</code>是<code>Add(-1)</code>方法的别名。简单来说’使用<code>Add()</code>方法添加计数; 使用<code>Done()</code>方法减掉一个计数’如果计数不为0则会阻塞<code>Wait()</code>方法的运行。一个goroutine调用方法<code>Add()</code> 来设定应等待的goroutine的数量。每个被等待的goroutine在结束时应该调用<code>Done()</code>方法。同时，在主goroutine里可以调用<code>Wait()</code>方法阻塞至所有goroutine结束</p>
<h5 id="2、同步等待组sync-WaitGroup使用示例"><a href="#2、同步等待组sync-WaitGroup使用示例" class="headerlink" title="2、同步等待组sync.WaitGroup使用示例"></a>2、同步等待组sync.WaitGroup使用示例</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"1 goroutine sleep"</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"1 goroutine exit"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2 goroutine sleep"</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2 goroutine exit"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"waiting for all goroutine"</span><span class="token punctuation">)</span>
    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"All goroutine finished"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 输出</span>
waiting <span class="token keyword">for</span> all goroutine
<span class="token number">2</span> goroutine sleep
<span class="token number">1</span> goroutine sleep
<span class="token number">1</span> goroutine exit
<span class="token number">2</span> goroutine exit
All goroutine finished<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>Add()</code>和<code>Done()</code>方法的使用一定要配对，否则可能发生死锁。所报的错误信息如下</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">waiting <span class="token keyword">for</span> all goroutine
<span class="token number">2</span> goroutine sleep
<span class="token number">1</span> goroutine sleep
<span class="token number">1</span> goroutine exit
<span class="token number">2</span> goroutine exit
fatal <span class="token builtin">error</span><span class="token punctuation">:</span> all goroutines are asleep <span class="token operator">-</span> deadlock<span class="token operator">!</span>

goroutine <span class="token number">1</span> <span class="token punctuation">[</span>semacquire<span class="token punctuation">]</span><span class="token punctuation">:</span>
sync<span class="token punctuation">.</span><span class="token function">runtime_Semacquire</span><span class="token punctuation">(</span><span class="token number">0x0</span>?<span class="token punctuation">)</span>
	<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>runtime<span class="token operator">/</span>sema<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">62</span> <span class="token operator">+</span><span class="token number">0x28</span>
sync<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>WaitGroup<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token number">0x140000a4010</span><span class="token punctuation">)</span>
	<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>sync<span class="token operator">/</span>waitgroup<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">139</span> <span class="token operator">+</span><span class="token number">0x80</span>
main<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token operator">/</span>Users<span class="token operator">/</span>dujie<span class="token operator">/</span>GolangProjects<span class="token operator">/</span>mysql<span class="token operator">-</span>csv<span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">172</span> <span class="token operator">+</span><span class="token number">0x110</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>








































]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 数据库标准开发</title>
    <url>/2023/05/03/Golang%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A0%87%E5%87%86%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="数据库标准开发"><a href="#数据库标准开发" class="headerlink" title="数据库标准开发"></a>数据库标准开发</h1><h3 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a><strong>驱动</strong></h3><p>连接数据库是典型的CS变成，服务器端被动等待客户端建立TCP连接，并在此连接上进行特定的应用层协议。但是一般用户并不需要了解这些细节，这些都被打包到了驱动库中，只需要简单的调用打开就可以指定协议连接到指定的数据库中</p>
<p>数据库的种类和产品太多，协议太多，Go官方很难提供针对不同数据库的驱动程序，往往由各数据库官方或第三方给出不同开发语言的驱动库。但是，为了Go语言可以提前定义操作一个数据库的所有行为（接口）和数据（结构体）的规范，<strong>这些定义在databasq&#x2F;sql下。</strong></p>
<p>mysql驱动：</p>
<ul>
<li><a href="https://github.com/go-sql-driver/mysql">https://github.com/go-sql-driver/mysql</a> 支持database&#x2F;sql，<strong>推荐</strong></li>
<li><a href="https://github.com/ziutek/mymysql">https://github.com/ziutek/mymysql</a> 支持database&#x2F;sql，支持自定义接口</li>
<li><a href="https://github.com/Philio/GoMySQL">https://github.com/Philio/GoMySQL</a> 不支持database&#x2F;sql，支持自定义接口</li>
</ul>
<p>安装mysql的驱动</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">$ <span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>sql<span class="token operator">-</span>driver<span class="token operator">/</span>mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<p>导入</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"database/sql"</span>
	<span class="token string">"fmt"</span>
	<span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>注册驱动</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// github.com/go-sql-driver/mysql/mysql/driver.go 代码中有注册驱动</span>
<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 83 行</span>
	sql<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>MySQLDriver<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="连接"><a href="#连接" class="headerlink" title="连接"></a><strong>连接</strong></h5><p>DSN 例子 ：<a href="https://github.com/go-sql-driver/mysql#Examples">https://github.com/go-sql-driver/mysql#Examples</a></p>
<p><code>[username[:password]@][protocol[(address)]]/dbname[?param1=value1&amp;...&amp;paramN=valueN]</code></p>
<p><code>username:password@protocol(address)/dbname?param=value</code> </p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">connstr <span class="token operator">:=</span> <span class="token string">"root:123456@tcp(127.0.0.1:3306)/test"</span>
connstr <span class="token operator">:=</span> <span class="token string">"root:123456@tcp/test"</span>
connstr <span class="token operator">:=</span> <span class="token string">"root:123456@/test"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"database/sql"</span>
	<span class="token string">"fmt"</span>
	<span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span>
	<span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	connect <span class="token operator">:=</span> <span class="token string">"root:123456@tcp(127.0.0.1:3306)/test"</span>
	<span class="token keyword">var</span> err <span class="token builtin">error</span>
	db<span class="token punctuation">,</span> err <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> connect<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	db<span class="token punctuation">.</span><span class="token function">SetConnMaxLifetime</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">//最大连接存活时间</span>
	db<span class="token punctuation">.</span><span class="token function">SetMaxOpenConns</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                  <span class="token comment">// 最大连接数</span>
	db<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                  <span class="token comment">// 最大闲置连接</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>db类型是*sql.DB， 是一个操作数据库的句柄，底层是一个多协程安全的连接池。</p>
<h5 id="操作"><a href="#操作" class="headerlink" title="操作"></a><strong>操作</strong></h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"database/sql"</span>
	<span class="token string">"fmt"</span>
	<span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span>
	<span class="token string">"log"</span>
	<span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	connect <span class="token operator">:=</span> <span class="token string">"root:123456@tcp(127.0.0.1:3306)/test"</span>
	<span class="token keyword">var</span> err <span class="token builtin">error</span>
	db<span class="token punctuation">,</span> err <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> connect<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	db<span class="token punctuation">.</span><span class="token function">SetConnMaxLifetime</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">//最大连接存活时间</span>
	db<span class="token punctuation">.</span><span class="token function">SetMaxOpenConns</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                  <span class="token comment">// 最大连接数</span>
	db<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                  <span class="token comment">// 最大闲置连接</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Emp <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	emp_no     <span class="token builtin">int</span>
	birth_date <span class="token builtin">string</span>
	first_name <span class="token builtin">string</span>
	last_name  <span class="token builtin">string</span>
	gender     <span class="token builtin">int</span>
	hire_date  <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">//fmt.Println(db)</span>
	<span class="token keyword">var</span> e Emp
	row <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span><span class="token string">"select * from employees where emp_no = 10013"</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>
	err <span class="token operator">:=</span> row<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>birth_date<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>gender<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>hire_date<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>

	rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"select * from employees where emp_no > ?"</span><span class="token punctuation">,</span> <span class="token number">10017</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">var</span> e Emp
		err <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>birth_date<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>gender<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>hire_date<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			log<span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>驱动安装和导入，例如<code>import _ &quot;github.com/go-sql-driver/mysql&quot;</code></li>
<li>连接数据库并返回数据库操作句柄，例如 <code>sql.Open(&quot;mysql&quot;,&quot;dujie:123456@tcp(localhost:3306)/test&quot;)</code> </li>
<li>使用db提供的接口函数</li>
<li>使用db.Prepare预编译并使用参数化查询<ul>
<li>对预编译的SQL语句进行缓存，省去了每次解析优化该SQL语句的过程</li>
<li>防止注入攻击</li>
<li>使用返回的sql.Stmt操作数据库</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"database/sql"</span>
	<span class="token string">"fmt"</span>
	<span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span>
	<span class="token string">"log"</span>
	<span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	connect <span class="token operator">:=</span> <span class="token string">"root:123456@tcp(127.0.0.1:3306)/test"</span>
	<span class="token keyword">var</span> err <span class="token builtin">error</span>
	db<span class="token punctuation">,</span> err <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> connect<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	db<span class="token punctuation">.</span><span class="token function">SetConnMaxLifetime</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">//最大连接存活时间</span>
	db<span class="token punctuation">.</span><span class="token function">SetMaxOpenConns</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                  <span class="token comment">// 最大连接数</span>
	db<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                  <span class="token comment">// 最大闲置连接</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Emp <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	emp_no     <span class="token builtin">int</span>
	birth_date <span class="token builtin">string</span>
	first_name <span class="token builtin">string</span>
	last_name  <span class="token builtin">string</span>
	gender     <span class="token builtin">int</span>
	hire_date  <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">//fmt.Println(db)</span>
	<span class="token keyword">var</span> e Emp
	row <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span><span class="token string">"select * from employees where emp_no = 10013"</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>
	err <span class="token operator">:=</span> row<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>birth_date<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>gender<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>hire_date<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>

	stmt<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span><span class="token string">"select * from employees where emp_no > ?"</span><span class="token punctuation">)</span>
	rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> stmt<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token number">10017</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">var</span> e Emp
		rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>birth_date<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>gender<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">.</span>hire_date<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="插入、修改、删除"><a href="#插入、修改、删除" class="headerlink" title="插入、修改、删除"></a><strong>插入、修改、删除</strong></h5><p>增删改其实操作都一样，都是通过exec来控制</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"database/sql"</span>
	<span class="token string">"fmt"</span>
	<span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span>
	<span class="token string">"log"</span>
	<span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	connect <span class="token operator">:=</span> <span class="token string">"root:123456@tcp(127.0.0.1:3306)/test"</span>
	<span class="token keyword">var</span> err <span class="token builtin">error</span>
	db<span class="token punctuation">,</span> err <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> connect<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	db<span class="token punctuation">.</span><span class="token function">SetConnMaxLifetime</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">//最大连接存活时间</span>
	db<span class="token punctuation">.</span><span class="token function">SetMaxOpenConns</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                  <span class="token comment">// 最大连接数</span>
	db<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                  <span class="token comment">// 最大闲置连接</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Emp <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	emp_no     <span class="token builtin">int</span>
	birth_date <span class="token builtin">string</span>
	first_name <span class="token builtin">string</span>
	last_name  <span class="token builtin">string</span>
	gender     <span class="token builtin">int</span>
	hire_date  <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 增加</span>
	<span class="token comment">//var e Emp</span>
	result<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"insert into employees(emp_no,birth_date,first_name,last_name,gender,hire_date) values(10023,'1980-01-01','John','tom',1,'2006-01-02')"</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>

    <span class="token comment">// 删除</span>
    stmt<span class="token punctuation">,</span> errs <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span><span class="token string">"delete from titles where emp_no=?"</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>errs<span class="token punctuation">)</span>
    <span class="token keyword">if</span> errs <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>errs<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    result<span class="token punctuation">,</span> errd <span class="token operator">:=</span> stmt<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token number">10016</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> errd <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>errd<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>

    <span class="token comment">// 修改</span>
    result<span class="token punctuation">,</span> erra <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"update titles set title = ? where emp_no=?"</span><span class="token punctuation">,</span> <span class="token string">"dujie"</span><span class="token punctuation">,</span> <span class="token number">10014</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> erra <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>erra<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
























]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang时间操作</title>
    <url>/2023/04/22/Golang%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<h1 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h1><p>在Go语言中，时间定义为Time结构体。 </p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> t <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token comment">// time.Time</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v %+[1]v\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token comment">// 2022-10-06 19:35:00.1963422 +0800 CST m=+0.001534601</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token comment">// time.Date(2022, time.October, 6, 19, 35, 0, </span>
<span class="token number">196342200</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Local<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T, %[1]v\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">UTC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// UTC时间</span>
<span class="token comment">// time.Time, 2022-10-06 11:35:00.1963422 +0000 UTC</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>m&#x3D;+0.001530201为单调时间，利用的是晶体振荡器的间隔时间，很多时间函数计算都舍弃了它。如果不是非常精准的时间间隔计算，请忽略它。</p>
<h3 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> t <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T, %[1]v\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"0102 030405 06 pm -0700"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">UTC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"0102 030405 06 pm"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


<p>记住一个字符串”010203040506pm-0700”，即 1月2日下午3点4分5秒06年西7区 ，改成我们习惯的格式符 2006&#x2F;01&#x2F;02 15:04:05 -0700 ，也不是特别好记，那就背吧。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>pkg<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">.</span>dev<span class="token operator">/</span>time#pkg<span class="token operator">-</span>constants
Year<span class="token punctuation">:</span> <span class="token string">"2006"</span> <span class="token string">"06"</span>
Month<span class="token punctuation">:</span> <span class="token string">"Jan"</span> <span class="token string">"January"</span> <span class="token string">"01"</span> <span class="token string">"1"</span>
Day of the week<span class="token punctuation">:</span> <span class="token string">"Mon"</span> <span class="token string">"Monday"</span>
Day of the month<span class="token punctuation">:</span> <span class="token string">"2"</span> <span class="token string">"_2"</span> <span class="token string">"02"</span> <span class="token number">2</span>不补位；_2补空格；<span class="token number">02</span>不够补<span class="token number">0</span>
Day of the year<span class="token punctuation">:</span> <span class="token string">"__2"</span> <span class="token string">"002"</span>
Hour<span class="token punctuation">:</span> <span class="token string">"15"</span> <span class="token string">"3"</span> <span class="token string">"03"</span> <span class="token punctuation">(</span>PM or AM<span class="token punctuation">)</span> 如果写<span class="token number">3</span>或<span class="token number">03</span>显示为<span class="token number">12</span>小时制；<span class="token number">15</span>显示为<span class="token number">24</span>小时制
Minute<span class="token punctuation">:</span> <span class="token string">"4"</span> <span class="token string">"04"</span>
Second<span class="token punctuation">:</span> <span class="token string">"5"</span> <span class="token string">"05"</span>
AM<span class="token operator">/</span>PM mark<span class="token punctuation">:</span> <span class="token string">"PM"</span>
<span class="token string">"-0700"</span> ±hhmm 时区
<span class="token number">0</span>或<span class="token number">9</span>匹配小数部分
 格式化时，<span class="token number">0</span>或<span class="token number">9</span>表示小数部分位数，<span class="token number">0</span>超出部分补<span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span>超出部分不补<span class="token number">0</span>

<span class="token keyword">var</span> t <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T, %[1]v\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006/01/02 15:04:05 -0700"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 带时区</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">UTC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006/01/02 15:04:05.0000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 不带时区</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="时间解析"><a href="#时间解析" class="headerlink" title="时间解析"></a>时间解析</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> t<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>
 <span class="token string">"2006/01/02 15:04:05 -0700"</span><span class="token punctuation">,</span> <span class="token comment">// 格式字符串</span>
 <span class="token string">"2008/09/08 20:36:50 +0800"</span><span class="token punctuation">,</span> <span class="token comment">// 时间字符串</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token comment">// 2008-09-08 20:36:50 +0800 CST</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>带小数部分解析</p>
<ul>
<li><code>.0</code> 解析时，0的位数必须和字符串中的小数部分完全一致，否则失败</li>
<li><code>.9</code> 解析时，可以匹配任意位数小数部分，包括没有小数部分</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">time<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>
 <span class="token string">"2006/01/02 15:04:05.000000 -0700"</span><span class="token punctuation">,</span> <span class="token comment">// 格式字符串</span>
 <span class="token string">"2008/09/08 20:36:50.123456 +0800"</span><span class="token punctuation">,</span> <span class="token comment">// 时间字符串</span>
 <span class="token punctuation">)</span>
time<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>
 <span class="token string">"2006/01/02 15:04:05.9 -0700"</span><span class="token punctuation">,</span>      <span class="token comment">// 格式字符串</span>
 <span class="token string">"2008/09/08 20:36:50.123456 +0800"</span><span class="token punctuation">,</span> <span class="token comment">// 时间字符串</span>
 <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="时间属性"><a href="#时间属性" class="headerlink" title="时间属性"></a>时间属性</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 月份的定义</span>
<span class="token keyword">type</span> Month <span class="token builtin">int</span>
<span class="token keyword">const</span> <span class="token punctuation">(</span>
 January Month <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token boolean">iota</span>
 February
 March
 April
 May
 June
 July
 August
 September
 October
 November
 December
<span class="token punctuation">)</span>
<span class="token comment">// 可以看出月份是1到12的整数</span>
<span class="token keyword">type</span> Weekday <span class="token builtin">int</span>
<span class="token keyword">const</span> <span class="token punctuation">(</span>
 Sunday Weekday <span class="token operator">=</span> <span class="token boolean">iota</span>
 Monday
 Tuesday
 Wednesday
 Thursday
 Friday
 Saturday
<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> t<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>
 <span class="token string">"2006/01/02 15:04:05 -0700"</span><span class="token punctuation">,</span> <span class="token comment">// 格式字符串</span>
 <span class="token string">"2008/09/08 20:36:50 +0800"</span><span class="token punctuation">,</span> <span class="token comment">// 时间字符串</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 2008-09-08 20:36:50 +0800 CST</span>

 <span class="token comment">// 时间戳</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">UnixMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">UnixMicro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token comment">// 年月日</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span> t<span class="token punctuation">.</span><span class="token function">Year</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Month</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Month</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Day</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">YearDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// YearDay本年的第几天</span>
 <span class="token punctuation">)</span> <span class="token comment">// 英文月份，默认走String方法int(t.Month()),       // 数字月份</span>
 <span class="token comment">// 时分秒</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Hour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Minute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Second</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Nanosecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Nanosecond纳秒</span>
 <span class="token comment">// 星期</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Weekday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">int</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Weekday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Weekday</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">ISOWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token comment">// 年的第几周</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> t<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>
 <span class="token string">"2006/01/02 15:04:05"</span><span class="token punctuation">,</span> <span class="token comment">// 格式字符串</span>
 <span class="token string">"2008/09/08 20:36:50"</span><span class="token punctuation">,</span> <span class="token comment">// 时间字符串</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>         <span class="token comment">// 2008-09-08 20:36:50 +0000 UTC</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Local</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2008-09-09 04:36:50 +0800 CST</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>如果没有时区，表示UTC，可以简单认为是零时区时间。</p>
<p>注意，这里可能导致时间错误，给出的时间，心里想的是东八区的时间，但是Go语言却认为是零时区的，如果再转换到东八区，就差了8个小时了。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">tz<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">LoadLocation</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span> <span class="token comment">// 使用名字</span>
<span class="token keyword">if</span> t<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseInLocation</span><span class="token punctuation">(</span>
 <span class="token string">"2006/01/02 15:04:05"</span><span class="token punctuation">,</span> <span class="token comment">// 格式字符串</span>
 <span class="token string">"2008/09/08 20:36:50"</span><span class="token punctuation">,</span> <span class="token comment">// 时间字符串</span>
 tz<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>         <span class="token comment">// 2008-09-08 20:36:50 +0800 CST</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Local</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2008-09-08 20:36:50 +0800 CST</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="时间运算"><a href="#时间运算" class="headerlink" title="时间运算"></a>时间运算</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">时间 <span class="token operator">+</span> 时间 <span class="token operator">=</span> ？
时间 <span class="token operator">-</span> 时间 <span class="token operator">=</span> 时间差、时间增量
时间 ± 时间增量 <span class="token operator">=</span> 时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">tz<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">LoadLocation</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span> <span class="token comment">// 使用名字</span>
s1 <span class="token operator">:=</span> <span class="token string">"2022/09/08 20:36:50"</span>
s2 <span class="token operator">:=</span> <span class="token string">"2022/09/08 21:40:51"</span>
layout <span class="token operator">:=</span> <span class="token string">"2006/01/02 15:04:05"</span>
t1<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseInLocation</span><span class="token punctuation">(</span>layout<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> tz<span class="token punctuation">)</span>
t2<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseInLocation</span><span class="token punctuation">(</span>layout<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> tz<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 时间差</span>
delta <span class="token operator">:=</span> t2<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span> <span class="token comment">// t2 - t1</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"delta: %v, %[1]T\n"</span><span class="token punctuation">,</span> delta<span class="token punctuation">)</span> <span class="token comment">// Duration类型</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>delta<span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 共差多少秒</span>
<span class="token comment">// 构造Duration</span>
ns3 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>              <span class="token comment">// 3纳秒</span>
s3 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span> <span class="token comment">// 3秒</span>
h3 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Hour<span class="token punctuation">)</span>   <span class="token comment">// 3小时</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ns3<span class="token punctuation">,</span> s3<span class="token punctuation">,</span> h3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 时间偏移</span>
t3 <span class="token operator">:=</span> t2<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>h3<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span>
t4 <span class="token operator">:=</span> t2<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">-</span>h3<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t4<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t3<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>t4<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// t3是否在t4之后吗？true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang接口</title>
    <url>/2023/04/18/Golang%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口interface，和java类似，是一组行为规范的集合，就是定义一组未实现的函数声明。谁使用接口就是参照接口的方法定义实现他们。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> 接口名 <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
    方法<span class="token number">1</span> <span class="token punctuation">(</span>参数列表<span class="token number">1</span><span class="token punctuation">)</span> 返回值列表<span class="token number">1</span>
    方法<span class="token number">2</span> <span class="token punctuation">(</span>参数列表<span class="token number">2</span><span class="token punctuation">)</span> 返回值列表<span class="token number">2</span>
    <span class="token operator">...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>接口命名习惯在接口名后面加上er后缀</li>
<li>参数列表、返回值列表参数名可以不写</li>
<li>如果要在包外使用接口，接口名应该大写，方法要在包外使用，方法名首字母也要大写。</li>
<li>接口中的方法应该设计合理，不要太多</li>
</ul>
<p>Go语言中，使用组合实现对象特性的描述。对象内部使用结构体内嵌组合对象应该具有的特性，对外通过接口暴露能使用的特性。</p>
<p>Go语言的接口设计是非侵入式的，接口编写者无需知道接口被哪些类型实现。而接口实现者只需知道实现的是什么样子的接口，但无需指明实现哪一个接口。编译器知道最终编译时使用哪个类型实现哪个接口，或者接口应该由谁来实现。</p>
<p>接口是约束谁应该具有什么功能，实现某接口的方法，就具有该接口的功能，简而言之，缺什么补什么。</p>
<h3 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h3><p>如果一个结构体实现了一个接口声明的所有方法，就说结构体实现了该接口</p>
<p>一个结构体可以实现多个不同接口</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 name <span class="token builtin">string</span>
 age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> Sport <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
 <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>Person<span class="token punctuation">)</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Run~~~"</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>Person<span class="token punctuation">)</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Jump~~~"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 p <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span>
 p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 p<span class="token punctuation">.</span><span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在实现一个swim方法</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>Person<span class="token punctuation">)</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Swim~~~"</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 p <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span>
 p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 p<span class="token punctuation">.</span><span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 p<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token keyword">var</span> s Sport <span class="token operator">=</span> p <span class="token comment">// 不报错，Person实现了Sport接口</span>
 s<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 s<span class="token punctuation">.</span><span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 s<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 报错，接口没有该方法</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="接口嵌入"><a href="#接口嵌入" class="headerlink" title="接口嵌入"></a>接口嵌入</h5><p>除了结构体可以嵌套，接口也可以。接口嵌套组合成了新接口</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Reader <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
 <span class="token function">Read</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> Closer <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
 <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> ReadCloser <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
 Reader
 Closer
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>ReadCloser接口是Reader、Closer接口组合而成，也就是说它拥有Read、Close方法声明。</p>
<h5 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h5><p>空接口，实际上是空接口类型，写作 interface {} 。为了方便使用，Go语言为它定义一个别名any类型，即 type any &#x3D; interface{} 。</p>
<p>空接口，没有任何方法声明，因此，任何类型都无需显式实现空接口的方法，因为任何类型都满足这个空接口的要求。那么，任何类型的值都可以看做是空接口类型。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">500</span>
<span class="token keyword">var</span> b <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 空接口类型可以适合接收任意类型的值</span>
b <span class="token operator">=</span> a
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v, %[1]T; %v, %[2]T\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token string">"abcd"</span>
b <span class="token operator">=</span> c <span class="token comment">// 可以接收任意类型</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v, %[1]T; %v, %[2]T\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> b<span class="token punctuation">)</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"xyz"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// interface&#123;&#125;看做一个整体。切片</span>
元素类型任意
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v, %[1]T\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="接口类型断言"><a href="#接口类型断言" class="headerlink" title="接口类型断言"></a>接口类型断言</h5><p>接口类型断言（Type Assertions）可以将接口转换成另外一种接口，也可以将接口转换成另外的类型。</p>
<p>接口类型断言格式 t :&#x3D; i.(T)</p>
<ul>
<li>i代表接口变量</li>
<li>T表示转换目标类型</li>
<li>t代表转换后的变量</li>
<li>断言失败，也就是说 i 没有实现T接口的方法则panic</li>
<li>t, ok :&#x3D; i.(T) ，则断言失败不panic，通过ok是true或false判断i是否是T类型接口</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> b <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token number">500</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// panic 转换失败</span>
<span class="token keyword">if</span> s<span class="token punctuation">,</span> ok <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"断言成功，值是"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"断言失败"</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h6 id="type-switch"><a href="#type-switch" class="headerlink" title="type-switch"></a>type-switch</h6><p>可以使用特殊格式来对接口做多种类型的断言。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> i <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token number">500</span>
<span class="token keyword">switch</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">case</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"nil"</span><span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"字符串"</span><span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"整型"</span><span class="token punctuation">)</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"其他类型"</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>i.(type)</code>只能用在switch中</p>
<p>如果想在switch中使用转换的结果，可以使用下面的方式</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> i <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token number">500</span>
<span class="token keyword">switch</span> v <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">case</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"nil"</span><span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"字符串"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"整型"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"其他类型"</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="输出格式接口"><a href="#输出格式接口" class="headerlink" title="输出格式接口"></a>输出格式接口</h5><p>我们使用fmt.Print等函数时，对任意一个值都有一个缺省打印格式。本质上就是实现打印相关的接口</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 普通的Print</span>
<span class="token keyword">type</span> Stringer <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
 <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// %#v format</span>
<span class="token keyword">type</span> GoStringer <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
 <span class="token function">GoString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过实现上面的接口，就可以控制值的打印输出格式。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 name <span class="token builtin">string</span>
 age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// fmt.Stringer</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> <span class="token string">"abc"</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// fmt.GoStringer</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>Person<span class="token punctuation">)</span> <span class="token function">GoString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> <span class="token string">"xyz"</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>Person<span class="token punctuation">)</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> <span class="token string">"foo"</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 p <span class="token operator">:=</span> Person<span class="token punctuation">&#123;</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v, %+v\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v, %#v\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s, %s\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>以实例的指针为例</th>
<th>%v</th>
<th>%+v</th>
<th>%#v</th>
</tr>
</thead>
<tbody><tr>
<td>默认</td>
<td>&amp;{tom 20}</td>
<td>&amp;{name:tom age:20}</td>
<td>&amp;main.Person{name:”tom”,age:20}</td>
</tr>
<tr>
<td>实现Stringer接口</td>
<td>abc</td>
<td>abc</td>
<td></td>
</tr>
<tr>
<td>实现GoStringer接口</td>
<td></td>
<td></td>
<td>xyz</td>
</tr>
</tbody></table>
<p>Stringer、GoStringer接口的方法，如果receiver是指针，只能对指针有作用；如果receiver是实例，实例、指针都有作用。普通方法receiver不管是实例还是指针都可以调用该方法。</p>
<p>接口定义实例 <a href="https://gitee.com/go-course/go9/blob/master/projects/vblog/api/apps/blog/interface.go#L14-37">https://gitee.com/go-course/go9/blob/master/projects/vblog/api/apps/blog/interface.go#L14-37</a></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang结构体</title>
    <url>/2023/04/17/Golang%E7%BB%93%E6%9E%84%E4%BD%93/</url>
    <content><![CDATA[<h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><p>Go语言的结构体有点像面向对象语言中的”类”，但不完全是，Go语言也没打算真正实现面向对象范式</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>使用type定义结构体，可以把结构体看做类型使用。必须指定结构体的字段（属性）名称和类型。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    id <span class="token builtin">int</span>
    name<span class="token punctuation">,</span>addr <span class="token builtin">string</span>
    score <span class="token builtin">float32</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>User不过是个标识符，一个指代</li>
<li>真正的类型定义是struct{}的部分</li>
</ul>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 id         <span class="token builtin">int</span>
 name<span class="token punctuation">,</span> addr <span class="token builtin">string</span>
 score <span class="token builtin">float32</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 1 var声明，非常常用</span>
<span class="token keyword">var</span> u1 User <span class="token comment">// 这种方式声明结构体变量很方便，所有字段都是零值</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u1<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v\n"</span><span class="token punctuation">,</span> u1<span class="token punctuation">)</span> <span class="token comment">// 加上字段打印</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v\n"</span><span class="token punctuation">,</span> u1<span class="token punctuation">)</span> <span class="token comment">// 加上更多信息打印</span>
<span class="token comment">// 2 字面量初始化，推荐</span>
u2 <span class="token operator">:=</span> User<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 字段为零值</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v\n"</span><span class="token punctuation">,</span> u2<span class="token punctuation">)</span>
<span class="token comment">// 3 字面量初始化，field: value为字段赋值</span>
u3 <span class="token operator">:=</span> User<span class="token punctuation">&#123;</span>id<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v\n"</span><span class="token punctuation">,</span> u3<span class="token punctuation">)</span>
u4 <span class="token operator">:=</span> User<span class="token punctuation">&#123;</span>
 id<span class="token punctuation">:</span> <span class="token number">102</span><span class="token punctuation">,</span> score<span class="token punctuation">:</span> <span class="token number">95.8</span><span class="token punctuation">,</span>
 addr<span class="token punctuation">:</span> <span class="token string">"Nanjing"</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span> <span class="token comment">// 名称对应无所谓顺序</span>
u5 <span class="token operator">:=</span> User<span class="token punctuation">&#123;</span><span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Beijing"</span><span class="token punctuation">,</span> <span class="token number">98.5</span><span class="token punctuation">&#125;</span> <span class="token comment">// 无字段名称必须按照顺序给出全部字段值</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v\n"</span><span class="token punctuation">,</span> u4<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v\n"</span><span class="token punctuation">,</span> u5<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><ul>
<li>Go包的顶层代码中，首字母大写的标识符，跨package包可见（导出），否则只能本包内可见</li>
<li>导出的结构体，package内外皆可见，同时，导出的结构体中的成员（属性、方法）要在包外也可见，则也需要首字母大写</li>
</ul>
<h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>可以使用字段名访问</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">u1 <span class="token operator">:=</span> User<span class="token punctuation">&#123;</span><span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Beijing"</span><span class="token punctuation">,</span> <span class="token number">98.5</span><span class="token punctuation">&#125;</span> <span class="token comment">// 无字段名称必须按照顺序给出全部字段值</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>id<span class="token punctuation">,</span> u1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> u1<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>通过字段来修改</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">u1 <span class="token operator">:=</span> User<span class="token punctuation">&#123;</span><span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Beijing"</span><span class="token punctuation">,</span> <span class="token number">98.5</span><span class="token punctuation">&#125;</span> <span class="token comment">// 无字段名称必须按照顺序给出全部字段值</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u1<span class="token punctuation">)</span>
u1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span>
u1<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">88</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><p>利用下面形式为结构体组合方法</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 id         <span class="token builtin">int</span>
 name<span class="token punctuation">,</span> addr <span class="token builtin">string</span>
 score      <span class="token builtin">float32</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// u称为receiver</span>
<span class="token comment">// 等价于 func (User) string</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>u User<span class="token punctuation">)</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> u<span class="token punctuation">.</span>name
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 u1 <span class="token operator">:=</span> User<span class="token punctuation">&#123;</span><span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Beijing"</span><span class="token punctuation">,</span> <span class="token number">98.5</span><span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Point <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 x<span class="token punctuation">,</span> y <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> p1 <span class="token operator">=</span> Point<span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">&#125;</span>        <span class="token comment">// 实例</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T, %[1]v\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span> <span class="token comment">// Point, &#123;10, 20&#125;</span>
<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>Point<span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span>         <span class="token comment">// 指针</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T, %[1]v\n"</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span> <span class="token comment">// *Point, &amp;&#123;5, 6&#125;</span>
<span class="token keyword">var</span> p3 <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>Point<span class="token punctuation">)</span>           <span class="token comment">// new实例化一个结构体并返回</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T, %[1]v\n"</span><span class="token punctuation">,</span> p3<span class="token punctuation">)</span> <span class="token comment">// *Point, &amp;&#123;0, 0&#125;</span>
<span class="token comment">// 通过实例修改属性</span>
p1<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">100</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T, %[1]v\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span> <span class="token comment">// Point, &#123;100, 20&#125;</span>
<span class="token comment">// 通过指针修改属性</span>
p2<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">200</span>
p3<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">300</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T, %[1]v\n"</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span> <span class="token comment">// *Point, &amp;&#123;200, 6&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T, %[1]v\n"</span><span class="token punctuation">,</span> p3<span class="token punctuation">)</span> <span class="token comment">// *Point, &amp;&#123;300, 0&#125;</span>
<span class="token comment">// p3.x中. 是 -> 的语法糖，更方便使用。等价于(*p3).x</span>
fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token operator">*</span>p3<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>p3<span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token comment">// &#123;300 0&#125; 300</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>运行结果如下</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">1</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span><span class="token number">10</span> y<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span> <span class="token number">0xc00001a0a0</span>
<span class="token number">2</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span><span class="token number">10</span> y<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span> <span class="token number">0xc00001a0e0</span>
<span class="token number">3</span> <span class="token operator">&amp;</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span><span class="token number">10</span> y<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span> <span class="token number">0xc00001a0a0</span>
<span class="token number">4</span> <span class="token punctuation">&#123;</span><span class="token number">10</span> <span class="token number">20</span><span class="token punctuation">&#125;</span> <span class="token number">0xc00001a140</span>
<span class="token number">5</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span><span class="token number">10</span> y<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span> <span class="token number">0xc00001a130</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看出，结构体是非引用类型，使用的是值拷贝。传参或返回值如果使用结构体实例，将产生很多副本。如何避免过多副本，如何保证函数内外使用的是同一个结构体实例？使用指针</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">type</span> Point <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 x<span class="token punctuation">,</span> y <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span>p <span class="token operator">*</span>Point<span class="token punctuation">)</span> <span class="token operator">*</span>Point <span class="token punctuation">&#123;</span>
 p<span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token number">100</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"4 %+v %p\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> p<span class="token punctuation">)</span>
 <span class="token keyword">return</span> p 
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	<span class="token keyword">var</span> p1 <span class="token operator">=</span> Point<span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">&#125;</span> <span class="token comment">// 实例</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"1 %+v %p\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span>
	p2 <span class="token operator">:=</span> p1
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"2 %+v %p\n"</span><span class="token punctuation">,</span> p2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span>
	p3 <span class="token operator">:=</span> <span class="token operator">&amp;</span>p1
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"3 %+v %p\n"</span><span class="token punctuation">,</span> p3<span class="token punctuation">,</span> p3<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
	p4 <span class="token operator">:=</span> <span class="token function">test</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"5 %+v %p\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"6 %+v %p\n"</span><span class="token punctuation">,</span> p4<span class="token punctuation">,</span> p4<span class="token punctuation">)</span>
	p4<span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token number">200</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"7 %+v %p\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"8 %+v %p\n"</span><span class="token punctuation">,</span> p4<span class="token punctuation">,</span> p4<span class="token punctuation">)</span>
	p5 <span class="token operator">:=</span> p3
	p5<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">400</span> <span class="token comment">// 会发生什么？</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"9 %+v %p\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"10 %+v %p\n"</span><span class="token punctuation">,</span> p4<span class="token punctuation">,</span> p4<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"11 %+v %p\n"</span><span class="token punctuation">,</span> p5<span class="token punctuation">,</span> p5<span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span>
<span class="token comment">//输出</span>
<span class="token number">1</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span><span class="token number">10</span> y<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span> <span class="token number">0xc00018e010</span>
<span class="token number">2</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span><span class="token number">10</span> y<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span> <span class="token number">0xc00018e050</span>
<span class="token number">3</span> <span class="token operator">&amp;</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span><span class="token number">10</span> y<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span> <span class="token number">0xc00018e010</span>
~~~~~~~~~~~~~~~~~~~~~~~~~~~
<span class="token number">4</span> <span class="token operator">&amp;</span><span class="token punctuation">&#123;</span><span class="token number">10</span> <span class="token number">20</span><span class="token punctuation">&#125;</span> <span class="token number">0xc00018e010</span>
<span class="token number">5</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span><span class="token number">10</span> y<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span> <span class="token number">0xc00018e010</span>
<span class="token number">6</span> <span class="token operator">&amp;</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span><span class="token number">10</span> y<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span> <span class="token number">0xc00018e010</span>
<span class="token number">7</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span><span class="token number">210</span> y<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span> <span class="token number">0xc00018e010</span>
<span class="token number">8</span> <span class="token operator">&amp;</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span><span class="token number">210</span> y<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span> <span class="token number">0xc00018e010</span>
<span class="token number">9</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span><span class="token number">210</span> y<span class="token punctuation">:</span><span class="token number">400</span><span class="token punctuation">&#125;</span> <span class="token number">0xc00018e010</span>
<span class="token number">10</span> <span class="token operator">&amp;</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span><span class="token number">210</span> y<span class="token punctuation">:</span><span class="token number">400</span><span class="token punctuation">&#125;</span> <span class="token number">0xc00018e010</span>
<span class="token number">11</span> <span class="token operator">&amp;</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span><span class="token number">210</span> y<span class="token punctuation">:</span><span class="token number">400</span><span class="token punctuation">&#125;</span> <span class="token number">0xc00018e010</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>说明，使用了同一个内存区域中的结构体实例，减少了拷贝</p>
<h5 id="匿名结构体"><a href="#匿名结构体" class="headerlink" title="匿名结构体"></a>匿名结构体</h5><p>匿名结构体：标识符直接使用struct部分结构体本身来作为类型，而不是使用type定义的有名字的结构体的标识符。</p>
<p>可以使用<code>var</code>、<code>const</code>、<code>:= </code>来定义匿名结构体</p>
<p>type定义结构体的标识符，可以反复定义其结构体实例，但是匿名结构体是一次性的。</p>
<p><img src="/images/QzaKfUq0IZSFi0iI45-KHuXLjXsmCfrTExRYt2Qucoc.png" alt="image"></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> Point <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 x<span class="token punctuation">,</span> y <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span> <span class="token comment">// 定义Point是后面匿名结构体类型的，用零值</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v\n"</span><span class="token punctuation">,</span> Point<span class="token punctuation">)</span> <span class="token comment">// 得到的是一个结构体实例</span>
<span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 id   <span class="token builtin">int</span>
 data <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"OK"</span><span class="token punctuation">&#125;</span> <span class="token comment">// 不用零值，初始化</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v\n"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span>
student <span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 id   <span class="token builtin">int</span>
 name <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">&#125;</span> <span class="token comment">// 短格式定义并初始化</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v\n"</span><span class="token punctuation">,</span> student<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>匿名结构体，只是为了快速方便地得到一个结构体实例，而不是使用结构体创建N个实例。</p>
<h5 id="匿名成员"><a href="#匿名成员" class="headerlink" title="匿名成员"></a>匿名成员</h5><p>有时候属性名可以省略</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Point <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 x    <span class="token builtin">int</span>
 <span class="token builtin">int</span>  <span class="token comment">// 字段，匿名成员变量</span>
 <span class="token builtin">bool</span> <span class="token comment">// 匿名，必须类型不一样才能区分</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> p1 <span class="token operator">=</span> Point<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>
<span class="token keyword">var</span> p2 <span class="token operator">=</span> Point<span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span> <span class="token comment">// 使用类型名作为字段名</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span> p1<span class="token punctuation">.</span>x<span class="token punctuation">,</span> p2<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">,</span> p2<span class="token punctuation">.</span><span class="token builtin">bool</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h5><p>Go语言并没有从语言层面为结构体提供什么构造器，但是有时候可以通过一个函数为结构体初始化提供属性值，从而方便得到一个结构体实例。习惯上，函数命名为<code>Newxxx</code>的形式</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">type</span> Animal <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 name <span class="token builtin">string</span>
 age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">NewAnimal</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> Animal <span class="token punctuation">&#123;</span>
 a <span class="token operator">:=</span> Animal<span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span> age<span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v, %p\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span>
 <span class="token keyword">return</span> a 
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 a <span class="token operator">:=</span> <span class="token function">NewAnimal</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v, %p\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="父子关系构造"><a href="#父子关系构造" class="headerlink" title="父子关系构造"></a>父子关系构造</h5><p>动物类包括猫类，猫属于猫类，猫也属于动物类，某动物一定是动物类，但不能说某动物一定是猫类。</p>
<p>将上例中的Animal结构体，使用匿名成员的方式，嵌入到Cat结构体中，看看效果</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">type</span> Animal <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 name <span class="token builtin">string</span>
 age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> Cat <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 Animal <span class="token comment">// 匿名成员，可以使用类型名作为访问的属性名</span>
 color  <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>Cat<span class="token punctuation">)</span> <span class="token comment">// Cat实例化，Animal同时被实例化</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v\n"</span><span class="token punctuation">,</span> cat<span class="token punctuation">)</span>
 cat<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"black"</span>     <span class="token comment">// 子结构体属性</span>
 cat<span class="token punctuation">.</span>Animal<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span> <span class="token comment">// 完整属性访问</span>
 cat<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span>            <span class="token comment">// 简化写法，只有匿名成员才有这种效果</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v\n"</span><span class="token punctuation">,</span> cat<span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<ul>
<li>使用结构体嵌套实现类似面向对象父类子类继承（派生）的效果</li>
<li>子结构体使用匿名成员能简化调用父结构体成员</li>
</ul>
<h5 id="指针类型receiver"><a href="#指针类型receiver" class="headerlink" title="指针类型receiver"></a>指针类型receiver</h5><p>Go语言，可以为任意类型包括结构体增加方法，形式是<code>func Receiver 方法名 签名 &#123;函数体&#125; </code> 这个receiver类似其他语言中的this或self</p>
<p>receiver必须是一个类型T实例或类型T的指针，T不能是指针或接口</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">type</span> Point <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 x<span class="token punctuation">,</span> y <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p Point<span class="token punctuation">)</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token comment">// getX方法绑定到结构体类型Point</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"instance"</span><span class="token punctuation">)</span>
 <span class="token keyword">return</span> p<span class="token punctuation">.</span>x 
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Point<span class="token punctuation">)</span> <span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"pointer"</span><span class="token punctuation">)</span>
 <span class="token keyword">return</span> p<span class="token punctuation">.</span>y <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 p <span class="token operator">:=</span> Point<span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">&#123;</span><span class="token number">4</span> <span class="token number">5</span><span class="token punctuation">&#125;</span>
instance
instance
<span class="token number">4</span> <span class="token number">4</span>
~~~~~~~~~~~~~~~~~~~~~~~~~~~
pointer
pointer
<span class="token number">5</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果方法中不使用receiver，其标识符可以省略</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>Point<span class="token punctuation">)</span> <span class="token function">Comment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"这是个点"</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<p>接收器receiver可以是类型T也可以是指针*T，定义的方法有什么区别？</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">type</span> Point <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 x<span class="token punctuation">,</span> y <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p Point<span class="token punctuation">)</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> p<span class="token punctuation">.</span>x
 <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Point<span class="token punctuation">)</span> <span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> p<span class="token punctuation">.</span>y 
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p Point<span class="token punctuation">)</span> <span class="token function">setX</span><span class="token punctuation">(</span>v <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"1 %+v, %p\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span>
 p<span class="token punctuation">.</span>x <span class="token operator">=</span> v
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"2 %+v, %p\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Point<span class="token punctuation">)</span> <span class="token function">setY</span><span class="token punctuation">(</span>v <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"3 %+v, %p\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> p<span class="token punctuation">)</span>
 p<span class="token punctuation">.</span>y <span class="token operator">=</span> v
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"4 %+v, %p\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> p<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 p <span class="token operator">:=</span> Point<span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span>
<span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"5 %+v, %p\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span>
 p<span class="token punctuation">.</span><span class="token function">setX</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment">// 实例调用是值拷贝</span>
 p<span class="token punctuation">.</span><span class="token function">setY</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span> <span class="token comment">// 看似实例调用，实则是指针，操作同一处内存</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"6 %+v, %p\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span><span class="token number">4</span> y<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0xc000128070</span>
<span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span><span class="token number">4</span> y<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0xc0001280c0</span>
<span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span><span class="token number">11</span> y<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0xc0001280c0</span>
<span class="token operator">&amp;</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span><span class="token number">4</span> y<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0xc000128070</span>
<span class="token operator">&amp;</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span><span class="token number">4</span> y<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0xc000128070</span>
<span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span><span class="token number">4</span> y<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0xc000128070</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>非常明显，如果是非指针接收器方法调用有值拷贝，操作的是副本，而指针接收器方法调用操作的是同一个内存的同一个实例。</p>
<p>如果是操作大内存对象时，且操作同一个实例时，一定要采用指针接收器的方法。</p>
<h5 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h5><ul>
<li>shadow copy<ul>
<li>影子拷贝，也叫浅拷贝。遇到引用类型数据，仅仅复制一个引用而已</li>
</ul>
</li>
<li>deep copy<ul>
<li>深拷贝，往往会递归复制一定深度</li>
</ul>
</li>
</ul>
<p>注意，深浅拷贝说的是拷贝过程中是否发生递归拷贝，也就是说如果某个值是一个地址，是只复制这个地址 ，还是复制地址指向的内容。</p>
<p>值拷贝是深拷贝，地址拷贝是浅拷贝，这种说法是错误的。因为地址拷贝只是拷贝了地址，因此本质上来讲也是值拷贝。</p>
<p>Go语言中，引用类型实际上拷贝的是标头值，这也是值拷贝，并没有通过标头值中对底层数据结构的指针指向的内容进行复制，这就是浅拷贝。非引用类型的复制就是值拷贝，也就是再造一个副本，这也是浅拷贝。因为你不能说对一个整数值在内存中复制出一个副本，就是深的拷贝。像整数类型这样的基本类型就是一个单独的值，没法深入拷贝，根本没法去讲深入的事儿。</p>
<p>简单讲，大家可以用拷贝文件是否对软链接跟进来理解。直接复制软链接就是浅拷贝，钻进软链接里面复制其内容就是深拷贝。</p>
<p>复杂数据结构，往往会有嵌套，有时嵌套很深，如果都采用深拷贝，那代价很高，所以，浅拷贝才是语言普遍采用的方案。</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang List</title>
    <url>/2023/04/15/Golang%20List/</url>
    <content><![CDATA[<h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">printList</span><span class="token punctuation">(</span>i <span class="token builtin">string</span><span class="token punctuation">,</span> l list<span class="token punctuation">.</span>List<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"类型：%T  值：%v  长度：%d \n"</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> l<span class="token punctuation">,</span> l<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">printIterateList</span><span class="token punctuation">(</span>l list<span class="token punctuation">.</span>List<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> e <span class="token operator">:=</span> l<span class="token punctuation">.</span><span class="token function">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T,  %v  \n"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>Value<span class="token punctuation">,</span> e<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// main函数叫做入口函数，go约定main函数必须在main包中定义</span>
	<span class="token keyword">var</span> list1 list<span class="token punctuation">.</span>List
	<span class="token function">printList</span><span class="token punctuation">(</span><span class="token string">"测试声明list"</span><span class="token punctuation">,</span> list1<span class="token punctuation">)</span>

	list1<span class="token punctuation">.</span><span class="token function">PushFront</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
	list1<span class="token punctuation">.</span><span class="token function">PushFront</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span>
	list1<span class="token punctuation">.</span><span class="token function">PushFront</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>
	<span class="token comment">// 尾部添加</span>
	list1<span class="token punctuation">.</span><span class="token function">PushBack</span><span class="token punctuation">(</span><span class="token string">"2222"</span><span class="token punctuation">)</span>
	<span class="token function">printList</span><span class="token punctuation">(</span><span class="token string">"添加后的list为："</span><span class="token punctuation">,</span> list1<span class="token punctuation">)</span>
	<span class="token function">printIterateList</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> list2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	list2<span class="token punctuation">.</span><span class="token function">PushFront</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>
	list2<span class="token punctuation">.</span><span class="token function">PushFront</span><span class="token punctuation">(</span><span class="token string">"222"</span><span class="token punctuation">)</span>
	ele <span class="token operator">:=</span> list2<span class="token punctuation">.</span><span class="token function">PushBack</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
	list2<span class="token punctuation">.</span><span class="token function">InsertBefore</span><span class="token punctuation">(</span><span class="token string">"fuck"</span><span class="token punctuation">,</span> ele<span class="token punctuation">)</span>
	list2<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>
	<span class="token keyword">for</span> e <span class="token operator">:=</span> list2<span class="token punctuation">.</span><span class="token function">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/images/9Spf0KfzlHu3RvMTBqN3r_VTvfiR5EaplbLhiT4WtvM.png" alt="image"></p>
<h3 id="list遍历"><a href="#list遍历" class="headerlink" title="list遍历"></a>list遍历</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 顺序遍历 e.Next 获取下一个元素      list2.Front获取第一个元素</span>
	<span class="token keyword">for</span> e <span class="token operator">:=</span> list2<span class="token punctuation">.</span><span class="token function">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token comment">// 逆序遍历 e.Prev 获取上一个元素   list2.Back 获取最后一个元素</span>
	<span class="token keyword">for</span> e <span class="token operator">:=</span> list2<span class="token punctuation">.</span><span class="token function">Back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">Prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang递归、匿名函数、作用域、闭包</title>
    <url>/2023/04/16/Golang%E9%80%92%E5%BD%92%E3%80%81%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<h1 id="递归、匿名函数、作用域、闭包"><a href="#递归、匿名函数、作用域、闭包" class="headerlink" title="递归、匿名函数、作用域、闭包"></a>递归、匿名函数、作用域、闭包</h1><p>简单来说，递归就是函数自己调自己。有2种方式，一种是只在在自己函数中调用自己，一种是间接在自己函数中调用的其他函数中调用了自己。</p>
<ul>
<li>递归函数需要有边界条件、递归前进段、递归返回段</li>
<li>递归一定要有<strong>边界条件</strong></li>
<li>当边界条件不满足时，递归前进</li>
<li>当边界条件满足时，递归返回</li>
</ul>
<h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><p>Fibonacci number：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, …如果设F(n）为该数列的第n项（</p>
<p>n∈N*），那么这句话可以写成如下形式：F(n)&#x3D;F(n-1)+F(n-2) 有F(0)&#x3D;0，F(1)&#x3D;1，F(2)&#x3D;1，F(n)&#x3D;F(n-1)+F(n-2)</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token comment">// 非递归版，循环版</span>
<span class="token keyword">func</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">switch</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">case</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
 <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"n is negative"</span><span class="token punctuation">)</span>
 <span class="token keyword">case</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
 <span class="token keyword">return</span> <span class="token number">0</span>
 <span class="token keyword">case</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
 <span class="token keyword">return</span> <span class="token number">1</span>
 <span class="token punctuation">&#125;</span>
 a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>
 <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
 a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">return</span> b <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用递归实现，需要使用递归公式F(n)&#x3D;F(n-1)+F(n-2) 。</p>
<p>递归有2种形式实现</p>
<p>1、采用递归公式</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">
<span class="token keyword">func</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> <span class="token number">1</span>
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2、循环层次变成递归函数层次</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> b
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>n相当于循环变量</li>
<li>b和a+b就是每次循环体中的值</li>
</ul>
<p>第一种使用那么美的递归公式为什么慢？</p>
<p>以fib(5)为例。看了下图后，fib(6)是怎样计算的呢？</p>
<p><img src="/images/3cQaHgUR1zV7txTfb5Zv21dunowx3Nr8WxxCf4rV920.png" alt="image"></p>
<p>这个函数进行了大量的重复计算，所以慢</p>
<p>递归公式更改：</p>
<p>使用map存储对应num的值，每次递归前先查询map中有没有对应的值，有直接取，不进行重复计算</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">fib2</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">,</span> m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> num <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">1</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> num <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"不能小于或等于0"</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> s<span class="token punctuation">,</span> err <span class="token operator">:=</span> m<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> s
	<span class="token punctuation">&#125;</span>
	m<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fib2</span><span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib2</span><span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span>
	<span class="token keyword">return</span> m<span class="token punctuation">[</span>num<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>




<h5 id="递归要求"><a href="#递归要求" class="headerlink" title="递归要求"></a>递归要求</h5><ul>
<li>递归一定要有退出条件，递归调用一定要执行到这个退出条件。没有退出条件的递归调用，就是无限调用</li>
<li>递归调用的深度不宜过深</li>
<li>Go语言不可能让函数无限调用，栈空间终会耗尽<ul>
<li>goroutine stack exceeds 1000000000-byte limit</li>
</ul>
</li>
</ul>
<h5 id="递归效率"><a href="#递归效率" class="headerlink" title="递归效率"></a>递归效率</h5><p>以上3个斐波那契数列实现，请问那个效率高？递归效率一定低吗？哪个版本好？</p>
<p>递归版本1效率极低，是因为有大量重复计算。</p>
<p>递归版本2采用了递归函数调用层次代替循环层次，效率还不错，和循环版效率差不多。</p>
<p>那么递归版2和循环版谁好？</p>
<p>循环版好些，因为递归有深度限制，再一个函数调用开销较大。</p>
<h5 id="间接递归"><a href="#间接递归" class="headerlink" title="间接递归"></a>间接递归</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>间接递归调用，是函数通过别的函数调用了自己，这一样是递归。</p>
<p>只要是递归调用，不管是直接还是间接，都要注意边界返回问题。但是间接递归调用有时候是非常不明显，代码调用复杂时，很难发现出现了递归调用，这是非常危险的。</p>
<p>所有，使用良好的代码规范来避免这种递归的发生。</p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul>
<li>递归是一种很自然的表达，符合逻辑思维</li>
<li>递归相对运行效率低，每一次调用函数都要开辟栈帧</li>
<li>递归有深度限制，如果递归层次太深，函数连续压栈，栈内存就可能溢出了</li>
<li>如果有限次数的递归，可以使用递归调用，或者使用循环代替，循环代码稍微复杂一些，但是只要不是死循环，可以多次迭代知道算出结果</li>
<li>绝大多数递归，都可以使用循环实现</li>
<li>即使递归代码很简洁，但是能不用则不用递归</li>
</ul>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
    result <span class="token operator">:=</span> x<span class="token operator">+</span>y
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">//定义后立即调用</span>
add <span class="token operator">:=</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
    result <span class="token operator">:=</span> x<span class="token operator">+</span>y
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">&#125;</span> <span class="token comment">//使用标识符指向一个匿名函数</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>匿名函数主要作用是用作高阶函数中，它是传入的逻辑。若一个函数允许传入的参数是函数类型，就是把操作逻辑外置</p>
<p>例如，给定2个整数，给定计算函数，得到结果</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">func</span> <span class="token function">calc</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">,</span> fn <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">// 体会calc并没有实现对a、b的操作，而是交给了fn，而fn究竟做什么操作由未来的使用者决定</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 加法</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">*</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 乘法</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>但是Go语言没有lambda表达式，也没有类似JavaScript的箭头函数，匿名函数写起来还是较为繁琐，只能使用类型别名简化，但是并没有什么太大的作用。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">type</span> MyFunc <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span>
<span class="token keyword">func</span> <span class="token function">calc</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">,</span> fn MyFunc<span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 加法</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">*</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 乘法</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="函数嵌套"><a href="#函数嵌套" class="headerlink" title="函数嵌套"></a>函数嵌套</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">func</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 c <span class="token operator">:=</span> <span class="token number">99</span>
 <span class="token keyword">var</span> inner <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"1 inner"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2 outer"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>可以看到outer中定义了另外一个函数inner，并且调用了inner。outer是包级变量，main可见，可以调用。而inner是outer中的局部变量，outer中可见。</p>
<p>执行过程：</p>
<p>main函数创建栈帧，outer函数创建栈帧，变量c压栈，inner函数压栈，func变量逃逸到堆中，</p>
<h3 id="嵌套作用域"><a href="#嵌套作用域" class="headerlink" title="嵌套作用域"></a>嵌套作用域</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">func</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 c <span class="token operator">:=</span> <span class="token number">99</span>
 <span class="token keyword">var</span> inner <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 c <span class="token operator">=</span> <span class="token number">100</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"1 inner"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span> <span class="token comment">// 请问c是多少</span>
 <span class="token punctuation">&#125;</span>
 <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2 outer"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span> <span class="token comment">// 请问c是多少</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>上例分析</p>
<ul>
<li>第9、12行都输出100</li>
<li>说明内外用的同一个c声明，用的同一个标识符，也就是c是outer的局部变量，而不是inner的局部变量</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">func</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 c <span class="token operator">:=</span> <span class="token number">99</span>
 <span class="token keyword">var</span> inner <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 c <span class="token operator">=</span> <span class="token number">100</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"1 inner"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span> <span class="token comment">// 请问c是多少</span>
 c <span class="token operator">:=</span> c <span class="token operator">+</span> <span class="token number">1</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"3 inner"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span> <span class="token comment">// 请问c是多少</span>
 <span class="token punctuation">&#125;</span>
 <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2 outer"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span> <span class="token comment">// 请问c是多少</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>上例分析</p>
<ul>
<li>第9、14行都输出100，第11行输出101</li>
<li>输出结果说明第9、14行是同一个c，都是outer的c；而第10行的c是inner的c，因为这是定义，即在当前作用域中定义新的局部变量，而这个局部变量只能影响当前作用域，不能影响其外部作用域，对外不可见</li>
</ul>
<p>注：这个代码在不同语言中，几处c输出结果和Go语言不一定相同</p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p><strong>自由变量</strong>：未在本地作用域中定义的变量。例如定义在内存函数外的外层函数的作用域中的变量</p>
<p><strong>闭包</strong>：就是一个概念，出现在嵌套函数中，指的是<strong>内层函数引用到了外层函数的自由变量</strong>，就形成了闭包。闭包是运行期动态的概念</p>
<ul>
<li>函数有嵌套，函数内定义了其他函数</li>
<li>内部函数使用了外部函数的局部变量</li>
<li>内部函数被返回（非必须）</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 c <span class="token operator">:=</span> <span class="token number">99</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"outer %d %p\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span>
 <span class="token keyword">var</span> inner <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"inner %d %p\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">return</span> inner
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上例有闭包吗？为什么？</p>
<ul>
<li>首先有嵌套函数，也就是有嵌套作用域</li>
<li>inner函数中用到了c，但是它没有定义c，而外部的outer有局部变量c</li>
</ul>
<p>代码分析：</p>
<ul>
<li>第15行调用outer函数并返回<strong>inner函数对象</strong>，并使用标识符fn记住了他。outer函数执行完了，其栈帧上的局部变量应该释放，包括inner函数，因为它也是局部的。但是c、inner对应的值都不能释放，因为fn要用。所以这些值不能放在栈上，要放到堆上。在go语言中，这称为<strong>变量逃逸</strong>，逃逸到堆上。</li>
<li>在某个时刻，fn函数调用时，需要用到c，但是其内部没有定义c，它是outer的局部变量，如果这个c早已随着outer的调用而释放，那么fn函数调用一定出现错误，所以，这个outer的c不能释放，但是outer已经调用完成了，怎么办？闭包，让inner函数记住自由变量c（逃逸到堆上的内存地址）</li>
</ul>
<h3 id="Defer"><a href="#Defer" class="headerlink" title="Defer"></a>Defer</h3><p>defer的意思是延迟、推迟。就在正常的语句前面加上defer就可以了</p>
<p>在某函数使用defer语句，<strong>会使得defer后跟的语句进行延迟处理</strong>，当<strong>该函数即将返回时，或发生panic时</strong>，defer后语句开始执行。注意os.Exit不是这两种情况，不会执行defer</p>
<p>同一个函数可以有多个defer语句，依次加入调用栈中(LIFO)，函数返回或panic时，从栈顶依次执行defer后语句。执行的先后顺序和注册的顺序相反，也就是后注册的先执行。</p>
<p>defer后的语句必须是一个函数或方法的<strong>调用</strong></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span>
 <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
 <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
 <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span>
<span class="token comment">// 输出</span>
start
end
<span class="token number">3</span>
<span class="token number">2</span>
<span class="token number">1</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 count <span class="token operator">:=</span> <span class="token number">1</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span>
 <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
 count<span class="token operator">++</span>
 <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
 count<span class="token operator">++</span>
 <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token comment">// 输出</span>
start
end
<span class="token number">3</span>
<span class="token number">2</span>
<span class="token number">1</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>结果是3 2 1。为什么？因为defer注册时就，就把其后语句的延迟执行的函数的实际参数准备好了，<strong>也就是注册时计算。</strong></p>
<p>再看下面的变化，猜猜结果是什么？</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 count <span class="token operator">:=</span> <span class="token number">1</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span>
 <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// fmt.Println(count)</span>
 count<span class="token operator">++</span>
 <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
 count<span class="token operator">++</span>
 <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span>
<span class="token comment">//输出</span>
start 
end
<span class="token number">3</span>
<span class="token number">2</span>
<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>执行结果是什么？3 2 3。为什么？因为第8行注册时要确定实际参数，而这是个匿名无参函数，没法准备参数。延迟执行时，打印是才要用count，其外部作用域有一个count，目前是3。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 count <span class="token operator">:=</span> <span class="token number">1</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span>
 <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span>count <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token comment">// </span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
 count<span class="token operator">++</span>
 <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
 count<span class="token operator">++</span>
 <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span>
<span class="token comment">//输出</span>
start
<span class="token number">1</span>
end
<span class="token number">3</span>
<span class="token number">2</span>
<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go函数</title>
    <url>/2023/04/14/Go%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="Go函数"><a href="#Go函数" class="headerlink" title="Go函数"></a>Go函数</h1><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>数学定义</p>
<ul>
<li>y&#x3D;f(x) ，y是x的函数，x是自变量。y&#x3D;f(x0,x1,…,xn)</li>
</ul>
<p>Go函数</p>
<ul>
<li>由若干语句组成的语句块、函数名称、参数列表、返回值构成，他是组织代码的最小单元</li>
<li>完成一定的功能</li>
</ul>
<p>函数的作用</p>
<ul>
<li>结构化编程对代码的最基本的封装，一般按照功能组织一段代码</li>
<li>封装的目录是为了复用，减少冗余代码</li>
<li>代码更加简洁美观、可读易懂</li>
</ul>
<p>函数的分类</p>
<ul>
<li>内建函数，如make、new、panic等</li>
<li>库函数，如math.Ceil()等</li>
<li>自定义函数，使用func 关键字定义</li>
</ul>
<h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> 函数名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> 返回值<span class="token punctuation">&#123;</span>
    函数体
    <span class="token punctuation">[</span><span class="token keyword">return</span> 返回值<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">return</span>可有可无<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>函数名就是标识符，命名要求一样</li>
<li>定义中的参数列表成为形式参数，只是一种符号表达，简称<strong>形参</strong></li>
<li>返回值列表可有可无，需要return语句配合，表示一个功能函数执行完返回的结果</li>
<li>函数名(参数列表) [返回值列表]称为<strong>函数签名</strong></li>
<li>Go语言中形参也 被称为入参，返回值也被称为出参</li>
</ul>
<h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><ul>
<li>函数定义，只是声明了一个函数，它不能被执行，需要调用执行</li>
<li>调用的方式就是函数名后面加上小括号，如果必要在括号中添加参数</li>
<li>调用时写的参数是实际参数，简称实参</li>
<li>如果定义了返回值列表，就需要配合使用return来返回这些值</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 函数定义</span>
<span class="token comment">// x、y是形式参数，result是返回值</span>
<span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
 result <span class="token operator">:=</span> x <span class="token operator">+</span> y <span class="token comment">// 函数体</span>
 <span class="token keyword">return</span> result   <span class="token comment">// 返回值</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 out <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">// 函数调用，可能有返回值，使用变量接收这个返回值</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>  <span class="token comment">// 对于Println函数来说，这也是调用，传入了实参out</span>
 out <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment">// 请问，这次函数调用和上次有没有关系？  没有关系</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>  <span class="token comment">// 请问，函数定义了几次？调用了几次？可以调用几次？  定义了一次，可以调用无数次</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面代码解释：</p>
<ul>
<li>定义一个函数add，函数名是add，能接受2个整型参数</li>
<li>该函数计算的结果，通过return一句返回“返回值” 实现</li>
<li>调用时，通过函数名add后加两个参数，返回值可使用变量接受</li>
<li><strong>函数名也是标识符</strong></li>
<li><strong>返回值也是值</strong></li>
<li><strong>一般习惯上函数定义需要再调用之前，也就是说调用时，函数已经被定义过了。</strong></li>
</ul>
<h3 id="函数调用原理"><a href="#函数调用原理" class="headerlink" title="函数调用原理"></a>函数调用原理</h3><p>函数调用相当于运行一次函数定义好的代码，函数本来就是为了复用，比如你可以用加法函数，我也可以用加法函数，你加你的，我加我的，应该互不干扰的使用函数。为了实现这个目标，函数调用的一般实现，都是吧函数压栈(LIFO)后进先出，每一个函数调用都会在栈中分配专用的<strong>栈帧</strong>，局部变量、实参、返回值等数据都保存在这里</p>
<p>上面的代码，首先调用main函数，main函数压栈，接着调用add(4,5)时，add函数压栈，压在main的栈帧上，add调用return，将add返回值保存在main栈帧的本地变量out上，add栈帧消亡，回到main栈帧上</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">func</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">fn2</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span>     <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">100</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">fn3</span><span class="token punctuation">(</span>j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>r <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">200</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> fn1<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> fn2<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> fn3<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token comment">// 输出如下</span>
<span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span>
<span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>参考 <a href="https://go.dev/ref/spec#Return_statements">https://go.dev/ref/spec#Return_statements</a></p>
<ul>
<li>返回值变量是局部变量</li>
</ul>
<h5 id="1、无返回值"><a href="#1、无返回值" class="headerlink" title="1、无返回值"></a>1、无返回值</h5><p>在Go语言中仅仅一个return并不一定表示无返回值，只能说在一个无返回值的函数中，return表示无返回值函数返回。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 无返回值函数，可以不使用return，或在必要时使用return</span>
<span class="token keyword">func</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"无返回值函数"</span><span class="token punctuation">)</span>
 <span class="token keyword">return</span> <span class="token comment">// return可有可无，如有需要，在必要的时候使用return来返回</span>
<span class="token punctuation">&#125;</span>t <span class="token operator">:=</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment">// 错误，无返回值函数无返回值可用</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 错误，无返回值函数无返回值可打印</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="2、返回一个值"><a href="#2、返回一个值" class="headerlink" title="2、返回一个值"></a>2、返回一个值</h5><p>在函数体中，必须显式执行return</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 返回一个值，没有变量名只有类型。匿名返回值</span>
<span class="token keyword">func</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
 a <span class="token operator">:=</span> <span class="token number">100</span>
 <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// return后面只要类型匹配就行</span>
<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 返回101</span>
t <span class="token operator">:=</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment">// 返回101</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//上面的函数还可以写成下面的形式</span>
<span class="token keyword">func</span> <span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>r <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 r <span class="token operator">=</span> <span class="token number">200</span>
 <span class="token keyword">return</span> <span class="token comment">// 如果返回的标识符就是返回值列表中的标识符，可以省略</span>
<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Go语言中返回值不允许复制给一个常量</p>
<h5 id="3、返回多值"><a href="#3、返回多值" class="headerlink" title="3、返回多值"></a>3、返回多值</h5><p>Go语言是运行函数返回多个值</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 返回多个值</span>
<span class="token keyword">func</span> <span class="token function">fn4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token boolean">true</span>
 <span class="token keyword">return</span> a<span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">fn4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
x<span class="token punctuation">,</span> y <span class="token operator">:=</span> <span class="token function">fn4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 需要两个变量接收返回值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 返回多个值</span>
<span class="token keyword">func</span> <span class="token function">fn4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> b <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 i<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token boolean">true</span>
 <span class="token keyword">return</span> <span class="token comment">// 如果和返回值列表定义的标识符名称和顺序一样，可省略</span>
<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">fn4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
x<span class="token punctuation">,</span> y <span class="token operator">:=</span> <span class="token function">fn4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 需要两个变量接收返回值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 下面写法对吗？</span>
<span class="token keyword">func</span> <span class="token function">fn4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> b <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面写法正确，因为返回值i、b也是函数的局部变量，调用fn4函数时，也会被传入实参，零值可用，返回0,false</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 注意下面写法的错误</span>
<span class="token keyword">func</span> <span class="token function">fn5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"o:/t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token comment">// 错误，因为err被重新定义，只能在if中使用，返回值的err就被覆盖了，就是上</span>
一行<span class="token operator">:=</span>的问题
        <span class="token comment">// return -1, err // 正确</span>
 <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>返回值</p>
<ul>
<li>可以返回0个或多个值</li>
<li>可以在函数定义中写好返回值参数列表<ul>
<li>可以没有标识符，只写类型。但是有时候不便于代码阅读，不知道返回参数的含义</li>
<li>可以和形参一样，写标识符和类型来命名返回值变量，相邻类型相同可以合并写</li>
<li>如果返回值参数列表中只有一个返回参数值类型，小括号可以省略</li>
<li>以上2种方式不能混用，也就是返回值参数要么都命名，要么都不命名</li>
</ul>
</li>
<li>return<ul>
<li>return之后的语句不会执行，函数将结束执行</li>
<li>如果函数无返回值，函数体内根据实际情况使用return</li>
<li>return后如果写值，必须写和返回值参数类型的个数一直的数据</li>
<li>return后什么都不写那么久使用返回值参数列表中的返回参数的值</li>
</ul>
</li>
</ul>
<h3 id="形式参数"><a href="#形式参数" class="headerlink" title="形式参数"></a>形式参数</h3><ul>
<li>可以无形参，也可以多个形参</li>
<li>不支持形式参数的默认值</li>
<li>形参是局部变量</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 无形参</span>
<span class="token keyword">func</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>               <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 有一个int形参，但是没法用它，不推荐</span>
<span class="token keyword">func</span> <span class="token function">fn3</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span>             <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 单参函数</span>
<span class="token keyword">func</span> <span class="token function">fn4</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 多参函数</span>
<span class="token keyword">func</span> <span class="token function">fn5</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">,</span> z <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 相邻形参类型相同，可以写到一起</span>
<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">fn2</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token function">fn3</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token function">fn4</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token function">fn5</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"ok"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>可变参数variadic。其他语言也有类似的被称为剩余参数，但Go语言有所不同</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">fn6</span><span class="token punctuation">(</span>nums <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 可变形参</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T %[1]v, %d, %d\n"</span><span class="token punctuation">,</span> nums<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">fn6</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token comment">// []int, [1]</span>
<span class="token function">fn6</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment">// []int, [3 5]</span>
<span class="token function">fn6</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token comment">// []int, [7 8 9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>可变参数收集实参到一个切片中</li>
<li>如果有可变参数，那它必须位与参数列表中最后，func fn7(x, y int, nums …int, z string){} 这是错误的</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">fn7</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">,</span> nums <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d %d; %T %[3]v, %d, %d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">fn7</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>       <span class="token comment">// 1 2; []int [], 0, 0</span>
<span class="token function">fn7</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment">// 1 2; []int [3], 1, 1</span>
<span class="token function">fn7</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 1 2; []int [3 4], 2, 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看出有剩下的实参才留给剩余参数。</p>
<h3 id="Map传递"><a href="#Map传递" class="headerlink" title="Map传递"></a>Map传递</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main <span class="token comment">// 同一个包内可见</span>
<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token comment">// 函数形参如何传map？</span>
<span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span>m <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"函数中1:%T  %[1]v  %[1]p\n"</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span>
	p <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"函数中2:%T  %[1]v  %[1]p\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
	p<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12312</span>

<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
	c <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"原始1：%T %p %v\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
	c<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span>
	c<span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">456</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"原始2：%T %p %v\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
	<span class="token function">test</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"原始3：%T %p %v\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//输出</span>
原始<span class="token number">1</span>：<span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token number">0xc000096060</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
原始<span class="token number">2</span>：<span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token number">0xc000096060</span> <span class="token keyword">map</span><span class="token punctuation">[</span>a<span class="token punctuation">:</span><span class="token number">123</span> b<span class="token punctuation">:</span><span class="token number">456</span><span class="token punctuation">]</span>
函数中<span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>  <span class="token keyword">map</span><span class="token punctuation">[</span>a<span class="token punctuation">:</span><span class="token number">123</span> b<span class="token punctuation">:</span><span class="token number">456</span><span class="token punctuation">]</span>  <span class="token number">0xc000096060</span>
函数中<span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>  <span class="token keyword">map</span><span class="token punctuation">[</span>a<span class="token punctuation">:</span><span class="token number">123</span> b<span class="token punctuation">:</span><span class="token number">456</span><span class="token punctuation">]</span>  <span class="token number">0xc000096060</span>
原始<span class="token number">3</span>：<span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token number">0xc000096060</span> <span class="token keyword">map</span><span class="token punctuation">[</span>a<span class="token punctuation">:</span><span class="token number">12312</span> b<span class="token punctuation">:</span><span class="token number">456</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>总结： <strong>初始化map后，返回的是指针变量</strong>，在函数之间，传递的是map的地址。在函数修改map会在主程序中表现出来，说明map虽然<a href="https://so.csdn.net/so/search?q=%E5%80%BC%E4%BC%A0%E9%80%92&spm=1001.2101.3001.7020">值传递</a>，但是最终指向都是引用类型。</p>
<h3 id="切片传递"><a href="#切片传递" class="headerlink" title="切片传递"></a>切片传递</h3><p>也可以使用切片传递传递给可变参数。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main <span class="token comment">// 同一个包内可见</span>
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
<span class="token punctuation">)</span>

<span class="token comment">//func fn5() (i int, err error) &#123;</span>
<span class="token comment">//	if _, err := os.Open("p:/c"); err != nil &#123;</span>
<span class="token comment">//		return -1, err</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//	return i, err</span>
<span class="token comment">//</span>
<span class="token comment">//&#125;</span>

<span class="token comment">// 函数形参如何传map？</span>
<span class="token keyword">func</span> <span class="token function">fn6</span><span class="token punctuation">(</span>nums <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T  %[1]v  %d  %d  %p %p\n"</span><span class="token punctuation">,</span> nums<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// main函数叫做入口函数，go约定main函数必须在main包中定义</span>
	p <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"haha"</span><span class="token punctuation">,</span> <span class="token string">"cccc"</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%p %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token function">fn6</span><span class="token punctuation">(</span>p<span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//输出</span>
<span class="token number">0xc000010030</span> <span class="token number">0xc000108000</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>  <span class="token punctuation">[</span>haha cccc<span class="token punctuation">]</span>  <span class="token number">2</span>  <span class="token number">2</span>  <span class="token number">0xc000010048</span> <span class="token number">0xc000108000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，这种方式并不是把p这个切片分解了，然后传递给fn6函数，在封装成一个新的切片nums，而是相当于切片header的复制</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">fn7</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">,</span> nums <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d %d; %T %[3]v, %d, %d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
p <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span>
<span class="token function">fn7</span><span class="token punctuation">(</span>p<span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment">// 这在Go中不行，报奇怪的错，原因还是不能用在非可变参数上，就用4、5用在x、y上了</span>
<span class="token comment">// 这个例子，本以为p被分解，4和5分别对应x和y，6被可变参数nums收集，但是这在Go语言中是错误的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<blockquote>
<p>If the final argument is assignable to a slice type []T and is followed by … , it is passedunchanged as the value for a …T parameter.</p>
</blockquote>
<blockquote>
<p>如果最终的参数是某类型的切片且其后跟着…，它将无变化的传递给…T的可变参数。注意，这个过程无新的切片创建。</p>
</blockquote>
<blockquote>
</blockquote>
<p>帮助文档这一句话，原来指的是， 切片… 只能为可变参数传参。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">fn7</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">,</span> nums <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d %d; %T %[3]v, %d, %d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">,</span> 
<span class="token function">cap</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>p <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span>
<span class="token function">fn7</span><span class="token punctuation">(</span>p<span class="token operator">...</span><span class="token punctuation">)</span>          <span class="token comment">// 错误，不能用在普通参数上</span>
<span class="token function">fn7</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p<span class="token operator">...</span><span class="token punctuation">)</span>       <span class="token comment">// 错误，不能用在普通参数上</span>
<span class="token function">fn7</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> p<span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment">// 错误，不能用2种方式为可变参数传参，不能混用</span>
<span class="token comment">// fn7(1, 2, p..., 9, 10) // 语法错误</span>
<span class="token comment">// fn7(1, 2, []int&#123;4, 5&#125;..., []int&#123;6, 7&#125;...) // 语法错误，不能连续使用p...，只能一次</span>
<span class="token comment">// 正确的如下</span>
<span class="token function">fn7</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token function">fn7</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> p<span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token function">fn7</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看出，可变参数限制较多</p>
<ul>
<li>直接提供对应实参，封装成一个新的切片</li>
<li>可以使用切片传递的方式 <code>切片...</code> 但是这种方式只能单独为可变形参提供实参，因为这是实参切片的header的复制</li>
</ul>
<p>问题：</p>
<p><code>func fn6(nums []int) &#123;&#125;</code> 和<code> func fn6(nums ...int) &#123;&#125;</code> 调用时，都可以使用切片，那有什么区别呢？形参使用切片类型还是可变参数呢？</p>
<p>前者在调用时实参只能传入切片类型，而后者可以传入对应类型的元素，会自动添加到切片中，</p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a><strong>作用域</strong></h3><p>函数会开辟一个局部作用域，其中定义的标识符仅能在函数之中使用，也称为标识符在函数中的可见范围。</p>
<p>这种对标识符约束的可见范围，称为作用域</p>
<h5 id="1、语句块作用域"><a href="#1、语句块作用域" class="headerlink" title="1、语句块作用域"></a>1、语句块作用域</h5><p>if、for、switch等语句中使用短格式定义的变量，可以认为就是该语句块的变量，作用域仅在该语句块中。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>v<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token comment">//错误，i、v是for的局部变量，对外不可访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> i<span class="token punctuation">,</span>err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"o:/c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span><span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>switch、select语句中的每个字句都被视为一个隐式的代码块</p>
<h5 id="2、显式的块作用域"><a href="#2、显式的块作用域" class="headerlink" title="2、显式的块作用域"></a>2、显式的块作用域</h5><p>在任何一个大括号中定义的标识符，其作用域只能在这对大括号中。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">100</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">200</span> 
    c <span class="token operator">:=</span> <span class="token number">300</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token comment">// 可见</span>

<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token comment">// 不可见</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="3、universe块"><a href="#3、universe块" class="headerlink" title="3、universe块"></a>3、universe块</h5><p>宇宙块，意思就是全局块，不过是语言内建的。预定义的标识符就在这个全局环境中，因此bool、int、nil、true、false、iota、append等标识符全局可见，随处可见。</p>
<h5 id="4、包块"><a href="#4、包块" class="headerlink" title="4、包块"></a>4、包块</h5><p>每一个package包含该包所有源文件，形成的作用域。有时在包中顶层代码定义标识符，也称为全局标识符。</p>
<p>所有包内定义全局标识符，包内可见。包的顶层代码中标识符首字母大写则到处，从而包外可见，使用时也要加上包名，例如<code>fmt.Printf()</code></p>
<h5 id="5、函数块"><a href="#5、函数块" class="headerlink" title="5、函数块"></a>5、函数块</h5><p>函数声明的时候使用了花括号，所以整个函数体就是一个显示的代码块。这个函数就是一个块作用域</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">100</span>

<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">200</span>

<span class="token comment">// c := 300</span>
<span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">400</span>

<span class="token keyword">func</span> <span class="token function">showB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> b
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment">// 1,100  ，地址和上面相同</span>
	<span class="token comment">// fmt.Println(1.1, &amp;a)</span>
	<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">500</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token comment">// 2, 500 地址更换</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token comment">//3, 200地址和上面相同</span>
	b <span class="token operator">=</span> <span class="token number">600</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">3.1</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token comment">// 3.1 600 地址和上面相同</span>
	b <span class="token operator">:=</span> <span class="token number">601</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">3.2</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span>   <span class="token comment">// 3.2 601 地址更换</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">,</span> <span class="token function">showB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3.3 600 因为showB和变量b在同一级别下</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">const</span> j <span class="token operator">=</span> <span class="token char">'A'</span>
		<span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token string">"magedu"</span>
		t <span class="token operator">:=</span> <span class="token boolean">true</span>
		a <span class="token operator">=</span> <span class="token number">700</span>
		b <span class="token operator">:=</span> <span class="token number">800</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> d<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token comment">// 4, 700 800 400 'A' "magedu" true</span>
		<span class="token punctuation">&#123;</span>
			x <span class="token operator">:=</span> <span class="token number">900</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">4.1</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> d<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> t<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token comment">// 4.1 700 800 400 'A' "magedu" true 900</span>
		<span class="token punctuation">&#125;</span>
		<span class="token comment">//fmt.Println(4.2, x)  // 4.2 报错了</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">//fmt.Println(4.3, j, k, t)  // 4.3 报错</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">4.4</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">// 4.4 700 601</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token comment">//</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">//fmt.Println(i, v) //报错</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>标识符作用域</p>
<ul>
<li>标识符对外不可见，在标识符定义所在作用域外是看不到标识符的</li>
<li>使用标识符，自己这一层定义的标识符优先，如果没有，就向外层找同名标识符——自己优先，由近及远</li>
<li>标识符对内可见，在内部的局部作用域中，可以使用外部定义的标识符——向内穿透</li>
<li>包级标识符<ul>
<li>在所在包内，都可见</li>
<li>跨包访问，包级标识符必须大写开头，才能导出到包外，可以在包外使用<code>xx包名.VarName</code>方式访问。例如<code>fmt.Println()</code></li>
</ul>
</li>
</ul>
<p>问题：</p>
<p><code>func fn6(nums []int) &#123;&#125; 和 func fn6(nums ...int) &#123;&#125; </code>调用时，都可以使用切片，那有什么区别呢？形参使用切片类型还是可变参数呢？</p>
<p><code>func fn6(nums []int) &#123;&#125; 可以使用 fn6([]int&#123;1, 3&#125;)</code> 一种传参方式。本质上是切片header的复制。</p>
<p><code>func fn6(nums ...int) &#123;&#125; 可以使用 fn6([]int&#123;1, 3&#125;...) 和 fn6(1, 3) </code>两种传参方式。切片传递本质上也是切片header的复制。</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang哈希表</title>
    <url>/2023/04/14/Golang%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><p>映射Map，也称为字典</p>
<ul>
<li>长度可变</li>
<li>存储的元素是key-value对（键值对），value可变</li>
<li>key无序不重复</li>
<li>不可索引，需要通过key来访问</li>
<li><strong>不支持零值可用，也就是说，必须要用make或字面常量构造</strong></li>
<li>引用类型</li>
<li>哈希表</li>
</ul>
<h3 id="哈希表-1"><a href="#哈希表-1" class="headerlink" title="哈希表"></a>哈希表</h3><ul>
<li>map是go中的实现</li>
<li>存储kv对，一个kv对，称为一个元素，键值对称为entry、item</li>
<li>len表示元素的个数，即kv对的个数</li>
<li>key不能重复且无序<ul>
<li>key按照某种先后顺序加入到map中，但是从哈希表中看不出顺序来</li>
<li>key是关键的，唯一的</li>
<li>相同的key会去重</li>
<li>无序：<ul>
<li>在顺序表中，x、y，用顺序表认为x是y的前驱，y是x的后继</li>
<li>在hash table中，x、y如果是key，那么x、y没有前后依存关系，是独立且唯一的key，在内存中位置不确定</li>
</ul>
</li>
</ul>
</li>
<li>不是线性表，是无序的，不能索引</li>
<li>是引用类型<ul>
<li>有一个标头值</li>
<li>有一个指针指向低层的hash表</li>
</ul>
</li>
<li>不支持零值可用</li>
<li>高效的，利用key，用空间换时间</li>
</ul>
<h3 id="哈希表原理"><a href="#哈希表原理" class="headerlink" title="哈希表原理"></a>哈希表原理</h3><p>内存是线性编制的，容器都要划分格子（存储单元），每个存储单元占用的字节数相同</p>
<p>hash(key) &#x3D;&gt; 存储单元房间号，每个通过一个简单的固定步数计算的公式就可以定位存储的内存地址，但是有可能出现hash冲突。</p>
<ul>
<li>开地址法解决hash冲突：将冲突的kv对分配其他地址</li>
<li>拉链法解决hash冲突：在对应冲突的地址空间中，使用链表，将kv对存储到链表中，尾部追加</li>
<li>查询：<ul>
<li>使用key查询，<code>hash(key)</code>算出内存地址，步骤是固定的四则运算，时间复杂度O(1)</li>
<li>map应该使用key来查询才是最有效率的</li>
</ul>
</li>
<li>问题：<ul>
<li>1、如果冲突多了会怎么样<ul>
<li>冲突多了，每个对应的内存空间中都存放着多个kv对，x多y少，超过负载因子(0.65)，就需要扩容y</li>
<li>不管什么容器，最好在使用之前，能估算出大概的数据规模</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Map组成"><a href="#Map组成" class="headerlink" title="Map组成"></a>Map组成</h3><ul>
<li>header：指针指向底层的哈希表</li>
<li>构造：<ul>
<li>零值不可用，用<code>var a map[string]int  </code>定义，零值是nil，但是后面无法增加kv对</li>
<li>可以使用字面量定义 <code>map [string]int&#123;k1:v1&#125; </code>，花括号表示字面量</li>
<li><code>make(map[string]int) </code> 没有告诉未来容纳多少元素，先开辟较小空间，如果未来kv对较多，可能频繁扩容</li>
<li><code>make(map[string]int,100)</code>  表示为100个元素自动生成足够（内部按照算法生成）的空间</li>
</ul>
</li>
</ul>
<h3 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h3><p>哈希hash算法特征</p>
<ul>
<li>y&#x3D;hash(x) ，给定一个x一定得到一个固定的y值</li>
<li>x的范围是输入空间，输入可以是任意长度</li>
<li>y的范围是输出空间，输出是固定长度</li>
<li>hash函数一般设计的计算效率很高</li>
<li>由于输入空间（可以理解为取值范围）远远大于输出空间，有可能不同的x经过hash得到同样的y，<strong>这称为碰撞，也称为冲突，解决冲突的方法为1、开地址法，2、拉链法</strong></li>
<li>不同的x计算出的y值应当在输出空间中分布均匀，较少冲突</li>
<li>不能由y反推出x，hash算法不可逆</li>
<li>x一个微小的变化，哪怕是一个bit的变化，也将引起结果y巨大的变化</li>
</ul>
<p>常见算法：</p>
<ul>
<li>SHA（Secure Hash Algorithm）安全散列算法，包括一个系列算法，分别是SHA-1、SHA-224、SHA-256、SHA-384和SHA-512  后面的数字是位<ul>
<li>数字签名防篡改</li>
</ul>
</li>
<li>MD5（Message Digest Algorithm5）信息摘要算法，输出是128位。运算速度很快<ul>
<li>用户密码存储</li>
<li>上传、下载文件完整性验证</li>
<li>大的数据的快速比对，例如字段很大，增加一个字段存储该字段的hash值，比对内容是否被修改</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"crypto/md5"</span>
	<span class="token string">"crypto/sha256"</span>
	<span class="token string">"fmt"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

m <span class="token operator">:=</span> md5<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 128位 /8 =  16字节</span>
m<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
r <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%x  len = %d\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 输出，16个字节，e1位一个字节，8位</span>
e10adc3949ba59abbe56e057f20f883e  <span class="token builtin">len</span> <span class="token operator">=</span> <span class="token number">16</span>

m2 <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 256位/8 = 32字节</span>
m2<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
r2 <span class="token operator">:=</span> m2<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%x  len=%d\n"</span><span class="token punctuation">,</span> r2<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 输出</span>
8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92  <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">32</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h3><p>map采用哈希表实现。Go的map类型也是引用类型，有一个标头值hmap，指向一个底层的哈希表。</p>
<p>哈希表Hash Table</p>
<ul>
<li>简单理解公式为 y&#x3D;hash(x)</li>
<li>开辟一块内存空间，分隔出一个个房间，这个房间称为bucket桶，按照y值为房间编号</li>
<li>使用给出的x计算出对应的y值，可以按照某种关系计算出数据将被存储到的房间号码，将数据存入该房间。</li>
<li>即使是hash函数设计的好，数据分布均匀，但是存储的数据很多（超过负载因子），则需要扩容，否则再加入数据后，冲突太多，引起效率低下</li>
</ul>
<p>理解的hash函数原理，可以用除留余数法来思考，即hash(x) &#x3D; key mod p。p是hash表大小，看做房间个数。</p>
<p>hash(Xo) &#x3D;&gt; Roomk 计算出一个确定的房间号码。</p>
<p>hash冲突：</p>
<ul>
<li>房间有人占了，就重新找一个空房间让客人住，这是开地址法</li>
<li>房间有人占了，就挤在同一个房间内，将值用链表存储在一起，这是链地址法，也称拉链法，Go语言采用，但做了一定的优化</li>
</ul>
<h5 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> m1 <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token comment">// nil，很危险。map不是零值可用</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m1<span class="token punctuation">,</span> m1 <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
m1<span class="token punctuation">[</span><span class="token string">"t"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span> <span class="token comment">// panic，不可以</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 1 字面量</span>
<span class="token keyword">var</span> m0 <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 安全，没有一个键值对而已</span>
<span class="token keyword">var</span> m1 <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>
 <span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span>
 <span class="token string">"b"</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>
 <span class="token string">"c"</span><span class="token punctuation">:</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token comment">// Go要求这里以逗号结尾</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 2 make</span>
m2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token comment">// 一个较小的起始空间大小</span>
m2<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abc"</span>
m3 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 分配足够容量来容纳100个元素，长度为0。为了减少扩容，可以提前给出元素个数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="新增或修改"><a href="#新增或修改" class="headerlink" title="新增或修改"></a>新增或修改</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span>
m<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment">// key不存在，则创建新的kv对</span>
m<span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">456</span>
m<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">333</span> <span class="token comment">// key已经存在，则覆盖value</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><ul>
<li>使用map一般需要使用key来查找，时间复杂度为O(1)</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 存在返回22</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 不存在返回零值0，这样不能判断"b"这个key存在否，需要解析返回值</span>
<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> m<span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"不存在"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token comment">// 输出</span>
<span class="token boolean">false</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>key访问map是最高效 的方式</p>
<h5 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment">// 返回kv对的长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>注意：map不能使用cap</p>
<h5 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token function">delete</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token comment">// 存在，删除kv对</span>
<span class="token function">delete</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span> <span class="token comment">// 不存在，删除操作也不会panic</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main <span class="token comment">// 同一个包内可见</span>
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
<span class="token punctuation">)</span>

<span class="token comment">// 导入包或第三方包</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// main函数叫做入口函数，go约定main函数必须在main包中定义</span>
	<span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>
		<span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span>
		<span class="token string">"b"</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>
		<span class="token string">"c"</span><span class="token punctuation">:</span> <span class="token number">33</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意：map的key是无序的，不用从遍历的结果来推测其内部顺序</strong></p>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>Go的标准库提供了sort库，用来给线性数据结构排序、二分查找</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 切片排序</span>
<span class="token comment">// 针对int、string有快捷方法Ints、Strings</span>
a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span>
<span class="token comment">// sort.Sort(sort.IntSlice(a)) // sort.IntSlice(a)强制类型转换以施加接口方法</span>
sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment">// 就地修改原切片的底层数组</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 默认升序</span>
b <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"xyz"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"Ab"</span><span class="token punctuation">,</span> <span class="token string">"X"</span><span class="token punctuation">&#125;</span>
sort<span class="token punctuation">.</span><span class="token function">Strings</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token comment">// 降序</span>
sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span>sort<span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span>sort<span class="token punctuation">.</span><span class="token function">IntSlice</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 二分查找</span>
a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span>
sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token comment">// 二分查找，必须是升序</span>
<span class="token comment">// 二分查找的前提是 有序</span>
i <span class="token operator">:=</span> sort<span class="token punctuation">.</span><span class="token function">SearchInts</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>思考：什么是相同的key？hash值相同则key一定相同吗？冲突的key有什么异同？</p>
<p>有冲突的key就是相同的key吗？也就是说，如果2个key计算的hash值相同就是同一个key吗？key计算的hash值相同只能说明hash冲突，如果key也相等，才能说明是用一个key。同一个key计算的hash值一定一样，但是hash冲突不一定是同一个key</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang线性表-数组、切片</title>
    <url>/2023/02/12/Golang%E7%BA%BF%E6%80%A7%E8%A1%A8-%E6%95%B0%E7%BB%84%E3%80%81%E5%88%87%E7%89%87/</url>
    <content><![CDATA[<h1 id="线性表-数组、切片"><a href="#线性表-数组、切片" class="headerlink" title="线性表-数组、切片"></a>线性表-数组、切片</h1><h3 id="一、数据结构"><a href="#一、数据结构" class="headerlink" title="一、数据结构"></a>一、数据结构</h3><h5 id="1、数值处理"><a href="#1、数值处理" class="headerlink" title="1、数值处理"></a>1、数值处理</h5><h6 id="取整"><a href="#取整" class="headerlink" title="取整"></a>取整</h6><pre class="line-numbers language-go" data-language="go"><code class="language-go">	<span class="token comment">// 整除</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token comment">// 向上取整</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Ceil</span><span class="token punctuation">(</span><span class="token number">2.01</span><span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Ceil</span><span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Ceil</span><span class="token punctuation">(</span><span class="token number">2.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.01</span><span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">// 向下取整</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Floor</span><span class="token punctuation">(</span><span class="token number">2.31</span><span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Floor</span><span class="token punctuation">(</span><span class="token number">2.54</span><span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Floor</span><span class="token punctuation">(</span><span class="token number">2.99</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.31</span><span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.54</span><span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.99</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">// 四舍五入</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Round</span><span class="token punctuation">(</span><span class="token number">3.44449</span><span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Round</span><span class="token punctuation">(</span><span class="token number">3.9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Round</span><span class="token punctuation">(</span><span class="token number">3.555</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.44449</span><span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.555</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 输出结果为：</span>
<span class="token number">1</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token number">3</span> <span class="token number">3</span> <span class="token number">3</span>
<span class="token operator">-</span><span class="token number">2</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">-</span><span class="token number">2</span>
~~~~~~~~~~~~~~~~
<span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span>
<span class="token operator">-</span><span class="token number">3</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">-</span><span class="token number">3</span>
~~~~~~~~~~~~~~~~
<span class="token number">3</span> <span class="token number">4</span> <span class="token number">4</span>
<span class="token operator">-</span><span class="token number">3</span> <span class="token operator">-</span><span class="token number">4</span> <span class="token operator">-</span><span class="token number">4</span>
~~~~~~~~~~~~~~~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>&#x2F;整除除法，截取整数部分</li>
<li>math.Ceil向上取整</li>
<li>math.Floor向下取整</li>
<li>math.Round 四舍五入</li>
</ul>
<h5 id="其他数值处理"><a href="#其他数值处理" class="headerlink" title="其他数值处理"></a>其他数值处理</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                               <span class="token comment">// 绝对值</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>E<span class="token punctuation">,</span> math<span class="token punctuation">.</span>Pi<span class="token punctuation">)</span>                              <span class="token comment">// 常数</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>MaxInt16<span class="token punctuation">,</span> math<span class="token punctuation">.</span>MinInt16<span class="token punctuation">)</span>                 <span class="token comment">// 常量，极值</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Log10</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Log2</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// 对数</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Min</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment">// 最大值、最小值</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Pow10</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// 幂</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Mod</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span>                          <span class="token comment">// 取模</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 开方</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="标准输入"><a href="#标准输入" class="headerlink" title="标准输入"></a>标准输入</h5><p>Scan：空表字符分割，回车提交。换行当做空白字符</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">var</span> n <span class="token builtin">int</span>
 <span class="token keyword">var</span> err <span class="token builtin">error</span>
 <span class="token keyword">var</span> word1<span class="token punctuation">,</span> word2 <span class="token builtin">string</span>
 fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"Plz input two words: "</span><span class="token punctuation">)</span>
 n<span class="token punctuation">,</span> err <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>word1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>word2<span class="token punctuation">)</span> <span class="token comment">// 控制台输入时，单词之间空白字符分割</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T %s, %T %s\n"</span><span class="token punctuation">,</span> word1<span class="token punctuation">,</span> word1<span class="token punctuation">,</span> word2<span class="token punctuation">,</span> word2<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
 <span class="token keyword">var</span> i1<span class="token punctuation">,</span> i2 <span class="token builtin">int</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Plz input two ints: "</span><span class="token punctuation">)</span>
 n<span class="token punctuation">,</span> err <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i2<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T %[1]d, %T %[2]d"</span><span class="token punctuation">,</span> i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果少一个数据，Scan就会阻塞；如果输入数据多了，等下回Scan读取。例如，一次性输入a b 1 2看看效果。</p>
<p>Scanf：读取输入，按照格式匹配解析。如果解析失败，立即报错，那么就会影响后面的Scanf。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">var</span> n <span class="token builtin">int</span>
 <span class="token keyword">var</span> err <span class="token builtin">error</span>
 <span class="token keyword">var</span> name <span class="token builtin">string</span>
 <span class="token keyword">var</span> age <span class="token builtin">int</span>
 fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"Plz input your name and age: "</span><span class="token punctuation">)</span>
 n<span class="token punctuation">,</span> err <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%s %d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">)</span> <span class="token comment">// 这里要有\n以匹配回车</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
 <span class="token keyword">var</span> weight<span class="token punctuation">,</span> height <span class="token builtin">int</span>
 fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"weight and height: "</span><span class="token punctuation">)</span>
 <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>weight<span class="token punctuation">,</span> <span class="token operator">&amp;</span>height<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T %[1]d, %T %[2]d"</span><span class="token punctuation">,</span> weight<span class="token punctuation">,</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>fmt.Scanf(“%s,%d”, &amp;name, &amp;age) 中%s会和后面的非空白字符分不清楚，用 abc,20 是匹配不上的，因为除空白字符外，都可以看做是字符串。所以，建议格式字符串中，一律使用空格等空白字符分割。</p>
<h3 id="二、线性数据结构"><a href="#二、线性数据结构" class="headerlink" title="二、线性数据结构"></a>二、线性数据结构</h3><p>线性表：</p>
<ul>
<li>线性表（简称表）：是一种抽象的概念，是一组元素的序列的抽象，它由又穷个元素组成（0个或任意个）</li>
</ul>
<p>物理实现有两种方式：</p>
<ul>
<li><strong>顺序表</strong>：使用一大块连续的内存顺序存储表中的元素，这样的表称为顺序表，或成为连续表（go语言中的数组）<ul>
<li>在顺序表中，元素的关系使用顺序表的存储顺序自然的表示</li>
<li>顺序表需要开辟连续的内存空间，变量指向顺序表的第一个元素地址</li>
<li>变量指向顺序表A&#x3D;[1,2,3,4,5] A这个标识符指向数组的首地址，每个元素占用空间一样大</li>
</ul>
</li>
</ul>
<p>从CRUD的方面来分析：</p>
<ul>
<li>C：create<ul>
<li>容器元素个数+1</li>
<li>append如同排队，在队尾增加</li>
<li>insert<ul>
<li>中间增加，把当前位置与其后所有元素向后移动</li>
<li>尾部增加，就相当于append</li>
<li>开头增加，所有元素向后移动</li>
<li>挪动数据是要消耗时间，挪动的元素越多（规模越大），代价也就越大</li>
</ul>
</li>
</ul>
</li>
<li>D：delete<ul>
<li>容器元素个数-1</li>
<li>队尾移除pop，影响最小</li>
<li>中间移除remove<ul>
<li>如果是队尾，就相当于pop</li>
<li>中间移除，后面的数据都向前移动</li>
<li>开头删除，所有元素向前移动</li>
</ul>
</li>
</ul>
</li>
<li>U：update<ul>
<li>元素个数len不变</li>
<li>首先定位需要修改的元素</li>
<li>更新内容</li>
</ul>
</li>
<li>R：read<ul>
<li>定位元素：首地址 + 该类型的字节数 * 偏移量</li>
<li>偏移，所以定位要用索引计算得到元素的内存地址，不用遍历，效率极高。如果使用内容定位，内容比较，就需要遍历的方式查找，效率低下</li>
<li>获取内容：使用索引定位直接该位置，拿走内容</li>
<li>遍历：容器的元素，不管有没有顺序，都需要不重复的将元素挨个摸一遍，首地址开始挨个偏移取内容</li>
</ul>
</li>
</ul>
<p>前提：要看数据规模，如果数据规模小，随意使用，顺序表适合在尾部增删，且有扩容问题。</p>
<ul>
<li><strong>链接表</strong>：每一个元素存储在内存中，但是元素并不是连续的的存储在内存中，散落在内存的不同位置，前一个元素指向下一个元素（链接），head首部元素，tail尾部元素<ul>
<li>链表是个容器，可以放元素，不需要实现开辟内存</li>
<li>单项链表：前一个元素指向下一个元素</li>
<li>双向链表：前一个元素指向下一个元素，下一个元素也指向上一个元素</li>
<li>列表（List）往往都是链表实现。python例外</li>
</ul>
</li>
</ul>
<p>从CRUD的方面来分析：</p>
<ul>
<li>C：create<ul>
<li>容器元素个数+1</li>
<li>尾部追加，原来的尾巴指向新尾巴，容器改tail指向，没有数据挪动，速度很快</li>
<li>中间插入，断开原来的链接，分别和新元素拉手，没有数据挪动，代价不大</li>
<li>首部插入，原来的头和新头互指，当前head的下一个元素，成为新head，删除旧head元素</li>
</ul>
</li>
<li>D：delete<ul>
<li>容器元素个数 -1</li>
<li>尾部删除：用tail定位尾巴，删除当前尾巴，当前尾巴的前一个称为新tail，删除旧tail元素</li>
<li>中间删除：遍历定位，当前元素删除，前驱、后继拉手即可</li>
<li>首部删除：用head定位首部，当前head的下一个元素，成为新head，删除旧head元素</li>
</ul>
</li>
<li>R：read<ul>
<li>定位元素：<ul>
<li>有索引，使用索引定位，由于元素散落在内存中，不能使用顺序表的公式来定位，找到开头，依次编索引，按照遍历元素的方式来找的，但是取的每一个节点中保存的下一个地址，使用该地址定位下一个元素，和顺序表比起来，略慢，但是由于都是使用地址，效率还不错。</li>
<li>使用内容定位，需要遍历查找，效率低下</li>
<li>获取内容：定位到了，取走内容即可</li>
</ul>
</li>
</ul>
</li>
<li>U：update<ul>
<li>元素个数len不变</li>
<li>定位问题</li>
<li>更新内容</li>
</ul>
</li>
</ul>
<p>链接表在规模大时，如果增删发生在中间或头部（可以包括尾部），链接表比较适合，因为他不需要扩容，找到一个内存中能放当前元素即可，然后修改指向（链接地址）</p>
<p>数组等类型，如同地铁站排好的队伍，有序，可以插队、离队，可以索引。</p>
<p>链表，如同操场上手拉手的小朋友，有序，但排列随意，或者可以想象成一串带线的珠子，随意盘方在桌上。也可以离队、插队，也可以索引。</p>
<h3 id="三、数组"><a href="#三、数组" class="headerlink" title="三、数组"></a>三、数组</h3><p>数组是由顺序表实现，容器不可变，可以索引，是值类型，容器的元素个数定义后就不能变了。数组必须给出长度，以后数组这个容器就不能增删元素，不能扩容了。</p>
<p>数组的内存结构：</p>
<p>数组的地址就是数组内第一个元素的内存地址</p>
<p>每个元素占用的空间看元素类型，int动态类型，看cpu架构，32位就是4字节，64位就是8字节。</p>
<p>一个元素占用几个字节和类型有关，第一个元素后面一定是第二个元素的存储单元，顺序表</p>
<p>字符串字面常来那个，一旦定义就不可改变，但是不同的字符串长度不一，数组采用string为元素，元素的存储空间间隔一样，都是16字节(字符串在go语言中也是个结构体，指向字符串的指针为byte类型也就是uint8，占用8字节，字符串长度为int，也占用8字节)，说明字符串更复杂。（<strong>16字节中其实是放的指向字符串的指针，而并不是字符串本身！</strong>）</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 注意下面2种区别</span>
<span class="token keyword">var</span> a0 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>                   <span class="token comment">// 零值初始化3个元素的数组</span>
<span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>               <span class="token comment">// 零值初始化3个元素的数组</span>

<span class="token comment">// [3]int是类型，[3]int&#123;&#125; 是字面量值</span>
<span class="token keyword">var</span> a2 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span> <span class="token comment">// 声明且初始化，不推荐，啰嗦</span>
<span class="token keyword">var</span> a3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span>        <span class="token comment">// 声明且初始化，推荐</span>
count <span class="token operator">:=</span> <span class="token number">3</span>
a4 <span class="token operator">:=</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span> <span class="token comment">// 错误的长度类型，必须是常量，换成const</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span> a3<span class="token punctuation">)</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token number">3</span>
a4 <span class="token operator">:=</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span> <span class="token comment">// 正确</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span> a3<span class="token punctuation">,</span> a4<span class="token punctuation">)</span>
a5 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">&#125;</span> <span class="token comment">// ...让编译器确定当前数组大小</span>
a6 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">&#125;</span>       <span class="token comment">// 顺序初始化前面的，其余用零值填充</span>
a7 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span> <span class="token comment">// 指定索引位置初始化，其余用零值填充</span>
<span class="token comment">// 二维数组</span>
a8 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 两行三列 [[100 0 0] [0 0 0]]</span>
<span class="token comment">// [[10 0 0] [11 12 0] [13 14 15] [16 0 0]]</span>
<span class="token comment">// 多维数组，只有第一维才能用...推测</span>
<span class="token comment">// 第一维有4个，第二维有3个。可以看做4行3列的表</span>
a9 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="长度和容量"><a href="#长度和容量" class="headerlink" title="长度和容量"></a>长度和容量</h5><ul>
<li>cap即capacity，容量，表示给数组分配的内存空间可以容纳多少个元素</li>
<li>len即length，长度，指的是容器中目前有几个元素</li>
</ul>
<p>由于数组创建时就必须确定元素的个数，且不能改变长度，所以不需要预留多余的内存空间，因此cap和len对数组来说相等。</p>
<h5 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h5><p>Go语言不支持负索引，通过[index]来获取该位置上的值。索引范围就是[0,长度-1]</p>
<h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go">a5 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">&#125;</span>
a5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h5><ul>
<li>索引遍历</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">a1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>for-range遍历</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> i<span class="token punctuation">,</span> i2 <span class="token operator">:=</span> <span class="token keyword">range</span> a1 <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i2<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go">	<span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token comment">// 内存开辟空间存放长度为3的数组，零值填充</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%p %p %v \n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
	a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%p %p %v \n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
<span class="token comment">//输出结果</span>
<span class="token number">0</span> <span class="token number">0</span> <span class="token number">0x1400001c090</span>
<span class="token number">1</span> <span class="token number">0</span> <span class="token number">0x1400001c098</span>
<span class="token number">2</span> <span class="token number">0</span> <span class="token number">0x1400001c0a0</span>
<span class="token number">0x1400001c090</span> <span class="token number">0x1400001c090</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span> 
<span class="token number">0x1400001c090</span> <span class="token number">0x1400001c090</span> <span class="token punctuation">[</span><span class="token number">1000</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>数组必须在编译时就确定大小，之后不能改变大小</li>
<li>数组第一个元素的地址就是数组地址</li>
<li>所有元素一个接一个顺序存储在内存中</li>
<li>元素的值可以以改变，但是元素地址不变</li>
</ul>
<p>上面每个元素间隔8个字节，正好64位，符合int类型定义</p>
<p>如果数据元素是字符串类型呢？</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">	<span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span>  <span class="token comment">// 内存开辟空间存放长度为3的数组</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%p %p %v \n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
	a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"oooooooooo"</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%p %p %v \n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
<span class="token comment">// 运行结果</span>
<span class="token number">0</span>  <span class="token number">0x1400006c180</span>
<span class="token number">1</span>  <span class="token number">0x1400006c190</span>
<span class="token number">2</span>  <span class="token number">0x1400006c1a0</span>
<span class="token number">0x1400006c180</span> <span class="token number">0x1400006c180</span> <span class="token punctuation">[</span>  <span class="token punctuation">]</span> 
<span class="token number">0x1400006c180</span> <span class="token number">0x1400006c180</span> <span class="token punctuation">[</span>ss  <span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>数组首地址就是数组地址</li>
<li>所有元素顺序存储在内存中</li>
<li>元素的值可以改变，但是元素地址不变</li>
</ul>
<h5 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a><strong>值类型</strong></h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">showAddr</span><span class="token punctuation">(</span>arr <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"arr = %v  %p\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">)</span>
	<span class="token keyword">return</span> arr
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	a1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a1 = %v ,%p\n"</span><span class="token punctuation">,</span> a1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a1<span class="token punctuation">)</span>
	a2 <span class="token operator">:=</span> a1
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a2 = %v ,%p\n"</span><span class="token punctuation">,</span> a2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a2<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
	a3 <span class="token operator">:=</span> <span class="token function">showAddr</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a3 = %v ,%p\n"</span><span class="token punctuation">,</span> a3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a3<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 输出结果</span>
a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span> <span class="token number">30</span> <span class="token number">50</span><span class="token punctuation">]</span> <span class="token punctuation">,</span><span class="token number">0x140000c0018</span>
a2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span> <span class="token number">30</span> <span class="token number">50</span><span class="token punctuation">]</span> <span class="token punctuation">,</span><span class="token number">0x140000c0048</span>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span> <span class="token number">30</span> <span class="token number">50</span><span class="token punctuation">]</span>  <span class="token number">0x140000c0090</span>
a3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span> <span class="token number">30</span> <span class="token number">50</span><span class="token punctuation">]</span> <span class="token punctuation">,</span><span class="token number">0x140000c0078</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到a1、a2、a3、a4的地址都不一样，看最后a2 :&#x3D;a1之后两个变量地址也不一样。</p>
<p>这说明go语言在这些地方对数组进行了值拷贝，都生成了一份副本。</p>
<h3 id="四、切片"><a href="#四、切片" class="headerlink" title="四、切片"></a>四、切片</h3><ul>
<li>容量可变</li>
<li>内容可变</li>
<li>引用类型，和值类型有区别</li>
<li>底层基于数组，依赖于顺序表，表现得也像个可变容量和长度顺序表</li>
</ul>
<p>####### 内存模型</p>
<ul>
<li>组合结构<ul>
<li>1、底层数组，数组容量不可变，元素内容可变</li>
<li>2、slice head标头值或descriptor描述符</li>
</ul>
</li>
</ul>
<p>切片本质是对底层数组一个<strong>连续片段</strong>的引用。此片段可以是整个底层数组，也可以是由起始和终止索引标识的一些项的子集</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> slice <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	array unsafe<span class="token punctuation">.</span>Pointer  <span class="token comment">//指针，指向低层数组点的首地址</span>
	<span class="token builtin">len</span>   <span class="token builtin">int</span>    <span class="token comment">// 当前切片的长度</span>
	<span class="token builtin">cap</span>   <span class="token builtin">int</span>    <span class="token comment">//当前切片的容量</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面三个结构体的属性都是小写，所以包外不可见。len函数取的就是len属性，cap取得就是cap属性</p>
<p>指针可以通过取底层数组的第一个元素的地址，即切片第一个元素的地址</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">	a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v, %p  %p"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">//输出</span>
<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0x1400000c030</span>  <span class="token number">0x1400001a020</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>&amp;a 是切片结构体的地址，&amp;a[0]是底层数组的地址。</p>
<p><img src="/images/28TXXYbu3gsTwGy68ynN8cZubdHgBOHGzM6_BtuHWn0.png" alt="image"></p>
<p>####### 切片定义</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> s1 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>   <span class="token comment">// 长度、容量都为0的切片，零值</span>
<span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 长度、容量都为0的切片，字面量定义</span>
<span class="token keyword">var</span> s3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span> <span class="token comment">//长度、容量都为3点的切片</span>
<span class="token keyword">var</span> s4 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 长度、容量都为0的切片，make([]T,length)</span>
<span class="token keyword">var</span> s5 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 长度为1，容量为5，底层数组长度为5，元素长度为1，所以显示[0]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="切片删除（伪删除）"><a href="#切片删除（伪删除）" class="headerlink" title="切片删除（伪删除）"></a>切片删除（伪删除）</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Remove</span><span class="token punctuation">(</span>slice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> index <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> slice<span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    slice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span>
    index <span class="token operator">:=</span> <span class="token number">2</span>
    slice <span class="token operator">=</span> <span class="token function">Remove</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> index<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span>
<span class="token comment">// 在上述代码中，Remove函数的参数包括一个整型切片“slice”和一个索引值“index”，表示需要删除的元素在切片中的位置。接着，我们使用“append”函数的特性来实现删除操作：首先将“slice”切片中的前半部分（从0到“index”-1）和后半部分（从“index”+1到切片的末尾）连接起来，返回一个新的切片作为最终结果。通过将这个新的切片赋值给“slice”，就实现了删除操作。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>####### 追加<br>append：在切片的尾部追加元素，长度加1</p>
<p>增加元素后，有可能超过当前容量，导致切片扩容。</p>
<h4 id="长度和容量-1"><a href="#长度和容量-1" class="headerlink" title="长度和容量"></a><strong>长度和容量</strong></h4><pre class="line-numbers language-go" data-language="go"><code class="language-go">s1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s1 %p %p len=%d cap=%d  %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span>
s2 <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s2 %p %p len=%d cap=%d  %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s1 %p %p len=%d cap=%d  %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">目前还没有超过容量，底层共用一个数组，但是，对底层数组使用的片段不一样
s1 <span class="token number">0x1400000c030</span> <span class="token number">0x140000141b0</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">3</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>  <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span>
s2 <span class="token number">0x1400000c060</span> <span class="token number">0x140000141b0</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">4</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>  <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">4</span><span class="token punctuation">]</span>
s1 <span class="token number">0x1400000c030</span> <span class="token number">0x140000141b0</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">3</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>  <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


<pre class="line-numbers language-go" data-language="go"><code class="language-go">	s1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s1 %p %p len=%d cap=%d  %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span>
	s2 <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s2 %p %p len=%d cap=%d  %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span>
	s3 <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token comment">// 因为没有超过最大容量，所以还是共用底层数组，那么s3基于s1增加元素就是在[0,0,0]上增加-1，底层数组的值就为[0,0,0,-1]</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s3 %p %p len=%d cap=%d  %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span> s3<span class="token punctuation">)</span>
        <span class="token comment">// 因为是共用底层数组所以上面的第四个元素值为-1,所以s2得第四个元素也被修改成-1</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s2 %p %p len=%d cap=%d  %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span>
<span class="token comment">// 输出</span>
s1 <span class="token number">0x1400000c030</span> <span class="token number">0x140000141b0</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">3</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>  <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span>
s2 <span class="token number">0x1400000c060</span> <span class="token number">0x140000141b0</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">4</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>  <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">4</span><span class="token punctuation">]</span>
s3 <span class="token number">0x1400000c090</span> <span class="token number">0x140000141b0</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">4</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>  <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
s2 <span class="token number">0x1400000c060</span> <span class="token number">0x140000141b0</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">4</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>  <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>




<pre class="line-numbers language-go" data-language="go"><code class="language-go">	s1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s1 %p %p len=%d cap=%d  %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span>
	s2 <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s2 %p %p len=%d cap=%d  %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span>
	s3 <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s3 %p %p len=%d cap=%d  %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span> s3<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s2 %p %p len=%d cap=%d  %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span>
	s4 <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>s3<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s4 %p %p len=%d cap=%d  %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s4<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">,</span> s4<span class="token punctuation">)</span>
<span class="token comment">// 输出 可以看到，底层数组的地址经过扩容之后地址已经改变，说明已经是一个新的底层数组了</span>
s1 切片地址：<span class="token number">0x14000122018</span> 底层数组地址：<span class="token number">0x14000130030</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">3</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>  <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span>
s2 切片地址：<span class="token number">0x14000122048</span> 底层数组地址：<span class="token number">0x14000130030</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">4</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>  <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">4</span><span class="token punctuation">]</span>
s3 切片地址：<span class="token number">0x14000122078</span> 底层数组地址：<span class="token number">0x14000130030</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">4</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>  <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
s2 切片地址：<span class="token number">0x14000122048</span> 底层数组地址：<span class="token number">0x14000130030</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">4</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>  <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
s4 切片地址：<span class="token number">0x140001220c0</span> 底层数组地址：<span class="token number">0x14000138000</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">7</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">10</span>  <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>append一定返回一个新的切片</li>
<li>append可以增加若干元素<ul>
<li>如果增加元素时，当前长度+新增个数 &lt;&#x3D;cap 则不扩容<ul>
<li>原切片使用原来的底层数组，返回的新切片也使用这个底层数组</li>
<li>返回的新切片有新的长度</li>
<li>原切片长度不变</li>
</ul>
</li>
<li>如果增加元素时，当前长度+新增个数 &gt; cap 则需要扩容底层数组<ul>
<li>生成新的底层数组，新生成的切片使用新数组，将旧元素复制到新数组，在其后增加新元素</li>
<li>原切片底层数组、长度、容量不变</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>####### 底层库容策略<br><a href="https://go.dev/src/runtime/slice.go">https://go.dev/src/runtime/slice.go</a></p>
<p>（老版本）实际上，当扩容后的cap&lt;1024时，扩容是以翻倍的形式，容量变成之前的2倍，如之前容量是10，扩容后容量变成20；当cap&gt;&#x3D;1024时，变成之前的1.25倍，如之前容量是10，扩容后变成12.5</p>
<p>（新版本1.18+） 阈值变成了256，当扩容后的cap&lt;256时，扩容翻倍，容量变成之前的2倍；当cap&gt;&#x3D;256时，<code>newcap += (newcap + 3*threshold) / 4 计算后就是 newcap = newcap +newcap/4 + 192 </code>，即1.25倍后再加192。</p>
<p>扩容是创建新的内部数组，把原内存数据拷贝到新内存空间，然后在新内存空间上执行元素追加操作。</p>
<p>切片频繁库容成本非常高，所以尽量估算出使用的大小，一次性给够，建议用make，常用<code>make([]int,0,100)</code> </p>
<h5 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a><strong>引用类型</strong></h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">showAddr</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s %p, %p, %d, %d, %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
 <span class="token comment">// 修改一个元素</span>
 <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
 s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span>
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">return</span> s <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 s1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s1 %p, %p, %d, %d, %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span>
 s2 <span class="token operator">:=</span> s1
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s2 %p, %p, %d, %d, %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
 s3 <span class="token operator">:=</span> <span class="token function">showAddr</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s1 %p, %p, %d, %d, %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s2 %p, %p, %d, %d, %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s3 %p, %p, %d, %d, %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span> s3<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
运行结果
s1 <span class="token number">0xc000008078</span><span class="token punctuation">,</span> <span class="token number">0xc0000101b0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span> <span class="token number">20</span> <span class="token number">33</span><span class="token punctuation">]</span>
s2 <span class="token number">0xc0000080a8</span><span class="token punctuation">,</span> <span class="token number">0xc0000101b0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span> <span class="token number">20</span> <span class="token number">33</span><span class="token punctuation">]</span>
~~~~~~~~~~~~~~~~~~~~~~~~~~~
s  <span class="token number">0xc0000080f0</span><span class="token punctuation">,</span> <span class="token number">0xc0000101b0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span> <span class="token number">20</span> <span class="token number">33</span><span class="token punctuation">]</span>
s1 <span class="token number">0xc000008078</span><span class="token punctuation">,</span> <span class="token number">0xc0000101b0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">123</span> <span class="token number">20</span> <span class="token number">33</span><span class="token punctuation">]</span>
s2 <span class="token number">0xc0000080a8</span><span class="token punctuation">,</span> <span class="token number">0xc0000101b0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">123</span> <span class="token number">20</span> <span class="token number">33</span><span class="token punctuation">]</span>
s3 <span class="token number">0xc0000080d8</span><span class="token punctuation">,</span> <span class="token number">0xc0000101b0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">123</span> <span class="token number">20</span> <span class="token number">33</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这说明，底层数组是同一份，修改切片中某个已有元素，那么所有切片都能看到。</p>
<p>那如果在上面showAddr函数中对切片增加一个元素会怎么样？</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">showAddr</span><span class="token punctuation">(</span>arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"arr 切片地址：%p 底层数组地址：%p len=%d cap=%d  %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
	arr <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">444</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"arr2 切片地址：%p 底层数组地址：%p len=%d cap=%d  %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>

	<span class="token comment">//if len(arr) > 0 &#123;</span>
	<span class="token comment">//	arr[0] = 22222</span>
	<span class="token comment">//&#125;</span>
	<span class="token keyword">return</span> arr
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">//a := []int&#123;1, 3, 5, 6&#125;</span>
	<span class="token comment">//fmt.Printf("%v, %p  %p", a, &amp;a, &amp;a[0])</span>
	s1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s1 切片地址：%p 底层数组地址：%p len=%d cap=%d  %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span>
	s2 <span class="token operator">:=</span> s1
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s2 切片地址：%p 底层数组地址：%p len=%d cap=%d  %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
	s3 <span class="token operator">:=</span> <span class="token function">showAddr</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s1 切片地址：%p 底层数组地址：%p len=%d cap=%d  %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s2 切片地址：%p 底层数组地址：%p len=%d cap=%d  %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s3 切片地址：%p 底层数组地址：%p len=%d cap=%d  %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span> s3<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 输出</span>
s1 切片地址：<span class="token number">0x14000116018</span> 底层数组地址：<span class="token number">0x1400012a018</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">3</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">3</span>  <span class="token punctuation">[</span><span class="token number">10</span> <span class="token number">20</span> <span class="token number">33</span><span class="token punctuation">]</span>
s2 切片地址：<span class="token number">0x14000116048</span> 底层数组地址：<span class="token number">0x1400012a018</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">3</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">3</span>  <span class="token punctuation">[</span><span class="token number">10</span> <span class="token number">20</span> <span class="token number">33</span><span class="token punctuation">]</span>
~~~~~~~~~~~~~~~~
arr 切片地址：<span class="token number">0x14000116090</span> 底层数组地址：<span class="token number">0x1400012a018</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">3</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">3</span>  <span class="token punctuation">[</span><span class="token number">10</span> <span class="token number">20</span> <span class="token number">33</span><span class="token punctuation">]</span>
arr2 切片地址：<span class="token number">0x14000116090</span> 底层数组地址：<span class="token number">0x14000126060</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">5</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">6</span>  <span class="token punctuation">[</span><span class="token number">10</span> <span class="token number">20</span> <span class="token number">33</span> <span class="token number">444</span> <span class="token number">222</span><span class="token punctuation">]</span>
s1 切片地址：<span class="token number">0x14000116018</span> 底层数组地址：<span class="token number">0x1400012a018</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">3</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">3</span>  <span class="token punctuation">[</span><span class="token number">10</span> <span class="token number">20</span> <span class="token number">33</span><span class="token punctuation">]</span>
s2 切片地址：<span class="token number">0x14000116048</span> 底层数组地址：<span class="token number">0x1400012a018</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">3</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">3</span>  <span class="token punctuation">[</span><span class="token number">10</span> <span class="token number">20</span> <span class="token number">33</span><span class="token punctuation">]</span>
s3 切片地址：<span class="token number">0x14000116078</span> 底层数组地址：<span class="token number">0x14000126060</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">5</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">6</span>  <span class="token punctuation">[</span><span class="token number">10</span> <span class="token number">20</span> <span class="token number">33</span> <span class="token number">444</span> <span class="token number">222</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>可以看到showAddr传入s1，但是返回的s3已经和s1不共用一个底层数组了。</p>
<p>其实这里还是值拷贝，不过拷贝的是切片的标头值(Header)。标头值内指针也被复制，刚复制完大家指向同一个底层数组罢了，但是一旦操作切片时扩容了，或另一个切片增加元素，那么就不能简单归结为“切片”是引用类型，拷贝了地址“这样来解释”</p>
<p><strong>GO语言中全部都是值传递，整型、数组这样的类型的值是完全复制，slice、map、channel、interface、function这样的引用类型也是值拷贝，不过复制的是标头值。</strong></p>
<h5 id="截取子切片"><a href="#截取子切片" class="headerlink" title="截取子切片"></a>截取子切片</h5><p>切片可以通过指定索引区间获得一个子切片，格式为slice[start:end]，规则就是前包后不包</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 s1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">&#125;</span> <span class="token comment">// 容量、长度为5，索引0、1、2、3、4</span>
 <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d : addr = %p\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s1 %p, %p, l=%-2d, c=%-2d, %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span>
 s2 <span class="token operator">:=</span> s1 <span class="token comment">// 和s1共用底层数组  [10,30,50,70,90] </span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s2 %p, %p, l=%-2d, c=%-2d, %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span>
 s3 <span class="token operator">:=</span> s1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment">// 和s1共用底层数组，从头到尾元素都要</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s3 %p, %p, l=%-2d, c=%-2d, %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span> s3<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
 s4 <span class="token operator">:=</span> s1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment">// 掐头，容量、长度都为4，首地址偏移1个元素，共用底层数组,[30,50,70,90]</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s4 %p, %p, l=%-2d, c=%-2d, %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s4<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">,</span> s4<span class="token punctuation">)</span>
 s5 <span class="token operator">:=</span> s1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment">// 掐头去尾，容量为4，长度为3，首地址偏移1个元素，共用底层数组,[30,50,70]</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s5 %p, %p, l=%-2d, c=%-2d, %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s5<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">,</span> s5<span class="token punctuation">)</span>
 s6 <span class="token operator">:=</span> s1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment">// 去尾，容量为5，长度为4，首地址不变，共用底层数组 [10,30,50,70]</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s6 %p, %p, l=%-2d, c=%-2d, %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s6<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s6<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s6<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s6<span class="token punctuation">)</span><span class="token punctuation">,</span> s6<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
 s7 <span class="token operator">:=</span> s1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">// 首地址偏移1个元素，长度为0，容量为4，共用底层数组  []</span>
 <span class="token comment">// fmt.Printf("s7 %p, %p, l=%-2d, c=%-2d, %v\n", &amp;s7, &amp;s7[0], len(s7), cap(s7), s7) // 由于长度为0，所以不能s7[0]报错</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s7 %p, l=%-2d, c=%-2d, %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s7<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s7<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s7<span class="token punctuation">)</span><span class="token punctuation">,</span> s7<span class="token punctuation">)</span>
 <span class="token comment">// s7 = append(s7, 111) // 请问，为s7增加一个元素，s1、s7分别是什么？ </span>
 <span class="token comment">// fmt.Printf("s1 %p, %p, l=%-2d, c=%-2d, %v\n", &amp;s1, &amp;s1[0], len(s1), cap(s1), s1) [10,111,50,70,90]</span>
 <span class="token comment">// fmt.Printf("s7 %p, %p, l=%-2d, c=%-2d, %v\n", &amp;s7, &amp;s7[0], len(s7), cap(s7), s7) [111]</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
 s8 <span class="token operator">:=</span> s1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment">// 首地址偏移4个元素，长度为0，容量为1，因为最后一个元素没在切片中，共用底层数组  []</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s8 %p, l=%-2d, c=%-2d, %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s8<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s8<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s8<span class="token punctuation">)</span><span class="token punctuation">,</span> s8<span class="token punctuation">)</span>
 s9 <span class="token operator">:=</span> s1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment">// 首地址偏移5个元素，长度为0，容量为0，共用底层数组</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s9 %p, l=%-2d, c=%-2d, %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s9<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s9<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s9<span class="token punctuation">)</span><span class="token punctuation">,</span> s9<span class="token punctuation">)</span> <span class="token comment">// []</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
 s9 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s9<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment">// 增加元素会怎么样？s1、s9分别是什么？</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s1 %p, %p, l=%-2d, c=%-2d, %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span>  <span class="token comment">//[10,111,50,70,90]</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s9 %p, %p, l=%-2d, c=%-2d, %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s9<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s9<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s9<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s9<span class="token punctuation">)</span><span class="token punctuation">,</span> s9<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token comment">//[11]  这个是新数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面例子可以看出，切这个操作都是从同一个底层数组上取的段，所以子切片和原始切片共用同一个底层数组</p>
<ul>
<li>start默认为0，end默认为len(slice)即切片长度</li>
<li>通过指针确定底层数组从哪里开始共享</li>
<li>长度为end-start</li>
<li>容量是底层数组从便偏移的元素到结尾能容纳几个元素</li>
</ul>
<p><img src="/images/IYn3mikXQ-6q5ivRZQxaGgGu_s0wXPj4nrWK23IzVpU.png" alt="image"></p>
<p><strong>子切片操作不可能构造出一个新的底层数组！ 子切片本质上利用原来的切片的部分元素，共用一个底层数组，因此不会导致扩容。</strong></p>
<p>数组也可以切片，会生成新的切片。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	s1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d : addr = %p\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	s4 <span class="token operator">:=</span> s1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment">// 掐头，容量、长度都为4，首地址偏移1个元素，共用底层数组</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s4 %p, %p, l=%-2d, c=%-2d, %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s4<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">,</span> s4<span class="token punctuation">)</span>
	s4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">// s1、s4分别是什么？</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s1 %p, %p, l=%-2d, c=%-2d, %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s4 %p, %p, l=%-2d, c=%-2d, %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s4<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">,</span> s4<span class="token punctuation">)</span>

	s4 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s4<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span> <span class="token comment">// 是否扩容？会怎样？</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s1 %p, %p, l=%-2d, c=%-2d, %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s4 %p, %p, l=%-2d, c=%-2d, %v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s4<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">,</span> s4<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 输出</span>
<span class="token number">0</span> <span class="token punctuation">:</span> addr <span class="token operator">=</span> <span class="token number">0x140000ae030</span>
<span class="token number">1</span> <span class="token punctuation">:</span> addr <span class="token operator">=</span> <span class="token number">0x140000ae038</span>
<span class="token number">2</span> <span class="token punctuation">:</span> addr <span class="token operator">=</span> <span class="token number">0x140000ae040</span>
<span class="token number">3</span> <span class="token punctuation">:</span> addr <span class="token operator">=</span> <span class="token number">0x140000ae048</span>
<span class="token number">4</span> <span class="token punctuation">:</span> addr <span class="token operator">=</span> <span class="token number">0x140000ae050</span>
s4 <span class="token number">0x140000a0018</span><span class="token punctuation">,</span> <span class="token number">0x140000ae038</span><span class="token punctuation">,</span> l<span class="token operator">=</span><span class="token number">4</span> <span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">4</span> <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span> <span class="token number">50</span> <span class="token number">70</span> <span class="token number">90</span><span class="token punctuation">]</span>
s1 <span class="token number">0x140000ae030</span><span class="token punctuation">,</span> <span class="token number">0x140000ae030</span><span class="token punctuation">,</span> l<span class="token operator">=</span><span class="token number">5</span> <span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">5</span> <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span> <span class="token number">100</span> <span class="token number">50</span> <span class="token number">70</span> <span class="token number">90</span><span class="token punctuation">]</span>
s4 <span class="token number">0x140000a0018</span><span class="token punctuation">,</span> <span class="token number">0x140000ae038</span><span class="token punctuation">,</span> l<span class="token operator">=</span><span class="token number">4</span> <span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">4</span> <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">100</span> <span class="token number">50</span> <span class="token number">70</span> <span class="token number">90</span><span class="token punctuation">]</span>
s1 <span class="token number">0x140000ae030</span><span class="token punctuation">,</span> <span class="token number">0x140000ae030</span><span class="token punctuation">,</span> l<span class="token operator">=</span><span class="token number">5</span> <span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">5</span> <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span> <span class="token number">100</span> <span class="token number">50</span> <span class="token number">70</span> <span class="token number">90</span><span class="token punctuation">]</span>
s4 <span class="token number">0x140000a0018</span><span class="token punctuation">,</span> <span class="token number">0x140000b0080</span><span class="token punctuation">,</span> l<span class="token operator">=</span><span class="token number">6</span> <span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">8</span> <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">100</span> <span class="token number">50</span> <span class="token number">70</span> <span class="token number">90</span> <span class="token number">11</span> <span class="token number">22</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>切片总结：</p>
<ul>
<li>使用slice[start:end] 表示切片，切片长度为end-start，前包后不包</li>
<li>start缺省，表示从索引0开始</li>
<li>end缺省，表示取到末尾，包含最后一个元素，特别注意这个缺省值是<strong>len(slice) 即切片长度，不是容量</strong><ul>
<li>a1[5:] 相当于 a1[5:len(a1)]</li>
</ul>
</li>
<li>start 和end都缺省，表示从头到尾</li>
<li>start和end同时给出，要求end &gt;&#x3D;start<ul>
<li>start、end<strong>最大都不可以超过容量值cap</strong></li>
<li>假设当前容量是8，长度为5，有以下情况<ul>
<li>a1[:] 共用底层数组，从头到尾所有元素都取，相当于对标头值的拷贝，也就是指针、长度、容量都一样</li>
<li>a1[:8]，可以，end最多写成8(因为后不包)，a1[:9]不可以。该切片长度、容量都为8，这8个元素都是原序列的，一旦append就扩容</li>
<li>a1[8:]，不可以，end缺省为当前长度5，等价于a1[8:5]</li>
<li>a1[8:8]，可以，但这个切片容量和长度都为0了。注意和a1[:8]的区别</li>
<li>a1[7:7]，可以，但这个切片长度为0，容量为1</li>
<li>a1[0:0]，可以，但这个切片长度为0，容量为8</li>
<li>a1[1:5]，可以，这个切片长度为4，容量为7，相当于跳过了原序列第一个元素</li>
</ul>
</li>
</ul>
</li>
<li>切片刚产生时，和原序列（数组、切片）开始共用同一个底层数组，但是<strong>每一个切片都自己独立保存着指针、cap和len</strong></li>
<li>一旦一个切片扩容，就和原来共用一个底层数组的序列分道扬镳。</li>
</ul>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang字符串</title>
    <url>/2023/02/13/Golang%E5%AD%97%E7%AC%A6%E4%B8%B2string/</url>
    <content><![CDATA[<h1 id="字符串string"><a href="#字符串string" class="headerlink" title="字符串string"></a>字符串string</h1><h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><p>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套单字节编码系统</p>
<p><strong>ASCII编码表：</strong></p>
<p>数字和字符映射表，包括了英文字符和标点，用一个字节表示256种状态，用低7位128种状态就够了，0~127，都有对应的字符，包括可见字符、不可见字符、控制字符等。剩下的128种状态，用来扩展ASCII、欧洲字符编码表Latin-x</p>
<p><strong>中文编码表：</strong></p>
<p>数字到中文单一字符映射，至少常用的3k~5k个汉字，一个字节不够放，汉字只能多个字节存储</p>
<p>2字节，65536种状态，GB2312、GBK（包含了GB2312）、GB18030、BIG 5码</p>
<p>所有编码表都兼容单字节的ASCII表，但是如果有一篇文章需要多语言存储，如何实现？</p>
<p><strong>UNICODE:</strong></p>
<ul>
<li>多字节编码表，一张编码表解决全球多数字符对应问题</li>
<li>表示汉字多数使用两个字节</li>
<li>Go中’x’ 方式，保存int32、rune整数型，%c打印通过unicode编码表找到字符输出</li>
</ul>
<p><strong>UTF-8：</strong></p>
<ul>
<li>多字节</li>
<li>汉字转为3个字节</li>
<li>utf8mb4包含表情符号</li>
<li>字符串，字符序列，每个汉字就是utf-8编码的，也就是汉字是3个字节</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">s2 <span class="token operator">:=</span> <span class="token string">"你好"</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//</span>
<span class="token comment">//输出[228 189 160 229 165 189]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<p><img src="/images/uk6XvIO7f5mrpwH2LAO7j8W_bKLuJQShRPZG0xiJTHs.png" alt="image"></p>
<table>
<thead>
<tr>
<th><strong>序号</strong></th>
<th><strong>转义字符</strong></th>
<th><strong>十进制数</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>\x00</td>
<td>0</td>
<td>NUll</td>
</tr>
<tr>
<td>2</td>
<td>\x09</td>
<td>9</td>
<td>\t</td>
</tr>
<tr>
<td>3</td>
<td>\x0a</td>
<td>10</td>
<td>\n</td>
</tr>
<tr>
<td>4</td>
<td>\x0d</td>
<td>13</td>
<td>\r</td>
</tr>
<tr>
<td>5</td>
<td>\x31</td>
<td>1</td>
<td>字符1</td>
</tr>
<tr>
<td>6</td>
<td>\x41</td>
<td>65</td>
<td>字符A</td>
</tr>
<tr>
<td>7</td>
<td>\x61</td>
<td>97</td>
<td>字符a</td>
</tr>
<tr>
<td>8</td>
<td>\x30~39</td>
<td>48~57</td>
<td>字符0~9</td>
</tr>
</tbody></table>
<p>上面的1是字符1</p>
<p>UTF-8、GBK都兼容了ASCII</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token string">"a\x09b\x0ac \x31\x20\x41\x61"</span> 表示什么？
<span class="token comment">// a\tb\nc 1 Aa</span>
<span class="token char">'A'</span> <span class="token operator">></span> <span class="token char">'a'</span>   谁大？字符比较
<span class="token comment">// 41 > 61 false</span>
<span class="token string">"a"</span> <span class="token operator">></span> <span class="token string">"A"</span>   谁大？字符串比较
<span class="token comment">// 61 > 41 true</span>
<span class="token string">"AA"</span> <span class="token operator">></span> <span class="token string">"Aa"</span> 谁大？
<span class="token comment">// AA &lt; Aa  因为A对应的ASCII表为41  a为61  会一个一个字符的比较</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="二、字符"><a href="#二、字符" class="headerlink" title="二、字符"></a>二、字符</h3><p>本质上说，计算机中一切都是字节的，字符串也是多个字节组合而成，就是多个字节形成的有序序列。但是对于多字节编程的中文来说，用一个字节描述不了，需要多个字节表示一个字符，Go提供了rune类型。</p>
<ul>
<li>byte：兼容ASCII码的字符，是byte类型，即uint8别名，占用一个字节</li>
<li>rune：汉字等字符，unicode编码，是rune类型，即int32类型，占用4个字节</li>
<li>一个字符字面量使用单引号引起来</li>
</ul>
<p>字符串与字节序列转换</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">s1 <span class="token operator">:=</span> <span class="token string">"abc"</span>
s2 <span class="token operator">:=</span> <span class="token string">"测试"</span> <span class="token comment">// 字符串用utf-8编码，每个汉字占用3个字节</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3, 6 字节 </span>
<span class="token comment">// 强制类型转换 string => []byte; string => []rune</span>
<span class="token comment">// 注意[]byte表示字节序列；[]rune表示rune序列</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [97 98 99] 字符'a' 对应的ascii码十进制为97，十六进制为\x61</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// rune int32 4字节，用unicode编码，兼容ascii码，所以值也为[97 98 99]</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// utf-8 bytes，长度为6即6个字节  // </span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// unicode切片，长度为2，每个元素4字节 </span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%x, %x"</span><span class="token punctuation">,</span> <span class="token number">27979</span><span class="token punctuation">,</span> <span class="token number">35797</span><span class="token punctuation">)</span>  <span class="token comment">// %x打印十六进制数</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
<span class="token comment">// []byte => string</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">&#123;</span><span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//将对应字节码转换成string，值为1Aa</span>
<span class="token comment">// []rune => string</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">rune</span><span class="token punctuation">&#123;</span><span class="token number">27979</span><span class="token punctuation">,</span> <span class="token number">35797</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// rune查unicode码，测试</span>
<span class="token comment">// rune使用unicode，但是字符串内部使用utf-8</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 索引取到了什么？</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">&#123;</span><span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">181</span><span class="token punctuation">,</span> <span class="token number">139</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 打印什么？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>string(一个整数)，强制转换为一个整数，相当于把整数当unicode码，取查一个字符，最后返回字符串</li>
<li>string(整数序列)，强制类型转换为一个整数序列，也是转换成字符串。</li>
</ul>
<h3 id="三、字符串"><a href="#三、字符串" class="headerlink" title="三、字符串"></a>三、字符串</h3><ul>
<li>字面常量，只读，不可变</li>
<li>线性数据结构，可以索引</li>
<li>值类型</li>
<li>utf-8编码</li>
</ul>
<h5 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h5><p>使用内建函数len，返回字符串占用的字节数。时间复杂度O(1)，字符串是字面常量，定义时已经知道长度，记录下来即可</p>
<h5 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h5><p>不支持负索引，索引范围[0,len(s)-1]</p>
<p>即使有中文，索引指的是<strong>按照<strong><strong>字节</strong></strong>的偏移量</strong></p>
<p>时间复杂度O(1)，使用索引计算该字符相对开头的偏移量即可。</p>
<p>对于顺序表，使用索引查找效率是最高的。</p>
<p>s[i]获取索引 i 处的UTF-8编码的一个字节</p>
<h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h5><p>C风格使用索引遍历，相当于字节遍历</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">	s <span class="token operator">:=</span> <span class="token string">"magedu马哥教育"</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//18个字节，中文占3个字节</span>
<span class="token comment">// C 风格使用索引遍历，相当于字节遍历，遍历出的元素类型为bytes字节</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T %[1]v\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token number">18</span>
<span class="token builtin">uint8</span> <span class="token number">109</span>
<span class="token builtin">uint8</span> <span class="token number">97</span>
<span class="token builtin">uint8</span> <span class="token number">103</span>
<span class="token builtin">uint8</span> <span class="token number">101</span>
<span class="token builtin">uint8</span> <span class="token number">100</span>
<span class="token builtin">uint8</span> <span class="token number">117</span>
<span class="token builtin">uint8</span> <span class="token number">233</span>
<span class="token builtin">uint8</span> <span class="token number">169</span>
<span class="token builtin">uint8</span> <span class="token number">172</span>
<span class="token builtin">uint8</span> <span class="token number">229</span>
<span class="token builtin">uint8</span> <span class="token number">147</span>
<span class="token builtin">uint8</span> <span class="token number">165</span>
<span class="token builtin">uint8</span> <span class="token number">230</span>
<span class="token builtin">uint8</span> <span class="token number">149</span>
<span class="token builtin">uint8</span> <span class="token number">153</span>
<span class="token builtin">uint8</span> <span class="token number">232</span>
<span class="token builtin">uint8</span> <span class="token number">130</span>
<span class="token builtin">uint8</span> <span class="token number">178</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>for-range遍历，遍历的元素类型为字符</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// </span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i2 <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T %[1]v\n"</span><span class="token punctuation">,</span> i2<span class="token punctuation">,</span> i2<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token builtin">int32</span> <span class="token number">109</span>
<span class="token builtin">int32</span> <span class="token number">97</span>
<span class="token builtin">int32</span> <span class="token number">103</span>
<span class="token builtin">int32</span> <span class="token number">101</span>
<span class="token builtin">int32</span> <span class="token number">100</span>
<span class="token builtin">int32</span> <span class="token number">117</span>
<span class="token builtin">int32</span> <span class="token number">39532</span>
<span class="token builtin">int32</span> <span class="token number">21733</span>
<span class="token builtin">int32</span> <span class="token number">25945</span>
<span class="token builtin">int32</span> <span class="token number">32946</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="Strings库"><a href="#Strings库" class="headerlink" title="Strings库"></a>Strings库</h5><p>strings提供了大多数字符串操作函数，使用方便</p>
<p>注意：字符串是字面常量，不可以修改，很多操作都是返回新字符串。</p>
<h5 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h5><ul>
<li>Join：使用间隔符拼接字符串切片</li>
<li>Builder：多次拼接，推荐</li>
<li>fmt.Sprintf：方便快捷，推荐</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">a0 <span class="token operator">:=</span> <span class="token string">"dujiea"</span>
a1 <span class="token operator">:=</span> <span class="token string">"测试啊"</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s %p  %s  %p\n"</span><span class="token punctuation">,</span> a0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a0<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a1<span class="token punctuation">)</span>
       <span class="token comment">// 方式一：可以相同类型可以直接相加</span>
a2 <span class="token operator">:=</span> a0 <span class="token operator">+</span> a1
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s  %p\n"</span><span class="token punctuation">,</span> a2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a2<span class="token punctuation">)</span>
       <span class="token comment">// 方式二：join ，第一参数是一个字符串序列，第二参数是间隔符，意思是用什么间隔符将字符串序列中的元素拼接起来</span>
a3 <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>a0<span class="token punctuation">,</span> a1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"-------"</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------"</span><span class="token punctuation">)</span>
       <span class="token comment">// 方式三：可以进行多次拼接，还可以指定类型拼接，比如byte，string，rune</span>
<span class="token keyword">var</span> a4 strings<span class="token punctuation">.</span>Builder
a4<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span>
a4<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">"这是测试数据"</span><span class="token punctuation">)</span>
a4<span class="token punctuation">.</span><span class="token function">WriteRune</span><span class="token punctuation">(</span><span class="token number">27979</span><span class="token punctuation">)</span>
       <span class="token comment">// Write 可以指定字节序列</span>
a4<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">&#123;</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a4<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
       <span class="token comment">// 方式四：sprintf，返回一个新字符串</span>
d1 <span class="token operator">:=</span> <span class="token string">"haha"</span>
d2 <span class="token operator">:=</span> <span class="token string">"mmmm"</span>
<span class="token keyword">var</span> d3 <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s链接%s"</span><span class="token punctuation">,</span> d1<span class="token punctuation">,</span> d2<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d3<span class="token punctuation">)</span>
       <span class="token comment">// 方式五：bytes.Buffer ，和strings.Builder用法一样</span>
<span class="token keyword">var</span> d4 <span class="token operator">=</span> bytes<span class="token punctuation">.</span>Buffer<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
d4<span class="token punctuation">.</span><span class="token function">WriteRune</span><span class="token punctuation">(</span><span class="token char">'\x61'</span><span class="token punctuation">)</span>
d4<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">"这是第五种"</span><span class="token punctuation">)</span>
d4<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token char">'\x31'</span><span class="token punctuation">)</span>
d4<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">&#123;</span><span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token char">'\x44'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d4<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>简单拼接字符串常用+、fmt.Sprintf。如果手里正好有字符串的序列，可以考虑join，如果反复多次拼接，strings.Builder 是推荐的方式。bytes.Buffer用法同strings.Builder</p>
<h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h5><p>下面的函数都需要两个参数，第一个参数为父字符串，第二个参数为子串，子串就是需要查询的字符</p>
<ul>
<li>Index：从左至右搜索，返回子串第一次出现的字节索引位置。未找到，返回-1。子串为空，也返回0</li>
<li>LastIndex：从右至左，返回子串第一次出现的字节索引位置，未找到返回-1</li>
<li>IndexByte：从左到右搜索字节值，返回第一次出现的字节索引位置，未找到返回-1</li>
<li>IndexRune：和Index一样</li>
<li>IndexAny：从左到右搜索，找到其中一个子串就返回第一次出现的字节索引位置。</li>
<li>Contains：从左到右搜索，如果找到则返回true，没找到返回false</li>
<li>Count：从左到右搜索，返回子串出现的次数</li>
</ul>
<p>时间复杂度为O(n)，效率不高，该用则用，少用</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">q1 <span class="token operator">:=</span> <span class="token string">"www.mbai我du测a.com"</span>
<span class="token comment">// 从左到右依次查询，返回第一次出现的字节索引位置。如果未找到返回-1。 第一参数为父串，第二参数为要查询的子串</span>
<span class="token comment">// 如果查询的子串为"" 则返回0，如果找到了返回该字节的索引位置，如果没找到返回-1 ，注意：中文字符占3个字节！！！！！</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>q1<span class="token punctuation">,</span> <span class="token string">"测"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出索引下标13，因为'我'占用3个字节</span>
<span class="token comment">// 从右至左查询子串，注意：go语言没有负索引！！</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">LastIndex</span><span class="token punctuation">(</span>q1<span class="token punctuation">,</span> <span class="token string">"我"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出索引下标8</span>
<span class="token comment">// 与Index类似</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">IndexByte</span><span class="token punctuation">(</span>q1<span class="token punctuation">,</span> <span class="token char">'m'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 与Index类似</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">IndexRune</span><span class="token punctuation">(</span>q1<span class="token punctuation">,</span> <span class="token number">27979</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 从左至右搜索，找到给定的字符集字符串中任意一个字符就返回索引位置。未找到返回-1</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">IndexAny</span><span class="token punctuation">(</span>q1<span class="token punctuation">,</span> <span class="token string">"我u"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 与Indexany功能一样，方向相反，从右至左</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">LastIndexAny</span><span class="token punctuation">(</span>q1<span class="token punctuation">,</span> <span class="token string">".m"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 可以判断某个元素在不在给定的字符串中，返回bool值</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>q1<span class="token punctuation">,</span> <span class="token string">".c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 返回字符出现的次数</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span>q1<span class="token punctuation">,</span> <span class="token string">"ww"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h5><ul>
<li>ToLower：转换为小写</li>
<li>ToUpper：转换为大写</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">c1 <span class="token operator">:=</span> <span class="token string">"wwQeA222"</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//输出</span>
WWQEA222
wwqea222<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="前后缀"><a href="#前后缀" class="headerlink" title="前后缀"></a>前后缀</h5><p>返回bool值</p>
<ul>
<li>HasPrefix：是否以xxx开头</li>
<li>HasSuffix：是否以xxx结尾</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">q1 <span class="token operator">:=</span> <span class="token string">"wwwww.mbai我du测a.com"</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>q1<span class="token punctuation">,</span> <span class="token string">"www"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>q1<span class="token punctuation">,</span> <span class="token string">"com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h5><ul>
<li>TrimSpace：去除字符串两端的空白字符</li>
<li>TrimPrefix、TrimSuffix：如果开头或结尾匹配，则去除。否则，返回原字符串的副本</li>
<li>TrimLeft：字符串开头的字符如果再字符集中，则全部移除，直到碰到第一个不在字符集中的字符为止。</li>
<li>TrimRight：字符串结尾的字符如果在字符集中，则全部移除，直到碰到第一个不在字符集中的字符为止。</li>
<li>Trim：字符串两头的字符如果再字符集中，则全部移除，直到左右都碰到第一个不在字符集中的字符为止</li>
<li>ReplaceAll可以将字符串中所有的’a’或其他字符删除</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span><span class="token string">"\v\n\r \tabc\txyz\t \v\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">TrimPrefix</span><span class="token punctuation">(</span><span class="token string">"www.magedu.edu-马哥教育"</span><span class="token punctuation">,</span> <span class="token string">"www."</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">TrimSuffix</span><span class="token punctuation">(</span><span class="token string">"www.magedu.edu-马哥教育"</span><span class="token punctuation">,</span> <span class="token string">".edu"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">TrimLeft</span><span class="token punctuation">(</span><span class="token string">"abcdddeabeccc"</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">TrimRight</span><span class="token punctuation">(</span><span class="token string">"abcdddeabeccc"</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token string">"abcdddeabeccc"</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 删除字符串中所有的字符'a'</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">ReplaceAll</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="分隔"><a href="#分隔" class="headerlink" title="分隔"></a>分隔</h5><ul>
<li>Split：按照给定的分隔子串去分隔，返回切割后的字符串切片。<ul>
<li>切割字符串时被切掉的，不会出现在结果中，比如strings.Split(s1,’,’)  逗号不会出现在切片中</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">s1 <span class="token operator">:=</span> <span class="token string">"abc今天efeda,好日志,好bmmha"</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//返回</span>
<span class="token punctuation">[</span>abc今天efeda 好日志 好bmmha<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>没有切割，也会返回一个元素的切片，元素就是被切的字符串，意思就是没切到把整个字符串转换为切片</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">s1 <span class="token operator">:=</span> <span class="token string">"abc今天efeda,好日志,好bmmha"</span>
s2 <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"fff"</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>
<span class="token comment">// 输出， 没切到，返回切片，元素是字符串</span>
<span class="token punctuation">[</span>abc今天efeda<span class="token punctuation">,</span>好日志<span class="token punctuation">,</span>好bmmha<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>分隔字符串为空串，那么返回将被切割字符串按照每个rune字符分解后转成<strong>string</strong>存入切片返回</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">s1 <span class="token operator">:=</span> <span class="token string">"abc今天efeda,好日志,好bmmha"</span>
s3 <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v %T"</span><span class="token punctuation">,</span> s3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// 输出</span>
<span class="token punctuation">[</span>a b c 今 天 e f e d a <span class="token punctuation">,</span> 好 日 志 <span class="token punctuation">,</span> 好 b m m h a<span class="token punctuation">]</span>
<span class="token comment">// 注意：每个元素都是string类型，并不是rune！！！！！！！！</span>
a <span class="token builtin">string</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>SplitN(s,sep string, n int )[] string, n</code> 表示最终切片中有几个元素<ul>
<li>n &#x3D;&#x3D;0，返回空切片，切成0个子串</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">s1 <span class="token operator">:=</span> <span class="token string">"abc今天efeda,好日志,好bmmha"</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">SplitN</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 输出</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>n &gt;0 ，返回切片元素的个数<ul>
<li>n&#x3D;&#x3D;1 ，返回一个元素切片，元素为原有字符串，相当于没有进行Split</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">s1 <span class="token operator">:=</span> <span class="token string">"abc今天efeda,好日志,好bmmha"</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">SplitN</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//输出</span>
<span class="token punctuation">[</span>abc今天efeda<span class="token punctuation">,</span>好日志<span class="token punctuation">,</span>好bmmha<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre><code>  * n&gt;1，按照sep切割。返回多个元素的切片。按照sep切成的段数最多有x段，当n&lt;x时，会有部分剩余字符串未切； n==x时，字符串正好从头到尾切完，返回所有段的切片；n&gt;x时，和n==x一样。n表示切割出来的子串的上线，即至多切片里面有n个元素
</code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">s1 <span class="token operator">:=</span> <span class="token string">"abc今天efeda,好日志,好bmmha"</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">SplitN</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 返回</span>
<span class="token punctuation">[</span>abc今天efeda 好日志 好bmmha<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>n &lt;0 ，等价Split，能切多少切多少</li>
<li>SplitAfter和Split相似，就是不把sep切掉</li>
<li>SplitAfterN和Splitn相似，也不把sep切掉</li>
<li><code>Cut(s，sep string) (before, after string, found bool)</code> <ul>
<li>内部使用index找sep，所以是从左到右搜索切割点。可以认为是切一刀，一刀两段</li>
<li>没有切到，返回s,””,false</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">s1 <span class="token operator">:=</span> <span class="token string">"abc今天efeda,好日志,好bmmha"</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Cut</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 输出 没切到，返回原字符串 "" false</span>
abc今天efeda<span class="token punctuation">,</span>好日志<span class="token punctuation">,</span>好bmmha  <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>切到了，匹配切割符的部分要切掉，返回<code>切割符前部分，切割符后部分，true</code></li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">s1 <span class="token operator">:=</span> <span class="token string">"abc今天efeda,好日志,好bmmha"</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Cut</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 输出 前一段  后一段  true</span>
abc今天efeda 好日志<span class="token punctuation">,</span>好bmmha <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h5><ul>
<li><code>Replace(s，old，new string，n int) string</code> <ul>
<li>n&lt;0，等价ReplaceAll，全部替换</li>
<li>n&#x3D;&#x3D;0，或old&#x3D;&#x3D;new，就返回原字符串，表示不替换</li>
<li>n&gt;0，至多替换n次，如果n超过找到old子串的次数x，也就只能替换x次了</li>
<li>未找到替换出，就返回原字符串</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">s1 <span class="token operator">:=</span> <span class="token string">"abc今天efeda,好日志,好bmmha"</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"今天"</span><span class="token punctuation">,</span> <span class="token string">"你好"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"好"</span><span class="token punctuation">,</span> <span class="token string">"坏"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 指定替换1次</span>

<span class="token comment">//输出</span>
abc你好efeda<span class="token punctuation">,</span>好日志<span class="token punctuation">,</span>好bmmha
abc今天efeda<span class="token punctuation">,</span>坏日志<span class="token punctuation">,</span>好bmmha

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ul>
<li>Repact：使用给定的字符串重复n次拼接成一个新字符串</li>
<li>Map：按照给定处理每个rune字符的函数依次处理每个字符后，拼接成字符串返回。注意Map是一对一的映射，不能减少元素个数</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">s1 <span class="token operator">:=</span> <span class="token string">"abc今天efeda,好日志,好bmmha"</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Repect</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 这样会把s1 拼接4次输出</span>
<span class="token comment">// 输出</span>
abc今天efeda<span class="token punctuation">,</span>好日志<span class="token punctuation">,</span>好bmmhaabc今天efeda<span class="token punctuation">,</span>好日志<span class="token punctuation">,</span>好bmmhaabc今天efeda<span class="token punctuation">,</span>好日志<span class="token punctuation">,</span>好bmmha

<span class="token comment">// 使用strings.Map 函数可以对每个rune字符进行处理然后并将他们拼接成一个字符串返回</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>r <span class="token builtin">rune</span><span class="token punctuation">)</span> <span class="token builtin">rune</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token char">'a'</span> <span class="token punctuation">&#123;</span>
		r <span class="token operator">=</span> <span class="token char">'测'</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> r
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="四、类型转换"><a href="#四、类型转换" class="headerlink" title="四、类型转换"></a>四、类型转换</h3><h5 id="数值类型转换"><a href="#数值类型转换" class="headerlink" title="数值类型转换"></a>数值类型转换</h5><ul>
<li>低精度向高精度转换可以，高精度向低精度转换会损失精度</li>
<li>无符号向有符号转换，最高位是符号位</li>
<li>byte和int可以相互转换</li>
<li>float和int可以相互转换，float到int会丢失精度</li>
<li>bool和int不能互相转换</li>
<li>不同长度的int和float之间可以互相转换</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 无符号和有符号之间的转换</span>
<span class="token comment">// 反码：符号位不变，按位取反</span>
<span class="token comment">// 补码：在反码基础上最末尾+1</span>
<span class="token keyword">var</span> a <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span>
<span class="token number">1</span> <span class="token number">000</span> <span class="token number">1010</span>  <span class="token comment">// 这是有符号的二进制数，最高位为符号位，如果是负数则为1，正数则为0</span>
<span class="token number">1</span> <span class="token number">111</span> <span class="token number">0110</span>  <span class="token comment">// 按照上面的转换规则，符号位不变还是1，其他位取反，就是1 111 0101 ，然后在反码的基础上最末尾+1就成了1 111 0110 所以11110110转换为十进制就是246  </span>
<span class="token keyword">var</span> b <span class="token builtin">uint8</span> <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> 
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
<span class="token comment">//输出</span>
<span class="token operator">-</span><span class="token number">10</span> <span class="token number">246</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 错误，不允许无类型float常量转到int</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3.14</span> <span class="token comment">// 定义有类型变量转换就没有问题</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T: %[1]v => %T %[2]d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token function">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// float64: 3.14 => int 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// byte rune本质上就是整数和无类型常量可以直接计算，自动转换</span>
b <span class="token operator">:=</span> <span class="token char">'a'</span>
c <span class="token operator">:=</span> b <span class="token operator">+</span> <span class="token number">1</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T %[1]v"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment">// 请问c显示什么，什么类型</span>
<span class="token comment">// c 显示98，rune int32类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但是，如果不使用无类型常量，有类型的计算如果类型不一致要报错，因为go是对类型要求非常严苛的语言，要强制类型转换。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">b <span class="token operator">:=</span> <span class="token char">'a'</span>
e <span class="token operator">:=</span> <span class="token number">1</span> c <span class="token operator">:=</span> b <span class="token operator">+</span> e <span class="token comment">// rune和int类型不能加，必须转换。比如c := int(b) + e或c := b + rune(e)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="类型别名和类型定义"><a href="#类型别名和类型定义" class="headerlink" title="类型别名和类型定义"></a>类型别名和类型定义</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">'C'</span>
<span class="token keyword">var</span> b <span class="token builtin">uint8</span> <span class="token operator">=</span> <span class="token number">49</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token punctuation">)</span> <span class="token comment">// 为什么类型不同，可以相加？// 因为byte就是uint8的别名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>原因是在源码中定义了 type byte &#x3D; uint8 ，byte是uint8的别名。</p>
<p>Go v1.9开始使用了类型别名，将byte等的定义修改成了类型别名的方式。</p>
<p>别名说明就是uint8的另外一个名字，和uint8是一回事。再看一段代码，正确吗？</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> myByte <span class="token builtin">uint8</span>
<span class="token keyword">var</span> a <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">'C'</span>
<span class="token keyword">var</span> b <span class="token builtin">uint8</span> <span class="token operator">=</span> <span class="token number">49</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token punctuation">)</span> <span class="token comment">// 为什么类型不同，可以相加？byte本质上讲就是uint8</span>
<span class="token keyword">var</span> c myByte <span class="token operator">=</span> <span class="token number">50</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> c<span class="token punctuation">,</span> a <span class="token operator">+</span> c<span class="token punctuation">)</span> <span class="token comment">// 可以吗？为什么？ 不可以，因为myByte是全新类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>答案是不可以。原因就是Go原因不允许不同类型随便运算。就算我们眼睛看到可以，也不行，必须强制类型转换，转换是否成功，程序员自己判断</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> myByte <span class="token builtin">uint8</span> <span class="token comment">// 类型定义</span>
<span class="token keyword">type</span> <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token builtin">uint8</span> <span class="token comment">// 类型别名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>byte只是存在于代码中，为了方便阅读或使用，编译完成后，不会有byte类型。</p>
<h5 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token number">126</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// string 会把</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span><span class="token number">126</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T %[1]v\n"</span><span class="token punctuation">,</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span><span class="token number">126</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 输出</span>
<span class="token number">126</span>
<span class="token builtin">string</span> <span class="token number">126</span>

<span class="token comment">//fmt.Println(strconv.Itoa(126))</span>
s1 <span class="token operator">:=</span> <span class="token string">"126"</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 十进制理解126</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 相当于把126转成16进制，1*16^2 + 2*16^1 + 6*16^0 = 256+32+6 = 294</span>
<span class="token comment">// 输出</span>
<span class="token number">126</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span>
<span class="token number">126</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span>
<span class="token number">294</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span>

s2 <span class="token operator">:=</span> <span class="token string">"115.6"</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">ParseBool</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 输出</span>
<span class="token number">115.6</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span>
<span class="token number">115.6</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span>
<span class="token boolean">false</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


















]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang分支循环随机数</title>
    <url>/2023/02/12/Golang%E5%88%86%E6%94%AF%E3%80%81%E5%BE%AA%E7%8E%AF%E3%80%81%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    <content><![CDATA[<h1 id="分支、循环、随机数"><a href="#分支、循环、随机数" class="headerlink" title="分支、循环、随机数"></a>分支、循环、随机数</h1><h3 id="单分支"><a href="#单分支" class="headerlink" title="单分支"></a>单分支</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span>  condition <span class="token punctuation">&#123;</span>
    代码块
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token number">5</span><span class="token operator">></span><span class="token number">2</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"5大于2"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>注意：Go语言中，花括号一定要跟着if、for、func等行的最后，否则语法出错。这其实就是为了解决C风格、Java风格之争。</p>
<ul>
<li>condititon<strong>必须是一个bool类型</strong>，在GO中，<strong>不能</strong>使用其他类型等效为布尔值。<code>if 1&#123;&#125; </code>是错误的</li>
<li>语句块中可以写其他代码</li>
<li>如果conditition为true，才能执行其后代码块</li>
</ul>
<h3 id="多分支"><a href="#多分支" class="headerlink" title="多分支"></a>多分支</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> condition1 <span class="token punctuation">&#123;</span>
    代码块<span class="token number">1</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> condition2 <span class="token punctuation">&#123;</span>
    代码块<span class="token number">2</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> condition3 <span class="token punctuation">&#123;</span>
    代码块<span class="token number">3</span>
<span class="token punctuation">&#125;</span> <span class="token operator">...</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">...</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> conditionN <span class="token punctuation">&#123;</span>
    代码块N
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    代码块
<span class="token punctuation">&#125;</span>

a <span class="token operator">:=</span> <span class="token number">6</span>
<span class="token keyword">if</span> a <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"negative"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> a <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 走到这里一定 a 不小于 0</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"positive"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 走到这里一定 a 不大于、也不小于 0</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"zero"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>多分支结构，从上向下依次判断分支条件，只要一个分支条件成立，其后语句块将被执行，那么其他条件都不会被执行</li>
<li>前一个分支条件被测试过，下一个条件相当于隐含着这个条件</li>
<li>一定要考虑一下else分之是否有必要写，以防逻辑漏洞</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 嵌套</span>
a <span class="token operator">:=</span> <span class="token number">6</span>
<span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"zero"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> a <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"negative"</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> a <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 走到这里一定 a 不小于 0</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"positive"</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>循环也可以互相嵌套，形成多层循环， 循环嵌套不宜过深。</p>
<h3 id="switch-分支"><a href="#switch-分支" class="headerlink" title="switch 分支"></a>switch 分支</h3><p>特别注意：GO语言的switch有别于C语言的switch，case是独立代码块，不能穿透。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">a <span class="token operator">:=</span> <span class="token number">20</span>
<span class="token keyword">switch</span> a <span class="token punctuation">&#123;</span> <span class="token comment">// 待比较的是a</span>
<span class="token keyword">case</span> <span class="token number">10</span><span class="token punctuation">:</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ten"</span><span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token number">20</span><span class="token punctuation">:</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"twenty"</span><span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">:</span> <span class="token comment">// 或关系</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">">=30 and &lt;=50"</span><span class="token punctuation">)</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"other"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>

或写成
<span class="token keyword">switch</span> a<span class="token operator">:=</span><span class="token number">20</span><span class="token punctuation">;</span>a <span class="token punctuation">&#123;</span> <span class="token comment">// 待比较的是a</span>
<span class="token keyword">case</span> <span class="token number">10</span><span class="token punctuation">:</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ten"</span><span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token number">20</span><span class="token punctuation">:</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"twenty"</span><span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">:</span> <span class="token comment">// 或关系</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">">=30 and &lt;=50"</span><span class="token punctuation">)</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"other"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token comment">// 上面2种写法a的作用域有区别，这个后面再说</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<pre class="line-numbers language-go" data-language="go"><code class="language-go">a <span class="token operator">:=</span> <span class="token number">20</span>
<span class="token keyword">switch</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 没有待比较变量，意味着表达式是true，是布尔型</span>
<span class="token keyword">case</span> a <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"positive"</span><span class="token punctuation">)</span>
<span class="token keyword">case</span> a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"negative"</span><span class="token punctuation">)</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"zero"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
或写成
<span class="token keyword">switch</span> a <span class="token operator">:=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 没有待比较变量，意味着表达式是true，是布尔型</span>
<span class="token keyword">case</span> a <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment">// 如果待比较值是true，a > 0如果返回true，就进入</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"positive"</span><span class="token punctuation">)</span>
 <span class="token comment">// fallthrough // 穿透</span>
<span class="token keyword">case</span> a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment">// 如果待比较值是true，a &lt; 0如果返回true，就进入</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"negative"</span><span class="token punctuation">)</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"zero"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token comment">// 上面2种写法a的作用域有区别，这个后面再说</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>C语言的switch有穿透效果，而Go语言没有。如果想在Go语言中实现穿透效果，使用<code>fallthrough</code>穿透当前<code>case</code>语句块。但是，大家使用C语言的时候，一般都不想要使用这种穿透效果，所以，如非必要，不要使用<code>fallthrough</code>。</p>
<h3 id="特殊if"><a href="#特殊if" class="headerlink" title="特殊if"></a>特殊if</h3><p>switch可以写成 switch a:&#x3D;20;a 这种形式，也就是可以在表达式a之前写一个语句后接一个分号。if也可以这样</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> score<span class="token punctuation">,</span> line <span class="token operator">:=</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">;</span> score <span class="token operator">></span> line <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"perfect"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token comment">// score, line作用域只能是当前if语句</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这种写法中定义idea变量作用域只能是当前if或switch</p>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><h5 id="C风格循环"><a href="#C风格循环" class="headerlink" title="C风格循环"></a>C风格循环</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> <span class="token punctuation">[</span>初始操作<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span>循环条件<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span>循环后操作<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
    循环体
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<ul>
<li>初始操作：第一次进入循环前执行，语句只能执行一次，之后不再执行</li>
<li>循环条件：要求返回布尔值，每次进入循环体前进行判断。如果每次条件满足返回true，就进入循环执行一次循环体；否则，循环结束</li>
<li>循环后操作：每次循环体执行完，在执行下一趟循环条件判断之前，执行该操作一次</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token comment">// 初始操作中的短格式定义的i的作用域只能在for中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 特殊写法</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 没条件就相当于true</span>
<span class="token keyword">for</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// for condition &#123;&#125;，condition就是循环条件</span>
<span class="token keyword">for</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 死循环</span>
<span class="token comment">// 死循环简写如下</span>
<span class="token keyword">for</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 死循环 相对于 for true &#123;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h6 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h6><p>中止当前这一趟循环的执行，直接执行循环后操作，进入下一趟的条件判断</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">continue</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token comment">// 请问执行结果是什么？1,3,5,7,9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h6 id="break"><a href="#break" class="headerlink" title="break"></a>break</h6><p>终止当前循环的执行，直接结束</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">continue</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
 <span class="token keyword">if</span> i <span class="token operator">>=</span> <span class="token number">10</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">break</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> <span class="token comment">// 请问执行结果是什么？1,3,5,7,9,11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>除了break，函数的return结束函数执行，当然也能把函数中的循环打断。</p>
<h6 id="goto和label"><a href="#goto和label" class="headerlink" title="goto和label"></a><strong>goto和label</strong></h6><p>它会破坏结构化编程，但是确实能做到便利的无条件跳转</p>
<ul>
<li>跳出多重循环使用，但是为什么要用多重循环？？？？？？</li>
<li>到同一处标签统一处理，例如统一错误处理，问题是，写个函数也能实现为啥用你？？？</li>
</ul>
<p>goto需要配合标签label使用，label就像代码中的锚点，goto将无条件调到那里开始向后执行代码。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">continue</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
 <span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">10</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">goto</span> condition
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
condition<span class="token punctuation">:</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>continue、break也可以指定label，方便某些循环使用。但是，建议不要这么写，弄不好就成了毛线团。</p>
<h5 id="for-range"><a href="#for-range" class="headerlink" title="for range"></a>for range</h5><table>
<thead>
<tr>
<th>类型</th>
<th>变量</th>
<th>Range expression</th>
<th>第一个值</th>
<th>第二个值</th>
</tr>
</thead>
<tbody><tr>
<td>array or slice</td>
<td>a</td>
<td>[n]E, *[n]E []E</td>
<td>index i int</td>
<td>a[i]E</td>
</tr>
<tr>
<td>string</td>
<td>s</td>
<td>“abcd”</td>
<td>index i int utf-8字节偏移</td>
<td>unicode值  rune</td>
</tr>
<tr>
<td>map</td>
<td>m</td>
<td>map[K]V</td>
<td>key k K</td>
<td>m[k]V</td>
</tr>
<tr>
<td>channel</td>
<td>c</td>
<td>chan E, &lt;-chan E<br>通道或只读通道</td>
<td>element e E</td>
<td>无</td>
</tr>
</tbody></table>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token string">"测试"</span>  utf<span class="token operator">-</span><span class="token number">8</span> 编码为 <span class="token string">"\xe6\xb5\x8b\xe8\xaf\x95"</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token string">"abcd测试"</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d, %[2]d, %[2]c, %#[2]x\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"\xe6\xb5\x8b\xe8\xaf\x95"</span><span class="token punctuation">)</span> <span class="token comment">// 6个字节</span>
运行结果如下
<span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0x61</span>
<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0x62</span>
<span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token number">0x63</span>
<span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token number">0x64</span>
<span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">27979</span><span class="token punctuation">,</span> 测<span class="token punctuation">,</span> <span class="token number">0x6d4b</span>
<span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">35797</span><span class="token punctuation">,</span> 试<span class="token punctuation">,</span> <span class="token number">0x8bd5</span>
测试
索引就是字节偏移量，从索引可以看出，中文在字符串中是utf<span class="token operator">-</span><span class="token number">8</span>编码，占<span class="token number">3</span>个字节。
但是<span class="token keyword">for</span> <span class="token keyword">range</span>读取字符串返回的是一个个字符（整数），而字符是ASCII或UNICODE对应的编码值。
<span class="token operator">%</span>d 打印的是unicode值 <span class="token operator">%</span>c 打印的是字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> arr <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 只打印索引</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> arr <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 只打印值</span>
<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> arr <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><p>标准库”math&#x2F;rand”</p>
<p>我们使用的是伪随机数，是内部写好的公式计算出来的。这个公式运行提供一个种子，有这个种子作为起始值开始计算。</p>
<ul>
<li>src :&#x3D; rand.NewSource(100)，使用种子100 创建一个随机数源</li>
<li>rand.New(rand.NewSource(time.Now().UnixNano())) ，利用当前时间的纳秒值做种子</li>
<li>r10 :&#x3D; rand.New(src)，使用源创建随机数生成器</li>
<li>r10.Intn(5)，返回[0,5)的随机整数</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>
 <span class="token string">"math/rand"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 src <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
 r10 <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>
 r1 <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d, %d, %d\n"</span><span class="token punctuation">,</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r1<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r10<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>全局随机数生成器globalRand</p>
<ul>
<li>他的种子默认为1，<code>var globalRand = New(&amp;lockedSource&#123;src: NewSource(1).(*rngSource)&#125;)</code></li>
<li>如果要改变globalRand的种子，就需要使用rand.Seed(2)修改种子</li>
<li><code>rand.Intn(5)</code> 就是使用它生成随机数</li>
</ul>
<p>从Go v1.20开始，globalRand已经改变为使用随机种子。可以查看官网<a href="https://go.dev/doc/go1.20">https://go.dev/doc/go1.20</a></p>
<p>如果想使用旧版globalRand的行为，可以手动设定种子源<code>rand.Seed(1)</code> 或使用环境变量<code>os.Setenv(&quot;GODEBUG&quot;,&quot;randautoseed=0&quot;)</code></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang错误处理</title>
    <url>/2023/04/19/Golang%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>Go的设计者认为其它语言异常处理太过消耗资源，且设计和处理复杂，导致使用者不能很好的处理错误，甚至觉得异常和错误处理起来麻烦而忽视、忽略掉，从而导致程序崩溃。</p>
<ul>
<li>函数调用，返回值可以返回多值，一般最后一个值可以是error接口类型的值<ul>
<li>如果函数调用产生错误，则这个值是一个error接口类型的错误</li>
<li>如果函数调用成功，则该值是nil</li>
</ul>
</li>
<li>检查函数返回值中的错误是否是nil，如果不是nil，进行必要的错误处理</li>
</ul>
<p>error是Go中声明的接口类型</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> <span class="token builtin">error</span> <span class="token keyword">interface</span><span class="token punctuation">&#123;</span>
    <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>所有实现<code>Error() string</code>签名的方法，都可以实现错误接口。用Error()方法返回错误的具体描述</p>
<h3 id="自定义error"><a href="#自定义error" class="headerlink" title="自定义error"></a>自定义error</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">type</span> errorString <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 s <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>errorString<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> e<span class="token punctuation">.</span>s <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>text <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> <span class="token operator">&amp;</span>errorString<span class="token punctuation">&#123;</span>text<span class="token punctuation">&#125;</span> <span class="token comment">// var e error = &amp;errorString&#123;text&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">var</span> e <span class="token operator">=</span> errorString<span class="token punctuation">&#123;</span><span class="token string">"错误理由1"</span><span class="token punctuation">&#125;</span> <span class="token comment">// 请问和14行有区别吗？  </span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> err <span class="token operator">=</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"错误理由2"</span><span class="token punctuation">)</span> <span class="token comment">// 请问e和err有什么区别？</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>上例第12行是直接通过结构体实例化一个实例，而14行是通过构造方法返回一个结构体实例的指针，而errorString结构体又实现了error接口（实现了Error方法），所以该结构体的类型既是errorString类型，也是error类型</strong></p>
<p>通过errors包的New方法返回一个error接口类型的错误实例，<code>errors.New(&quot;错误描述&quot;)</code>来创建一个新的错误</p>
<p>可以看出New方法返回一个实现了Error接口的结构体实例的指针</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"errors"</span>
 <span class="token string">"fmt"</span>
<span class="token punctuation">)</span>
<span class="token keyword">var</span> ErrDivisionByZero <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"division by zero"</span><span class="token punctuation">)</span> <span class="token comment">// 构造一个错误实例，建议</span>
Err前缀
<span class="token keyword">func</span> <span class="token function">div</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> ErrDivisionByZero
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">return</span> a <span class="token operator">/</span> b<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> r<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// fmt.Println(err)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Panic"><a href="#Panic" class="headerlink" title="Panic"></a>Panic</h3><p>panic有人翻译成宕机。</p>
<p>panic是不好的，因为它发生时，往往会造成程序崩溃、服务终止等后果，所以没人希望它发生。但是，如果在错误发生时，不及时panic而终止程序运行，继续运行程序恐怕造成更大的损失，付出更加惨痛的代价。所以，有时候，panic导致的程序崩溃实际上可以及时止损，只能两害相权取其轻。</p>
<p>panic虽然不好，体验很差，但也是万不得已，可以马上暴露问题，及时发现和纠正问题。</p>
<p>panic产生</p>
<ul>
<li>runtime运行时错误导致抛出panic，比如数组越界、除零</li>
<li>主动手动调用panic(reason)，这个reason可以是任意类型</li>
</ul>
<p>panic执行</p>
<ul>
<li>逆序执行当前已经注册过的goroutine的defer链（recover从这里介入）</li>
<li>打印错误信息和调用堆栈</li>
<li>调用exit(2)结束整个进程</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">div</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span>
 <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
 r <span class="token operator">:=</span> a <span class="token operator">/</span> b <span class="token comment">// 这一行有可能panic</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span>
 <span class="token keyword">return</span> r <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>运行后程序崩溃，因为除零异常，输入如下</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">5</span> <span class="token number">0</span>
start
<span class="token builtin">panic</span><span class="token punctuation">:</span> runtime <span class="token builtin">error</span><span class="token punctuation">:</span> integer divide by zero
goroutine <span class="token number">1</span> <span class="token punctuation">[</span>running<span class="token punctuation">]</span><span class="token punctuation">:</span>下面是调用栈，div压着main
main<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token number">0x5</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">)</span>
       O<span class="token punctuation">:</span><span class="token operator">/</span>pros<span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">13</span> <span class="token operator">+</span><span class="token number">0x1bf</span> 出错的行号
main<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       O<span class="token punctuation">:</span><span class="token operator">/</span>pros<span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">19</span> <span class="token operator">+</span><span class="token number">0x25</span>
exit status <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="recover"><a href="#recover" class="headerlink" title="recover"></a>recover</h3><p>recover即恢复，defer和recover结合起来，在defer中调用recover来实现对错误的捕获和恢复，让代码在发生panic后通过处理能够继续运行。类似其它语言中try&#x2F;catch。</p>
<p><code>err := recover() </code>，<code>v := err.(type)</code>，v就是<code>panic(reason)</code> 中的reason，reason可以是任意类型。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"errors"</span>
 <span class="token string">"fmt"</span>
 <span class="token string">"runtime"</span>
<span class="token punctuation">)</span>
<span class="token keyword">var</span> ErrDivisionByZero <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"除零异常"</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">div</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"1 %+v, %[1]T\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span>
 <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
 <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 一旦recover了，就相当处理过了错误</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"2 %+v, %[1]T\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
 <span class="token keyword">switch</span> v <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 类型断言</span>
 <span class="token keyword">case</span> runtime<span class="token punctuation">.</span>Error<span class="token punctuation">:</span>
 <span class="token comment">// 在源码runtime/error.go中75行，还为errorString也实现了RuntimeError方法</span>
 <span class="token comment">// 也就是说，标准库runtime运行时错误，都是runtime.Error接口的</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"原因：%T, %#[1]v\n"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
 <span class="token keyword">case</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">:</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"原因：切片"</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"离开recover处理"</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 r <span class="token operator">:=</span> a <span class="token operator">/</span> b
 <span class="token function">panic</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 手动panic</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span>
 <span class="token keyword">return</span> r <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"!!!"</span><span class="token punctuation">)</span> <span class="token comment">// 有返回值吗？如果有是什么？</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main exit"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>上例中，一旦在某函数中panic，当前函数panic之后的语句将不再执行，开始执行defer。如果在defer中错误被recover后，就相当于当前函数产生的错误得到了处理。当前函数执行完defer，当前函数退出执行，程序还可以从当前函数之后继续执行。</p>
<p>可以观察到panic和recover有如下</p>
<ul>
<li>有panic，一路向外抛出，但没有一处进行recover，也就是说没有地方处理错误，程序崩溃</li>
<li>有painc，有recover来捕获，相当于错误被处理掉了，当前函数defer执行完后，退出当前函数，从当前函数之后继续执行</li>
</ul>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go中的面向对象</title>
    <url>/2023/04/20/Go%E4%B8%AD%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="Go中的面向对象"><a href="#Go中的面向对象" class="headerlink" title="Go中的面向对象"></a>Go中的面向对象</h1><h3 id="面相对象三要素"><a href="#面相对象三要素" class="headerlink" title="面相对象三要素"></a>面相对象三要素</h3><ul>
<li>封装：将属性（数据）和方法（操作）封装，提供访问控制，隐藏实现细节，暴露该暴露的</li>
<li>继承：子类可以从父类直接获得属性和方法，减少重复定义。子类中如果与父类不同，可以自己定义新的属性和方法，也可以覆盖同名的属性和方法</li>
<li>多态：前提是继承和覆盖，使得子类中虽然使用同一个方法，但是不同子类表现不同，就是不同的态</li>
</ul>
<p>实现了以上特征的语言，才能称为面向对象编程范式语言。</p>
<p>严格意义上说，Go语言不想实现面向对象编程范式。但是面相对象又有一些不错的特征，Go语言通过组合的方式实现了类似的功能。</p>
<p>只能说，Go语言实现了一种非常有自我特征的面向对象。</p>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>通过结构体，可以把数据字段封装在内，还可以为结构体提供方法。</p>
<p>访问控制：</p>
<ul>
<li>属性、方法标识符首字母大写，实现了对包外可见的访问控制</li>
<li>属性、方法标识符首字母小写，仅包内可见</li>
<li>这些一定程度上实现了public、private的访问控制。</li>
</ul>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>Go没有提供类似C++、Java一样的构造函数、析构函数。在Go中，用构造结构体实例的函数，这个函数没有特别的要求，只要返回结构体实例或其指针即可（建议返回指针，不然返回值会拷贝）。习惯上，构造函数命名是New或new开头。如果有多个构造函数，可以使用不同命名函数，因为Go也没有函数重载。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Animal <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 name <span class="token builtin">string</span>
 age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">NewDefaultAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Animal <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> <span class="token operator">&amp;</span>Animal<span class="token punctuation">&#123;</span><span class="token string">"nobody"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">NewAnimal</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Animal <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> <span class="token operator">&amp;</span>Animal<span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span> age<span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过不同的函数名来模拟构造函数重载</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>Go语言没有提供继承的语法，实际上需要通过匿名结构体嵌入（组合）来实现类似效果</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">type</span> Animal <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 name <span class="token builtin">string</span>
 age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>Animal<span class="token punctuation">)</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Animal run~~~"</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> Cat <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 Animal <span class="token comment">// 匿名结构体嵌入</span>
 color  <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 cat <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Cat<span class="token punctuation">)</span>
 cat<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    cat<span class="token punctuation">.</span>Animal<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过匿名结构体嵌入，子结构体就拥有了父结构体的属性name、age、和run方法</p>
<h3 id="覆盖"><a href="#覆盖" class="headerlink" title="覆盖"></a>覆盖</h3><p>覆盖override，也称为重写。注意不是重载overload</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>Cat<span class="token punctuation">)</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Cat run+++"</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>为Cat增加一个run方法，这就是覆盖。特别注意<code>cat.run() </code>和 <code>cat.Animal.run()</code>的区别</p>
<p>上例增加run方法时完全覆盖，就是不依赖父结构体方法，重写功能。</p>
<p>如果是依赖父结构体方法，那就要在子结构体方法中显式调用它</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cat<span class="token punctuation">)</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 c<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 可以吗？ 不可以，无限递归了</span>
 c<span class="token punctuation">.</span>Animal<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 可以吗?</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Cat run+++"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>cat.run() </code>这是无限递归，不能这么用</p>
<p><code>c.Animal.run()</code>这是调用父结构体方法</p>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>Go语言不能像java语言一样使用多态，但是可以通过引入interface接口来解决</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">type</span> Runner <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
 <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> Animal <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 name <span class="token builtin">string</span>
 age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>Animal<span class="token punctuation">)</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Animal run~~~"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> Cat <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 Animal <span class="token comment">// 匿名结构体嵌入</span>
 color  <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cat<span class="token punctuation">)</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 c<span class="token punctuation">.</span>Animal<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Cat run+++"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> Dog <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 Animal <span class="token comment">// 匿名结构体嵌入</span>
 color  <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Dog<span class="token punctuation">)</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 d<span class="token punctuation">.</span>Animal<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Dog run+++"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span>a Runner<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 多态</span>
 a<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// var a Animal = Cat&#123;&#125; // Go做不到这样赋值</span>
 <span class="token comment">// a.run() // Go无法写出这2行，用接口</span>
    
 d <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span>
 d<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"snoopy"</span>
 <span class="token function">test</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
 c <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Cat<span class="token punctuation">)</span>
 c<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Garfield"</span>
 <span class="token function">test</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>test使用同一个类型的同一个接口却表现出不同的结果，这就是多态</p>
<h3 id="结构体排序"><a href="#结构体排序" class="headerlink" title="结构体排序"></a>结构体排序</h3><h5 id="排序接口"><a href="#排序接口" class="headerlink" title="排序接口"></a>排序接口</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// An implementation of Interface can be sorted by the routines in this package.</span>
<span class="token comment">// The methods refer to elements of the underlying collection by integer index.</span>
<span class="token keyword">type</span> Interface <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// Len is the number of elements in the collection.</span>
 <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>
 <span class="token comment">// Less reports whether the element with index i</span>
 <span class="token comment">// must sort before the element with index j.</span>
 <span class="token comment">//</span>
 <span class="token comment">// If both Less(i, j) and Less(j, i) are false,</span>
 <span class="token comment">// then the elements at index i and j are considered equal.</span>
 <span class="token comment">// Sort may place equal elements in any order in the final result,</span>
 <span class="token comment">// while Stable preserves the original input order of equal elements.</span>
 <span class="token comment">//</span>
 <span class="token comment">// Less must describe a transitive ordering:</span>
 <span class="token comment">// - if both Less(i, j) and Less(j, k) are true, then Less(i, k) must be true as well.</span>
 <span class="token comment">// - if both Less(i, j) and Less(j, k) are false, then Less(i, k) must be false as well.</span>
 <span class="token comment">//</span>
 <span class="token comment">// Note that floating-point comparison (the &lt; operator on float32 or </span>
<span class="token builtin">float64</span> values<span class="token punctuation">)</span>
 <span class="token comment">// is not a transitive ordering when not-a-number (NaN) values are involved.</span>
 <span class="token comment">// See Float64Slice.Less for a correct implementation for floating-point values.</span>
 <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>
 <span class="token comment">// Swap swaps the elements with indexes i and j.</span>
 <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从接口定义来看，要实现某类型的排序</p>
<ul>
<li>要知道有多少元素</li>
<li>2个指定索引的元素怎么比较大小，索引i 的元素小于索引j 的值返回true，反之返回false</li>
<li>如何交换指定索引上的元素</li>
</ul>
<p>那么自定义类型，要想排序，就要实现sort包中该接口</p>
<h4 id="结构体实例排序"><a href="#结构体实例排序" class="headerlink" title="结构体实例排序"></a>结构体实例排序</h4><p>假设有N个学生，学生有姓名和年龄，按照年龄排序结构体实例。</p>
<p>学生使用结构体Student，多个学生就使用切片[ ]Student。</p>
<p>参照 sort.Ints() 的实现</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Ints</span><span class="token punctuation">(</span>x <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">Sort</span><span class="token punctuation">(</span><span class="token function">IntSlice</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> 观察这个方法，它依赖下面的定义
<span class="token comment">// IntSlice attaches the methods of Interface to []int, sorting in increasing order.</span>
<span class="token keyword">type</span> IntSlice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x IntSlice<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>           <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x IntSlice<span class="token punctuation">)</span> <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x IntSlice<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>就是要在[]Student上实现interface接口的Len、Less、Swap方法。为了 方便可以定义一个新类型，好实现方法</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>
 <span class="token string">"math/rand"</span>
 <span class="token string">"sort"</span>
 <span class="token string">"time"</span>
 <span class="token string">"strconv"</span>
<span class="token punctuation">)</span>
<span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 Name <span class="token builtin">string</span>
 Age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> StudentSlice <span class="token punctuation">[</span><span class="token punctuation">]</span>Student
<span class="token keyword">func</span> <span class="token punctuation">(</span>x StudentSlice<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>           <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x StudentSlice<span class="token punctuation">)</span> <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Age <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x StudentSlice<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 随机生成学生数据</span>
 r <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 students <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Student<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
 <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
 name <span class="token operator">:=</span> <span class="token string">"Tom"</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
 age <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20</span>
 students <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> Student<span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span> age<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v, %[1]T\n"</span><span class="token punctuation">,</span> students<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
 sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token function">StudentSlice</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token comment">// 强制类型转化为StudentSlice后就可以应用接口方法排序了</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v, %[1]T\n"</span><span class="token punctuation">,</span> students<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="切片排序简化"><a href="#切片排序简化" class="headerlink" title="切片排序简化"></a>切片排序简化</h3><p>上例中，对于切片来说，Len、Swap实现其实都这么写，切片中元素排序，就是某种类型的元素之间如何比较大小不知道，能否只提出这一部分的逻辑单独提供？从而简化切片的排序。这就要靠<code>sort.Slice(待排序切片，less函数)</code> 了。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>
 <span class="token string">"math/rand"</span>
 <span class="token string">"sort"</span>
 <span class="token string">"time"</span>
 <span class="token string">"strconv"</span>
<span class="token punctuation">)</span>
<span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 Name <span class="token builtin">string</span>
 Age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 随机生成学生数据</span>
 r <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 students <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Student<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
 <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
 name <span class="token operator">:=</span> <span class="token string">"Tom"</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
 age <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20</span>
 students <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> Student<span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span> age<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v, %[1]T\n"</span><span class="token punctuation">,</span> students<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
 sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> students<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Age
 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v, %[1]T\n"</span><span class="token punctuation">,</span> students<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="map的排序"><a href="#map的排序" class="headerlink" title="map的排序"></a>map的排序</h3><p>map是键值对的集合，是无序的hash表。但是排序输出是序列，也就是排序所需的键或值要存入序列中，然后才能排序。</p>
<h5 id="key排序"><a href="#key排序" class="headerlink" title="key排序"></a>key排序</h5><p>思路：提取key为序列，排序后，用有序序列中的key映射value输出</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"sort"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// To create a map as input</span>
    m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>
    m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"a"</span>
    m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"c"</span>
    m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"b"</span>
    <span class="token comment">// To store the keys in slice in sorted order</span>
    <span class="token keyword">var</span> keys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
    <span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">&#123;</span>
        keys <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> k<span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>
    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span>
    <span class="token comment">// key排好序，就可以用key找到value了</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> k <span class="token operator">:=</span> <span class="token keyword">range</span> keys <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Key:"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token string">"Value:"</span><span class="token punctuation">,</span> m<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="value排序"><a href="#value排序" class="headerlink" title="value排序"></a>value排序</h5><p>不能使用key排序思路，想象每一个键值对就是一个{key:xxx, value:yyy}的结构体实例，就转换成了结构体序列排序了。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>
 <span class="token string">"sort"</span>
<span class="token punctuation">)</span>
<span class="token keyword">type</span> Entry <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 Key   <span class="token builtin">int</span>
 Value <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>
 m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"a"</span>
 m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"c"</span>
 m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"b"</span>
 entries <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Entry<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>
 i <span class="token operator">:=</span> <span class="token number">0</span> <span class="token comment">// 为什么用了i</span>
 <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">&#123;</span>
 entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Entry<span class="token punctuation">&#123;</span>k<span class="token punctuation">,</span> v<span class="token punctuation">&#125;</span>
 i<span class="token operator">++</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span>
 sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>entries<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">&lt;</span> entries<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Value
 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// Value升序</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
























]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang序列化和反序列化</title>
    <url>/2023/04/21/Golang%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h1><p>内存中的map、slice、array以及各种对象，如何保存到一个文件中？ 如果是自己定义的结构体的实例，如何保存到一个文件中？</p>
<p>如何从文件中读取数据，并让它们在内存中再次恢复成自己对应的类型的实例？要设计一套协议，按照某种规则，把内存中数据保存到文件中。文件是一个字节序列，所以必须把数据转换成字节序列，输出到文件。这就是序列化。 反之，从文件的字节序列恢复到内存并且还是原来的类型，就是反序列化。</p>
<p>序列化：将内存中的数据结构转换成字节序列</p>
<p>反序列化：将字节序列恢复到内存中并且还是之前的数据类型，就是反序列化</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li>serialization序列化：将内存中对象存储下来，把他变成一个个字节。转为二进制数据</li>
<li>deserialization反序列化：将文件的一个个字节恢复成内存中对象。从二进制数据中恢复。</li>
</ul>
<p>序列化保存到文件就是持久化。</p>
<p>可以将数据序列化后持久化，或者网络传输；也可以将从文件中或网络中接收到的字节序列反序列化。</p>
<p>可以把数据和二进制序列之间的相互转换称为二进制序列化、反序列化，把数字和字符序列之间的相互转换称为字符序列化、反序列化</p>
<p><strong>字符序列化：JSON、XML等</strong></p>
<p><strong>二进制序列化：ProtocolBuffers、MessagePack等</strong></p>
<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>JSON是一种轻量级的数据交换格式。基于ES3的一个子集采用完全独立于编程语言的文本格式来存储和表示数据。应该说，目前JSON得到几乎所有浏览器的支持。参看 <a href="http://json.org/">http://json.org/</a></p>
<h5 id="值"><a href="#值" class="headerlink" title="值"></a>值</h5><p>双引号引起来的字符串、数值、true和false、null、对象、数组，这些都是值</p>
<p><img src="/images/2gLoMVUujOjJ4dq4WTPgFvIEpM0GN_3lWAxHCJWdu_s.png" alt="image"></p>
<h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>由双引号包围起来的任意字符的组合，可以有转义字符。</p>
<h5 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h5><p>有正负，有整数、浮点数</p>
<h5 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h5><p>无序的键值对的集合 格式: {key1:value1, … ,keyn:valulen} <strong>key必须是一个字符串</strong>，需要双引号包围这个字符串。 value可以是任意合法的值。</p>
<p><img src="/images/k156_DyWGJAZDlSkdI262qdLwZaaCMonh90tGW0GSSk.png" alt="image"></p>
<h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><p>有序的值的集合 格式：[val1,…,valn]</p>
<p><img src="/images/YMVJL_RZhGq7C_VVOv0uy-cajO5tUqc0EqWWQQA1A9g.png" alt="image"></p>
<p>实例</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">&#123;</span>
  <span class="token string">"person"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
   <span class="token punctuation">&#123;</span>
      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"tom"</span><span class="token punctuation">,</span>
      <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">18</span>
   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
   <span class="token punctuation">&#123;</span>
      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"jerry"</span><span class="token punctuation">,</span>
      <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">16</span>
   <span class="token punctuation">&#125;</span>
 <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">"total"</span><span class="token punctuation">:</span> <span class="token number">2</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>特别注意：JSON是字符串，是文本。JavaScript引擎可以将这种字符串解析为某类型的数据。</p>
<h3 id="JSON包"><a href="#JSON包" class="headerlink" title="JSON包"></a>JSON包</h3><p>Go标准库中提供了 encoding&#x2F;json 包，内部使用了反射技术，效率较为低下。参看 <a href="https://go.dev/blog/json">https://go.dev/blog/json</a></p>
<ul>
<li><code>json.Marshal(v any) ([]byte, error)</code>，将v序列化成字符序列（本质上也是字节序列），这个过程称为Encode</li>
<li><code>json.Unmarshal(data []byte, v any) error</code>，将字符序列data反序列化为v，这个过程称为Decode</li>
</ul>
<h5 id="基本类型序列化"><a href="#基本类型序列化" class="headerlink" title="基本类型序列化"></a>基本类型序列化</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"encoding/json"</span>
 <span class="token string">"fmt"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 序列化</span>
 <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">&#123;</span>
 <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20.5</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token string">"aabb"</span><span class="token punctuation">,</span> <span class="token comment">// 基本类型</span>
 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// Go array => js array</span>
 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// Go slice => js array</span>
        <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token string">"abc"</span><span class="token punctuation">:</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token string">"aa"</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// Go map => js object</span>
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> data <span class="token punctuation">&#123;</span> <span class="token comment">// 一个一个单独序列化，看变化</span>
 b<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">continue</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d %T: %[2]v => %T %[3]v %s\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
 target <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 <span class="token comment">// fmt.Println(target)</span>
    <span class="token comment">// 问题，json.Marshal(data)可以吗？</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
    <span class="token comment">// 反序列化</span>
 <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> target <span class="token punctuation">&#123;</span> <span class="token comment">// 一个一个单独反序列化，看变化</span>
 <span class="token keyword">var</span> t any
 err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">continue</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d %T: %[2]v => %T %[3]v\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">,</span> t<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">0</span> <span class="token builtin">int</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token punctuation">[</span><span class="token number">49</span> <span class="token number">48</span> <span class="token number">48</span><span class="token punctuation">]</span> <span class="token number">100</span>
<span class="token number">1</span> <span class="token builtin">float64</span><span class="token punctuation">:</span> <span class="token number">20.5</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token punctuation">[</span><span class="token number">50</span> <span class="token number">48</span> <span class="token number">46</span> <span class="token number">53</span><span class="token punctuation">]</span> <span class="token number">20.5</span>
<span class="token number">2</span> <span class="token builtin">bool</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token punctuation">[</span><span class="token number">116</span> <span class="token number">114</span> <span class="token number">117</span> <span class="token number">101</span><span class="token punctuation">]</span> <span class="token boolean">true</span>
<span class="token number">3</span> <span class="token builtin">bool</span><span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token punctuation">[</span><span class="token number">102</span> <span class="token number">97</span> <span class="token number">108</span> <span class="token number">115</span> <span class="token number">101</span><span class="token punctuation">]</span> <span class="token boolean">false</span>
<span class="token number">4</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token punctuation">[</span><span class="token number">110</span> <span class="token number">117</span> <span class="token number">108</span> <span class="token number">108</span><span class="token punctuation">]</span> null
<span class="token number">5</span> <span class="token builtin">string</span><span class="token punctuation">:</span> aabb <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token punctuation">[</span><span class="token number">34</span> <span class="token number">97</span> <span class="token number">97</span> <span class="token number">98</span> <span class="token number">98</span> <span class="token number">34</span><span class="token punctuation">]</span> <span class="token string">"aabb"</span>
<span class="token number">6</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">97</span> <span class="token number">98</span> <span class="token number">99</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token punctuation">[</span><span class="token number">91</span> <span class="token number">57</span> <span class="token number">55</span> <span class="token number">44</span> <span class="token number">57</span> <span class="token number">56</span> <span class="token number">44</span> <span class="token number">57</span> <span class="token number">57</span> <span class="token number">93</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">]</span>
<span class="token number">7</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">65</span> <span class="token number">66</span> <span class="token number">67</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token punctuation">[</span><span class="token number">91</span> <span class="token number">54</span> <span class="token number">53</span> <span class="token number">44</span> <span class="token number">54</span> <span class="token number">54</span> <span class="token number">44</span> <span class="token number">54</span> <span class="token number">55</span> <span class="token number">93</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">]</span>
<span class="token number">8</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span>aa<span class="token punctuation">:</span><span class="token number">50</span> abc<span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token punctuation">[</span><span class="token number">123</span> <span class="token number">34</span> <span class="token number">97</span> <span class="token number">97</span> <span class="token number">34</span> <span class="token number">58</span> <span class="token number">53</span> <span class="token number">48</span> <span class="token number">44</span> 
<span class="token number">34</span> <span class="token number">97</span> <span class="token number">98</span> <span class="token number">99</span> <span class="token number">34</span> <span class="token number">58</span> <span class="token number">52</span> <span class="token number">57</span> <span class="token number">125</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"aa"</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">&#125;</span>
以上是序列化结果，说明各种类型数据被序列化成了字节序列，也可以说转换成了字符串。转换到这里就行了，下面的事是把字符串交给JavaScript引擎。
<span class="token operator">*</span><span class="token operator">*</span>特别注意<span class="token operator">*</span><span class="token operator">*</span>，转换的结果都是字符串，但是这些字符串一旦交给JavaScript引擎，它能把它们转换成对应的数据类型。
~~~~~~~~~~~~~~~~~~~~~~~~~~~
<span class="token number">0</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">49</span> <span class="token number">48</span> <span class="token number">48</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token builtin">float64</span> <span class="token number">100</span>
<span class="token number">1</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">50</span> <span class="token number">48</span> <span class="token number">46</span> <span class="token number">53</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token builtin">float64</span> <span class="token number">20.5</span>
<span class="token number">2</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">116</span> <span class="token number">114</span> <span class="token number">117</span> <span class="token number">101</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token builtin">bool</span> <span class="token boolean">true</span>
<span class="token number">3</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">102</span> <span class="token number">97</span> <span class="token number">108</span> <span class="token number">115</span> <span class="token number">101</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token builtin">bool</span> <span class="token boolean">false</span>
<span class="token number">4</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">110</span> <span class="token number">117</span> <span class="token number">108</span> <span class="token number">108</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span>
<span class="token number">5</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">34</span> <span class="token number">97</span> <span class="token number">97</span> <span class="token number">98</span> <span class="token number">98</span> <span class="token number">34</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token builtin">string</span> aabb
<span class="token number">6</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">91</span> <span class="token number">57</span> <span class="token number">55</span> <span class="token number">44</span> <span class="token number">57</span> <span class="token number">56</span> <span class="token number">44</span> <span class="token number">57</span> <span class="token number">57</span> <span class="token number">93</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">[</span><span class="token number">97</span> <span class="token number">98</span> <span class="token number">99</span><span class="token punctuation">]</span>
<span class="token number">7</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">91</span> <span class="token number">54</span> <span class="token number">53</span> <span class="token number">44</span> <span class="token number">54</span> <span class="token number">54</span> <span class="token number">44</span> <span class="token number">54</span> <span class="token number">55</span> <span class="token number">93</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">[</span><span class="token number">65</span> <span class="token number">66</span> <span class="token number">67</span><span class="token punctuation">]</span>
<span class="token number">8</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">123</span> <span class="token number">34</span> <span class="token number">97</span> <span class="token number">97</span> <span class="token number">34</span> <span class="token number">58</span> <span class="token number">53</span> <span class="token number">48</span> <span class="token number">44</span> <span class="token number">34</span> <span class="token number">97</span> <span class="token number">98</span> <span class="token number">99</span> <span class="token number">34</span> <span class="token number">58</span> <span class="token number">52</span> <span class="token number">57</span> <span class="token number">125</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> 
<span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">map</span><span class="token punctuation">[</span>aa<span class="token punctuation">:</span><span class="token number">50</span> abc<span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">]</span>
以上是反序列化结果，从字符串（字节序列）反序列化为Go的某类型数据。因为从浏览器发来的数据都是字符串
需要注意的是，JSON字符串中，数值被转换成了Go的<span class="token builtin">float64</span>类型；<span class="token boolean">true</span>、<span class="token boolean">false</span>转成了<span class="token builtin">bool</span>型；null转成了<span class="token boolean">nil</span>；字符串转成了<span class="token builtin">string</span>；数组转成了<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="结构体序列化"><a href="#结构体序列化" class="headerlink" title="结构体序列化"></a>结构体序列化</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"encoding/json"</span>
 <span class="token string">"fmt"</span>
<span class="token punctuation">)</span>
<span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 Name <span class="token builtin">string</span>
 Age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 序列化</span>
 <span class="token keyword">var</span> data <span class="token operator">=</span> Person<span class="token punctuation">&#123;</span>
 Name<span class="token punctuation">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span>
 Age<span class="token punctuation">:</span>  <span class="token number">20</span><span class="token punctuation">,</span>
 <span class="token punctuation">&#125;</span>
 b<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>            <span class="token comment">// 这是Person的实例</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v, %s\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 这是字符串啦</span>
 <span class="token comment">// 反序列化</span>
 <span class="token keyword">var</span> b1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">`&#123;"Name": "Tom", "Age": 20&#125;`</span><span class="token punctuation">)</span> <span class="token comment">// 字符串，增加了些空格，js中的</span>
对象也就是键值对
 <span class="token keyword">var</span> p Person                                   <span class="token comment">// 知道目标的类型</span>
 err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>b1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span>                   <span class="token comment">// 填充成功，通过指针填充结构</span>
体
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T %+[1]v\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
    
 <span class="token comment">// 不知道类型</span>
 <span class="token keyword">var</span> i <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
 err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>b1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T %+[1]v\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment">// 不知道类型，只能理解为键值对</span>
 <span class="token comment">// map[string]any map[Age:20 Name:Tom]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>切片序列化</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"encoding/json"</span>
 <span class="token string">"fmt"</span>
<span class="token punctuation">)</span>
<span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 Name <span class="token builtin">string</span>
 Age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 序列化</span>
 <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">&#123;</span>
 <span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"AAA"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
 <span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
 <span class="token punctuation">&#125;</span>
 b<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 请问序列化后的字符串中，还有类型吗？有什么？</span>
 <span class="token comment">// 反序列化</span>
 <span class="token comment">// 不知道类型</span>
 <span class="token keyword">var</span> i <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
 err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T: %+[1]v\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
 <span class="token comment">// i类型为[]interface&#123;&#125;，值为[map[Age:20 Name:AAA] map[Age:32 Name:aaa]]</span>
 <span class="token comment">// 知道目标类型</span>
 <span class="token keyword">var</span> b1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">`[&#123;"name":"AAA","Age":20&#125;,&#123;"name":"aaa","Age":32&#125;]`</span><span class="token punctuation">)</span>
 <span class="token keyword">var</span> j <span class="token punctuation">[</span><span class="token punctuation">]</span>Person
 err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>b1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>j<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T: %+[1]v\n"</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>
 <span class="token comment">// j类型为[]Person，值为[&#123;Name:AAA Age:20&#125; &#123;Name:aaa Age:32&#125;]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="字段标签"><a href="#字段标签" class="headerlink" title="字段标签"></a>字段标签</h5><p>结构体的字段可以增加标签tag，用于序列化和反序列化时使用</p>
<ul>
<li>在字段类型后，可以跟反引号引起来的一个标签，用json为key，value用双引号引起来写，key与value直接使用冒号，这个标签中<strong>不要加入多余空格，否则语法错误</strong><ul>
<li>Name string `json:”name”`  这个例子序列化得到的属性名为name<ul>
<li>json表示json库使用</li>
<li>双引号内第一个参数用来指定字段转换使用的名称，多个参数使用逗号隔开</li>
</ul>
</li>
<li>Name string `json:”name,omitempty”` ，omitempty位序列化时忽略空值，也就是该字段不序列化<ul>
<li>空值为false、0、空数组、空切片、空map、空串、nil空指针、nil接口值</li>
<li>空数组、空切片、空串、空map，长度len为0，也就是容器没有元素</li>
</ul>
</li>
</ul>
</li>
<li>如果使用<code>-</code> ，该字段将被忽略<ul>
<li>Name string `json:”-“` ，序列化后没有该字段，反序列化也不会转换该字段</li>
<li>Name string `json:”-,”` ，序列化后该字段显示但名为<code>&quot;-&quot;</code> ，反序列化也会转换该字段</li>
</ul>
</li>
<li>多标签使用空格间隔<ul>
<li>Name string `json:”name,omitempty” msgpack:”myname”`</li>
</ul>
</li>
</ul>
<p>Version:0.9 StartHTML:0000000105 EndHTML:0000001898 StartFragment:0000000141 EndFragment:0000001858</p>
<p><strong>JSON序列化的Go实现效率较低，由此社区和某些公司提供大量开源的实现，例如easyjson、jsoniter、sonic等。对于各个Json序列化包的性能对比这里不列出来了，有兴趣的同学自己查看。基本使用方式都兼容官方实现。</strong></p>
<h4 id="Jsoniter"><a href="#Jsoniter" class="headerlink" title="Jsoniter"></a>Jsoniter</h4><p><img src="/images/LARO94NSUaanvTauyISES6dY_KIT6zNWycgjPYjLwWM.png" alt="image"></p>
<p>下载</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> get github<span class="token punctuation">.</span>com<span class="token operator">/</span>json<span class="token operator">-</span>iterator<span class="token operator">/</span><span class="token keyword">go</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">p <span class="token operator">:=</span> Person<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"dujie"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">&#125;</span>
c<span class="token punctuation">,</span> err <span class="token operator">:=</span> jsoniter<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> s Person
jsoniter<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="MessagePack"><a href="#MessagePack" class="headerlink" title="MessagePack"></a>MessagePack</h3><p>MessagePack是一个基于二进制高效的对象序列化类库，可用于跨语言通信。他可以像json那样，许多种语言之间交换结构对象。但是它比JSON更快速也更轻巧。 支持Python、Ruby、Java、C&#x2F;C++、Go等众多语言。宣称比Google Protocol Buffers还要快4倍。</p>
<p><a href="https://msgpack.org/">https://msgpack.org/</a></p>
<p>文档<a href="https://msgpack.uptrace.dev/"> https://msgpack.uptrace.dev/</a></p>
<p>安装</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> get github<span class="token punctuation">.</span>com<span class="token operator">/</span>vmihailenco<span class="token operator">/</span>msgpack<span class="token operator">/</span>v5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>基本使用方法和json包类似</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>
 <span class="token string">"github.com/vmihailenco/msgpack/v5"</span>
<span class="token punctuation">)</span>
<span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 Name <span class="token builtin">string</span> <span class="token string">`json:"name" msgpack:"myname"`</span>
 Age  <span class="token builtin">int</span>    <span class="token string">`json:"age" msgpack:"myage"`</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 序列化</span>
 <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">&#123;</span>
 <span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
 <span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Jerry"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
 <span class="token punctuation">&#125;</span>
 b<span class="token punctuation">,</span> err <span class="token operator">:=</span> msgpack<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">// 方法都和json兼容</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 二进制</span>
 <span class="token comment">// 反序列化</span>
 <span class="token comment">// 知道目标类型</span>
 <span class="token keyword">var</span> j <span class="token punctuation">[</span><span class="token punctuation">]</span>Person
 err <span class="token operator">=</span> msgpack<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>j<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token keyword">return</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T: %+[1]v\n"</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>








]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang包管理</title>
    <url>/2023/04/25/golang%E5%8C%85%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h1><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>用任何语言来开发，如果软件规模扩大，会编写大量的函数、结构体、接口等代码。这些代码不可能写在一个文件中，这就会产生大量的文件。如果这些文件杂乱无章，就会造成名称冲突、重复定义、难以检索、无法引用、共享不便、版本管理等一系列问题。有一些功能模块如何复用，如何共享方便其他项目使用。所以，一定要有模块化管理，解决以上诸多问题。</p>
<h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><ul>
<li>包由多个文件和目录组成</li>
<li>使用<code>package&lt;包名&gt;</code> 来定义包名</li>
<li>包名一般采用小写，符合标识符要求</li>
<li>当前目录名和<code>package&lt;包名&gt;</code> 中的包名不需要一致，但最好保持一致</li>
<li><strong>同级文件归属一个包</strong>，就是说每个包目录中，只能统一使用同一个package的包名，否则编译出错</li>
</ul>
<p>一般来说，开发项目时，可以吧相关功能的代码集中放在某几个包里面。例如在main包目录中新建一个calc包，将所有计算函数都放在其中，以供别的代码调用。</p>
<p>同一个目录就是同一个包，该包内go文件里面的变量、函数、结构体互相可见，可以直接调用。</p>
<p>跨目录就是跨包，使用时需要导入别的包，导入需要指定该包的路径，</p>
<h3 id="包管理-1"><a href="#包管理-1" class="headerlink" title="包管理"></a>包管理</h3><h5 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h5><p>Go 1.11版本之前，项目依赖包存于GOPATH。GOPATH是一个环境变量，指向一个目录，其中存放项目依赖包的源码。</p>
<p>GOPATH缺省值是 <code>家目录/go </code>。</p>
<p>开发的代码放在 <code>GOPATH/src </code>目录中，编译这个目录的代码，生成的二进制文件放到 <code>GOPATH/bin</code> 目录下。</p>
<p>这会有以下问题</p>
<ul>
<li><p>GOPATH不区分项目，代码中任何import的路径均从GOPATH作为根目录开始。如果有多个项目，不同项目依赖不同库的不同版本，这就很难解决了</p>
</li>
<li><p>所有项目的依赖都放在GOPATH中，很难知道当前项目的依赖项是哪些</p>
</li>
</ul>
<h5 id="GOPATH-vendor机制"><a href="#GOPATH-vendor机制" class="headerlink" title="GOPATH + vendor机制"></a>GOPATH + vendor机制</h5><p>Go 1.5引入vendor机制。</p>
<p>vendor：将项目依赖包复制到项目下的vendor目录，在编译时使用项目下的vendor目录的包进行编译。</p>
<p>依然不能解决不同项目依赖不同包版本问题</p>
<p>包搜索顺序</p>
<ul>
<li>在当前包vendor目录查找</li>
<li>向上级目录查找，直到GOPATH&#x2F;src&#x2F;vendor目录</li>
<li>在GOPATH目录查找</li>
<li>在GOROOT目录查找标准库</li>
</ul>
<h5 id="Go-Modules"><a href="#Go-Modules" class="headerlink" title="Go Modules"></a>Go Modules</h5><p>Go Modules是从Go 1.11版本引入，到1.13版本之后已经成熟，Go Modules成为官方的依赖包管理解决方案。</p>
<p>优势：</p>
<ul>
<li>不受GOPATH限制，代码可放在任意目录</li>
<li>自动管理和下载依赖，且可以控制使用版本</li>
<li>不允许使用相对导入</li>
</ul>
<p>####### GO111MODULE配置<br>GO111MODULE控制Go Module模式是否开启，有off、on、auto（默认）三个值，auto是默认值。</p>
<ul>
<li>GO111MODULE&#x3D;on ，支持模块，Go会忽略GOPATH和vendor目录，只根据go.mod下载依赖，在<code>$GOPATH/pkg/mod</code>目录搜索依赖包。<ul>
<li>Go 1.13后默认开启</li>
<li>目前开发已经使用了1.17+版本，可以不配置，默认直接开启</li>
</ul>
</li>
<li>GO111MODULE&#x3D;off ，不支持模块，Go会从GOPATH和vendor目录寻找包</li>
<li>GO111MODULE&#x3D;auto ，在 $GOPATH&#x2F;src 外面构建项目且根目录有go.mod文件时，开启模块支持。否则使用GOPATH和vendor机制</li>
</ul>
<p>GOPROXY环境变量可以指定包下载镜像（镜像地址有时会变化，请参照官方最新文档）</p>
<ul>
<li>GOPROXY&#x3D;<a href="https://goproxy.cn,direct/">https://goproxy.cn,direct</a></li>
<li>GOPROXY&#x3D;<a href="https://mirrors.aliyun.com/goproxy/">https://mirrors.aliyun.com/goproxy/</a></li>
<li>GOPROXY&#x3D;<a href="https://mirrors.cloud.tencent.com/go/">https://mirrors.cloud.tencent.com/go/</a></li>
<li>GOPROXY&#x3D;<a href="https://repo.huaweicloud.com/repository/goproxy/">https://repo.huaweicloud.com/repository/goproxy/</a></li>
</ul>
<h3 id="Module-模式"><a href="#Module-模式" class="headerlink" title="Module 模式"></a>Module 模式</h3><h6 id="go-mod命令"><a href="#go-mod命令" class="headerlink" title="go mod命令"></a>go mod命令</h6><p>在Go1.11开始引入，可以在任何目录使用go.mod 构建项目</p>
<ul>
<li>init当前文件夹下初始化一个新的module，创建go.mod文件</li>
<li>tidy自动分析依赖，下载缺失的模块，移除未使用的模块，并更新go.mod 文件</li>
</ul>
<p><code>go mod vendor</code> 把第三方依赖包复制到项目的vendor目录中，就可以离线使用该依赖包编译</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> mod init test 

<span class="token keyword">go</span> mod tidy <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<h6 id="构建Module模式项目"><a href="#构建Module模式项目" class="headerlink" title="构建Module模式项目"></a>构建Module模式项目</h6><p>构建项目根目录magtools，并初始化模块<code> go mod init magedu.com/tools</code>，会产生go.mod 文件，内容如下</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">module magedu<span class="token punctuation">.</span>com<span class="token operator">/</span>tools
<span class="token keyword">go</span> <span class="token number">1.19</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>module指定模块名称</li>
<li>go 指定当前模块使用的go版本</li>
</ul>
<p>根目录下新建main.go ，内容如下</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello magedu.com"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>package 指定包名，同一个目录包名必须相同</li>
<li>import导入包。这里要使用绝对导入，且fmt是标准库中的包<ul>
<li>标准库搜索<code>$GOROOT/src</code></li>
</ul>
</li>
<li>main函数，必须在main包中，且只能有一个main函数。如果要编译成可执行文件，必须要有main函数</li>
</ul>
<h5 id="导入子包"><a href="#导入子包" class="headerlink" title="导入子包"></a>导入子包</h5><p>构建本地子包calc，其下创建calc.go</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> calc
<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x and y in calc. Add:%d %d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>
    <span class="token keyword">return</span> x<span class="token operator">+</span>y
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如何在main.go中使用子包的函数Add呢？</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"./calc"</span> <span class="token comment">// 相对导入，不推荐，会发生错误</span>
<span class="token keyword">import</span> <span class="token string">"magedu.com/tools/calc"</span> <span class="token comment">// 正确，Local Package本地包需要使用Module名/子包路径</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>如果在calc下再创建minux&#x2F;minus.go</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> minus
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">func</span> <span class="token function">Minus</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x and y in calc/minus.Minus: %d, %d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
 <span class="token keyword">return</span> x <span class="token operator">-</span> y 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>那么main.go中就要如下导入</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>
 <span class="token string">"magedu.com/tools/calc"</span>
    <span class="token string">"magedu.com/tools/calc/minus"</span>
    <span class="token comment">// m "magedu.com/tools/calc/minus"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>calc<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>minus<span class="token punctuation">.</span><span class="token function">Minus</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// fmt.Println(m.Minus(22, 33))</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello magedu.com"</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>项目目录结构</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">📦magtools
┣ 📂calc
┃ ┣ 📂minus
┃ ┃ ┗ 📜minus<span class="token punctuation">.</span><span class="token keyword">go</span>
┃ ┗ 📜calc<span class="token punctuation">.</span><span class="token keyword">go</span>
┣ 📜<span class="token keyword">go</span><span class="token punctuation">.</span>mod
┗ 📜main<span class="token punctuation">.</span><span class="token keyword">go</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="import关键字"><a href="#import关键字" class="headerlink" title="import关键字"></a>import关键字</h5><p>1、绝对导入</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>
 <span class="token string">"magedu.com/tools/calc"</span>
 <span class="token string">"magedu.com/tools/calc/minus"</span>
<span class="token punctuation">)</span>
<span class="token comment">// 使用举例</span>
calc<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
minus<span class="token punctuation">.</span><span class="token function">Minus</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2、别名导入</p>
<p>如果有两个导入的包冲突时，可以重命名包来避免冲突’</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> m <span class="token string">"magedu.com/tools/calc/minus"</span>
<span class="token comment">// 使用举例</span>
m<span class="token punctuation">.</span><span class="token function">Minus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>3、相对导入</p>
<p>不建议使用</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"./calc"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>4、点导入</p>
<p>不推荐使用</p>
<p>把包内所有导出的成员直接导入到本地，很少使用，很有可能导入的标识符导致冲突。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">.</span> <span class="token string">"magedu.com/tools/calc/minus"</span>
<span class="token comment">// 使用举例</span>
<span class="token function">Minus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>go-staticcheck对于点导入会有警告， <code>should not use dot imports (ST1001)go-staticcheck</code> 。参看 should not use dot imports (ST1001)go-staticcheck。</p>
<p>5、匿名导入</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token boolean">_</span> <span class="token string">"magedu.com/tools/calc/minus"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用下划线作为别名，就意味着无法使用了，那其目的所在？</p>
<p>这种情况下，只能执行导入的保内的所有init函数了。主要作用是做包的初始化用。</p>
<h5 id="init函数"><a href="#init函数" class="headerlink" title="init函数"></a>init函数</h5><ul>
<li>init函数，无参无返回值，不能被其他函数调用</li>
<li>包中的init函数将在main函数之前自动执行</li>
<li>每个包中init函数可以有多个，且可以位于不同的文件中</li>
<li>一个文件中至多有一个init函数</li>
<li>同一个包中的init函数没有明确的执行顺序，不可预期</li>
<li>不同包的init函数的执行顺序由导入顺序决定</li>
</ul>
<p>init函数主要是做一些初始化工作。但是由于同一个包里面init函数执行顺序不可预期，所以除非有必要，不要在同一个包里面定义多个init。init和main函数不一定在同一个文件中。</p>
<p><code>import _ &quot;xxx&quot;</code> 作用是什么？只执行该包的init函数，无法使用包内资源。</p>
<p><code>import &quot;xxx&quot;</code> 作用是什么？也会执行该包的init函数，也可以使用包内资源</p>
<h5 id="导入第三方包"><a href="#导入第三方包" class="headerlink" title="导入第三方包"></a>导入第三方包</h5><p>在 <a href="https://pkg.go.dev/">https://pkg.go.dev/ </a>查找包Beego</p>
<p>下载</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u  github<span class="token punctuation">.</span>com<span class="token operator">/</span>astaxie<span class="token operator">/</span>beego

<span class="token keyword">go</span> mod tidy  <span class="token comment">// 自动下载缺失的包，并清除不使用的包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>main.go</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>
 <span class="token string">"magedu.com/tools/calc"</span>
 m <span class="token string">"magedu.com/tools/calc/minus"</span>
 
 <span class="token string">"github.com/astaxie/beego"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello magedu"</span><span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>calc<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">Minus</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 beego<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>第三方依赖包搜索 <code>$GOPATH/pkg/mod</code> </p>
<p>go.mod中</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">require github<span class="token punctuation">.</span>com<span class="token operator">/</span>astaxie<span class="token operator">/</span>beego v1<span class="token punctuation">.</span><span class="token number">12.3</span>
省略很多的间接依赖<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>拉取模块依赖后，会发现多出了一个 go.sum 文件，其详细罗列了当前项目直接或间接依赖的所有模块版本，并写明了那些模块版本的 SHA-256 哈希值以备 Go 在今后的操作中保证项目所依赖的那些模块版本不会被篡改</p>
<p>指令说明</p>
<ul>
<li>参考：<a href="https://golang.google.cn/ref/mod#go-mod-file-require"> https://golang.google.cn/ref/mod#go-mod-file-require</a></li>
<li>require：用于设置一个特定的模块版本<ul>
<li>&#x2F;&#x2F; indirect：该注释表示该模块为间接依赖，也就是在当前应用程序中的import语句中，并没有发现这个模块的明确引用，有可能是你先手动go get拉取下来的，也有可能是你所依赖的模块依赖的</li>
</ul>
</li>
<li>exclude：用于从使用中排除一个特定的模块版本</li>
<li>replace：用于将一个模块版本替换为另一个模块版本</li>
</ul>
<h5 id="导入本地其他项目"><a href="#导入本地其他项目" class="headerlink" title="导入本地其他项目"></a>导入本地其他项目</h5><p>把calc挪到本地其他目录中，如何导入呢？例如把calc包挪到0:&#x2F;callc，同时在calc目录使用<code>go mod init ccc</code> ，打开增加的go.mod ，内容如下</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">module ccc
<span class="token keyword">go</span> <span class="token number">1.19</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>main.go中的导入和使用如下</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>
 c <span class="token string">"tools/ttt"</span> <span class="token comment">// 故意随便写了一个包路径</span>
 <span class="token comment">// 由于包路径的最后一段是ttt，而calc/calc.go里面是package calc，路径和包名不一</span>
样，所以要用别名
 <span class="token string">"tools/ttt/minus"</span> <span class="token comment">// 上面的子包</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>minus<span class="token punctuation">.</span><span class="token function">Minus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello magedu.com"</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>还需要手动在go.mod 中增加</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">module magedu<span class="token punctuation">.</span>com<span class="token operator">/</span>tools
<span class="token keyword">go</span> <span class="token number">1.19</span>
require <span class="token punctuation">(</span>
    tools<span class="token operator">/</span>ttt v0<span class="token punctuation">.</span><span class="token number">0.0</span> <span class="token comment">// 指定伪版本号，满足格式要求</span>
<span class="token punctuation">)</span>
replace  tools<span class="token operator">/</span>ttt <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"o:/calc"</span> <span class="token comment">// replace指令指定包搜索路径，而不是去GOPATH/pkg/mod</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意，如果报错 reading o:\calc\go.mod: open o:\calc\go.mod: The system cannot find</p>
<p>the file specified. ，说明calc中没有go.mod文件，只需要打开calc目录，使用 go mod init xxx即可。</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang变量逃逸————堆、栈</title>
    <url>/2023/04/17/Golang%E5%8F%98%E9%87%8F%E9%80%83%E9%80%B8%E2%80%94%E2%80%94%E5%A0%86%E3%80%81%E6%A0%88/</url>
    <content><![CDATA[<h1 id="变量逃逸——堆、栈"><a href="#变量逃逸——堆、栈" class="headerlink" title="变量逃逸——堆、栈"></a>变量逃逸——堆、栈</h1><h3 id="变量逃逸——堆、栈-1"><a href="#变量逃逸——堆、栈-1" class="headerlink" title="变量逃逸——堆、栈"></a>变量逃逸——堆、栈</h3><p>堆（Heap）与栈（Stack）是开发人员必须面对的两个概念，在理解这两个概念时，需要放到具体的场景下，因为不同场景下，堆与栈代表不同的含义。一般情况下，有两层含义：<br>（1）程序内存布局场景下，堆与栈表示两种内存管理方式；<br>（2）<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&spm=1001.2101.3001.7020">数据结构</a>场景下，堆与栈表示两种常用的数据结构。</p>
<h5 id="1、程序内存分区中的堆与栈"><a href="#1、程序内存分区中的堆与栈" class="headerlink" title="1、程序内存分区中的堆与栈"></a>1、程序内存分区中的堆与栈</h5><p>####### 1.1 栈简介<br>栈只允许从线性表的同一端放入和取出数据，按照后进先出（LIFO）的顺序，如下图：</p>
<p><img src="/images/xmdfVH9Turoaa0FtsjXQZTyhDyfQ3WhHGXo4Q_jzPBU.png" alt="image"></p>
<p>栈由操作系统自动分配释放，用于存放函数的参数值、局部变量等，其操作方式类似于数据结构中的栈。参考如下代码</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token builtin">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token builtin">int</span> b<span class="token punctuation">;</span>				<span class="token comment">//栈</span>
	char s<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span> 	<span class="token comment">//栈</span>
	char <span class="token operator">*</span>p2<span class="token punctuation">;</span>			<span class="token comment">//栈</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中函数中定义的局部变量按照先后定义的顺序依次压入栈中，也就是说相邻变量的地址之间不会存在其它变量。栈的内存地址生长方向与堆相反，由高到底，所以后定义的变量地址低于先定义的变量，比如上面代码中变量 s 的地址小于变量 b 的地址，p2 地址小于 s 的地址。栈中存储的数据的生命周期随着函数的执行完成而结束。</p>
<h6 id="1-2-堆简介"><a href="#1-2-堆简介" class="headerlink" title="1.2 堆简介"></a>1.2 堆简介</h6><p>堆由开发人员分配和释放， 若开发人员不释放，程序结束时由 OS 回收，分配方式类似于链表。</p>
<p>对于堆在内存中的分配，我们可以类比成一个房间，分配内存时，需要找一块足够装下家具的空间来摆放家具。经过反复摆放和腾空家具后，房间里的空间会变得乱七八糟，此时再往这个空间里摆放家具会发现虽然有足够的空间，但各个空间分布在不同的区域，没有一段连续的空间来摆放家具。此时，内存分配器就需要对这些空间进行调整优化，如下图：</p>
<p><img src="/images/Gpv2A-igzF7gS4p5i4VfUPvoVwhfDlaRIdmaFNB86hk.png" alt="image"></p>
<blockquote>
<p>对比栈和堆可知，在编译时，一切无法确定大小或大小可以改变的数据，最好放到堆上，堆适合不可预知大小的内存分配。但是为此付出的代价是分配速度较慢，而且会形成内存碎片</p>
</blockquote>
<p>函数中申请一个新的对象</p>
<ul>
<li>如果分配到栈中，则函数执行结束可自动将内存回收</li>
<li>如果分配到堆中，则函数执行结束可教给GC（垃圾回收）处理</li>
</ul>
<h3 id="减少逃逸，将变量限制在栈上"><a href="#减少逃逸，将变量限制在栈上" class="headerlink" title="减少逃逸，将变量限制在栈上"></a>减少逃逸，将变量限制在栈上</h3><p>变量逃逸一般发生在如下情况下：</p>
<ul>
<li>变量较大（栈空间不足）</li>
<li>变量大小不确定（如slice长度或容量不定）</li>
<li>返回地址</li>
<li>返回引用（引用变量的底层是指针）</li>
<li>返回值类型不确定（不能确定大小）</li>
<li>闭包</li>
<li>其他</li>
</ul>
<p>知道变量逃逸的原因后，我们可以有意识地<a href="https://so.csdn.net/so/search?q=%E6%8E%A7%E5%88%B6%E5%8F%98%E9%87%8F&spm=1001.2101.3001.7020">控制变量</a>不发生逃逸，将其控制在栈上，减少堆变量的分配，降低 GC 成本，提高程序性能。</p>
<p><strong>「逃逸分析」</strong>就是程序运行时内存的分配位置(栈或堆)，是由编辑器来确定的，而非开发者。</p>
<blockquote>
<h1 id="逃逸分析的好处应该是减少了-gc-的压力，栈的分配比堆快，性能好，如果变量都分配到栈上，可以避免-Go-频繁地进行垃圾回收，而垃圾回收会占用比较大的系统开销。"><a href="#逃逸分析的好处应该是减少了-gc-的压力，栈的分配比堆快，性能好，如果变量都分配到栈上，可以避免-Go-频繁地进行垃圾回收，而垃圾回收会占用比较大的系统开销。" class="headerlink" title="逃逸分析的好处应该是减少了 gc 的压力，栈的分配比堆快，性能好，如果变量都分配到栈上，可以避免 Go 频繁地进行垃圾回收，而垃圾回收会占用比较大的系统开销。"></a>逃逸分析的好处应该是减少了 gc 的压力，栈的分配比堆快，性能好，如果变量都分配到栈上，可以避免 Go 频繁地进行垃圾回收，而垃圾回收会占用比较大的系统开销。</h1></blockquote>
<h5 id="逃逸分析基本原则"><a href="#逃逸分析基本原则" class="headerlink" title="逃逸分析基本原则"></a>逃逸分析基本原则</h5><p>编译器会根据变量是否被外部引用来决定是否逃逸：</p>
<ol>
<li>如果函数外部没有引用，优先放栈上</li>
<li>如果函数外部存在引用，则必定放到堆中。</li>
<li>如果栈上放不开，则必定放到堆上。</li>
</ol>
<p><strong>可以肯定的是，如果函数里面的变量返回了一个地址，那么这个变量肯定会发生逃逸。</strong></p>
<p>go编译器会判断变量的生命周期，如果编译器认为函数结束后，这个变量不再被外部的引用了，会分配到栈，否则分配到堆</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b
    <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>c
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>上面的变量d，虽然通过&amp;d获取了他的地址，但只是在函数中进行打印</li>
<li>而e虽然通过new方法定义，但不能分配到堆，因为d和e并没有被外部引用，只能被分配到栈，所以在sum函数结束之后，被自动释放</li>
<li>但是c，return了他的地址，返回了指针，那么久表示这个变量对应的内存可以被外部访问，所以会逃逸到堆。</li>
</ul>
<h3 id="逃逸场景"><a href="#逃逸场景" class="headerlink" title="逃逸场景"></a>逃逸场景</h3><h5 id="指针逃逸"><a href="#指针逃逸" class="headerlink" title="指针逃逸"></a>指针逃逸</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
​
<span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 Name <span class="token builtin">string</span>
 Age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
​
<span class="token keyword">func</span> <span class="token function">PersonRegister</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Person <span class="token punctuation">&#123;</span>
 p <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span> <span class="token comment">//局部变量s逃逸到堆</span>
​
 p<span class="token punctuation">.</span>Name <span class="token operator">=</span> name
 p<span class="token punctuation">.</span>Age <span class="token operator">=</span> age
​
 <span class="token keyword">return</span> p
<span class="token punctuation">&#125;</span>
​
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token function">PersonRegister</span><span class="token punctuation">(</span><span class="token string">"微客鸟窝"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>函数 PersonRegister() 内部 p 为局部变量，其值通过函数返回值返回， p 本身为一指针，其指向的内存地址不会是栈而是堆，这就是典型的逃逸案例。</p>
<p>可以通过编译参数-gcflags&#x3D;-m查看编译过程的逃逸分析</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">mac@MacdeMBP test2 <span class="token operator">%</span> <span class="token keyword">go</span> build <span class="token operator">-</span>gcflags<span class="token operator">=</span><span class="token operator">-</span>m main<span class="token punctuation">.</span><span class="token keyword">go</span> 
# command<span class="token operator">-</span>line<span class="token operator">-</span>arguments
<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> can inline PersonRegister
<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> can inline main
<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">:</span> inlining call to PersonRegister
<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">:</span> leaking param<span class="token punctuation">:</span> name
<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span> <span class="token function">new</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span> escapes to heap
<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">:</span> <span class="token function">new</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span> does not escape
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>代码第7行显示escapes to heap 表示该行内存分配发生了逃逸现象</p>
<h5 id="栈空间不足逃逸"><a href="#栈空间不足逃逸" class="headerlink" title="栈空间不足逃逸"></a>栈空间不足逃逸</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
​
<span class="token keyword">func</span> <span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
​
 <span class="token keyword">for</span> index<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">&#123;</span>
  s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> index
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
​
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面代码 Slice() 函数中分配了一个1000个长度的切片，是否逃逸取决于栈空间是否足够大。直接查看编译提示，如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">mac@MacdeMBP test2 <span class="token operator">%</span> <span class="token keyword">go</span> build <span class="token operator">-</span>gcflags<span class="token operator">=</span><span class="token operator">-</span>m main<span class="token punctuation">.</span><span class="token keyword">go</span>
# command<span class="token operator">-</span>line<span class="token operator">-</span>arguments
<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> can inline Slice
<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> can inline main
<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span> inlining call to Slice
<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> does not escape
<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> does not escape

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>发现并没有发生逃逸。我们把切片长度扩大10倍再试试： <code>s := make([]int, 10000, 10000)</code></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">mac@MacdeMBP test2 <span class="token operator">%</span> <span class="token keyword">go</span> build <span class="token operator">-</span>gcflags<span class="token operator">=</span><span class="token operator">-</span>m main<span class="token punctuation">.</span><span class="token keyword">go</span>
# command<span class="token operator">-</span>line<span class="token operator">-</span>arguments
<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> can inline Slice
<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> can inline main
<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span> inlining call to Slice
<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span> escapes to heap
<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span> escapes to heap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>发现当切片长度扩大到10000时就会逃逸。当栈空间不足以存放当前对象时或无法判断当前切片长度时会将对象分配到堆中。</p>
<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结：</strong></h4><ul>
<li>栈上分配内存比在堆中分配内存效率更高</li>
<li>栈上分配的内存不需要GC处理，而堆需要</li>
<li>逃逸分析目的是决定内存分配地址是栈还是堆</li>
<li>逃逸分析在编译阶段完成</li>
</ul>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang日志管理</title>
    <url>/2023/05/01/Golang%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h3 id="标准库的log包"><a href="#标准库的log包" class="headerlink" title="标准库的log包"></a><strong>标准库的log包</strong></h3><p>Go标准库中有log包，提供了简单的日志功能。</p>
<table>
<thead>
<tr>
<th><strong>输出</strong></th>
<th><strong>格式输出</strong></th>
<th><strong>换行输出</strong></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>log.Print()</td>
<td>log.Printf()</td>
<td>log.Pringln()</td>
<td>类似fmt.print*</td>
</tr>
<tr>
<td>log.Fatal()</td>
<td>log.Fatalf()</td>
<td>log.Fatalln()</td>
<td>相当于log.Print* + os.Exit(1)</td>
</tr>
<tr>
<td>log.Panic()</td>
<td>log.Panicf()</td>
<td>log.Panicln()</td>
<td>相当于log.Print* + panic(0</td>
</tr>
</tbody></table>
<p>日志输出需要使用日志记录器Logger。</p>
<p>log包提供了一个缺省的Logger即std。std是小写的，包外不可见，所以提供了Default()方法返回std给包外使用。如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"log"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 这里就是使用缺省的logger对象，可以点进Println查看源码</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"这是缺省的logger"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>源码如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// go源码</span>
<span class="token comment">// Println calls Output to print to the standard logger.</span>
<span class="token comment">// Arguments are handled in the manner of fmt.Println.</span>
<span class="token keyword">func</span> <span class="token function">Println</span><span class="token punctuation">(</span>v <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> std<span class="token punctuation">.</span>isDiscard<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	std<span class="token punctuation">.</span><span class="token function">Output</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintln</span><span class="token punctuation">(</span>v<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 再点击std可以查看到，这里有一个默认的std，他的输出是os.Stderr标准错误输出到控制台，flag为LstdFlags</span>
<span class="token keyword">var</span> std <span class="token operator">=</span> <span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> LstdFlags<span class="token punctuation">)</span>

<span class="token comment">// Default returns the standard logger used by the package-level output functions.</span>
<span class="token keyword">func</span> <span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Logger <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> std <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>标准库的flag如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 源码41行左右</span>
<span class="token comment">//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message</span>
<span class="token keyword">const</span> <span class="token punctuation">(</span>
	Ldate         <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token boolean">iota</span>     <span class="token comment">// 1 当前时区日期: 2009/01/23</span>
	Ltime                         <span class="token comment">// 2 当前时区时间: 01:23:23</span>
	Lmicroseconds                 <span class="token comment">// 4 微秒: 01:23:23.123123.  assumes Ltime.</span>
	Llongfile                     <span class="token comment">// 8 绝对路径和行号: /a/b/c/d.go:23</span>
	Lshortfile                    <span class="token comment">// 16 文件名和行号: d.go:23. overrides Llongfile</span>
	LUTC                          <span class="token comment">// 32 使用UTC(GMT)，而不是本地时区</span>
	Lmsgprefix                    <span class="token comment">// 64 默认前缀是放在行首的，这个标记为把前缀prefix放到消息message之前</span>
	LstdFlags     <span class="token operator">=</span> Ldate <span class="token operator">|</span> Ltime <span class="token comment">// 3 initial values for the standard logger  位或，二进制的01 | 10 = 11 =》十进制3</span>
<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上表列出的方法底层都使用std.Output输出日志内容。而std本质上是使用了<strong>标准错误输出</strong>、<strong>无前缀</strong>、<strong>LstdFlags 标准标记</strong>的记录器Logger实例</p>
<h5 id="std使用"><a href="#std使用" class="headerlink" title="std使用"></a><strong>std使用</strong></h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 使用缺省Logger</span>
log<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"abcde\n"</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span><span class="token string">"abcd"</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span>

log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"xyz"</span><span class="token punctuation">)</span> <span class="token comment">// 等价于 log.Print("xyz");os.Exit(1)</span>

log<span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span><span class="token string">"xyz"</span><span class="token punctuation">)</span> <span class="token comment">// 等价于 log.Print("xyz");panic()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>




<h5 id="自定义Logger"><a href="#自定义Logger" class="headerlink" title="自定义Logger"></a><strong>自定义Logger</strong></h5><p>Go源码</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// multiple goroutines; it guarantees to serialize access to the Writer.</span>
<span class="token keyword">type</span> Logger <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	mu        sync<span class="token punctuation">.</span>Mutex  <span class="token comment">// ensures atomic writes; protects the following fields</span>
	prefix    <span class="token builtin">string</span>      <span class="token comment">// prefix on each line to identify the logger (but see Lmsgprefix)</span>
	flag      <span class="token builtin">int</span>         <span class="token comment">// properties</span>
	out       io<span class="token punctuation">.</span>Writer   <span class="token comment">// destination for output</span>
	buf       <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>      <span class="token comment">// for accumulating text to write</span>
	isDiscard atomic<span class="token punctuation">.</span>Bool <span class="token comment">// whether out == io.Discard</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// New creates a new Logger. The out variable sets the</span>
<span class="token comment">// destination to which log data will be written.</span>
<span class="token comment">// The prefix appears at the beginning of each generated log line, or</span>
<span class="token comment">// after the log header if the Lmsgprefix flag is provided.</span>
<span class="token comment">// The flag argument defines the logging properties.</span>
<span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>out io<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> prefix <span class="token builtin">string</span><span class="token punctuation">,</span> flag <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Logger <span class="token punctuation">&#123;</span>
	l <span class="token operator">:=</span> <span class="token operator">&amp;</span>Logger<span class="token punctuation">&#123;</span>out<span class="token punctuation">:</span> out<span class="token punctuation">,</span> prefix<span class="token punctuation">:</span> prefix<span class="token punctuation">,</span> flag<span class="token punctuation">:</span> flag<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> out <span class="token operator">==</span> io<span class="token punctuation">.</span>Discard <span class="token punctuation">&#123;</span>
		l<span class="token punctuation">.</span>isDiscard<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> l
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果觉得缺省Logger std不满意，可以New构建一个自定义Logger并指定前缀、Flags。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"log"</span>
	<span class="token string">"os"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"这是缺省的logger"</span><span class="token punctuation">)</span>

        
	infologger <span class="token operator">:=</span> log<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">"Info："</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">|</span>log<span class="token punctuation">.</span>Lmsgprefix<span class="token punctuation">)</span>
	infologger<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"这是自定义的普通消息"</span><span class="token punctuation">)</span>

	errLogger <span class="token operator">:=</span> log<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">"Error:"</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span>LstdFlags<span class="token punctuation">)</span>
	errLogger<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span><span class="token string">"这是一个自定义的错误消息"</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p><strong>log.New 参数详解：</strong></p>
<ul>
<li>1、<code>out io.Writer</code> ：er结尾说明是一个接口，out应该有自己的类型，同时其类型又实现了Writer的所有方法，所以out也可以看做为io.Writer类型的实例，out主要用于写入设备</li>
<li>2、<code>prefix string</code> ：前缀，用于在日志前面增加一串字符串，可以通过flag参数设置为<code>log.Lmsgprefix</code>将它设置为在message前面</li>
<li>3、<code>flag int</code> ：确定Logger的工作方式如下：</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 源码41行左右</span>
<span class="token comment">//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message</span>
<span class="token keyword">const</span> <span class="token punctuation">(</span>  <span class="token comment">// 可以做位与、为或</span>
	Ldate         <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token boolean">iota</span>     <span class="token comment">// 1 当前时区日期: 2009/01/23</span>
	Ltime                         <span class="token comment">// 2 当前时区时间: 01:23:23</span>
	Lmicroseconds                 <span class="token comment">// 4 微秒: 01:23:23.123123.  assumes Ltime.</span>
	Llongfile                     <span class="token comment">// 8 绝对路径和行号: /a/b/c/d.go:23</span>
	Lshortfile                    <span class="token comment">// 16 文件名和行号: d.go:23. overrides Llongfile</span>
	LUTC                          <span class="token comment">// 32 使用UTC(GMT)，而不是本地时区</span>
	Lmsgprefix                    <span class="token comment">// 64 默认前缀是放在行首的，这个标记为把前缀prefix放到消息message之前</span>
	LstdFlags     <span class="token operator">=</span> Ldate <span class="token operator">|</span> Ltime <span class="token comment">// 3 initial values for the standard logger  位或，二进制的01 | 10 = 11 =》十进制3</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/images/BDP-9YI67K64UgUIaM4LFXWCdmzzRjGhBWuxyga9jSo.png" alt="image"></p>
<h5 id="写日志文件"><a href="#写日志文件" class="headerlink" title="写日志文件"></a><strong>写日志文件</strong></h5><p>New方法签名<code>func New(out io.Writer, prefix string, flag int) *Logger</code> 中out参数提供Writer接口即可，那么就可以提供一个可写文件对象</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"log"</span>
	<span class="token string">"os"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         <span class="token comment">// os.Open为只读打开，OpenFile按照指定方式打开文件</span>
	file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Administrator\\Desktop\\test.txt"</span><span class="token punctuation">,</span>
         os<span class="token punctuation">.</span>O_APPEND<span class="token operator">|</span>os<span class="token punctuation">.</span>O_WRONLY<span class="token punctuation">,</span> <span class="token comment">// 追加| 只写</span>
         <span class="token number">777</span><span class="token punctuation">)</span>  <span class="token comment">// 权限为777</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
        <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 使用结束关闭文件句柄</span>
	logger <span class="token operator">:=</span> log<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">"Info："</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
	logger<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"这是一条测试的日志"</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="ZeroLog"><a href="#ZeroLog" class="headerlink" title="ZeroLog"></a><strong>ZeroLog</strong></h3><p>log模块太简陋了，实际使用并不方便。</p>
<ul>
<li>logrus有日志级别、Hook机制、日志输出格式，很好用</li>
<li>zap是Uber的开源高性能日志库</li>
<li>zerolog更注重开发体验，高性能、有日志级别、链式API，json格式记录，号称0内存分配</li>
</ul>
<p>官网： <a href="https://zerolog.io/">https://zerolog.io/</a></p>
<p>安装 </p>
<pre class="line-numbers language-Plain" data-language="Plain"><div class="caption"><span>Text</span></div><code class="language-Plain">go get -u github.com&#x2F;rs&#x2F;zerolog&#x2F;log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h5 id="缺省Logger"><a href="#缺省Logger" class="headerlink" title="缺省Logger"></a><strong>缺省Logger</strong></h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"github.com/rs/zerolog"</span>
	<span class="token string">"github.com/rs/zerolog/log"</span>
	<span class="token string">"os"</span>
	<span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

	zerolog<span class="token punctuation">.</span>TimeFieldFormat <span class="token operator">=</span> <span class="token string">"2006/01/02 15:04:05 -0700"</span>
	log<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"这是zerolog的默认消息"</span><span class="token punctuation">)</span> <span class="token comment">// 使用全局缺省logger</span>
	<span class="token comment">// 输出&#123;"level":"debug","time":"2023/07/23 13:55:05 +0800","message":"这是zerolog的默认消息"&#125;</span>
       
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>log.Print 产生debug级别的消息，zerolog源码117行左右</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Print sends a log event using debug level and no extra field.</span>
<span class="token comment">// Arguments are handled in the manner of fmt.Print.</span>
<span class="token keyword">func</span> <span class="token function">Print</span><span class="token punctuation">(</span>v <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Logger<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CallerSkipFrame</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprint</span><span class="token punctuation">(</span>v<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 源码13行左右，定义了一个全局导出的缺省Logger，使用链式调用，缺省Logger使用标准错误输出</span>
<span class="token keyword">var</span> Logger <span class="token operator">=</span> zerolog<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>log.Print()、log.Printf()方法使用方式和标准库log模块类似</p>
<h5 id="级别"><a href="#级别" class="headerlink" title="级别"></a><strong>级别</strong></h5><p>zerolog提供以下级别，tracelevel级别最低-1</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// zerolog源码112行</span>
<span class="token keyword">type</span> Level <span class="token builtin">int8</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	<span class="token comment">// DebugLevel defines debug log level.</span>
	DebugLevel Level <span class="token operator">=</span> <span class="token boolean">iota</span>     <span class="token number">0</span>
	<span class="token comment">// InfoLevel defines info log level.</span>
	InfoLevel    <span class="token number">1</span>
	<span class="token comment">// WarnLevel defines warn log level.</span>
	WarnLevel    <span class="token number">2</span>
	<span class="token comment">// ErrorLevel defines error log level.</span>
	ErrorLevel   <span class="token number">3</span>
	<span class="token comment">// FatalLevel defines fatal log level.</span>
	FatalLevel   <span class="token number">4</span>
	<span class="token comment">// PanicLevel defines panic log level.</span>
	PanicLevel   <span class="token number">5</span>
	<span class="token comment">// NoLevel defines an absent log level.</span>
	NoLevel      <span class="token number">6</span>
	<span class="token comment">// Disabled disables the logger.</span>
	Disabled     <span class="token number">7</span>

	<span class="token comment">// TraceLevel defines trace log level.</span>
	TraceLevel Level <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
	<span class="token comment">// Values less than TraceLevel are handled as numbers.</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>级别有</p>
<ul>
<li>gLevel全局级别<ul>
<li><code>zerolog.SetGlobalLevel(级别数字或常量)</code> 来设置全局级别</li>
<li><code>zerolog.GlobalLevel()</code> 获取当前全局级别</li>
</ul>
</li>
<li>每个Logger的级别</li>
<li>消息的级别</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"github.com/rs/zerolog"</span>
	<span class="token string">"github.com/rs/zerolog/log"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"全局级别的glevel为："</span><span class="token punctuation">,</span> zerolog<span class="token punctuation">.</span><span class="token function">GlobalLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"缺省logger的级别为："</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">GetLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	log1 <span class="token operator">:=</span> log<span class="token punctuation">.</span><span class="token function">Level</span><span class="token punctuation">(</span>zerolog<span class="token punctuation">.</span>WarnLevel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"log1的级别为"</span><span class="token punctuation">,</span> log1<span class="token punctuation">.</span><span class="token function">GetLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"缺省logger输出trace级别消息"</span><span class="token punctuation">)</span> <span class="token comment">// 可以输出</span>
	log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"缺省logger输出info级别消息"</span><span class="token punctuation">)</span> <span class="token comment">// 可以输出</span>
	log<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"缺省logger输出warn级别消息"</span><span class="token punctuation">)</span> <span class="token comment">// 可以输出</span>
	log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"缺省logger输出error级别消息"</span><span class="token punctuation">)</span> <span class="token comment">// 可以输出</span>
	<span class="token comment">//log.Fatal().Msg("缺省logger输出fatal级别消息") </span>
	<span class="token comment">//log.Panic().Msg("缺省logger输出panic级别消息")</span>
	
	log1<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"log1输出debug级别消息"</span><span class="token punctuation">)</span> <span class="token comment">// 输出不了，因为log1的消息级别为debug，小于log1的级别warn</span>
	log1<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"log1输出error级别消息"</span><span class="token punctuation">)</span> <span class="token comment">// 可以输出，因为log1的消息级别为error，大于log1的级别warn</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，使用缺省logger，全部可以输出日志消息，而log1的24行可以输出，23行不能输出，<strong>因为有消息级别和Logger级别</strong></p>
<p>log1的级别为warn，而log1.Debug()输出的消息级别为debug级别0，消息级别小于log1级别，所以消息不能输出。log1.Error()产生error消息，消息级别 大于等于log1级别的warn，因此可以输出消息。</p>
<p>而缺省的Logger级别为trace，任何消息级别都大于等于缺省的logger的级别，因此都可以输出</p>
<p>下面可以调整全局级别看一看</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"github.com/rs/zerolog"</span>
	<span class="token string">"github.com/rs/zerolog/log"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	zerolog<span class="token punctuation">.</span><span class="token function">SetGlobalLevel</span><span class="token punctuation">(</span>zerolog<span class="token punctuation">.</span>ErrorLevel<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"全局级别的glevel为："</span><span class="token punctuation">,</span> zerolog<span class="token punctuation">.</span><span class="token function">GlobalLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"缺省logger的级别为："</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">GetLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	log1 <span class="token operator">:=</span> log<span class="token punctuation">.</span><span class="token function">Level</span><span class="token punctuation">(</span>zerolog<span class="token punctuation">.</span>WarnLevel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 创建一个子logger</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"log1的级别为"</span><span class="token punctuation">,</span> log1<span class="token punctuation">.</span><span class="token function">GetLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"缺省logger输出trace级别消息"</span><span class="token punctuation">)</span> <span class="token comment">// 不能输出</span>
	log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"缺省logger输出info级别消息"</span><span class="token punctuation">)</span>   <span class="token comment">// 不能输出</span>
	log<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"缺省logger输出warn级别消息"</span><span class="token punctuation">)</span>   <span class="token comment">// 不能输出</span>
	log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"缺省logger输出error级别消息"</span><span class="token punctuation">)</span> <span class="token comment">// 可以输出</span>
	<span class="token comment">//log.Fatal().Msg("缺省logger输出fatal级别消息")</span>
	<span class="token comment">//log.Panic().Msg("缺省logger输出panic级别消息")</span>

	log1<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"log1输出warn级别消息"</span><span class="token punctuation">)</span> <span class="token comment">// 输出不了，因为log1的消息级别为debug，虽然等于log1的级别warn，但是小于全局的glevel的error级别，所以还是输出不了</span>
	log1<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"log1输出error级别消息"</span><span class="token punctuation">)</span> <span class="token comment">// 可以输出，因为log1的消息级别为error，大于log1的级别warn，且等于全局的glevel的error级别，所以可以输出</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 输出</span>
全局级别的glevel为： <span class="token builtin">error</span>
缺省logger的级别为： trace
log1的级别为 warn
~~~~~~~~~~~~~~~~
<span class="token punctuation">&#123;</span><span class="token string">"level"</span><span class="token punctuation">:</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"time"</span><span class="token punctuation">:</span><span class="token string">"2023-07-23T14:22:39+08:00"</span><span class="token punctuation">,</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"缺省logger输出error级别消息"</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span><span class="token string">"level"</span><span class="token punctuation">:</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"time"</span><span class="token punctuation">:</span><span class="token string">"2023-07-23T14:22:39+08:00"</span><span class="token punctuation">,</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"log1输出error级别消息"</span><span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>缺省logger和log1都只有error级别的输出，说明将glevel调整到error级别后，所有logger输出消息必须大于等于glevel。</p>
<p><strong>特别注意：zerolog.SetGlobalLevel()设置的是全局变量gLevel，它影响所有的Logger</strong></p>
<p>所以我们得出以下公式：</p>
<p>日志消息是否能够输出，应当满足下面的要求：<code>消息级别 &gt;= max(全局glevel,当前logger的level)</code></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">zerolog<span class="token punctuation">.</span><span class="token function">SetGlobalLevel</span><span class="token punctuation">(</span>zerolog<span class="token punctuation">.</span>Disabled<span class="token punctuation">)</span>
<span class="token comment">// zerolog.Disabled 为7，没有消息级别可以大于等于7，相当于禁用所有的Logger，自然不能够输出。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h5 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a><strong>上下文</strong></h5><p>zerolog是以Json对象格式输出的，还可以自定义一些键值对字段增加到上下文中以输出</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"github.com/rs/zerolog"</span>
	<span class="token string">"github.com/rs/zerolog/log"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Name <span class="token builtin">string</span> <span class="token string">`json:"name"`</span>
	Age  <span class="token builtin">int</span>    <span class="token string">`json:"age"`</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> all <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		all <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>all<span class="token punctuation">,</span> Person<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"name%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	zerolog<span class="token punctuation">.</span><span class="token function">SetGlobalLevel</span><span class="token punctuation">(</span>zerolog<span class="token punctuation">.</span>InfoLevel<span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Bool</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Str</span><span class="token punctuation">(</span><span class="token string">"Reason"</span><span class="token punctuation">,</span> <span class="token string">"File Not Found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"文件没有找到"</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Str</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Floats32</span><span class="token punctuation">(</span><span class="token string">"Scores"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float32</span><span class="token punctuation">&#123;</span><span class="token number">62.3</span><span class="token punctuation">,</span> <span class="token number">99.3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> all<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> all<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"测试啊啊啊"</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a><strong>错误日志</strong></h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"errors"</span>
	<span class="token string">"github.com/rs/zerolog"</span>
	<span class="token string">"github.com/rs/zerolog/log"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Name <span class="token builtin">string</span> <span class="token string">`json:"name"`</span>
	Age  <span class="token builtin">int</span>    <span class="token string">`json:"age"`</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	zerolog<span class="token punctuation">.</span>TimeFieldFormat <span class="token operator">=</span> zerolog<span class="token punctuation">.</span>TimeFormatUnix <span class="token comment">// 自定义time字段时间的格式，TimeFormatUnix时间戳</span>
	zerolog<span class="token punctuation">.</span>ErrorFieldName <span class="token operator">=</span> <span class="token string">"err"</span>                   <span class="token comment">// 修改日志Json中的缺省字段名error</span>

	<span class="token comment">// 错误日志</span>
	err <span class="token operator">:=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"自定义错误"</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token comment">// err 字段，错误消息内容</span>
	<span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 有错误消息了，message可以省略</span>
	<span class="token comment">//log.Fatal().Err(err).Send()</span>
	log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span>
<span class="token comment">// 输出</span>
<span class="token punctuation">&#123;</span><span class="token string">"level"</span><span class="token punctuation">:</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"err"</span><span class="token punctuation">:</span><span class="token string">"自定义错误"</span><span class="token punctuation">,</span><span class="token string">"time"</span><span class="token punctuation">:</span><span class="token number">1690095612</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span><span class="token string">"level"</span><span class="token punctuation">:</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token string">"time"</span><span class="token punctuation">:</span><span class="token number">1690095612</span><span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="全局Logger"><a href="#全局Logger" class="headerlink" title="全局Logger"></a><strong>全局Logger</strong></h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 全局Logger定义如下</span>
<span class="token keyword">var</span> Logger <span class="token operator">=</span> zerolog<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>可以覆盖全局Logger</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">log<span class="token punctuation">.</span>Logger <span class="token operator">=</span> log<span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Str</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">,</span> <span class="token string">"2020-01-02 15:04"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<h5 id="自定义Logger-1"><a href="#自定义Logger-1" class="headerlink" title="自定义Logger"></a><strong>自定义Logger</strong></h5><pre class="line-numbers language-go" data-language="go"><code class="language-go">	zerolog<span class="token punctuation">.</span>TimeFieldFormat <span class="token operator">=</span> <span class="token string">"2006-01-02 15:04:05"</span>
	logger <span class="token operator">:=</span> log<span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
		<span class="token function">Str</span><span class="token punctuation">(</span><span class="token string">"School"</span><span class="token punctuation">,</span> <span class="token string">"magedu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
		<span class="token function">Caller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token comment">// 增加日志调用的位置信息字段</span>
		<span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 返回logger</span>
	logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 输出</span>
<span class="token punctuation">&#123;</span><span class="token string">"level"</span><span class="token punctuation">:</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token string">"School"</span><span class="token punctuation">:</span><span class="token string">"magedu"</span><span class="token punctuation">,</span><span class="token string">"time"</span><span class="token punctuation">:</span><span class="token string">"2023-07-23 15:05:23"</span><span class="token punctuation">,</span><span class="token string">"caller"</span><span class="token punctuation">:</span><span class="token string">"C:/Users/Administrator/GolandProjects/awesomeProject/hello.go:29"</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span><span class="token string">"level"</span><span class="token punctuation">:</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token string">"time"</span><span class="token punctuation">:</span><span class="token string">"2023-07-23 15:05:23"</span><span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<pre class="line-numbers language-go" data-language="go"><code class="language-go">zerolog<span class="token punctuation">.</span>TimeFieldFormat <span class="token operator">=</span> <span class="token string">"2006-01-02 15:04:05"</span>
logger <span class="token operator">:=</span> zerolog<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Caller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Level</span><span class="token punctuation">(</span>zerolog<span class="token punctuation">.</span>InfoLevel<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">GetLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>




<h4 id="写日志文件-1"><a href="#写日志文件-1" class="headerlink" title="写日志文件"></a><strong>写日志文件</strong></h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"github.com/rs/zerolog"</span>
	<span class="token string">"github.com/rs/zerolog/log"</span>
	<span class="token string">"os"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	zerolog<span class="token punctuation">.</span>TimeFieldFormat <span class="token operator">=</span> zerolog<span class="token punctuation">.</span>TimeFormatUnix <span class="token comment">// 自定义time字段时间的格式，TimeFormatUnix时间戳</span>
	zerolog<span class="token punctuation">.</span>ErrorFieldName <span class="token operator">=</span> <span class="token string">"err"</span>                   <span class="token comment">// 修改日志Json中的缺省字段名error</span>
	file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"fuck.log"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_APPEND<span class="token operator">|</span>os<span class="token punctuation">.</span>O_WRONLY<span class="token punctuation">,</span> os<span class="token punctuation">.</span>ModePerm<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"open file error"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	levelwrite <span class="token operator">:=</span> zerolog<span class="token punctuation">.</span><span class="token function">MultiLevelWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> os<span class="token punctuation">.</span>Stderr<span class="token punctuation">)</span>
	logger <span class="token operator">:=</span> zerolog<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>levelwrite<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">"日志写入到文件同时在控制台打印"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果只输出到文件可以使用<code>zerolog.New(f).With().Timestamp().Logger()</code></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 操作MongoDB</title>
    <url>/2023/05/09/Go%E6%93%8D%E4%BD%9CMongoDB/</url>
    <content><![CDATA[<h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><p>MongoDB属于非关系型数据库，是由C++编写的分布式文档数据库。内部使用类似于Json的bson二进制格式。</p>
<p>中文手册</p>
<p><a href="https://www.w3cschool.cn/mongodb/">https://www.w3cschool.cn/mongodb/</a></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></p>
<p>自行下载对应操作系统的MongoDB，并运行它。</p>
<p>windows可以下载官方zip，解压即可使用。</p>
<table>
<thead>
<tr>
<th>组件</th>
<th>文件名</th>
</tr>
</thead>
<tbody><tr>
<td>Server</td>
<td>mongod.exe</td>
</tr>
<tr>
<td>Router</td>
<td>mongos.exe，Query Router,Sharding Cluster</td>
</tr>
<tr>
<td>Client</td>
<td>mongo.exe</td>
</tr>
<tr>
<td>MonitoringTools</td>
<td>mongostat.exe，mongotop.exe</td>
</tr>
<tr>
<td>ImportExportTools</td>
<td>mongostat.exe，mongotop.exe</td>
</tr>
<tr>
<td>MiscellaneousTools</td>
<td>bsondump.exe，mongofiles.exe，mongooplog.exe，mongoperf.exe</td>
</tr>
</tbody></table>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">$ cd <span class="token operator">/</span>o<span class="token operator">/</span>mongodb3<span class="token punctuation">.</span><span class="token number">6</span><span class="token operator">/</span>bin
$ <span class="token punctuation">.</span><span class="token operator">/</span>mongod<span class="token punctuation">.</span>exe
<span class="token number">2019</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span>02T03<span class="token punctuation">:</span><span class="token number">26</span><span class="token punctuation">:</span><span class="token number">13.234</span><span class="token operator">-</span><span class="token number">0700</span> I STORAGE <span class="token punctuation">[</span>initandlisten<span class="token punctuation">]</span> exception ininitAndListen<span class="token punctuation">:</span> NonExistentPath<span class="token punctuation">:</span> Data directory O<span class="token punctuation">:</span>\data\db\ not found<span class="token punctuation">.</span><span class="token punctuation">,</span> terminating
启动服务出错，原因在于找不到数据目录。默认是<span class="token operator">/</span>data<span class="token operator">/</span>db
windows下在当前盘符根目录下创建目录即可<span class="token string">`o:/data/db`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>选项说明</p>
<ul>
<li>--bind_ip  ip逗号分隔IP地址。默认为localhost</li>
<li>--bind_ip_all  绑定所有本地ip地址</li>
<li>--port port端口，默认27017</li>
<li>--dbpath  数据路径，却省委&#x2F;data&#x2F;db</li>
<li>--logpath 指定日志路径，代替stdout，默认是控制台打印日志</li>
<li>-f file 指定配置文件，yaml格式</li>
<li>注册windows服务<ul>
<li>--install 注册windows服务</li>
<li>--serviceName name服务名称</li>
<li>--serviceDisplayName name 服务显示名</li>
</ul>
</li>
</ul>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>mongodb配置使用Yaml格式</p>
<ul>
<li>嵌套使用缩进完成，不支持Tab等制表符，支持空格<ul>
<li>缩进空格数不限制，只要同一级元素对齐就行</li>
</ul>
</li>
<li>冒号后要有空格</li>
<li>大小写敏感</li>
<li>#表示注释</li>
<li>字符串不需要引号，有特殊字符串时可以使用引号</li>
<li>布尔<ul>
<li>true、True、TRUE、yes、YES都是真</li>
<li>false、False、FALSE、no、NO都是假</li>
</ul>
</li>
<li>null、Null、~波浪线都是空，不指定值默认也是空</li>
</ul>
<p>Yaml参考<a href="https://www.w3cschool.cn/iqmrhf/dotvpozt.html"> https://www.w3cschool.cn/iqmrhf/dotvpozt.html</a></p>
<p>配置 <a href="http://mongoing.com/docs/reference/configuration-options.html">http://mongoing.com/docs/reference/configuration-options.html</a></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">systemLog<span class="token punctuation">:</span>
   destination<span class="token punctuation">:</span> file
   path<span class="token punctuation">:</span> 'o<span class="token punctuation">:</span><span class="token operator">/</span>mongodb3<span class="token punctuation">.</span><span class="token number">6</span><span class="token operator">/</span>logs<span class="token operator">/</span>mongod<span class="token punctuation">.</span>log'
   logAppend<span class="token punctuation">:</span>  <span class="token boolean">true</span>
storage<span class="token punctuation">:</span>
   dbPath<span class="token punctuation">:</span> <span class="token string">"o:/mongodb3.6/db"</span>
net<span class="token punctuation">:</span>
   bindIp<span class="token punctuation">:</span> <span class="token string">"127.0.0.1"</span>
   port<span class="token punctuation">:</span> <span class="token number">27017</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>选项</p>
<ul>
<li>systemLog<ul>
<li>destination，缺省是输出日志到std，file表示输出到文件</li>
<li>path，日志文件路径。文件目录必须存在</li>
<li>logAppend，true表示在已存在的日志文件追加。默认为false，每次启动服务创建新的日志</li>
</ul>
</li>
<li>storage<ul>
<li>dbPath，必须指定mongodb的数据目录，目录必须存在</li>
</ul>
</li>
<li>net<ul>
<li>bindIp ，缺省绑定到127.0.0.1</li>
<li>port 端口，缺省27017，客户端连接用的</li>
</ul>
</li>
</ul>
<p>Windows下注册为服务的命令如下，使用了配置文件：</p>
<p><code>$ mongod.exe -f &quot;o:/mongodb3.6/bin/mongod.yml&quot; --serviceName mongod --serviceDisplayName mongo --install</code></p>
<p>注意，注册服务得需要管理员权限。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">storage<span class="token punctuation">:</span>
   dbPath<span class="token punctuation">:</span> <span class="token string">"o:/mongodb3.6/db"</span>
net<span class="token punctuation">:</span>
   bindIp<span class="token punctuation">:</span> <span class="token string">"127.0.0.1"</span>
   port<span class="token punctuation">:</span> <span class="token number">27017</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>没有配置日志，信息将显示在控制台中</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">$ pwd
<span class="token operator">/</span>o<span class="token operator">/</span>mongodb3<span class="token punctuation">.</span><span class="token number">6</span>
$ mongod<span class="token punctuation">.</span>exe <span class="token operator">-</span>f <span class="token punctuation">.</span><span class="token operator">/</span>mongod<span class="token punctuation">.</span>yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><h5 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go">$ bin<span class="token operator">/</span>mongo<span class="token punctuation">.</span>exe
MongoDB shell version v3<span class="token punctuation">.</span><span class="token number">6.13</span>
help 打开帮助
show dbs     查看当前有哪些库
use blog     有就切换过去，没有就创建后切换过去。刚创建的并不在数据库列表中，需要写入数据后才能看到
db           查看当前数据库
db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>user<span class="token punctuation">:</span><span class="token string">"tom"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> db指代当前数据库；users集合名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>也可以使用官方的可视化工具Compass。<a href="https://www.mongodb.com/products/compass">https://www.mongodb.com/products/compass</a></p>
<h5 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h5><p>驱动链接：<a href="https://www.mongodb.com/docs/drivers/">https://www.mongodb.com/docs/drivers/</a></p>
<p>Go驱动：<a href="https://www.mongodb.com/docs/drivers/go/current/"> https://www.mongodb.com/docs/drivers/go/current/</a></p>
<p>驱动安装：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">$ <span class="token keyword">go</span> get <span class="token keyword">go</span><span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>org<span class="token operator">/</span>mongo<span class="token operator">-</span>driver<span class="token operator">/</span>mongo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h5 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h5><p><a href="https://www.mongodb.com/docs/manual/reference/connection-string/#examples">https://www.mongodb.com/docs/manual/reference/connection-string/#examples</a></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">mongodb<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">[</span>username<span class="token punctuation">:</span>password@<span class="token punctuation">]</span>host1<span class="token punctuation">[</span><span class="token punctuation">:</span>port1<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token operator">...</span>hostN<span class="token punctuation">[</span><span class="token punctuation">:</span>portN<span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token operator">/</span><span class="token punctuation">[</span>defaultauthdb<span class="token punctuation">]</span><span class="token punctuation">[</span>?options<span class="token punctuation">]</span><span class="token punctuation">]</span>
mongodb<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>wayne<span class="token punctuation">:</span>wayne@mongodb0<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token punctuation">:</span><span class="token number">27017</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>链接例子<a href="https://www.mongodb.com/docs/drivers/go/current/fundamentals/connection/#connection-example">https://www.mongodb.com/docs/drivers/go/current/fundamentals/connection/#connection-example</a></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"context"</span>
	<span class="token string">"fmt"</span>

	<span class="token string">"go.mongodb.org/mongo-driver/bson"</span>
	<span class="token string">"go.mongodb.org/mongo-driver/mongo"</span>
	<span class="token string">"go.mongodb.org/mongo-driver/mongo/options"</span>
<span class="token punctuation">)</span>

<span class="token comment">// Replace the placeholder with your Atlas connection string</span>
<span class="token keyword">const</span> uri <span class="token operator">=</span> <span class="token string">"&lt;connection string>"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

	<span class="token comment">// Use the SetServerAPIOptions() method to set the Stable API version to 1</span>
	serverAPI <span class="token operator">:=</span> options<span class="token punctuation">.</span><span class="token function">ServerAPI</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>ServerAPIVersion1<span class="token punctuation">)</span>
	opts <span class="token operator">:=</span> options<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ApplyURI</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetServerAPIOptions</span><span class="token punctuation">(</span>serverAPI<span class="token punctuation">)</span>

	<span class="token comment">// Create a new client and connect to the server</span>
	client<span class="token punctuation">,</span> err <span class="token operator">:=</span> mongo<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> opts<span class="token punctuation">)</span>

	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Disconnect</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// Send a ping to confirm a successful connection</span>
	<span class="token keyword">var</span> result bson<span class="token punctuation">.</span>M
	<span class="token keyword">if</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RunCommand</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">"ping"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Pinged your deployment. You successfully connected to MongoDB!"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>连接副本集</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">mongodb<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>host1<span class="token punctuation">:</span><span class="token number">27017</span><span class="token punctuation">,</span>host2<span class="token punctuation">:</span><span class="token number">27017</span><span class="token punctuation">,</span>host3<span class="token punctuation">:</span><span class="token number">27017</span><span class="token operator">/</span>?replicaSet<span class="token operator">=</span>myRS<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<h5 id="账号密码认证连接"><a href="#账号密码认证连接" class="headerlink" title="账号密码认证连接"></a>账号密码认证连接</h5><p>官网：<a href="https://www.mongodb.com/docs/drivers/go/current/fundamentals/auth/">https://www.mongodb.com/docs/drivers/go/current/fundamentals/auth/</a></p>
<h6 id="支持的机制"><a href="#支持的机制" class="headerlink" title="支持的机制"></a>支持的机制</h6><p>Go驱动程序支持以下身份验证机制</p>
<ul>
<li><a href="https://www.mongodb.com/docs/drivers/go/current/fundamentals/auth/#std-label-golang_sha_256">SCRAM-SHA-256</a></li>
<li><a href="https://www.mongodb.com/docs/drivers/go/current/fundamentals/auth/#std-label-golang-sha-1">SCRAM-SHA-1</a></li>
<li><a href="https://www.mongodb.com/docs/drivers/go/current/fundamentals/auth/#std-label-golang-mongodb-cr">MONGODB-CR</a></li>
<li><a href="https://www.mongodb.com/docs/drivers/go/current/fundamentals/auth/#std-label-golang-mongodb-aws">MongoDB-AWS</a></li>
<li><a href="https://www.mongodb.com/docs/drivers/go/current/fundamentals/auth/#std-label-golang-x509">X.509</a></li>
</ul>
<p>Go Driver通过身份验证机制建立连接<a href="https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.12.1/mongo#Client">客户</a>类型。该Client类型指定用作连接选项的机制和凭据。<a href="https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.12.1/mongo/options#Credential">凭据</a>类型。要配置这些选项，请将Credential类型传递给<a href="https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.12.1/mongo/options#ClientOptions.SetAuth">设置验证()</a> 的方法客户<a href="https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.12.1/mongo/options#ClientOptions">选项类型</a>。</p>
<h6 id="约定示例"><a href="#约定示例" class="headerlink" title="约定示例"></a>约定示例</h6><p>每个身份验证机制都包括以下占位符：</p>
<ul>
<li><code>username</code> mongodb用户名</li>
<li><code>password</code> mongodb密码</li>
<li><code>hostname</code> mongodb服务器ip地址</li>
<li><code>port</code> 端口</li>
<li><code>authenticationDb</code> 包含用户身份验证数据的mongodb数据库。如果省略此选项，驱动程序将使用默认值admin</li>
</ul>
<h5 id="默认方式"><a href="#默认方式" class="headerlink" title="默认方式"></a>默认方式</h5><p>默认机制使用以下身份验证机制之一，具体取决于服务器支持的mongodb版本</p>
<table>
<thead>
<tr>
<th>机制</th>
<th>版本</th>
</tr>
</thead>
<tbody><tr>
<td><code>SCRAM-SHA-256</code></td>
<td>Mongodb4.0及更高版本</td>
</tr>
<tr>
<td><code>SCRM-SHA-1</code></td>
<td>MongoDB3.0、3.2、3.4和3.6</td>
</tr>
<tr>
<td><code>MONGODB-CR</code></td>
<td>MongoDB及更早版本</td>
</tr>
</tbody></table>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">credential <span class="token operator">:=</span> options<span class="token punctuation">.</span>Credential<span class="token punctuation">&#123;</span>
   AuthSource<span class="token punctuation">:</span> <span class="token string">"&lt;authenticationDb>"</span><span class="token punctuation">,</span>
   Username<span class="token punctuation">:</span> <span class="token string">"&lt;username>"</span><span class="token punctuation">,</span>
   Password<span class="token punctuation">:</span> <span class="token string">"&lt;password>"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
clientOpts <span class="token operator">:=</span> options<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ApplyURI</span><span class="token punctuation">(</span><span class="token string">"mongodb://&lt;hostname>:&lt;port>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
   <span class="token function">SetAuth</span><span class="token punctuation">(</span>credential<span class="token punctuation">)</span>

client<span class="token punctuation">,</span> err <span class="token operator">:=</span> mongo<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clientOpts<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="SCRAM-SHA-256"><a href="#SCRAM-SHA-256" class="headerlink" title="SCRAM-SHA-256"></a>SCRAM-SHA-256</h5><blockquote>
<p><strong>SCRAM-SHA-256****是从 MongoDB 4.0 开始的 MongoDB 默认身份验证方法。</strong></p>
</blockquote>
<p><code>SCRAM-SHA-256</code>是一种加盐质询-响应身份验证机制 (SCRAM)，它使用您的用户名和密码（通过算法加密）<code>SHA-256</code> 来对您的用户进行身份验证。</p>
<p>要指定<code>SCRAM-SHA-256</code>身份验证机制，请为 <code>AuthMechanism</code>选项分配值<code>&quot;SCRAM-SHA-256&quot;</code>：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">credential <span class="token operator">:=</span> options<span class="token punctuation">.</span>Credential<span class="token punctuation">&#123;</span>
   AuthMechanism<span class="token punctuation">:</span> <span class="token string">"SCRAM-SHA-256"</span><span class="token punctuation">,</span>
   AuthSource<span class="token punctuation">:</span> <span class="token string">"&lt;authenticationDb>"</span><span class="token punctuation">,</span>
   Username<span class="token punctuation">:</span> <span class="token string">"&lt;username>"</span><span class="token punctuation">,</span>
   Password<span class="token punctuation">:</span> <span class="token string">"&lt;password>"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
clientOpts <span class="token operator">:=</span> options<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ApplyURI</span><span class="token punctuation">(</span><span class="token string">"mongodb://&lt;hostname>:&lt;port>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
   <span class="token function">SetAuth</span><span class="token punctuation">(</span>credential<span class="token punctuation">)</span>

client<span class="token punctuation">,</span> err <span class="token operator">:=</span> mongo<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clientOpts<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="SCRAM-SHA-1"><a href="#SCRAM-SHA-1" class="headerlink" title="SCRAM-SHA-1"></a>SCRAM-SHA-1</h5><blockquote>
<p><strong>SCRAM-SHA-1****是 MongoDB 版本 3.0、3.2、3.4 和 3.6 的默认身份验证方法。</strong></p>
</blockquote>
<p><code>SCRAM-SHA-1</code>是一种加盐质询响应机制 (SCRAM)，它使用您的用户名和密码（通过算法加密）<code>SHA-1</code>来验证您的用户。</p>
<p>要指定<code>SCRAM-SHA-1</code>身份验证机制，请为 <code>AuthMechanism</code>选项分配值<code>&quot;SCRAM-SHA-1&quot;</code>：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">credential <span class="token operator">:=</span> options<span class="token punctuation">.</span>Credential<span class="token punctuation">&#123;</span>
   AuthMechanism<span class="token punctuation">:</span> <span class="token string">"SCRAM-SHA-1"</span><span class="token punctuation">,</span>
   AuthSource<span class="token punctuation">:</span> <span class="token string">"&lt;authenticationDb>"</span><span class="token punctuation">,</span>
   Username<span class="token punctuation">:</span> <span class="token string">"&lt;username>"</span><span class="token punctuation">,</span>
   Password<span class="token punctuation">:</span> <span class="token string">"&lt;password>"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
clientOpts <span class="token operator">:=</span> options<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ApplyURI</span><span class="token punctuation">(</span><span class="token string">"mongodb://&lt;hostname>:&lt;port>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
   <span class="token function">SetAuth</span><span class="token punctuation">(</span>credential<span class="token punctuation">)</span>

client<span class="token punctuation">,</span> err <span class="token operator">:=</span> mongo<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clientOpts<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h4 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"context"</span> <span class="token comment">// 用于在函数之间传递上下文信息，以支持控制连接和请求的声明周期</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"go.mongodb.org/mongo-driver/bson"</span>           <span class="token comment">// 用于处理mongodb的bson数据</span>
    <span class="token string">"go.mongodb.org/mongo-driver/bson/primitive"</span> <span class="token comment">// 用于处理mongodb的objectid类型</span>
    <span class="token string">"go.mongodb.org/mongo-driver/mongo"</span>          <span class="token comment">// mongodb官方go驱动</span>
    <span class="token string">"go.mongodb.org/mongo-driver/mongo/options"</span>  <span class="token comment">// 用于设置mongodb连接选项</span>
    <span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> client <span class="token operator">*</span>mongo<span class="token punctuation">.</span>Client     <span class="token comment">// 定义客户端连接</span>
<span class="token keyword">var</span> database <span class="token operator">*</span>mongo<span class="token punctuation">.</span>Database <span class="token comment">// 数据库实例</span>
<span class="token keyword">var</span> users <span class="token operator">*</span>mongo<span class="token punctuation">.</span>Collection  <span class="token comment">// 集合实例</span>

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//const uri = "mongodb://dujie:123456@localhost:27017"</span>
    <span class="token comment">// mongodb连接字符串</span>
    <span class="token keyword">const</span> uri <span class="token operator">=</span> <span class="token string">"mongodb://localhost:27017"</span>
    <span class="token comment">// 创建凭据对象，用于身份验证</span>
    credential <span class="token operator">:=</span> options<span class="token punctuation">.</span>Credential<span class="token punctuation">&#123;</span>
        AuthSource<span class="token punctuation">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>
        Username<span class="token punctuation">:</span>   <span class="token string">"dujie"</span><span class="token punctuation">,</span>
        Password<span class="token punctuation">:</span>   <span class="token string">"123456"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//  options.Client().ApplyURI(uri) 创建一个连接选项，SetAuth(credential) 设置身份验证，  SetConnectTimeout设置连接超时时间</span>
    opts <span class="token operator">:=</span> options<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ApplyURI</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetAuth</span><span class="token punctuation">(</span>credential<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetConnectTimeout</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token comment">//opts := options.Client().ApplyURI(uri).SetConnectTimeout(time.Second * 3)</span>
    <span class="token keyword">var</span> err <span class="token builtin">error</span>
    <span class="token comment">// mongo.Connect 连接到mongodb数据库，返回客户端实例</span>
    client<span class="token punctuation">,</span> err <span class="token operator">=</span> mongo<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> opts<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"1 ~~~~"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 测试与数据库的连接是否正常</span>
    err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ping  ~~~~"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 获取数据库实例</span>
    database <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>
    <span class="token comment">// 获取集合（表）实例</span>
    users <span class="token operator">=</span> database<span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>database<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// `bson:"_id,omitempty" 表示在BSON序列化和反序列化时将该字段映射到数据库中的_id字段，</span>
    Id    primitive<span class="token punctuation">.</span>ObjectID <span class="token string">`bson:"_id,omitempty"`</span>
    Name  <span class="token builtin">string</span>
    Age   <span class="token builtin">int</span>
    Score <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> u User

    err <span class="token operator">:=</span> users<span class="token punctuation">.</span><span class="token function">FindOne</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span>
    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Disconnect</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2 ~~~~"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>MongoDB中可以创建使用多个库，但是有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。</p>
<ul>
<li><p>admin：从权限的角度来看，这是”root”数据库。要是将一个用户添加到这个数据库中，这个用户自动继承所有数据库的权限，一些特定的服务器端命令也只能从这个数据库运行，比如列出所有数据库或者关闭服务器。</p>
<ul>
<li><code>admin</code>数据库是MongoDB的管理数据库，只有具有管理员权限的用户才能访问它。</li>
<li>在<code>admin</code>数据库中，可以进行用户管理、权限设置、数据库备份和还原等操作。</li>
<li>通常，管理员会在<code>admin</code>数据库下创建其他数据库的用户，并为这些用户分配相应的权限。</li>
</ul>
</li>
<li><p>local：这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合。</p>
<ul>
<li><code>local</code>数据库也是与分片相关的数据库，但它只在每个分片节点上存在。</li>
<li><code>local</code>数据库用于存储分片节点的复制集信息和本地操作日志。</li>
<li>当一个节点作为分片副本集的成员时，它会在<code>local</code>数据库中记录与副本集相关的信息。</li>
</ul>
</li>
<li><p>config：当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</p>
<ul>
<li><code>config</code>数据库是用于支持MongoDB的分片（Sharding）功能的配置数据库。</li>
<li>当MongoDB部署为分片集群时，<code>config</code>数据库中会存储与分片有关的配置信息，如分片键、分片节点等。</li>
<li>分片配置服务器会维护<code>config</code>数据库中的信息，用于管理数据的分片和迁移。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>RDBMS</th>
<th>MongoDB</th>
</tr>
</thead>
<tbody><tr>
<td>Database</td>
<td>Database</td>
</tr>
<tr>
<td>Table</td>
<td>Collection</td>
</tr>
<tr>
<td>Row</td>
<td>Document</td>
</tr>
<tr>
<td>Column</td>
<td>Field</td>
</tr>
<tr>
<td>Join</td>
<td>Embedded Document嵌入文档或Reference引入</td>
</tr>
<tr>
<td>Primary Key</td>
<td>主键（MongoDB提供了key为_id）</td>
</tr>
</tbody></table>
<p>Go Driver使用，官方博客：<a href="https://www.mongodb.com/blog/post/mongodb-go-driver-tutorial">https://www.mongodb.com/blog/post/mongodb-go-driver-tutorial</a></p>
<h4 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h4><p>结构体定义<a href="https://www.mongodb.com/docs/drivers/go/current/usage-examples/findOne/#find-a-document">https://www.mongodb.com/docs/drivers/go/current/usage-examples/findOne/#find-a-document</a></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Restaurant <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	ID           primitive<span class="token punctuation">.</span>ObjectID <span class="token string">`bson:"_id"`</span>
	Name         <span class="token builtin">string</span>
	RestaurantId <span class="token builtin">string</span> <span class="token string">`bson:"restaurant_id"`</span>
	Cuisine      <span class="token builtin">string</span>
	Address      <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	Borough      <span class="token builtin">string</span>
	Grades       <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 ID   primitive<span class="token punctuation">.</span>ObjectID <span class="token string">`bson:"_id,omitempty"`</span>
 Name <span class="token builtin">string</span>
 Age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>u User<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"&lt;%s: %s,%d>"</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> u<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> u<span class="token punctuation">.</span>Age<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结构体Tag 参考：<a href="https://www.mongodb.com/docs/drivers/go/current/fundamentals/bson/#struct-tags"> https://www.mongodb.com/docs/drivers/go/current/fundamentals/bson/#struct-tags</a></p>
<table>
<thead>
<tr>
<th>结构体标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>omitempty</code></td>
<td>如果将字段设置为与字段类型对应的零值，则不会对字段进行编辑，一般用于设置_id</td>
</tr>
<tr>
<td><code>minsize</code></td>
<td>如果字段类型为<code>int64</code> 、<code>uint32</code> 或<code>uint64</code> 类型，并且该字段的值可以放入有符号<code>int32</code> 中，则该字段将被序列化为<code>BSON int32</code> ，而不是<code>BSON int64</code> 。如果该值无法容纳有符号的<code>int32</code> 则忽略此标记</td>
</tr>
<tr>
<td><code>truncate</code></td>
<td>如果字段类型是非浮点数字类型，则解组到该字段的BSON双精度将在小数点处被截断。</td>
</tr>
<tr>
<td><code>inline</code></td>
<td>如果字段类型是结构体或映射字段，则该字段在编组时展平，并在解组时取消展平。</td>
</tr>
</tbody></table>
<p>User结构体中ID一定要使用omitempty，新增结构体时，如果ID不设置则为零值提交，数据库中_id字段就是一串0。如果设置忽略零值，ID为0提交时会被忽略，数据库则自动生成_id中的id。</p>
<p>ObjectId有12字节组成，参考<code>bson/primitive/objectid.go/NewObjectID()函数</code> </p>
<ul>
<li>4字节时间戳</li>
<li>5字节进程唯一值</li>
<li>3字节随机数，每次加1</li>
</ul>
<h5 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h5><p>操作参考：<a href="https://www.mongodb.com/docs/drivers/go/current/usage-examples/">https://www.mongodb.com/docs/drivers/go/current/usage-examples/</a></p>
<p>####### 插入单条文档</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Restaurant <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Name         <span class="token builtin">string</span>
	RestaurantId <span class="token builtin">string</span>        <span class="token string">`bson:"restaurant_id,omitempty"`</span>
	Cuisine      <span class="token builtin">string</span>        <span class="token string">`bson:"cuisine,omitempty"`</span>
	Address      <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token string">`bson:"address,omitempty"`</span>
	Borough      <span class="token builtin">string</span>        <span class="token string">`bson:"borough,omitempty"`</span>
	Grades       <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token string">`bson:"grades,omitempty"`</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当结构<code>omitempty</code> 标记留空时，它会缺省插入文档中的相应字段。</p>
<p>以下示例将新文档插入到<code>restaurants</code> 集合中</p>
<blockquote>
<p><strong>不存在的数据库和集合</strong></p>
</blockquote>
<blockquote>
<p>如果执行写入操作时所需的数据库和集合不存在，服务器会隐式创建它们</p>
</blockquote>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">coll <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">"sample_restaurants"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">"restaurants"</span><span class="token punctuation">)</span>
newRestaurant <span class="token operator">:=</span> Restaurant<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"8282"</span><span class="token punctuation">,</span> Cuisine<span class="token punctuation">:</span> <span class="token string">"Korean"</span><span class="token punctuation">&#125;</span>

result<span class="token punctuation">,</span> err <span class="token operator">:=</span> coll<span class="token punctuation">.</span><span class="token function">InsertOne</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newRestaurant<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">&#123;</span>
  <span class="token string">"_id"</span><span class="token punctuation">:</span> <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"8282"</span><span class="token punctuation">,</span>
  <span class="token string">"cuisine"</span><span class="token punctuation">:</span> <span class="token string">"Korean"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>####### 插入多条<br>可以使用该<code>InsertMany()</code> 方法将多个文档插入到集合中。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Restaurant <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Name         <span class="token builtin">string</span>
	RestaurantId <span class="token builtin">string</span>        <span class="token string">`bson:"restaurant_id,omitempty"`</span>
	Cuisine      <span class="token builtin">string</span>        <span class="token string">`bson:"cuisine,omitempty"`</span>
	Address      <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token string">`bson:"address,omitempty"`</span>
	Borough      <span class="token builtin">string</span>        <span class="token string">`bson:"borough,omitempty"`</span>
	Grades       <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token string">`bson:"grades,omitempty"`</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当结构<code>omitempty</code> <a href="https://www.mongodb.com/docs/drivers/go/current/fundamentals/bson/#std-label-golang-struct-tags">标记</a>留空时，它会省略插入文档中的相应字段。</p>
<p>以下示例将两个新文档插入到<code>restaurants</code> 集合中：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">coll <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">"sample_restaurants"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">"restaurants"</span><span class="token punctuation">)</span>
newRestaurants <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>
	Restaurant<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Rule of Thirds"</span><span class="token punctuation">,</span> Cuisine<span class="token punctuation">:</span> <span class="token string">"Japanese"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	Restaurant<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Madame Vo"</span><span class="token punctuation">,</span> Cuisine<span class="token punctuation">:</span> <span class="token string">"Vietnamese"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

result<span class="token punctuation">,</span> err <span class="token operator">:=</span> coll<span class="token punctuation">.</span><span class="token function">InsertMany</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newRestaurants<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="BSON"><a href="#BSON" class="headerlink" title="BSON"></a>BSON</h5><p><a href="https://www.mongodb.com/docs/drivers/go/current/fundamentals/bson/">https://www.mongodb.com/docs/drivers/go/current/fundamentals/bson/</a></p>
<p>将Go类型转换为BSON的过程称为编组，而相反的过程称为解组</p>
<p>MongoDB的Go库提供的构建BSON的数据分为4种</p>
<p>MongoDB以二进制表示形式存储文档，称为BSON允许轻松灵活的数据处理。</p>
<ul>
<li>D : An ordered representation of a BSON document (slice)，表示有序的，切片且元素是二元的</li>
<li>M : An unordered representation of a BSON document (map)，表示无序的，map且元素是kv对</li>
<li>A : An ordered representation of a BSON array  BSON数组的有序表示</li>
<li>E : A single element inside a D type  D类型内的单个元素</li>
</ul>
<p>以下示例演示如何使用 <code>bson.D</code>类型构造查询过滤器来匹配<code>quantity</code>字段值大于 100 的文档</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">"quantity"</span><span class="token punctuation">,</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">"$gt"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h5><p>####### 单条查询<br><code>bson.D&#123;&#123;"name","tom"&#125;&#125;</code> </p>
<ul>
<li>bson.D 是切片，D后的{}表示切片字面量定义</li>
<li>{“name”,”tom”} 表示一个结构体实例字面量定义<ul>
<li>“name” 是结构体的Key属性，类型是string</li>
<li>“tom”是结构体的value属性，类型是any</li>
</ul>
</li>
</ul>
<p><code>bson.M&#123;&quot;name&quot;:&quot;tom&quot;&#125;</code></p>
<ul>
<li>bson.M是map，M后的{} 表示该map的字面量定义</li>
<li>map类型为map[string]interface{}</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 找一条</span>
<span class="token keyword">func</span> <span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 条件</span>
 <span class="token comment">// filter := bson.D&#123;&#123;"name", "tom"&#125;&#125; // slice</span>
 <span class="token comment">// filter := bson.D&#123;&#123;"name", bson.D&#123;&#123;"$eq", "tom"&#125;&#125;&#125;&#125;</span>
 filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"tom"</span><span class="token punctuation">&#125;</span> <span class="token comment">// map</span>
 <span class="token comment">// filter := bson.M&#123;"name": bson.M&#123;"$ne": "jerry"&#125;&#125;</span>
 <span class="token comment">// filter := bson.D&#123;&#125; // 没有条件全部都符合</span>
 <span class="token keyword">var</span> u User
 err <span class="token operator">:=</span> users<span class="token punctuation">.</span><span class="token function">FindOne</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> err <span class="token operator">==</span> mongo<span class="token punctuation">.</span>ErrNoDocuments <span class="token punctuation">&#123;</span>
 <span class="token comment">// 说明没有任何匹配文档</span>
 log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"没有匹配的文档"</span><span class="token punctuation">)</span>
 <span class="token keyword">return</span>
 <span class="token punctuation">&#125;</span>
 log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>####### 多条查询</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 查多条，遍历结果</span>
<span class="token keyword">func</span> <span class="token function">findMany1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 无条件，全部符合</span>
 cursor<span class="token punctuation">,</span> err <span class="token operator">:=</span> users<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
    <span class="token keyword">defer</span> cursor<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 关闭游标</span>
    
 <span class="token keyword">var</span> results <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>User
 <span class="token keyword">for</span> cursor<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">var</span> u User
 err <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 results <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>results<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">)</span> <span class="token comment">// 装入容器</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token comment">// 查多条，成批装入容器</span>
<span class="token keyword">func</span> <span class="token function">findMany2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 无条件，全部符合</span>
 <span class="token keyword">var</span> results <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>User
 cursor<span class="token punctuation">,</span> err <span class="token operator">:=</span> users<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">defer</span> cursor<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 关闭游标</span>
 err <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>results<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">for</span> i<span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token keyword">range</span> results <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="查询条件"><a href="#查询条件" class="headerlink" title="查询条件"></a>查询条件</h5><p>改造上面的findMany2函数，可以使用下面表格中不同的filter</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">findByFilter</span><span class="token punctuation">(</span>filter <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">var</span> results <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>User
 cursor<span class="token punctuation">,</span> err <span class="token operator">:=</span> users<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
    <span class="token keyword">defer</span> cursor<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 关闭游标</span>
 err <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>results<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th><strong>比较符号</strong></th>
<th><strong>含义</strong></th>
<th><strong>filter示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td>$gt</td>
<td>大于</td>
<td><code>bson.M&#123;&quot;age&quot;:bson.M&#123;&quot;$gt&quot;:32&#125;&#125;</code></td>
</tr>
<tr>
<td>$lt</td>
<td>小于</td>
<td><code>bson.M&#123;&quot;age&quot;:bson.M&#123;&quot;$lt&quot;:32&#125;&#125;</code></td>
</tr>
<tr>
<td>$lte</td>
<td>小于等于</td>
<td><code>bson.M&#123;&quot;age&quot;:bson.M&#123;&quot;$lte&quot;:32&#125;&#125;</code></td>
</tr>
<tr>
<td>$gte</td>
<td>大于等于</td>
<td><code>bson.M&#123;&quot;age&quot;:bson.M&#123;&quot;$gte&quot;:32&#125;&#125;</code></td>
</tr>
<tr>
<td>$ne</td>
<td>不等于</td>
<td><code>bson.M&#123;&quot;age&quot;:bson.M&#123;&quot;$ne&quot;:32&#125;&#125;</code></td>
</tr>
<tr>
<td>$eq</td>
<td>等于，可以不用这个符号</td>
<td><code>bson.M&#123;&quot;age&quot;: bson.M&#123;&quot;$eq&quot;: 20&#125;&#125;</code><br><code>bson.M&#123;&quot;age&quot;: 20&#125;</code></td>
</tr>
<tr>
<td>$in</td>
<td>在范围内</td>
<td><code>bson.M&#123;&quot;age&quot;:bson.M&#123;&quot;$in&quot;:[]int&#123;1,3,4&#125;&#125;&#125;</code></td>
</tr>
<tr>
<td>$nin</td>
<td>不在范围内</td>
<td><code>bson.M&#123;&quot;age&quot;:bson.M&#123;&quot;$nin&quot;:[]int&#123;1,3,4&#125;&#125;&#125;</code></td>
</tr>
</tbody></table>
<p><a href="https://www.mongodb.com/docs/manual/reference/operator/query/and/">https://www.mongodb.com/docs/manual/reference/operator/query/and/</a></p>
<table>
<thead>
<tr>
<th><strong>逻辑符号</strong></th>
<th><strong>含义</strong></th>
<th><strong>filter示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td>$and</td>
<td>与</td>
<td><code>bson.M&#123;&quot;$and&quot;:[]bson.M&#123;&#123;"name":"tom"&#125;,&#123;"age":33&#125;&#125;&#125;</code> <br><code>bson.M&#123;&quot;$and&quot;:[]bson.M&#123;&#123;"name":"tom"&#125;,&#123;"age":bson.M&#123;"$gt":32&#125;&#125;&#125;&#125;</code></td>
</tr>
<tr>
<td>$or</td>
<td>或</td>
<td><code>bson.M&#123;&quot;$or&quot;: []bson.M&#123;&#123;"name": "tom"&#125;, &#123;"age": bson.M&#123;"$lt":20&#125;&#125;&#125;&#125;</code></td>
</tr>
<tr>
<td>$not</td>
<td>非</td>
<td><code>bson.M&#123;&quot;age&quot;: bson.M&#123;&quot;$not&quot;:bson.M&#123;&quot;$gte&quot;:20&#125;&#125;&#125;</code></td>
</tr>
</tbody></table>
<p><code>bson.M&#123;&quot;age&quot;: bson.M&#123;&quot;$gte&quot;:20&#125;&#125;</code> 取反为<code>bson.M&#123;&quot;age&quot;:bson.M&#123;&quot;$not&quot;:bson.M&#123;&quot;$gte&quot;:20&#125;&#125;&#125;</code> </p>
<table>
<thead>
<tr>
<th>元素</th>
<th>含义</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>$exists</td>
<td>文档中是否有这个字段</td>
<td><code>bson.M&#123;&quot;Name&quot;:bson.M&#123;&quot;$exists&quot;:true&#125;&#125;</code></td>
</tr>
<tr>
<td>$type</td>
<td>字段是否是指定的类型</td>
<td><code>bson.M&#123;&quot;age&quot;:bson.M&#123;&quot;$type&quot;:16&#125;&#125;</code></td>
</tr>
</tbody></table>
<p><code>bson.M&#123;&quot;name&quot;:bson.M&#123;&quot;$exists&quot;:true&#125;&#125;</code> 标识所有具有Name字段的文档，注意Name和name不一样</p>
<p>常用类型，参考：<a href="https://www.mongodb.com/docs/manual/reference/operator/query/type/#op._S_type">https://www.mongodb.com/docs/manual/reference/operator/query/type/#op._S_type</a></p>
<ul>
<li>字符串类型编码为2，别名为string</li>
<li>整型编码为16，别名为int</li>
<li>长整型编码为18，别名为long</li>
</ul>
<p>改造函数findByFilter为findAll</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">findAll</span><span class="token punctuation">(</span>filter <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> opt <span class="token operator">*</span>options<span class="token punctuation">.</span>FindOptions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">var</span> results <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>User
 cursor<span class="token punctuation">,</span> err <span class="token operator">:=</span> users<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">,</span> opt<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
    <span class="token keyword">defer</span> cursor<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 关闭游标</span>
    
 err <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>results<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token function">findAll</span><span class="token punctuation">(</span>filter<span class="token punctuation">,</span> options<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetLimit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"age"</span><span class="token punctuation">:</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"$gt"</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
opt <span class="token operator">:=</span> options<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
opt<span class="token punctuation">.</span><span class="token function">SetProjection</span><span class="token punctuation">(</span>bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// name、age字段不投影，都显示为零值</span>
<span class="token function">findAll</span><span class="token punctuation">(</span>filter<span class="token punctuation">,</span> opt<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">opt<span class="token punctuation">.</span><span class="token function">SetProjection</span><span class="token punctuation">(</span>bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// name投影，age字段零值显示</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">opt<span class="token punctuation">.</span><span class="token function">SetSort</span><span class="token punctuation">(</span>bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 升序</span>
opt<span class="token punctuation">.</span><span class="token function">SetSort</span><span class="token punctuation">(</span>bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 降序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">opt<span class="token punctuation">.</span><span class="token function">SetSkip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// offset</span>
opt<span class="token punctuation">.</span><span class="token function">SetLimit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// limit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><table>
<thead>
<tr>
<th>更新操作符</th>
<th>含义</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>$inc</td>
<td>对给定字段数字值增减</td>
<td><code>bson.M&#123;&quot;$inc&quot;:bson.M&#123;&quot;age&quot;: -5&#125;&#125;</code></td>
</tr>
<tr>
<td>$set</td>
<td>设置字段值，如果字段不存在则创建</td>
<td><code>bson.M&#123;&quot;$set&quot;:bson.M&#123;&quot;gender&quot;:&quot;M&quot;&#125;&#125;</code></td>
</tr>
<tr>
<td>$unset</td>
<td>移除字段</td>
<td><code>&#123;&#39;$unset&#39;:&#123;&#39;Name&#39;:&quot;&quot;&#125;&#125;</code></td>
</tr>
</tbody></table>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 更新一个</span>
<span class="token keyword">func</span> <span class="token function">updateOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"age"</span><span class="token punctuation">:</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"$exists"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 所有有age字段的文档</span>
 update <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"$inc"</span><span class="token punctuation">:</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token comment">// age字段减5</span>
 ur<span class="token punctuation">,</span> err <span class="token operator">:=</span> users<span class="token punctuation">.</span><span class="token function">UpdateOne</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">,</span> update<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ur<span class="token punctuation">.</span>MatchedCount<span class="token punctuation">,</span> ur<span class="token punctuation">.</span>ModifiedCount<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 更新多个</span>
<span class="token keyword">func</span> <span class="token function">updateMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"age"</span><span class="token punctuation">:</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"$exists"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 所有有age字段的文档</span>
 update <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"$set"</span><span class="token punctuation">:</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"M"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 为符合条件的文档设置gender字段</span>
 users<span class="token punctuation">.</span><span class="token function">UpdateMany</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">,</span> update<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">update <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"$unset"</span><span class="token punctuation">:</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 为符合条件的文档移除gender字 段</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 找到一批更新第一个，ReplaceOne更新除ID以外所有字段</span>
filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"age"</span><span class="token punctuation">:</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token string">"$exists"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 所有有age字段的文档</span>
replacement <span class="token operator">:=</span> User<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Sam"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">48</span><span class="token punctuation">&#125;</span>
ur<span class="token punctuation">,</span> err <span class="token operator">:=</span> users<span class="token punctuation">.</span><span class="token function">ReplaceOne</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">,</span> replacement<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ur<span class="token punctuation">.</span>MatchedCount<span class="token punctuation">,</span> ur<span class="token punctuation">.</span>ModifiedCount<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 删除一个</span>
<span class="token keyword">func</span> <span class="token function">deleteOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 没有条件，匹配所有文档</span>
 dr<span class="token punctuation">,</span> err <span class="token operator">:=</span> users<span class="token punctuation">.</span><span class="token function">DeleteOne</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>dr<span class="token punctuation">.</span>DeletedCount<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token comment">// 删除多个</span>
<span class="token keyword">func</span> <span class="token function">deleteMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 没有条件，匹配所有文档</span>
 dr<span class="token punctuation">,</span> err <span class="token operator">:=</span> users<span class="token punctuation">.</span><span class="token function">DeleteMany</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>dr<span class="token punctuation">.</span>DeletedCount<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>users.DeleteMany(context.TODO(), bson.M&#123;&#125;)</code> 删除所有文档，危险！</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang GORM使用</title>
    <url>/2023/05/06/Golang%E4%B8%AD%E7%9A%84GORM/</url>
    <content><![CDATA[<h1 id="GORM"><a href="#GORM" class="headerlink" title="GORM"></a>GORM</h1><h3 id="SQLBuilder"><a href="#SQLBuilder" class="headerlink" title="SQLBuilder"></a>SQLBuilder</h3><p>SQLBuilder是一个用于生成SQL语句的库。</p>
<p>项目地址：</p>
<ul>
<li><a href="https://gitee.com/iRainIoT/go-sqlbuilder%E3%80%81https://github.com/parkingwang/go-sqlbuilder">https://gitee.com/iRainIoT/go-sqlbuilder、https://github.com/parkingwang/go-sqlbuilder</a><ul>
<li>目前已支持MySQL基本Select&#x2F;Update&#x2F;Insert&#x2F;Delete&#x2F;Where 等语法</li>
<li>目前只支持MySQL语法</li>
<li>未支持多表查询</li>
<li><code> go get -u github.com/parkingwang/go-sqlbuilder</code></li>
</ul>
</li>
<li><a href="https://github.com/huandu/go-sqlbuilder">https://github.com/huandu/go-sqlbuilder</a>，功能更强<ul>
<li><code>go get github.com/huandu/go-sqlbuilder </code></li>
</ul>
</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"database/sql"</span>
 <span class="token string">"fmt"</span>
 <span class="token string">"log"</span>
 <span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span>
 <span class="token string">"github.com/huandu/go-sqlbuilder"</span>
<span class="token punctuation">)</span>
<span class="token keyword">var</span> db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB
<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">var</span> err <span class="token builtin">error</span>
 db<span class="token punctuation">,</span> err <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> <span class="token string">"wayne:wayne@/test"</span><span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 3 定义结构体</span>
<span class="token keyword">type</span> Emp <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 和字段对应的变量或结构体定义，最好和数据库中字段顺序对应</span>
 emp_no     <span class="token builtin">int</span>
 first_name <span class="token builtin">string</span>
 last_name  <span class="token builtin">string</span>
 gender     <span class="token builtin">byte</span>
 birth_date <span class="token builtin">string</span>
 <span class="token comment">// hire_date string</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 query <span class="token operator">:=</span> sqlbuilder<span class="token punctuation">.</span>
 <span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"emp_no"</span><span class="token punctuation">,</span> <span class="token string">"first_name"</span><span class="token punctuation">,</span> <span class="token string">"last_name"</span><span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token punctuation">,</span> <span class="token string">"birth_date"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
 <span class="token function">From</span><span class="token punctuation">(</span><span class="token string">"employees"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
 <span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"emp_no > 10015"</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token comment">// 试一试Where("emp_no > ?")</span>
 <span class="token function">Offset</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
 <span class="token function">OrderBy</span><span class="token punctuation">(</span><span class="token string">"emp_no"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Desc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token comment">// 按照什么字段排序，降序</span>
 <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment">// 输出为字符串，底层调用Build()</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span>
 rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">var</span> emp Emp
 err <span class="token operator">=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>emp<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> <span class="token operator">&amp;</span>emp<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>emp<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>
 <span class="token operator">&amp;</span>emp<span class="token punctuation">.</span>gender<span class="token punctuation">,</span> <span class="token operator">&amp;</span>emp<span class="token punctuation">.</span>birth_date<span class="token punctuation">)</span> <span class="token comment">// 字段顺序和select的字段投影顺序一致</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
SELECT emp_no<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> birth_date FROM employees
WHERE emp_no <span class="token operator">></span> <span class="token number">10015</span> ORDER BY emp_no DESC LIMIT <span class="token number">2</span> OFFSET <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>本质上sqlbuilder就是在生成SQL语句字符串。</p>
<p><strong>args参数化</strong></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">builder <span class="token operator">:=</span> sqlbuilder<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"emp_no"</span><span class="token punctuation">,</span> <span class="token string">"first_name"</span><span class="token punctuation">,</span> <span class="token string">"last_name"</span><span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token punctuation">,</span> <span class="token string">"birth_date"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">From</span><span class="token punctuation">(</span><span class="token string">"employees"</span><span class="token punctuation">)</span>
builder<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>
    builder<span class="token punctuation">.</span><span class="token function">In</span><span class="token punctuation">(</span><span class="token string">"emp_no"</span><span class="token punctuation">,</span> <span class="token number">10008</span><span class="token punctuation">,</span> <span class="token number">10010</span><span class="token punctuation">,</span> <span class="token number">10020</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 参数化</span>
<span class="token punctuation">)</span>
query<span class="token punctuation">,</span> args <span class="token operator">:=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s\n%v\n"</span><span class="token punctuation">,</span> query<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token comment">// args是参数</span>
SELECT emp_no<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> birth_date FROM employees
WHERE emp_no IN <span class="token punctuation">(</span>?<span class="token punctuation">,</span> ?<span class="token punctuation">,</span> ?<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">10008</span> <span class="token number">10010</span> <span class="token number">10020</span><span class="token punctuation">]</span>
rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment">// 这样使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><p>对象关系映射，值得是对象和关系之间的银蛇，使用面相对象的方式操作数据库。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">关系模型和Go对象之间的映射
table <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">struct</span>   ，表映射为结构体
row   <span class="token operator">=</span><span class="token operator">></span> object   ，行映射为实例
column <span class="token operator">=</span><span class="token operator">></span> property ，字段映射为属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>举例，有表student，字段为id  int 、name varchar、age int</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 id   <span class="token builtin">int</span>
 name <span class="token builtin">string</span>
 age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
Student<span class="token punctuation">&#123;</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">&#125;</span>
Student<span class="token punctuation">&#123;</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">"Jerry"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以认为ORM是一种高级抽象，对象的操作最终还是会转换成对应关系数据库操作的SQL语句，数据库操作的结构会被封装成对象</p>
<h3 id="GORM-1"><a href="#GORM-1" class="headerlink" title="GORM"></a>GORM</h3><p>GORM是一个友好的、功能全面的、性能不错的基于GO语言实现的ORM库。</p>
<h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><p>gorm.io&#x2F;dirver&#x2F;mysql 依赖github.com&#x2F;go-sql-driver&#x2F;mysql，可以认为它是对驱动的再封装。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">$ <span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>sql<span class="token operator">-</span>driver<span class="token operator">/</span>mysql
$ <span class="token keyword">go</span> get <span class="token operator">-</span>u gorm<span class="token punctuation">.</span>io<span class="token operator">/</span>gorm
$ <span class="token keyword">go</span> get <span class="token operator">-</span>u gorm<span class="token punctuation">.</span>io<span class="token operator">/</span>driver<span class="token operator">/</span>mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h6 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h6><ul>
<li>英文<a href="https://gorm.io/docs/"> https://gorm.io/docs/</a></li>
<li>中文 <a href="https://gorm.io/zh_CN/docs/index.html">https://gorm.io/zh_CN&#x2F;docs&#x2F;index.html</a></li>
</ul>
<h6 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h6><p><a href="https://gorm.io/zh_CN/docs/connecting_to_the_database.html#MySQL">https://gorm.io/zh_CN&#x2F;docs&#x2F;connecting_to_the_database.html#MySQL</a></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>
 <span class="token string">"log"</span>
 <span class="token comment">// _ "github.com/go-sql-driver/mysql" // 不要驱动了吗？</span>
 <span class="token string">"gorm.io/driver/mysql"</span>
 <span class="token string">"gorm.io/gorm"</span>
<span class="token punctuation">)</span>
<span class="token keyword">var</span> db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB
<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">var</span> err <span class="token builtin">error</span>
 <span class="token comment">// dsn := "wayne:wayne@/test"</span>
 dsn <span class="token operator">:=</span> <span class="token string">"wayne:wayne@tcp(localhost:3306)/test?charset=utf8mb4"</span>
 db<span class="token punctuation">,</span> err <span class="token operator">=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>dsn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 不要用:=</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的代码其实还是需要驱动的</p>
<p>在<code>gorm.io/driver/mysql/mysql.go</code>中</p>
<ul>
<li><code>import了&quot;github.com/go-sql-driver/mysql&quot;</code> 也就是说驱动也导入了</li>
<li>Dialector的Initalize方法中使用了<code>sql.Open</code></li>
</ul>
<p><img src="/images/R4_Pj04NJNofQjeP7O098UvyH3-7Mt--bCCv4P-wxa0.png" alt="image"></p>
<p><img src="/images/oYugO6NnOV-fb0qJlsGlfiB7E0wLvwedWxg3qS4kubQ.png" alt="image"></p>
<h5 id="模型定义"><a href="#模型定义" class="headerlink" title="模型定义"></a>模型定义</h5><p><a href="https://gorm.io/zh_CN/docs/models.html">https://gorm.io/zh_CN&#x2F;docs&#x2F;models.html</a></p>
<p>模型是标准的struct，由Go的基本数据类型、实现了Scanner和Valuer接口的自定义类型及其指针或别名组成</p>
<p>例如：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  ID           <span class="token builtin">uint</span>
  Name         <span class="token builtin">string</span>
  Email        <span class="token operator">*</span><span class="token builtin">string</span>
  Age          <span class="token builtin">uint8</span>
  Birthday     <span class="token operator">*</span>time<span class="token punctuation">.</span>Time
  MemberNumber sql<span class="token punctuation">.</span>NullString
  ActivatedAt  sql<span class="token punctuation">.</span>NullTime
  CreatedAt    time<span class="token punctuation">.</span>Time
  UpdatedAt    time<span class="token punctuation">.</span>Time
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>GORM倾向于约定优先配置</p>
<ul>
<li>约定使用名为ID的属性会作为主键</li>
<li>约定使用snake_cases作为表名<ul>
<li>结构体命名为employee，那么数据库表名就是employees</li>
</ul>
</li>
<li>约定使用snake_case作为字段名，字段首字母大写采用大驼峰<ul>
<li>属性名为FirstName，默认对应数据库表的字段名为first_name</li>
</ul>
</li>
</ul>
<p>如果不遵循以上约定就要自定义配置</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 不符合约定的定义，很多都需要配置，直接用不行</span>
<span class="token keyword">type</span> Emp <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 默认表名emps</span>
 emp_no     <span class="token builtin">int</span>    <span class="token comment">// 不是ID为主键，需要配置</span>
 first_name <span class="token builtin">string</span> <span class="token comment">// 首字母未大写，也需要配置</span>
 last_name  <span class="token builtin">string</span>
 gender     <span class="token builtin">byte</span>
 birth_date <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 符合约定的定义如下</span>
<span class="token keyword">type</span> student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 默认表名students</span>
 ID   <span class="token builtin">int</span>    <span class="token comment">// Id也可以</span>
 Name <span class="token builtin">string</span> <span class="token comment">// 字段首字母要大写</span>
 Age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="gorm-Model"><a href="#gorm-Model" class="headerlink" title="gorm.Model"></a>gorm.Model</h5><p>GORM定义一个<code>gorm.Model </code>结构体，其包括字段<code>ID、CreateAt、UpdateAt、DeleteAt</code> </p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// gorm.Model 的定义</span>
<span class="token keyword">type</span> Model <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  ID        <span class="token builtin">uint</span>           <span class="token string">`gorm:"primaryKey"`</span>
  CreatedAt time<span class="token punctuation">.</span>Time
  UpdatedAt time<span class="token punctuation">.</span>Time
  DeletedAt gorm<span class="token punctuation">.</span>DeletedAt <span class="token string">`gorm:"index"`</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="表名配置"><a href="#表名配置" class="headerlink" title="表名配置"></a>表名配置</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 表名并没有遵守约定</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>Emp<span class="token punctuation">)</span> <span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> <span class="token string">"employees"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="字段配置"><a href="#字段配置" class="headerlink" title="字段配置"></a>字段配置</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>
 <span class="token string">"log"</span>
 <span class="token string">"gorm.io/driver/mysql"</span>
 <span class="token string">"gorm.io/gorm"</span>
 <span class="token string">"gorm.io/gorm/logger"</span>
<span class="token punctuation">)</span>
<span class="token keyword">var</span> db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB
<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">var</span> err <span class="token builtin">error</span>
 <span class="token comment">// dsn := "wayne:wayne@/test"</span>
 dsn <span class="token operator">:=</span> <span class="token string">"wayne:wayne@tcp(localhost:3306)/test?charset=utf8mb4"</span>
 db<span class="token punctuation">,</span> err <span class="token operator">=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>dsn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">&#123;</span>
 Logger<span class="token punctuation">:</span> logger<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">LogMode</span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span>Info<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 日志级别，默认为Silent</span>
即打印慢SQL和错误
 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 不要用:=</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> Emp <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 默认表名emps</span>
 EmpNo     <span class="token builtin">int</span>    <span class="token string">`gorm:"primaryKey"`</span> <span class="token comment">// 默认约束是id为主键，而这里将EmpNo设置为主键，对应库里的字段为emp_no</span>
 FirstName <span class="token builtin">string</span> <span class="token comment">// 首字母大写，对应字段first_name</span>
 LastName  <span class="token builtin">string</span>
 Gender    <span class="token builtin">byte</span>
 BirthDate <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 表名并没有遵守约定</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>Emp<span class="token punctuation">)</span> <span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> <span class="token string">"employees"</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">var</span> e Emp
 result <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token comment">// 等价于Limit 1，取1条</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Error<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用<code>gorm:&quot;primaryKey&quot;</code> 来指定字段为主键，默认使用名为ID的属性作为主键。primaryKey是tag名，大小写不敏感，但建议小驼峰</p>
<h5 id="列名"><a href="#列名" class="headerlink" title="列名"></a>列名</h5><p>如果未按照约定定义字段，需要定义结构体属性时指定数据库字段名称是什么</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">BirthDate <span class="token builtin">string</span> <span class="token string">`gorm:"column:birth_date"`</span> <span class="token comment">// 可以使用column指定数据库表中的对应字段名</span>
Xyz <span class="token builtin">string</span> <span class="token string">`gorm:"column:birth_date"`</span> <span class="token comment">// 字段名可以不符合约定，但字段名首字母一定要大写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<h5 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h5><p><a href="https://gorm.io/zh_CN/docs/migration.html#%E8%A1%A8">https://gorm.io/zh_CN&#x2F;docs&#x2F;migration.html#%E8%A1%A8</a></p>
<p>下面，新建一个students表，来看看结构体中属性类型和数据库表中字段类型的对应关系</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 迁移后，主键默认不为空，其他字段默认都是能为空的</span>
<span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 ID       <span class="token builtin">int</span>       <span class="token comment">// 缺省主键bigint AUTO_INCREMENT</span>
 Name     <span class="token builtin">string</span>    <span class="token string">`gorm:"not null;type:varchar(48);comment:姓名"`</span>
 Age      <span class="token builtin">byte</span>      <span class="token comment">// byte=>tinyint unsigned</span>
 Birthday time<span class="token punctuation">.</span>Time <span class="token comment">// datetime</span>
 Gender   <span class="token builtin">byte</span>      <span class="token string">`gorm:"type:tinyint"`</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// db.Migrator().DropTable(&amp;Student&#123;&#125;)</span>
db<span class="token punctuation">.</span><span class="token function">Migrator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateTable</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
CREATE TABLE <span class="token string">`students`</span> <span class="token punctuation">(</span>
    <span class="token string">`id`</span> bigint AUTO_INCREMENT<span class="token punctuation">,</span>
    <span class="token string">`name`</span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span> NOT NULL COMMENT <span class="token char">'姓名'</span><span class="token punctuation">,</span>
    <span class="token string">`age`</span> tinyint unsigned<span class="token punctuation">,</span>
    <span class="token string">`birthday`</span> <span class="token function">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> NULL<span class="token punctuation">,</span>
    <span class="token string">`gender`</span> tinyint<span class="token punctuation">,</span>
    PRIMARY KEY <span class="token punctuation">(</span><span class="token string">`id`</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由于int &#x3D;&gt; bigint、string &#x3D;&gt; longtext，这些默认转换不符合我们的要求，所以，在tag中使用type指定字段类型。</p>
<p>属性是用来构建结构体实例的，生成的SQL语句也要使用这些数据。而tag是用来生成迁移</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">Name    <span class="token builtin">string</span>     <span class="token string">`gorm:"size:48"`</span> 定义为<span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span>
Age     <span class="token builtin">int</span>       <span class="token string">`gorm:"size:32"`</span> 定义为<span class="token number">4</span>字节的<span class="token builtin">int</span>
Age     <span class="token builtin">int</span>       <span class="token string">`gorm:"size:64"`</span> 定义为<span class="token number">8</span>字节的bigint<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>迁移功能用的较少。</p>
<p>结构体属性类型用来封装实例的属性数据，Tag中类型指定迁移到数据库表中字段的类型</p>
<h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><p>参考 <a href="https://gorm.io/zh_CN/docs/create.html#%E5%88%9B%E5%BB%BA%E8%AE%B0%E5%BD%95">https://gorm.io/zh_CN&#x2F;docs&#x2F;create.html#%E5%88%9B%E5%BB%BA%E8%AE%B0%E5%BD%95</a></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 ID       <span class="token builtin">int</span>        <span class="token comment">// 缺省主键bigint AUTO_INCREMENT</span>
 Name     <span class="token builtin">string</span>     <span class="token string">`gorm:"size:48"`</span> <span class="token comment">//`gorm:"not null;type:varchar(48);comment:姓名"`</span>
 Age      <span class="token builtin">byte</span>       <span class="token comment">// byte=>tinyint unsigned</span>
 Birthday <span class="token operator">*</span>time<span class="token punctuation">.</span>Time <span class="token comment">// datetime</span>
 Gender   <span class="token builtin">byte</span>       <span class="token comment">//`gorm:"type:tinyint"`</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Student<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d: %s %d"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> s<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>Age<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="新增一条"><a href="#新增一条" class="headerlink" title="新增一条"></a>新增一条</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go">t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
s <span class="token operator">:=</span> Student<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> Birthday<span class="token punctuation">:</span> <span class="token operator">&amp;</span>t<span class="token punctuation">&#125;</span>
result <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>RowsAffected<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="新增多条"><a href="#新增多条" class="headerlink" title="新增多条"></a>新增多条</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 新增多条</span>
n <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
s <span class="token operator">:=</span> Student<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> Birthday<span class="token punctuation">:</span> <span class="token operator">&amp;</span>n<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
result <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Student<span class="token punctuation">&#123;</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 传入指针的切片</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Error<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>RowsAffected<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="查询一条"><a href="#查询一条" class="headerlink" title="查询一条"></a>查询一条</h5><p>Take 被转换为Limit 1</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> s Student
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// 零值</span>
r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token comment">// LIMIT 1</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// 被填充</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token comment">// ORDER BY `students`.`id` LIMIT 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Last</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token comment">// ORDER BY `students`.`id` DESC LIMIT 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>根据id查，可以使用下面的方式</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a <span class="token operator">=</span> Student<span class="token punctuation">&#123;</span>Id<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">&#125;</span>
results <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>results<span class="token punctuation">.</span>RowsAffected<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="时间相关错误"><a href="#时间相关错误" class="headerlink" title="时间相关错误"></a>时间相关错误</h5><p>1、时间类型字段</p>
<p>上例错误如下，主要是使用了*time.Time，而不是string</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">sql<span class="token punctuation">:</span> Scan <span class="token builtin">error</span> on column index <span class="token number">3</span><span class="token punctuation">,</span> name <span class="token string">"birthday"</span><span class="token punctuation">:</span> unsupported Scan<span class="token punctuation">,</span> storing 
driver<span class="token punctuation">.</span>Value <span class="token keyword">type</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> into <span class="token keyword">type</span> <span class="token operator">*</span>time<span class="token punctuation">.</span>Time
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> 转 <span class="token operator">*</span>time<span class="token punctuation">.</span>Time失败了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>解决方案</p>
<ul>
<li>在连接字符串中增加parseTime&#x3D;true ，这样时间类型就会自动转化为time.Time类型<ul>
<li><code>dsn := &quot;wayne:wayne@tcp(localhost:3306)/test?charset=utf8mb4&amp;parseTime=true&quot;</code></li>
</ul>
</li>
<li>也可以<code>Birthday string</code> ，拿到Birthday字符串后，必要时，转换成时间类型,time.Parse()</li>
</ul>
<p><strong>2、UTC时间</strong></p>
<p>Create写入的时间，也就是说time.Now()取当前时区时间，但是存入数据库的时间是UTC时间。</p>
<p>Take拿回的时间也是UTC时间，可以通过<code>s.Birthday.Local()</code>转换成当前时区时间。</p>
<p>如果想要存入的时间或读取的时间直接是当前时区时间，可以使用loc参数loc&#x3D;Local</p>
<p>如果使用了loc&#x3D;Local</p>
<ul>
<li>存入时，数据库字段中的时间就是当前时区的时间值</li>
<li>读取时，数据库字段中的时间就被解读为当前时区</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">dsn <span class="token operator">:=</span> "wayne<span class="token punctuation">:</span>wayne@<span class="token function">tcp</span><span class="token punctuation">(</span>localhost<span class="token punctuation">:</span><span class="token number">3306</span><span class="token punctuation">)</span><span class="token operator">/</span>test?
charset<span class="token operator">=</span>utf8mb4<span class="token operator">&amp;</span>parseTime<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>loc<span class="token operator">=</span>Local"
<span class="token comment">// time/zoneinfo.go</span>
<span class="token keyword">func</span> <span class="token function">LoadLocation</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Location<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">||</span> name <span class="token operator">==</span> <span class="token string">"UTC"</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> UTC<span class="token punctuation">,</span> <span class="token boolean">nil</span>
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"Local"</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> Local<span class="token punctuation">,</span> <span class="token boolean">nil</span>
 <span class="token punctuation">&#125;</span>
 <span class="token operator">...</span>省略
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>千万不要存入数据库时采用Local存入，却使用UTC解读时间，会造成时间时区的混乱。应该保证时间存入、读取时时区一致</strong></p>
<p>一定要统一项目中数据库中时间类型字段的时区。可以考虑统一采用UTC，为了本地化显示转换为当前时区即可。</p>
<h5 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> students <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Student
r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Error<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> students <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Student
r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Distinct</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span> <span class="token comment">// 投影的字段是什么？</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span> <span class="token comment">// 容器里每个实例是什么样子？</span>

<span class="token comment">// 输出</span>
<span class="token number">2023</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">14</span><span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">:</span><span class="token number">13</span> <span class="token operator">/</span>Users<span class="token operator">/</span>dujie<span class="token operator">/</span>Desktop<span class="token operator">/</span>go12<span class="token operator">/</span>goproject<span class="token operator">/</span>mysql<span class="token operator">-</span>test<span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">75</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">.</span>602ms<span class="token punctuation">]</span> <span class="token punctuation">[</span>rows<span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span> SELECT DISTINCT <span class="token string">`name`</span> FROM <span class="token string">`students`</span>
<span class="token punctuation">[</span><span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">0</span> Tom <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">0</span> 张三 <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">0</span> 李四 <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">0</span> 收到 <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">0</span> 陈飞 <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">0</span> 周正 <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">0</span> Tom1 <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">0</span> Tom2 <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">0</span> Tom3 <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h5><p>投影是关系模型的操作，就是选择哪些字段</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> students <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Student
r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span> r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span>
<span class="token comment">// 输出</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">.</span>580ms<span class="token punctuation">]</span> <span class="token punctuation">[</span>rows<span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">]</span> SELECT <span class="token string">`id`</span><span class="token punctuation">,</span><span class="token string">`name`</span><span class="token punctuation">,</span><span class="token string">`age`</span> FROM <span class="token string">`students`</span>
<span class="token punctuation">[</span><span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">1</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">2</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">3</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">4</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">5</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">6</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">7</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">8</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">9</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">10</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">11</span> Tom <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">12</span> Tom <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">13</span> Tom <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">14</span> 张三 <span class="token number">33</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">15</span> 李四 <span class="token number">39</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">16</span> 李四 <span class="token number">39</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">17</span> 李四 <span class="token number">39</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">18</span> 李四 <span class="token number">39</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">19</span> 收到 <span class="token number">39</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">20</span> 陈飞 <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">21</span> 周正 <span class="token number">18</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">22</span> 周正 <span class="token number">18</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">23</span> 周正 <span class="token number">18</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">24</span> Tom <span class="token number">20</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">25</span> Tom1 <span class="token number">201</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">26</span> Tom2 <span class="token number">202</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">27</span> Tom3 <span class="token number">203</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">></span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="Limit和Offset"><a href="#Limit和Offset" class="headerlink" title="Limit和Offset"></a>Limit和Offset</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go">    <span class="token keyword">var</span> students <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Student
    db<span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Offset</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span> <span class="token comment">// 容器里每个实例是什么样子？</span>

<span class="token comment">// 输出</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span>534ms<span class="token punctuation">]</span> <span class="token punctuation">[</span>rows<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> SELECT <span class="token operator">*</span> FROM <span class="token string">`students`</span> LIMIT <span class="token number">2</span> OFFSET <span class="token number">2</span>
<span class="token punctuation">[</span><span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">3</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">1</span><span class="token operator">></span> <span class="token operator">&lt;</span>Id<span class="token punctuation">:</span><span class="token number">4</span> Tom <span class="token number">32</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">></span> <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><p><strong>1、字符串条件</strong></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> stu <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Student
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name = ?"</span><span class="token punctuation">,</span> <span class="token string">"陈飞"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name &lt;> ?"</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>                              <span class="token comment">// 不等于</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name in (?)"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"陈飞"</span><span class="token punctuation">,</span> <span class="token string">"周正"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span> <span class="token comment">//  在...中</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name like ?"</span><span class="token punctuation">,</span> <span class="token string">"周%"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span> <span class="token comment">// 模糊查询</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name like binary ?"</span><span class="token punctuation">,</span> <span class="token string">"T%"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name like ? or name like ?"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name like ? or id = ?"</span><span class="token punctuation">,</span> <span class="token string">"陈飞"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"id between ? and ?"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>2、struct或map条件</strong></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> stu <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Student
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name = ?"</span><span class="token punctuation">,</span> <span class="token string">"陈飞"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name &lt;> ?"</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>                              <span class="token comment">// 不等于</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name in (?)"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"陈飞"</span><span class="token punctuation">,</span> <span class="token string">"周正"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span> <span class="token comment">//  在...中</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name like ?"</span><span class="token punctuation">,</span> <span class="token string">"周%"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>                            <span class="token comment">// 模糊查询</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name like binary ?"</span><span class="token punctuation">,</span> <span class="token string">"T%"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name like ? or name like ?"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name like ? or id = ?"</span><span class="token punctuation">,</span> <span class="token string">"陈飞"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"id between ? and ?"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span>Id<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span>Id<span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span> Name<span class="token punctuation">:</span> <span class="token string">"陈飞"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>                   <span class="token comment">// And</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"陈飞"</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span> <span class="token comment">// And</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>struct条件中出现了零值，例如<code>db.Where(&amp;Student&#123;Name:&quot;tom&quot;,Age: 0&#125;)</code> ，Age是零值，就不会出现在条件中。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span> 
<span class="token comment">// 指定使用结构体里面的name和age字段作为条件，and</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><strong>3、Not</strong></p>
<p>将Where换成Not即可，表示条件取反</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">db<span class="token punctuation">.</span><span class="token function">Not</span><span class="token punctuation">(</span><span class="token string">"id =? or id in (?)"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><strong>4、Or</strong></p>
<p>Or的用法和Where一样</p>
<p>Where().Where() 是And关系，Where().Or()是Or关系</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name=?"</span><span class="token punctuation">,</span> <span class="token string">"周正"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span><span class="token string">"name=?"</span><span class="token punctuation">,</span> <span class="token string">"陈飞"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name=?"</span><span class="token punctuation">,</span> <span class="token string">"周正"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Tom"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go">r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Order</span><span class="token punctuation">(</span><span class="token string">"id desc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span> <span class="token comment">// ORDER BY id desc</span>
r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Order</span><span class="token punctuation">(</span><span class="token string">"name, id desc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span>         <span class="token comment">// ORDER BY name,id desc</span>
r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Order</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Order</span><span class="token punctuation">(</span><span class="token string">"id desc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span> <span class="token comment">// ORDER BY name,id desc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go">r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span> <span class="token comment">// GROUP BY `id`</span>
r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span> <span class="token comment">// GROUP BY `name`</span>
r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span> <span class="token comment">// GROUP BY `id`,`name`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// SELECT name, count(id) as c FROM `students` GROUP BY `name`</span>
r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"name, count(id) as c"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>students<span class="token punctuation">)</span>
<span class="token comment">// 但是students中没有属性来保存count的值</span>
<span class="token comment">// 使用Rows()返回所有行，自行获取字段值，但是要用Table指定表名</span>
<span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    name  <span class="token builtin">string</span>
    count <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> r <span class="token operator">=</span> Result<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">"students"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>"name<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> as 
c<span class="token string">").Group("</span>name"<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token comment">// 遍历每一行，填充2个属性的结构体实例</span>
<span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>r<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"@@@"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 和Select的投影字段对应</span>
    Name  <span class="token builtin">string</span>
    Count <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> r <span class="token operator">=</span> Result<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">"students"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"name, count(id) as c"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Having</span><span class="token punctuation">(</span><span class="token string">"c > 3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token comment">// 遍历每一行，填充2个属性的结构体实例</span>
<span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>r<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">.</span>Count<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"@@@"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token comment">// 使用Scan填充容器，注意字段名要大写开头</span>
<span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    Name <span class="token builtin">string</span>
    C    <span class="token builtin">int</span> <span class="token comment">// 或Count int `gorm:"column:c"`</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> rows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Result<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">"students"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"name, count(id) as c"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Having</span><span class="token punctuation">(</span><span class="token string">"c > 3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rows<span class="token punctuation">)</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token keyword">range</span> rows <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d, %T %#[2]v\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> r<span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go">SELECT
 employees<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> 
 employees<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> 
 employees<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> 
 salaries<span class="token punctuation">.</span>salary
FROM
 employees
 INNER JOIN
 salaries
 ON
 employees<span class="token punctuation">.</span>emp_no <span class="token operator">=</span> salaries<span class="token punctuation">.</span>emp_no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    EmpNo     <span class="token builtin">int</span>
    FirstName <span class="token builtin">string</span>
    LastName  <span class="token builtin">string</span>
    Salary    <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">"employees as e"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>"e<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> 
last_name<span class="token punctuation">,</span> salary"<span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token function">Joins</span><span class="token punctuation">(</span><span class="token string">"join salaries as s on e.emp_no = s.emp_no"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token keyword">var</span> r Result
<span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>r<span class="token punctuation">.</span>EmpNo<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">.</span>FirstName<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">.</span>LastName<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">.</span>Salary<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"###"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
 EmpNo     <span class="token builtin">int</span>
 FirstName <span class="token builtin">string</span>
 LastName  <span class="token builtin">string</span>
 Salary    <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Result<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">"employees as e"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>"e<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> 
salary"<span class="token punctuation">)</span><span class="token punctuation">.</span>
 <span class="token function">Joins</span><span class="token punctuation">(</span><span class="token string">"join salaries on e.emp_no = salaries.emp_no"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>results<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Error<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>RowsAffected<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span> row <span class="token operator">:=</span> <span class="token keyword">range</span> results <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> row<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    EmpNo     <span class="token builtin">int</span>
    FirstName <span class="token builtin">string</span>
    LastName  <span class="token builtin">string</span>
    Salary    <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Result<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">"employees as e"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>"e<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> 
salary"<span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token function">Joins</span><span class="token punctuation">(</span><span class="token string">"join salaries as s on e.emp_no = s.emp_no"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>results<span class="token punctuation">)</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token keyword">range</span> results <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h5><p><a href="https://gorm.io/zh_CN/docs/update.html">https://gorm.io/zh_CN&#x2F;docs&#x2F;update.html</a></p>
<p>先查后改：先查到一个实例，对这个实例属性进行修改，然后调用db.Save()方法保存。</p>
<p>db.Save()方法会保存所有字段，对于没有主键的实例相当于Insert into，有主键的实例相当于Update。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 先查</span>
<span class="token keyword">var</span> student Student
db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>student<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span>
student<span class="token punctuation">.</span>Age <span class="token operator">+=</span> <span class="token number">10</span>
student<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Sam"</span>
<span class="token comment">// 后修改</span>
db<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>student<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>Update 单个字段</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span>ID<span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment">// 更新符合条件的所有记录的一个</span>
字段
<span class="token comment">// UPDATE `students` SET `age`=11 WHERE `id` = 13</span>
r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment">// 没有指定ID或Where条件，是全表更新</span>
age字段，这是非常危险的
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Error<span class="token punctuation">)</span> <span class="token comment">// 会报WHERE conditions required错误，更新失败，这是一种保护</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>Update更新多列</p>
<p>多个键值对，使用map或结构体实例传参</p>
<p>同样，没有指定ID或where条件，是全表更新age字段，这是非常危险的，报WHERE conditions required错误</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"age &lt; ?"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Updates</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">r <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"age &lt; ?"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Updates</span><span class="token punctuation">(</span>Student<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><p><a href="https://gorm.io/zh_CN/docs/delete.html">https://gorm.io/zh_CN&#x2F;docs&#x2F;delete.html</a></p>
<p>删除操作是危险的，慎重操作！</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">result <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Error<span class="token punctuation">)</span>
<span class="token comment">// 报WHERE conditions required错误，这是全表删除，危险</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">result <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token comment">// 指定主键</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Error<span class="token punctuation">)</span>
db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// DELETE FROM `students` WHERE `students`.`id` IN (15,16,18)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">result <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"id > ?"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 删除符合条件的一批</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


























































]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>进程和线程</title>
    <url>/2023/05/10/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="进程线程"><a href="#进程线程" class="headerlink" title="进程线程"></a>进程线程</h1><h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><p><strong>并发Concurrency：</strong> 是指同一时刻在CPU中只能有一条指令执行，多个进程指令被快速的轮换执行。从宏观来看，是多个进程同时执行。但从微观来看，这些进程并不是同时执行的，只是吧时间分成若干段，多个进程快速交替的执行。</p>
<p>在操作系统中，进程的并发就是：CPU把一个时间段划分成几个时间片，进程在这几个时间区间之间来回切换处理的过程。CPU处理的速度非常快，只要时间间隔处理得当，就可以让用户感觉是多个进程同时在执行。如下图</p>
<p><img src="/images/QdAIibaNl6zjCAfjw3l-AdIqVvp4gnV1c7dNfBesKrA.png" alt="image"></p>
<p><strong>并行parallelism</strong>：同一时刻有多条执行在多个处理器上同时执行。如果系统有一个以上CPU，当一个CPU在执行一个进程时，另一个CPU可以执行另一个进程，两个进程互不抢占cpu资源，可以同时进行。</p>
<p>决定进程并行的因素不是CPU数量，而是CPU的核心数。比如一个CPU多核也可以并行</p>
<p><img src="/images/F8abdMJNV7fdb01bhGVMyxod76mnv9YwmbiuGqVrbak.png" alt="image"></p>
<h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><h5 id="早期工作模式"><a href="#早期工作模式" class="headerlink" title="早期工作模式"></a>早期工作模式</h5><p>最早计算机很巨大笨重，得把程序转换成某种编码对应的纸带或卡片上的孔（类似2B铅笔涂答题卡），输入设备再读取打孔纸带把程序和数据装入计算机，程序在计算机上运行完，在通过打印机输出。整个过程一个程序从输入到输出在所有环节都是独占资源，实际上输入、输出环节非常慢，而且此时CPU没有计算任务，处于忙等待。再一个，如果下一个程序需要运行，整个过程将再走一遍，这是一个接一个运行的串行方式。</p>
<p>计算机处理IO时，会让CPU处于忙等待，能否设计一套控制程序运行的技术，来充分利用CPU资源？</p>
<h5 id="多道处理程序"><a href="#多道处理程序" class="headerlink" title="多道处理程序"></a>多道处理程序</h5><p>计算机内存中常驻一个监管程序，把多个程序一并加载到计算机内存中。</p>
<p>例如有A、B两个程序，它们在内存中有各自独立的内存空间。</p>
<p>先运行A，A遇到IO时，让出CPU使用权，监管程序调用B运行，B遇到IO时，让出控制权，监管程序让A运行。</p>
<p>需要注意的是，A、B实际上是交替运行，而不是串行执行。</p>
<p>这种控制方式减少了CPU空闲时间，提高了CPU运行效率。</p>
<p>Version:0.9 StartHTML:0000000105 EndHTML:0000003196 StartFragment:0000000141 EndFragment:0000003156</p>
<h5 id="分时系统"><a href="#分时系统" class="headerlink" title="分时系统"></a>分时系统</h5><p>随着电子管、晶体管、大规模集成电路技术的突飞猛进，计算机硬件技术进步日新月异，CPU的运算单元和运行频率也越来越高。</p>
<p>可以将CPU运行时间分成非常小的时间片，把时间片分给不同的作业使用。如果某个作业不能完成计算，则暂时中断执行，让出CPU时间给另一个作业执行，等待下一轮轮询到自己。由于计算机运行速度已经很快了，且时间片较短，产生了所有作业在并行的错觉。每个作业也似乎都独占着计算机资源。分时的好处，使得每个作业在很短的时间内都有执行的机会，就可以和用户终端有很好的及时的交互。</p>
<p>以上所讲，都影响着后来出现的操作系统的并发工作方式。现在CPU已进入多核时代，促使了协程被更多编程语言支持。</p>
<p>协程，不过就是把当年的设计思想真正实现罢了。</p>
<blockquote>
<p>Go语言推荐使用协程来解决并发。但是其底层利用了多线程、IO多路复用，协程又是要解决多线程的一些弊端，如果不能很好的理解多线程运行模型、IO多路复用模型，就很难理解Goroutine的精髓。</p>
</blockquote>
<blockquote>
<p>所以，我们的第一步从多线程及阻塞IO模型说起。</p>
</blockquote>
<blockquote>
</blockquote>
<h3 id="进程和线程概念"><a href="#进程和线程概念" class="headerlink" title="进程和线程概念"></a>进程和线程概念</h3><p>我们现在接触到的多是多任务、分时的现代操作系统，其内部包含进程管理模块。</p>
<p>作业就是运行的任务，这些任务被称为进程process。每个进程要占据一块内存空间存放指令、数据等。进程工作时，如果被阻塞，那么当前进程就只能什么都干不了，怎样才能提高单个进程工作效率，又可以使用进程内存空间呢？线程thread。</p>
<p>一个进程内可以创建很多线程，让不同线程干活，即使是阻塞了一个线程，还有其他线程可以干活。这样提高了进程运行效率，同时进程就变成了一个资源和线程的容器。</p>
<p>在实现了线程的操作系统中，线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一个程序的执行实例就是一个进程。</p>
<p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。</p>
<p>进程和程序的关系：程序是源代码编译后的文件，而这些文件存放在硬盘上。当程序被操作系统加载到内存中，就是进程，进程中存放着指令和数据（资源），它也是线程的容器。</p>
<h5 id="形象化理解"><a href="#形象化理解" class="headerlink" title="形象化理解"></a>形象化理解</h5><ul>
<li>现代操作系统提出进程的概念，每一个进程都认为自己独占所有的计算机硬件资源</li>
<li>进程就是独立的王国，进程间不可以随便的共享数据</li>
<li>线程就是省份，同一个进程内的线程可以共享进程的资源，每一个线程拥有自己独立的堆栈</li>
</ul>
<h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><table>
<thead>
<tr>
<th><strong>状态</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>就绪(Ready)</td>
<td>线程能够运行，但在等待被调度。可能线程刚刚创建启动，或者刚刚从阻塞中恢复，或者被其他线程抢占</td>
</tr>
<tr>
<td>运行(Running)</td>
<td>线程正在运行</td>
</tr>
<tr>
<td>阻塞(Blocked)</td>
<td>线程等待外部事件发生而无法运行，如I&#x2F;O操作</td>
</tr>
<tr>
<td>终止(Terminated)</td>
<td>线程完成，或退出，或被取消</td>
</tr>
</tbody></table>
<p><img src="/images/227umIkj9ueakAlc6D0TMhuymUnQnccKjWbdwT7c8v4.png" alt="image"></p>
<h5 id="Python中的进程和线程"><a href="#Python中的进程和线程" class="headerlink" title="Python中的进程和线程"></a>Python中的进程和线程</h5><p>运行程序会启动一个解释器进程，多个线程共享这一个解释器进程。</p>
<h4 id="Python的线程开发"><a href="#Python的线程开发" class="headerlink" title="Python的线程开发"></a>Python的线程开发</h4><p>python的线程开发使用标准库threading</p>
<p>进程靠线程执行代码，进程中至少有一个<strong>主线程</strong>，其他线程称为工作线程。主线程是第一个启动的线程。</p>
<p>父线程：如果线程A中启动了一个线程B，A称为B的父线程。子线程：B称为A的子线程。</p>
<h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"># 签名
def <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> group<span class="token operator">=</span>None<span class="token punctuation">,</span> target<span class="token operator">=</span>None<span class="token punctuation">,</span> name<span class="token operator">=</span>None<span class="token punctuation">,</span>
                 args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> kwargs<span class="token operator">=</span>None<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> daemon<span class="token operator">=</span>None<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>参数名</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>target</td>
<td>线程调用的对象，就是目标函数</td>
</tr>
<tr>
<td>name</td>
<td>为线程起个名字</td>
</tr>
<tr>
<td>args</td>
<td>为目标函数传递实参，元组</td>
</tr>
<tr>
<td>kwargs</td>
<td>为目标函数关键字传参，字典</td>
</tr>
</tbody></table>
<h5 id="线程启动"><a href="#线程启动" class="headerlink" title="线程启动"></a>线程启动</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> threading
# 最简单的线程程序
def <span class="token function">worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"I'm working"</span><span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token char">'Done'</span><span class="token punctuation">)</span>
t <span class="token operator">=</span> threading<span class="token punctuation">.</span><span class="token function">Thread</span><span class="token punctuation">(</span>target<span class="token operator">=</span>worker<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'worker'</span><span class="token punctuation">)</span> # 线程对象
# target<span class="token operator">=</span>worker方式为关键字传参，按名称对应
# Python中还有按照位置对应传参，按照顺序依次对应
t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> # 启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>通过threading.Thread创建一个线程对象，target是目标函数，可以使用name为线程指定名称。 但是线程没有启动，需要调用start方法。</p>
<p>线程之所以执行函数，是因为线程中就是要执行代码的，而最简单的代码封装就是函数，所以还是函数调用。 函数执行完，线程也就退出了。 那么，如果不让线程退出，或者让线程一直工作怎么办呢？</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> threading
<span class="token keyword">import</span> time
def <span class="token function">worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    while True<span class="token punctuation">:</span> # <span class="token keyword">for</span> i in <span class="token keyword">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"I'm working"</span><span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token char">'Done'</span><span class="token punctuation">)</span>
t <span class="token operator">=</span> threading<span class="token punctuation">.</span><span class="token function">Thread</span><span class="token punctuation">(</span>target<span class="token operator">=</span>worker<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'worker'</span><span class="token punctuation">)</span> # 线程对象
t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> # 启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="线程退出"><a href="#线程退出" class="headerlink" title="线程退出"></a>线程退出</h5><p>Python没有提供线程退出的方法，线程在下面情况时退出 1、线程函数内语句执行完毕 2、线程函数中抛出未处理的异常</p>
<h5 id="线程传参"><a href="#线程传参" class="headerlink" title="线程传参"></a>线程传参</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> threading
<span class="token keyword">import</span> time
def <span class="token function">worker</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    s <span class="token operator">=</span> <span class="token string">"&#123;&#125; + &#123;&#125; = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> threading<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ident<span class="token punctuation">)</span>
t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span><span class="token function">Thread</span><span class="token punctuation">(</span>target<span class="token operator">=</span>worker<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'worker'</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h3><p>顾名思义，多个线程，一个进程中如果有多个线程运行，就是多线程，实现一种并发。</p>
<p>想想下面有几个线程运行？</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> string
<span class="token keyword">import</span> threading
<span class="token keyword">import</span> time
<span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    c <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"count = "</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>
        c <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token keyword">def</span> <span class="token function">char</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    s <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_lowercase
    <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"char = "</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>
t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>count<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"count"</span><span class="token punctuation">)</span>
t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>char<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"char"</span><span class="token punctuation">)</span>
t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># print('~' * 30)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>3个线程，count、char、主线程。</p>
<p>调整time.sleep(2)为20或更大，请问这个函数所在的执行线程怎么了？请问谁卡住（阻塞）了？谁又在运行？这和线程状态有什么关系？</p>
<p>注：Python中有一个GIL全局解释器锁，大家初学可以忽略它，它对阻塞性IO其实影响不大。</p>
<p>重点：大家要从例子中找到并发执行的感觉，这对理解并发包括Goroutine都大有益处。</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP编程</title>
    <url>/2023/05/12/TCP%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="TCP编程"><a href="#TCP编程" class="headerlink" title="TCP编程"></a>TCP编程</h1><h3 id="Socket编程"><a href="#Socket编程" class="headerlink" title="Socket编程"></a>Socket编程</h3><p>Python中提供了socket标准库，非常底层的接口库。 Socket是一种通用的网络编程接口，和网络层次没有一一对应的关系。</p>
<p>协议族 AF表示Address Family，用于socket()第一个参数</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>AF_INET</td>
<td>IPV4</td>
</tr>
<tr>
<td>AF_INET6</td>
<td>IPV6</td>
</tr>
<tr>
<td>AF_UNIX</td>
<td>Unix Domain Socket，windows没有</td>
</tr>
</tbody></table>
<h5 id="Socket类型"><a href="#Socket类型" class="headerlink" title="Socket类型"></a>Socket类型</h5><table>
<thead>
<tr>
<th>名称</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>SOCK_STREAM</td>
<td>面向连接的流套接字。默认值，TCP协议</td>
</tr>
<tr>
<td>SOCK_DGRAM</td>
<td>无连接的数据报文套接字。UDP协议</td>
</tr>
</tbody></table>
<p>TCP协议是流协议，也就是一大段数据看做字节流，一段段持续发送这些字节。</p>
<p>UDP协议是数据报协议，每一份数据封在一个单独的数据报中，一份一份发送数据。</p>
<p>注意：一开始学习网络编程，不要陷入协议的细节中。</p>
<h3 id="CS编程"><a href="#CS编程" class="headerlink" title="CS编程"></a>CS编程</h3><p>Socket编程，是完成一端和另一端通信的，注意一般来说这两端分别处在不同的进程中，也就是说网络通信是一个进程发消息到另外一个进程。</p>
<p>我们写代码的时候，每一个socket对象只表示了其中的一端。</p>
<p>从业务角度来说，这两端从角色上分为：</p>
<ul>
<li>主动发送请求的一端，称为客户端Client</li>
<li>被动接受请求并回应的一端，称为服务端Server</li>
</ul>
<p>这种编程模式也称为C&#x2F;S编程。</p>
<h3 id="TCP服务端编程"><a href="#TCP服务端编程" class="headerlink" title="TCP服务端编程"></a>TCP服务端编程</h3><h5 id="服务器端编程步骤"><a href="#服务器端编程步骤" class="headerlink" title="服务器端编程步骤"></a>服务器端编程步骤</h5><ul>
<li>创建Socket对象</li>
<li>绑定IP地址Address和端口Port。bind()方法IPV4地址为一个二元组(‘ip地址字符串’,port)</li>
<li>开始监听，将在指定的ip的端口上监听<ul>
<li>listen([backlog])方法。未完成连接队列和完成连接队列长度不能超过backlog，如果accept不拿走就满了，就会直接拒绝连接请求。backlog可以不写，默认为5</li>
</ul>
</li>
<li>获取用于传送数据的新的Socket对象 socket.accept() -&gt; (socket object, address info) accept方法阻塞等待客户端建立连接，返回一个新的Socket对象和客户端地址的二元组 地址是远程客户端的地址，IPv4中它是一个二元组(clientaddr, port)<ul>
<li>接收数据 recv(bufsize[, flags]) 使用缓冲区接收数据</li>
<li>发送数据 send(bytes)发送数据</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">Server端开发
socket对象 <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> bind<span class="token punctuation">(</span><span class="token punctuation">(</span>IP<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> listen <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> accept <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> close
                                                 <span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> recv <span class="token keyword">or</span> send <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> close<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="/images/erWveWtSLzT8lPZIU8GSBLSppOGETeHJSadxKbvM8fM.png" alt="image"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket
<span class="token comment"># TCP服务端编程</span>
server <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建socket对象</span>
laddr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span>  <span class="token comment"># 地址和端口的元组</span>
server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>laddr<span class="token punctuation">)</span>  <span class="token comment"># 绑定</span>
server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>  <span class="token comment"># 监听</span>
<span class="token comment"># 等待建立连接的客户端</span>
conn<span class="token punctuation">,</span> raddr <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 阻塞</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>  <span class="token comment"># 负责客户端连接的socket对象</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>raddr<span class="token punctuation">)</span> <span class="token comment"># 对方IP地址和端口</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>getpeername<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> conn<span class="token punctuation">.</span>getsockname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 通过socket获取对端地址或本地地址</span>
data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>  <span class="token comment"># 接收客户端信息</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b"Hello magedu.com"</span><span class="token punctuation">)</span>  <span class="token comment"># 回应客户端，使用字节数组</span>
conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
server<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'~'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>想一想，上例的面临的问题是什么？如何解决？</p>
<p>socket很多函数都是同步阻塞函数，也就说一旦阻塞，可能会把当前线程阻塞住，这样就没法为其它客户端服务了。可以采用多线程来解决这个问题。</p>
<h3 id="实战：实现web服务器——多线程阻塞IO版"><a href="#实战：实现web服务器——多线程阻塞IO版" class="headerlink" title="实战：实现web服务器——多线程阻塞IO版"></a>实战：实现web服务器——多线程阻塞IO版</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading
<span class="token keyword">import</span> time
<span class="token keyword">import</span> socket
html <span class="token operator">=</span> <span class="token triple-quoted-string string">"""\
&lt;!DOCTYPE html>
&lt;html lang="en">
&lt;head>
   &lt;meta charset="UTF-8">
   &lt;title>magedu&lt;/title>
&lt;/head>
&lt;body>
   &lt;h1>马哥教育www.magedu.com -- Multithread + Blocking IO&lt;/h1>
&lt;/body>
&lt;/html>\
"""</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>
response <span class="token operator">=</span> <span class="token triple-quoted-string string">"""\
HTTP/1.1 200 OK
Date: Mon, 24 Oct 2022 20:04:23 GMT
Content-Type: text/html
Content-Length: &#123;&#125;
Connection: keep-alive
Server: wayne.magedu.com
"""</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">'\r\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> html
<span class="token keyword">def</span> <span class="token function">accept</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">:</span>
    i <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        conn<span class="token punctuation">,</span> raddr <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>
        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>recv<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"recv-&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> 
raddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
        i <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token keyword">def</span> <span class="token function">recv</span><span class="token punctuation">(</span>conn<span class="token punctuation">:</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">,</span> raddr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>raddr<span class="token punctuation">,</span> <span class="token string">'bye~~~~'</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token comment"># print(data)</span>
        conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>response<span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">'~~~~~~~~~~~~~'</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> <span class="token comment"># 表示主模块运行，等效为main函数执行</span>
    server <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>
    laddr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span>
    server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>laddr<span class="token punctuation">)</span>
    server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
 
    threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>accept<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"accept"</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
daemon<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>active_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>daemon属性</p>
<ul>
<li>设置线程的daemon属性为True，则成该线程为daemon线程</li>
<li>主线程退出时<ul>
<li>如果还有至少一个non-daemon线程，则主线程等待</li>
<li>如果没有一个non-daemon线程，不管还有多少daemon线程，都会杀掉这些线程，程序退出</li>
</ul>
</li>
</ul>
<p>阻塞的IO导致该线程进入阻塞态，就该让出CPU，这对性能影响不大。此多线程程序最大的问题在于，当高并发到来，连接非常多，多线程的频繁地创建和销毁，以及管理线程的成本太高了。线程太多，每个线程分配的总内存也很可观。</p>
<p>接下来，我们用线程池来简单优化一下，看看能否提升性能？IO多路复用又是什么东西，它能提高多少性能？</p>
<h3 id="实战：实现WEB服务器——线程池版"><a href="#实战：实现WEB服务器——线程池版" class="headerlink" title="实战：实现WEB服务器——线程池版"></a>实战：实现WEB服务器——线程池版</h3><p>上例实现了多线程加阻塞IO版本</p>
<ul>
<li>一个客户端请求到达后端，开启一个线程为之服务</li>
<li>线程内运行函数代码，接收HTTP请求并解析，返回HTTP响应报文</li>
</ul>
<p>问题</p>
<ul>
<li>大量的线程为HTTP连接服务，用完就断，而创建和销毁线程的代价太高<ul>
<li>解决的方案就是利用线程池</li>
</ul>
</li>
<li>如果拥有海量线程来处理并发客户端请求，线程调度时上下文切换将给系统造成巨大的性能消耗<ul>
<li>程序层面解决不了</li>
<li>操作系统解决：非阻塞IO、IO多路复用</li>
</ul>
</li>
</ul>
<p>下面用Python高级异步线程池ThreadPoolExecutor来改造代码。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading
<span class="token keyword">import</span> time
<span class="token keyword">import</span> socket
html <span class="token operator">=</span> <span class="token triple-quoted-string string">"""\
&lt;!DOCTYPE html>
&lt;html lang="en">
&lt;head>
   &lt;meta charset="UTF-8">
   &lt;title>magedu&lt;/title>
&lt;/head>
&lt;body>
   &lt;h1>马哥教育www.magedu.com -- Multithread Pool&lt;/h1>
&lt;/body>
&lt;/html>\
"""</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>
response <span class="token operator">=</span> <span class="token triple-quoted-string string">"""\
HTTP/1.1 200 OK
Date: Mon, 24 Oct 2022 20:04:23 GMT
Content-Type: text/html
Content-Length: &#123;&#125;
Connection: keep-alive
Server: wayne.magedu.com
"""</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">'\r\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> html
<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor
count <span class="token operator">=</span> <span class="token number">10</span>
executor <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span>count<span class="token punctuation">)</span>
<span class="token comment"># executor = ThreadPoolExecutor(max_workers=count)</span>
<span class="token keyword">def</span> <span class="token function">accept</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># i = 1</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        conn<span class="token punctuation">,</span> raddr <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># threading.Thread(target=recv, name="recv-&#123;&#125;".format(i), args=</span>
<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> raddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># i += 1</span>
        executor<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>recv<span class="token punctuation">,</span> conn<span class="token punctuation">,</span> raddr<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">recv</span><span class="token punctuation">(</span>conn<span class="token punctuation">:</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">,</span> raddr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>raddr<span class="token punctuation">,</span> <span class="token string">'bye~~~~'</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token comment"># print(data)</span>
        conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>response<span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">'~~~~~~~~~~~~~'</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    server <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>
    laddr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span>
    server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>laddr<span class="token punctuation">)</span>
    server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
    <span class="token comment"># threading.Thread(target=accept, name="accept", args=(server,), </span>
daemon<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    executor<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>accept<span class="token punctuation">,</span> server<span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>active_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
















]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang协程</title>
    <url>/2023/05/15/Golang%E5%8D%8F%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><p>协程是一种比线程更加轻量级的一种函数，正如一个进程可以拥有多个线程一样，一个线程可以拥有多个协程。协程不是被操作系统内核管理的，而是完全由程序所控制的，即在用户态执行，这样的好处是，性能有大幅度的提升，因为不会像线程切换那样消耗资源。</p>
<blockquote>
<p>协程不是进程也不是线程，而是一个特殊的函数。这个函数可以在某个地方被“挂起”，并且可以重新再挂起处继续运行</p>
</blockquote>
<p>一个进程可以有多个线程，一个线程也可以有多个协程运行。在一个线程内可以有多个这样的特殊函数在运行，但是必须明确一点：一个线程中的多个协程的运行是串行的。如果是多核CPU，那多个进程或一个进程内的多个线程是可以并行运行的。但是在一个线程内的多个协程之间运行绝对是串行的，无论CPU有多少核。<strong>当一个协程被运行时，其他协程必须被挂起</strong></p>
<h5 id="进程、线程、协程对比"><a href="#进程、线程、协程对比" class="headerlink" title="进程、线程、协程对比"></a>进程、线程、协程对比</h5><ul>
<li>协程既不是进程也不是线程，协程仅是一个特殊的函数。协程、进程和线程不是一个维度的。</li>
<li>一个进程可以包含多个线程，一个线程可以包含多个协程。</li>
<li>虽然一个线程内的多个协程可以切换，但是这多个协程是串行执行的，某个时刻只能有一个线程在运行，没法利用CPU的多核能力。</li>
<li>协程与进程一样，也存在上下文切换问题</li>
<li>进程的切换者是操作系统，切换时机是根据操作系统自己的切换策略决定的，用户是无感的，进程的切换内容包括页全局目录、内核栈与硬件上下文，切换内容被保存在内存中，进程切换过程采用的是“从用户态到内核态，再到用户态”，切换效率低。</li>
<li>线程的切换者是操作系统，切换时间是根据操作系统自己的切换策略决定的，用户是无感的。线程的切换内容包括内核栈和硬件上下文。线程切换内容被保存在内核栈中。线程切换采用的是“从用户态到内核态再到用户态”，切换效率中等</li>
<li>协程的切换者是用户，切换时间是用户自己的程序决定的。协程的切换内容是硬件上下文，切换内存被保存在用户自己的变量（用户栈或堆）中。协程的切换过程只有用户态（即没有陷入内核态），因此切换效率高。</li>
</ul>
<blockquote>
<h3 id="协程Coroutine本质"><a href="#协程Coroutine本质" class="headerlink" title="协程Coroutine本质"></a>协程Coroutine本质</h3></blockquote>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    c <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
c <span class="token operator">+=</span> <span class="token number">1</span>
count<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"@@@"</span><span class="token punctuation">)</span>
运行结果
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">4</span>
<span class="token number">5</span>
@@@<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上例中，代码在同一个线程中运行，第7行是函数调用，必须等其调用结束后返回了，才能执行第8行代码，否则要一直等count函数执行。</p>
<p>在count函数中增加一个yield语句</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    c <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token keyword">yield</span> c
c <span class="token operator">+=</span> <span class="token number">1</span>
count<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"@@@"</span><span class="token punctuation">)</span>
运行结果
@@@<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>发现count()没有了输出，能打印@@@，说明count()确实执行过了。这是因为在Python中含有yield关键字的函数是一种特殊函数，称为生成器函数。count()调用返回的将不再是执行到函数return的结果，而是返回一个生成器对象即迭代器对象。</p>
<p>生成器对象</p>
<ul>
<li>就是迭代器对象，不过是特殊语法构造出的迭代器对象</li>
<li>也可以使用next函数驱动它执行，但执行到yield就暂停函数执行</li>
<li>可以使用for循环迭代它，相当于连续的next，直到不可迭代为止</li>
<li>只能单向向后迭代，不可以重头开始</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    c <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
        <span class="token keyword">yield</span> c
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"###"</span><span class="token punctuation">)</span>
        c <span class="token operator">+=</span> <span class="token number">1</span>
t <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 迭代器对象</span>
<span class="token builtin">next</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"@@@"</span><span class="token punctuation">)</span>
输出结果
<span class="token number">1</span>
@@@<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>执行第10行输出结果为1，说明函数在第5行处暂停执行了（实际上count函数没有执行完），且能继续向下执行到11行，打印了3个@。</p>
<p>如果有2个生成器函数，试着分析一下，代码如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> string
<span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    c <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
        <span class="token keyword">yield</span> c
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"###"</span><span class="token punctuation">)</span>
        c <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token keyword">def</span> <span class="token function">char</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    s <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_lowercase
    <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
        <span class="token keyword">yield</span> c
t1 <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 迭代器对象</span>
t2 <span class="token operator">=</span> char<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 迭代器对象</span>
<span class="token builtin">next</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span>
<span class="token builtin">next</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span>
<span class="token builtin">next</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span>
<span class="token builtin">next</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"@@@"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看出代码在yield出暂停，通过next来驱动各个函数执行，可以由程序员在合适的地方通过yield来暂停一个函数执行，让另外一个函数执行。</p>
<p>问题：</p>
<p>1. 请问目前代码中有几个线程？</p>
<p>2. 有没有实现和线程切换导致函数切换执行的效果？</p>
<p>暂停是一种非常重要的能力，以前函数正常要执行到return后，现在可以由开发者控制暂停执行的时机。而线程时间片用完导致的函数切换对开发人员来说是不可控的，而且线程控制能力是内核的功能，是在内核态完成的，而上例（协程）的控制是在用户态完成的。</p>
<p>如何才能让上例中所有任务反复交替执行呢？</p>
<p>1. 构建一个循环</p>
<p>2. 构建一个任务列表，循环执行其中的任务们</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> string
<span class="token keyword">import</span> time
<span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    c <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
        <span class="token keyword">yield</span> c
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"###"</span><span class="token punctuation">)</span>
        c <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token keyword">def</span> <span class="token function">char</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    s <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_lowercase
    <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
        <span class="token keyword">yield</span> c
t1 <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 迭代器对象</span>
t2 <span class="token operator">=</span> char<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 迭代器对象</span>
tasks <span class="token operator">=</span> <span class="token punctuation">[</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">]</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    pops <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># 待移除的已经完成的任务</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> task <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">next</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> <span class="token comment"># 如果迭代到头了，返回给定的缺省值</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"task &#123;&#125; finished."</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span>
            pops<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment"># 记住索引</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span>pops<span class="token punctuation">)</span><span class="token punctuation">:</span>
        tasks<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">,</span> tasks<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 如果任务列表为0，就等待</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"@@@"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>可以通过上面的代码看到2个任务交替进行，而这个函数的交替，完全是靠程序员的代码实现的，而不是靠多线程的时间片用完操作系统强行切换，而且这种切换是在同一个线程中完成的。</p>
<p>最重要的是，协程的切换是在用户态完成，而不是像线程那样在内核态完成。所以，Coroutine是可以在用户态通过控制在适当的时机让出执行权的多任务切换技术。</p>
<p>上例中，交替执行任务是可以由程序员在一个线程内完成，这个任务如果再被按照Python语法封装后就是Python的协程。核心点是，在适当的时候要暂停一个正在运行的任务，让出来去执行另外一个任务。</p>
<p>注意：只要是代码就要在线程中执行，协程也不例外。</p>
<p>问题：有了协程，还会不会出现线程的切换？</p>
<p>协程弊端</p>
<ul>
<li>一旦一个协程阻塞，阻塞了什么？阻塞当前所在线程？那么该线程代码被阻塞不能向下继续执行了</li>
<li>协程必须主动让出，才能轮到该线程中另外一个协程运行</li>
</ul>
<p>能否让协程自由的在不同线程中移动，这样就不会因为协程阻塞了某一个线程而导致该线程中其他协程得不到执行？</p>
<p>Go语言对Coroutine做了非常多的优化，提出了Goroutine。</p>
<h3 id="GMP模型"><a href="#GMP模型" class="headerlink" title="GMP模型"></a>GMP模型</h3><p>Robert Griesemer、Rob Pike、Ken Thompson三位Go语言创始人，对新语言商在讨论时，就决定了要让Go语言成为面向未来的语言。当时多核CPU已经开始普及，但是众多“古老”编程语言却不能很好的适应新的硬件进步，Go语言诞生之初就为多核CPU并行而设计。</p>
<p>GO语言协程中，非常重要的就是<strong>协程调度器scheduler</strong>和<strong>网络轮训器netpoller</strong></p>
<p>Go协程调度中，有三个重要角色：</p>
<ul>
<li>M：Machine Thread，对系统线程抽象、封装。所有代码最终都要在系统线程上运行，协程最终也是代码，不例外</li>
<li>G：Goroutine，Go协程。存储了协程的执行栈信息、状态和任务函数等。初始栈大小约为2~4k，理论上开启百万个Goroutine不是问题</li>
<li>P：Go1.1版本引入，Processor，虚拟处理器<ul>
<li>可以通过环境变量<code>GOMAXPROCS</code>或<code>runtime.GOMAXPROCS()</code>设置，默认为CPU核心数</li>
<li>P的数量决定着最大可并行的G的数量</li>
<li>P有自己的队列（长度256），里面放着待执行的G</li>
<li>M和P需要绑定在一起，这样P队列中的G才能真正在线程上执行</li>
</ul>
</li>
</ul>
<p><img src="/images/k0DZ3gJOew5snaPaeFgWCU-I5o67oWWlNhFROQZsvk0.png" alt="image"></p>
<ol>
<li>使用go func 创建一个Goroutine g1</li>
<li>当前p为p1，将g1加入当前p的本地队列LRQ（local Run Queue）。如果LRQ满了，就加入到GRQ（global run queue）</li>
<li>p1和m1绑定，m1先尝试从p1的LRQ中请求G。如果没有，就从GRQ中请求G，如果还没有就随机从别的P的LRQ中偷（work stealing）一部分G到本地的LRQ中</li>
<li>假设m1最终拿到了g1</li>
<li>执行，让g1的代码在m1线程上运行<br>5.1、g1正常执行完了（函数调用完成了），g1和m1解绑，执行第三部的获取下一个可执行的g<br>5.2、g1中代码主动让出控制权，g1和m1解绑，将g1加入到GRQ中，执行第三步的获取下一个可执行的g<br>5.3、g1中进行channel、互斥锁等操作进入阻塞态，g1和m1解绑，执行第三部的获取下一个可执行的g，如果阻塞态的g1被其他协程g唤醒后，就尝试加入到唤醒者的LRQ中，如果LRQ满了，就连同g和LRQ中一半转移到GRQ中<br>5.4、系统调用</li>
</ol>
<ul>
<li>同步系统调用时，执行如下：</li>
</ul>
<p>如果遇到了同步阻塞系统调用，g1阻塞，m1也被阻塞了，m1和p1解绑。</p>
<p>从休眠线程队列中获取一个空闲线程，和p1绑定，并从p1队列中获取下一个可执行的g来执行；如果休眠队列中无空闲线程，就创建一个线程提供给p1。</p>
<p>如果m1阻塞结束，需要和一个空闲的p绑定，优先和原来的p1绑定。如果没有空闲的p，g1会放到GRQ中，m1加入到休眠线程队列中。</p>
<ul>
<li>异步网络io调用时如下：</li>
</ul>
<p><img src="/images/FNuqQSg-6IBBsbPSr1xWr2TRRRITNmSaXPfRqfggvuI.png" alt="image"></p>
<p>网络IO代码会被Go在底层变成非阻塞IO，这样就可以使用IO多路复用了。</p>
<p>m1执行g1，执行过程中发生了非阻塞IO调用（读&#x2F;写）时，g1和m1解绑，g1会被网络轮询器Netpoller接手。m1再从p1的LRQ中获取下一个Goroutine g2执行。注意，m1和p1不解绑。</p>
<p>g1等待的IO就绪后，g1从网络轮询器移回P的LRQ（本地运行队列）或全局GRQ中，重新进入可执行状态。</p>
<p>就大致相当于网络轮询器Netpoller内部就是使用了IO多路复用和非阻塞IO，类似我们课件代码中的</p>
<p>select的循环。GO对不同操作系统MAC（kqueue）、Linux（epoll）、Windows（iocp）提供了支持。</p>
<p>问题：如果GOMAXPROCS为1，说明什么？</p>
<h3 id="GO-TCP编程"><a href="#GO-TCP编程" class="headerlink" title="GO TCP编程"></a>GO TCP编程</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"log"</span>
 <span class="token string">"net"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 laddr<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ResolveTCPAddr</span><span class="token punctuation">(</span><span class="token string">"tcp4"</span><span class="token punctuation">,</span> <span class="token string">"0.0.0.0:9999"</span><span class="token punctuation">)</span> <span class="token comment">// 解析地址</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment">// Panicln会打印异常，程序退出</span>
 <span class="token punctuation">&#125;</span>
 server<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ListenTCP</span><span class="token punctuation">(</span><span class="token string">"tcp4"</span><span class="token punctuation">,</span> laddr<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">defer</span> server<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 保证一定关闭</span>
 conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 接收连接，分配socket</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 保证一定关闭</span>
 buffer <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span> <span class="token comment">// 设置缓冲区</span>
 n<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span>  <span class="token comment">// 成功返回接收了多少字节</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 data <span class="token operator">:=</span> buffer<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span>
 conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">// 原样写回客户端</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Goroutine"><a href="#Goroutine" class="headerlink" title="Goroutine"></a>Goroutine</h3><h5 id="协程创建"><a href="#协程创建" class="headerlink" title="协程创建"></a>协程创建</h5><p>使用go关键字就可以把一个函数定义为一个协程</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">var</span> c <span class="token builtin">int</span>
 <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"1 return %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>              <span class="token comment">// 打印的c是什么？</span>
 <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"2 return %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 打印的c是什么？</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"add called: x=%d, y=%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
 c <span class="token operator">=</span> x <span class="token operator">+</span> y
 <span class="token keyword">return</span> c
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span>
 <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main end"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
执行结果如下
main start
add called<span class="token punctuation">:</span> x<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">5</span>
<span class="token number">2</span> <span class="token keyword">return</span> <span class="token number">9</span>
<span class="token number">1</span> <span class="token keyword">return</span> <span class="token number">0</span>
main end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将 add(4, 5) 改为 go add(4, 5) ，运行结果会怎么样呢？</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>
 <span class="token string">"runtime"</span>
 <span class="token string">"time"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">var</span> c <span class="token builtin">int</span>
 <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"1 return %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>              <span class="token comment">// 打印的c是什么？</span>
 <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"2 return %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 打印的c是什么？</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"add called: x=%d, y=%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
 c <span class="token operator">=</span> x <span class="token operator">+</span> y
 <span class="token keyword">return</span> c
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span>
 <span class="token keyword">go</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 协程</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token comment">// time.Sleep(2 * time.Second) // 放开这一句，看看效果</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main end"</span><span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果没有 time.Sleep(2) ，结果如下</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">1</span>
main start
<span class="token number">2</span>
main end
<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>放开了 time.Sleep(2) ，结果如下</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">1</span>
main start
<span class="token number">2</span>
add called<span class="token punctuation">:</span> x<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">5</span>
<span class="token number">2</span> <span class="token keyword">return</span> <span class="token number">9</span>
<span class="token number">1</span> <span class="token keyword">return</span> <span class="token number">0</span>
main end
<span class="token number">1</span> 注意这里是<span class="token number">1</span>了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>因为会启动协程来运行add，那么go add(4, 5)这一句没有必要等到函数返回才结束，所以程序执行下一行打印Main Exit。这时main函数无事可做，Go程序启动时也创建了一个协程，main函数运行其中，可以称为main goroutine（主协程）。但是主协程一旦执行结束，则进程结束，根本不会等待未执行完的其它协程。</p>
<p>那么，除了像 time.Sleep(2) 这样一直等，如何才能让主线程优雅等待协程执行结束呢？等待组</p>
<h3 id="等待组"><a href="#等待组" class="headerlink" title="等待组"></a>等待组</h3><p>使用参考 <a href="https://pkg.go.dev/sync#WaitGroup">https://pkg.go.dev/sync#WaitGroup</a></p>
<p>使用等待组修改上例</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>
 <span class="token string">"runtime"</span>
 <span class="token string">"sync"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// add执行完后计数器减1</span>
 <span class="token keyword">var</span> c <span class="token builtin">int</span>
 <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"1 return %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>              <span class="token comment">// 打印的c是什么？</span>
 <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"2 return %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 打印的c是什么？</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"add called: x=%d, y=%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
 c <span class="token operator">=</span> x <span class="token operator">+</span> y
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"add called: c=%d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>
 <span class="token keyword">return</span> c
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup <span class="token comment">// 定义等待组</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span>
 wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>         <span class="token comment">// 计数加1</span>
 <span class="token keyword">go</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>wg<span class="token punctuation">)</span> <span class="token comment">// 协程</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token comment">// time.Sleep(2 * time.Second) // 这一句不需要了</span>
 wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 阻塞到wg的计数为0</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main end"</span><span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="父子协程"><a href="#父子协程" class="headerlink" title="父子协程"></a>父子协程</h3><p>一个协程A中创建了另外一个协程B，A称作父协程，B称为子协程。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>
 <span class="token string">"sync"</span>
 <span class="token string">"time"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup <span class="token comment">// 定义等待组</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span>
 count <span class="token operator">:=</span> <span class="token number">6</span>
 wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
 <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"父协程开始，准备启动子协程"</span><span class="token punctuation">)</span>
 <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 注意wg的作用域</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"父协程结束了~~~~"</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>id <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"子协程 %d 运行中\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>
 time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"子协程 %d 结束\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 阻塞到wg的计数为0</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main end"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 注：上例协程最好协程独立的函数，而不是这样嵌套，只是为了演示。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>父协程结束执行，子协程不会有任何影响。当然子协程结束执行，也不会对父协程有什么影响。父子协程没有什么特别的依赖关系，各自独立运行。</p>
<p>只有主协程特殊，它结束程序结束。</p>
<h3 id="实战：实现WEB服务器——Goroutine版"><a href="#实战：实现WEB服务器——Goroutine版" class="headerlink" title="实战：实现WEB服务器——Goroutine版"></a>实战：实现WEB服务器——Goroutine版</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>
 <span class="token string">"log"</span>
 <span class="token string">"net"</span>
<span class="token punctuation">)</span>
<span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">`&lt;!DOCTYPE html>
&lt;html lang="en">
&lt;head>
    &lt;meta charset="UTF-8">
    &lt;title>magedu&lt;/title>
&lt;/head>
&lt;body>
    &lt;h1>马哥教育www.magedu.com -- Goroutine&lt;/h1>
&lt;/body>
&lt;/html>`</span>
<span class="token keyword">var</span> head <span class="token operator">=</span> <span class="token string">`HTTP/1.1 200 OK
Date: Mon, 24 Oct 2022 20:04:23 GMT
Content-Type: text/html
Content-Length: %d
Connection: keep-alive
Server: wayne.magedu.com
%s`</span>
<span class="token keyword">var</span> response <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 laddr<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ResolveTCPAddr</span><span class="token punctuation">(</span><span class="token string">"tcp4"</span><span class="token punctuation">,</span> <span class="token string">"0.0.0.0:9999"</span><span class="token punctuation">)</span> <span class="token comment">// 解析地址</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment">// Panicln会打印异常，程序退出</span>
 <span class="token punctuation">&#125;</span>
 server<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ListenTCP</span><span class="token punctuation">(</span><span class="token string">"tcp4"</span><span class="token punctuation">,</span> laddr<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">defer</span> server<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 保证一定关闭</span>
 <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
 conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 接收连接，分配socket</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 保证一定关闭</span>
 buffer <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span> <span class="token comment">// 设置缓冲区</span>
 n<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span>  <span class="token comment">// 成功返回接收了多少字节</span>
 <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"客户端%s主动断开"</span><span class="token punctuation">,</span> conn<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token keyword">return</span>
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
 log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token keyword">return</span>
 <span class="token punctuation">&#125;</span>
 conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 大家可以自行抽取成协程函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>上述代码是goroutine per connection模式，看似使用的同步方式开发，这大大减少了开发人员的心智负担。</p>
<h3 id="二、用goroutine-和通道实现并发"><a href="#二、用goroutine-和通道实现并发" class="headerlink" title="二、用goroutine 和通道实现并发"></a>二、用goroutine 和通道实现并发</h3><h5 id="1、goroutine"><a href="#1、goroutine" class="headerlink" title="1、goroutine"></a>1、goroutine</h5><p>go只需要使用go的关键字来开启goroutine。</p>
<p>开启一个goroutine的形式如下</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在函数foo(a,b,c)之前加上go关键字，就开启了一个新的goroutine。函数名可以是包含func关键字的匿名函数。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 创建一个匿名函数并开启goroutine</span>
<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>parme1<span class="token punctuation">,</span>parm2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span>val1<span class="token punctuation">,</span>val2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Echo</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">go</span> <span class="token function">Echo</span><span class="token punctuation">(</span><span class="token string">"go"</span><span class="token punctuation">)</span>
    <span class="token function">Echo</span><span class="token punctuation">(</span><span class="token string">"web program"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>执行以上代码后会看到，输出的”go”和”web progarm”没有固定先后顺序，因为它们是两个goroutine在并发执行</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span>
web program
web program
<span class="token keyword">go</span>
web program<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面示例可以看到，利用go关键字很方便的实现并发编程。多个goroutine运行在同一个进程中，共享内存数据。</p>
<h5 id="2、gorouine的调度"><a href="#2、gorouine的调度" class="headerlink" title="2、gorouine的调度"></a>2、gorouine的调度</h5><p>goroutine的调度方式是协同的。在协同式调度中没有“时间片”的概念。为了并行执行goroutine，调度器会在一下几个时刻对其进行切换：</p>
<ul>
<li>在通道发送或接受数据且造成阻塞时</li>
<li>在一个新的goroutine被创建时。</li>
<li>在可以造成系统调用被阻塞时，如进行文件操作时。</li>
</ul>
<p>goroutine在多核cpu环境下是并行的。如果代码在多个goroutine中执行，则会实现代码的并行。在被调用的函数返回时，这个goroutine也自动结束。需要注意：如果这个函数有返回值，会被丢弃。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">
<span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    c <span class="token operator">:=</span> a <span class="token operator">+</span> b
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">go</span> <span class="token function">Add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
















































]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue状态管理</title>
    <url>/2023/07/13/Vue%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="Vue状态管理"><a href="#Vue状态管理" class="headerlink" title="Vue状态管理"></a>Vue状态管理</h1><p>前端每个页面访问后端数据的时候都需要token，那么所有组件都需要依赖token这个数据，所以就需要将token找个一个共享的存储，让其他组件都能访问到它，和服务端的session功能类似，如何实现？</p>
<h3 id="一、共享内存"><a href="#一、共享内存" class="headerlink" title="一、共享内存"></a>一、共享内存</h3><p>第一种方式最直接：共享内存，直接开辟一个变量，全局都可以访问到了，类似于后端的全局变量</p>
<h5 id="1、全局注入"><a href="#1、全局注入" class="headerlink" title="1、全局注入"></a>1、全局注入</h5><p>使用到 provide() 函数注入到根实例, 从而提供全局变量功能</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> RouterLink<span class="token punctuation">,</span> RouterView <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">"@/components/HelloWorld.vue"</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> provide <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>
<span class="token comment">// 如果的变量可以是响应式的</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">provide</span><span class="token punctuation">(</span><span class="token comment">/* 注入名 */</span> <span class="token string">"count"</span><span class="token punctuation">,</span> <span class="token comment">/* 值 */</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过inject获取父组件注入的变量</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> inject <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>

<span class="token comment">// 这里也可以获取默认值: inject(&lt;变量名称>, &lt;变量默认值>), 如果获取不到变量 就使用默认值</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">doClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>

<span class="token operator">&lt;</span>template<span class="token operator">></span>
  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"doClick"</span><span class="token operator">></span>You clicked me <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> times<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="2、组合式函数"><a href="#2、组合式函数" class="headerlink" title="2、组合式函数"></a>2、组合式函数</h5><p>声明一个响应式模块，导出后，提供给所有组件使用</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// store/global.js</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其他组件通过js的导入语法直接使用，妥妥的全局变量</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> store <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@/stores/global"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">doClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  store<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>

<span class="token operator">&lt;</span>template<span class="token operator">></span>
  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"doClick"</span><span class="token operator">></span>You clicked me <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> store<span class="token punctuation">.</span>count <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> times<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>总结：</p>
<p>这种其实就是一个简单粗暴的 通过共享内存进行通信的方式, 好在其简单易懂，也许你会喜欢, 但是也有它的缺陷</p>
<p>因为这种方式使用的是内存, 所以页面关闭或者刷新就都没有, 想要就状态持久化 还需要存储</p>
<h3 id="二、浏览器本地存储"><a href="#二、浏览器本地存储" class="headerlink" title="二、浏览器本地存储"></a>二、浏览器本地存储</h3><p>这种方式就需要使用到浏览器的存储功能了, 它可供我们存储客户端临时信息 简称 Web Storage</p>
<p><img src="/images/2M0BPYlJWs_hEMm7Sa50pKw2oDeD_3f8G1HVWIiHMOA.png" alt="image"></p>
<ul>
<li>cookie</li>
<li>sessionStorage</li>
<li>localStorage</li>
</ul>
<h5 id="1、cookie"><a href="#1、cookie" class="headerlink" title="1、cookie"></a>1、cookie</h5><p>cookie是有可以设置过期时间的，同一个域下的页面都可以访问</p>
<p>cookie在没有设置过期时间时，系统默认浏览器关闭时失效，只有设置了没到期的保存日期时，浏览器才会把cookie作为文件保存在本地上。当expire到期时，cookie不会自动删除，仅在下次启动浏览器或刷新浏览器时，浏览器会检测cookie过期时间，如已过期浏览器则会删除过期cookie</p>
<p>注意：</p>
<ul>
<li>数据存放大小：4k，因为每次http请求都会携带cookie</li>
<li>浏览器关闭时，cookie会失效</li>
<li>注意cookie可以支持httpOnly，这个时候前端js是修改不了的（也看不到）</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 读取cookie, 注意读取出来的cookie是个字符串</span>
document<span class="token punctuation">.</span>cookie
<span class="token string">'language=zh; Sub-System=develop; sidebarStatus=1; Current-Namespace=c16mhsddrei91m4ri0jg; Refresh-Token=paBuyTIfsX3BeKrXrCmD8khUla6x8y1g'</span>
<span class="token comment">// 需要自己处理</span>
document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'; '</span><span class="token punctuation">)</span>

<span class="token comment">// 直接赋值就添加了一个key-value</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">'cookieKey=cookieValue'</span>
<span class="token string">'language=zh; Sub-System=develop; sidebarStatus=1; Current-Namespace=c16mhsddrei91m4ri0jg; Refresh-Token=paBuyTIfsX3BeKrXrCmD8khUla6x8y1g; cookieKey=cookieValue'</span>

<span class="token comment">// 当然cookie还有很多选项可以设置, 通过;隔开比如</span>
document<span class="token punctuation">.</span>cookie<span class="token operator">=</span><span class="token string">"username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/"</span><span class="token punctuation">;</span>

<span class="token comment">// 修改cookie和设置cookie一样, 保证key相同就可以</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">'cookieKey=cookieValue2'</span>
document<span class="token punctuation">.</span>cookie
<span class="token string">'language=zh; Sub-System=develop; sidebarStatus=1; Current-Namespace=c16mhsddrei91m4ri0jg; Refresh-Token=paBuyTIfsX3BeKrXrCmD8khUla6x8y1g; cookieKey=cookieValue2'</span>

<span class="token comment">// 删除cookie时，把expires 设置到过期的时间即可, 比如设置个2019年的时间</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">cookieKey=;expires=Mon, 26 Aug 2019 12:00:00 UTC</span><span class="token template-punctuation string">`</span></span>
document<span class="token punctuation">.</span>cookie
<span class="token string">'language=zh; Sub-System=develop; sidebarStatus=1; Current-Namespace=c16mhsddrei91m4ri0jg; Refresh-Token=paBuyTIfsX3BeKrXrCmD8khUla6x8y1g'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="2、sessionStorage"><a href="#2、sessionStorage" class="headerlink" title="2、sessionStorage"></a>2、sessionStorage</h5><p>存储的数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁, 因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储</p>
<p>那么，到底什么是一个会话？多个标签页之间的数据是否会共享呢？</p>
<blockquote>
<p>我们可以验证下: 开启2个窗口, 直接通过浏览器修改sessionStorage 进行验证</p>
</blockquote>
<p>通过验证我们可以知道 一个标签页 就表示一个回话, 当标签页关闭, 回话就清除, 不通标签页之间不共享数据</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 通过setItem设置key-value</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'value1'</span><span class="token punctuation">)</span>
sessionStorage<span class="token punctuation">[</span><span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'value2'</span>
sessionStorage<span class="token punctuation">.</span>key2<span class="token operator">=</span> <span class="token string">'value2'</span>

<span class="token comment">// 查询sessionStorage对象</span>
sessionStorage
Storage <span class="token punctuation">&#123;</span><span class="token literal-property property">key2</span><span class="token operator">:</span> <span class="token string">'value2'</span><span class="token punctuation">,</span> <span class="token literal-property property">key1</span><span class="token operator">:</span> <span class="token string">'value1'</span><span class="token punctuation">,</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span>

<span class="token comment">// 通过getItem获取key的值</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span>
sessionStorage<span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">]</span>
sessionStorage<span class="token punctuation">.</span>key1

<span class="token comment">// 修改</span>
sessionStorage<span class="token punctuation">.</span>key1 <span class="token operator">=</span> <span class="token string">'value11'</span>
sessionStorage<span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'value11'</span>

<span class="token comment">// 删除key</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span>

<span class="token comment">// 清空storage</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="3、localStorage"><a href="#3、localStorage" class="headerlink" title="3、localStorage"></a>3、localStorage</h5><p>localStorage生命周期是永久, 除非主动删除数据，否则数据是永远不会过期的</p>
<p>相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口）</p>
<blockquote>
<p>我们可以验证下: 开启2个窗口, 直接通过浏览器修改localStorage 进行验证</p>
</blockquote>
<p>localStorage的操作方法和sessionStorage完全一样:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 通过setItem设置key-value</span>
localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'value1'</span><span class="token punctuation">)</span>
localStorage<span class="token punctuation">[</span><span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'value2'</span>
localStorage<span class="token punctuation">.</span>key2 <span class="token operator">=</span> <span class="token string">'value2'</span>

<span class="token comment">// 查询sessionStorage对象</span>
localStorage
Storage <span class="token punctuation">&#123;</span><span class="token literal-property property">key2</span><span class="token operator">:</span> <span class="token string">'value2'</span><span class="token punctuation">,</span> <span class="token literal-property property">key1</span><span class="token operator">:</span> <span class="token string">'value1'</span><span class="token punctuation">,</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span>

<span class="token comment">// 通过getItem获取key的值</span>
localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span>
localStorage<span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">]</span>
localStorage<span class="token punctuation">.</span>key1

<span class="token comment">// 修改</span>
localStorage<span class="token punctuation">.</span>key1 <span class="token operator">=</span> <span class="token string">'value11'</span>
localStorage<span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'value11'</span>

<span class="token comment">// 删除key</span>
localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span>

<span class="token comment">// 清空storage</span>
localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="三、Vueuse与本地存储"><a href="#三、Vueuse与本地存储" class="headerlink" title="三、Vueuse与本地存储"></a>三、Vueuse与本地存储</h3><p>作为vue3的标准库, vueuse提供了很多实用的工具来实现了状态管理, 其他就有保护浏览器存储的组合式API函数: <a href="https://gitee.com/link?target=https://vueuse.org/functions.html%23category=State">Vueuse State相关工具</a></p>
<p>在vueuse中有一个高频使用的函数: useStorage, 就默认就是使用的LocalStorage, 该函数已经讲LocalStroage包装成了响应式了, 因此你可以把他理解为一个带有持久化机制的响应式对象</p>
<p>下面是useStorage的基础用法:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useStorage <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@vueuse/core'</span>

<span class="token comment">// bind object</span>
<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">useStorage</span><span class="token punctuation">(</span><span class="token string">'my-store'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">hello</span><span class="token operator">:</span> <span class="token string">'hi'</span><span class="token punctuation">,</span> <span class="token literal-property property">greeting</span><span class="token operator">:</span> <span class="token string">'Hello'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// bind boolean</span>
<span class="token keyword">const</span> flag <span class="token operator">=</span> <span class="token function">useStorage</span><span class="token punctuation">(</span><span class="token string">'my-flag'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// returns Ref&lt;boolean></span>

<span class="token comment">// bind number</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">useStorage</span><span class="token punctuation">(</span><span class="token string">'my-count'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// returns Ref&lt;number></span>

<span class="token comment">// bind string with SessionStorage</span>
<span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">useStorage</span><span class="token punctuation">(</span><span class="token string">'my-id'</span><span class="token punctuation">,</span> <span class="token string">'some-string-id'</span><span class="token punctuation">,</span> sessionStorage<span class="token punctuation">)</span> <span class="token comment">// returns Ref&lt;string></span>

<span class="token comment">// delete data from storage</span>
state<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们集合前面共享内存的通信方式, 把他们改造成, 结合本地存储基础, 从而避免刷新页面是状态丢失:</p>
<ul>
<li>注入依赖</li>
<li>组合式函数</li>
</ul>
<h5 id="注入依赖持久化"><a href="#注入依赖持久化" class="headerlink" title="注入依赖持久化"></a>注入依赖持久化</h5><p>直接使用useStorage构造一个响应式持久化变量:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> RouterLink<span class="token punctuation">,</span> RouterView <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useStorage <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@vueuse/core'</span>
<span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">"@/components/HelloWorld.vue"</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> provide <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>
<span class="token comment">// 如果的变量可以是响应式的</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">useStorage</span><span class="token punctuation">(</span><span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">provide</span><span class="token punctuation">(</span><span class="token comment">/* 注入名 */</span> <span class="token string">"count"</span><span class="token punctuation">,</span> <span class="token comment">/* 值 */</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// 这里也可以获取默认值: inject(&lt;变量名称>, &lt;变量默认值>), 如果获取不到变量 就使用默认值</span>
<span class="token comment">// const count = inject("count");</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="全局变量持久化"><a href="#全局变量持久化" class="headerlink" title="全局变量持久化"></a>全局变量持久化</h5><p>声明一个响应式模块，导出后，提供给所有组件使用</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// stroes/app.js</span>
<span class="token comment">// 保存当前应用程序的状态</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useStorage <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@vueuse/core'</span>
<span class="token comment">// localStorage.setItem('my-store', '&#123;"hello": "nihao"&#125;')</span>
<span class="token comment">// 将用户的token等信息保存到浏览器的localstorage中</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">useStorage</span><span class="token punctuation">(</span>
    <span class="token string">'vblog'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">token</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">is_login</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    localStorage<span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">mergeDefaults</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// &lt;--</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样登录成功后就可以通过全局变量保存到localstorage中</p>
<p><img src="/images/7FhHj0RZ6jcFyOyTHOeZTff_NuBsATyuYl84sFsLDV0.png" alt="image"></p>
<p>某个组件需要使用</p>
<p><img src="/images/dn6pgAwskk3qACKChFVNC2og2QXBA4HgQwTYEt_SBmY.png" alt="image"></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>基于IOC解决对象依赖问题</title>
    <url>/2023/06/27/%E5%9F%BA%E4%BA%8EIOC%E8%A7%A3%E5%86%B3%E5%AF%B9%E8%B1%A1%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="基于IOC解决对象依赖问题"><a href="#基于IOC解决对象依赖问题" class="headerlink" title="基于IOC解决对象依赖问题"></a>基于IOC解决对象依赖问题</h1><p>ioc是一种软件设计原则，用来降低代码之间耦合度。如果没有ioc机制，多个模块调用会显得异常繁琐，而ioc是将控制权从程序代码中抽离，交给外部的容器或框架，从而实现依赖关系的动态置顶，增加程序的灵活性和可维护性，下面我的例子只是一个简单的以容器为基础实现的ioc注册。</p>
<p>store.go：</p>
<ul>
<li>IocContainer：负责注册ioc对象、初始化ioc对象操作</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">ackage ioc

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"gitee.com/dujie5416/vblog/apps/users/config"</span>
    <span class="token string">"github.com/gin-gonic/gin"</span>
<span class="token punctuation">)</span>

<span class="token comment">//</span>
<span class="token comment">//  IocContainer</span>
<span class="token comment">//  @Description: 定义一个对象注册表</span>
<span class="token comment">//</span>
<span class="token keyword">type</span> IocContainer <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 采用map来保证对象的注册关系</span>
    store <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>IocObject
<span class="token punctuation">&#125;</span>

<span class="token comment">/*
 * Init
 * @Description: 负责初始化所有的对象，因为map是无序的，这里如果要控制初始化的顺序，可以替换成list
 * @receiver c
 * @return error
 */</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>IocContainer<span class="token punctuation">)</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>store<span class="token punctuation">)</span>
    config<span class="token punctuation">.</span><span class="token function">LoadMysqlConfigFromToml</span><span class="token punctuation">(</span><span class="token string">"../etc/mysql.toml"</span><span class="token punctuation">)</span>
    <span class="token comment">// 遍历所有单例对象，并对每个单例对象进行初始化操作</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> obj <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>store <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> err <span class="token operator">:=</span> obj<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> err
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*
 * Registry
 * @Description: 将对象注册到ioc中
 * @receiver c
 * @param obj
 */</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>IocContainer<span class="token punctuation">)</span> <span class="token function">Registry</span><span class="token punctuation">(</span>obj IocObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    c<span class="token punctuation">.</span>store<span class="token punctuation">[</span>obj<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> obj
<span class="token punctuation">&#125;</span>

<span class="token comment">/*
 * Get
 * @Description: 获取ioc对象的名字
 * @receiver c
 * @param name
 * @return any
 */</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>IocContainer<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> any <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> c<span class="token punctuation">.</span>store<span class="token punctuation">[</span>name<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//</span>
<span class="token comment">//  GinApiHandlers</span>
<span class="token comment">//  @Description: gin api的接口，用于注册路由</span>
<span class="token comment">//</span>
<span class="token keyword">type</span> GinApiHandlers <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
    <span class="token function">RegisterRouter</span><span class="token punctuation">(</span>r gin<span class="token punctuation">.</span>IRouter<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*
 * RouteRegistry
 * @Description: 将每个api handlers 的路由注册到root router中
 * @receiver c
 * @param router
 */</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>IocContainer<span class="token punctuation">)</span> <span class="token function">RouteRegistry</span><span class="token punctuation">(</span>router gin<span class="token punctuation">.</span>IRouter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>store<span class="token punctuation">)</span>
    <span class="token comment">// 找到被扩管的APIHandler</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> obj <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>store <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> api<span class="token punctuation">,</span> ok <span class="token operator">:=</span> obj<span class="token punctuation">.</span><span class="token punctuation">(</span>GinApiHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
            api<span class="token punctuation">.</span><span class="token function">RegisterRouter</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>interface.go：定义Init()和Name()函数，注册进ioc对象必须实现该两种方法</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> ioc

<span class="token comment">//</span>
<span class="token comment">//  IocObject</span>
<span class="token comment">//  @Description: 定义注册进来的对象的约束条件</span>
<span class="token comment">//</span>
<span class="token keyword">type</span> IocObject <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 对象的初始化</span>
    <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
    <span class="token comment">// 对象的名称</span>
    <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>controller.go：专门用于注入controller对象</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> ioc

<span class="token comment">/*
 * Controller
 * @Description: 专门用于注册controller对象
 * @return *IocContainer
 */</span>
<span class="token keyword">func</span> <span class="token function">Controller</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>IocContainer <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> controllerContainer
<span class="token punctuation">&#125;</span>

<span class="token comment">//ioc注册表对象，全局只有一个</span>
<span class="token keyword">var</span> controllerContainer <span class="token operator">=</span> <span class="token operator">&amp;</span>IocContainer<span class="token punctuation">&#123;</span>
    store<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>IocObject<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>api.go：专门注册api对象</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> ioc

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token comment">/*
 * ApiHandler
 * @Description: 专门用于注册api handler对象
 * @return *IocContainer
 */</span>
<span class="token keyword">func</span> <span class="token function">ApiHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>IocContainer <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> apiHandlerContainer
<span class="token punctuation">&#125;</span>

<span class="token comment">//ioc注册表对象，全局只有一个</span>
<span class="token keyword">var</span> apiHandlerContainer <span class="token operator">=</span> <span class="token operator">&amp;</span>IocContainer<span class="token punctuation">&#123;</span>
    store<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>IocObject<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"这是apihand"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>将对象注入到ioc：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> impl

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"gitee.com/dujie5416/vblog/apps/blog"</span>
    <span class="token string">"gitee.com/dujie5416/vblog/apps/users/config"</span>
    <span class="token string">"gitee.com/dujie5416/vblog/ioc"</span>
    <span class="token string">"gorm.io/gorm"</span>
<span class="token punctuation">)</span>

<span class="token comment">/*
 * init
 * @Description: 将blog impl 对象注册到ioc管理
 */</span>
<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ioc<span class="token punctuation">.</span><span class="token function">Controller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Registry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>BlogImpl<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//</span>
<span class="token comment">//  BlogImpl</span>
<span class="token comment">//  @Description: 博客实现结构体</span>
<span class="token comment">//</span>
<span class="token keyword">type</span> BlogImpl <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB
<span class="token punctuation">&#125;</span>

<span class="token comment">/*
 * Init
 * @Description: 实现ioc obj 接口
 * @receiver b
 * @return error
 */</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>BlogImpl<span class="token punctuation">)</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
    b<span class="token punctuation">.</span>db <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Mysql<span class="token punctuation">.</span><span class="token function">GetMysqlConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>BlogImpl<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> blog<span class="token punctuation">.</span>AppName
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>根据name获取ioc对象的值：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> api

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"gitee.com/dujie5416/vblog/apps/blog"</span>
    <span class="token string">"gitee.com/dujie5416/vblog/ioc"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ioc<span class="token punctuation">.</span><span class="token function">ApiHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Registry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>BlogApiHandler<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> BlogApiHandler <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    svc blog<span class="token punctuation">.</span>Service
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>BlogApiHandler<span class="token punctuation">)</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
    b<span class="token punctuation">.</span>svc <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">Controller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>blog<span class="token punctuation">.</span>AppName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>blog<span class="token punctuation">.</span>Service<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>BlogApiHandler<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> blog<span class="token punctuation">.</span>AppName
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3左侧菜单隐藏某选项</title>
    <url>/2023/07/29/%E6%A0%B9%E6%8D%AErouter%E6%98%BE%E7%A4%BA%E5%B7%A6%E4%BE%A7%E8%8F%9C%E5%8D%95%E6%A0%8F%E9%9A%90%E8%97%8F%E6%9F%90%E4%B8%AA%E8%8F%9C%E5%8D%95%E9%80%89%E9%A1%B9/</url>
    <content><![CDATA[<h1 id="根据router显示左侧菜单栏隐藏某个菜单选项"><a href="#根据router显示左侧菜单栏隐藏某个菜单选项" class="headerlink" title="根据router显示左侧菜单栏隐藏某个菜单选项"></a>根据router显示左侧菜单栏隐藏某个菜单选项</h1><p>在写k8s管理平台的时候遇到一个问题，我的左侧菜单栏是通过route路径获取的</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aside-menu<span class="token punctuation">"</span></span>
         <span class="token attr-name">router</span>
         <span class="token attr-name">:default-active</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$route.path<span class="token punctuation">"</span></span>
         <span class="token attr-name">:collapse</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isCollapse<span class="token punctuation">"</span></span>
         <span class="token attr-name">background-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#131b27<span class="token punctuation">"</span></span>
         <span class="token attr-name">text-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#bfcbd9<span class="token punctuation">"</span></span>
         <span class="token attr-name">active-text-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#20a0ff<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面是我router目录下index.js的路由</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span> LoginView<span class="token punctuation">,</span>
      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">'/Summary'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/Summary"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"odometer"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span>HomeView<span class="token punctuation">,</span>
      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"odometer"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/Summary"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'概要'</span><span class="token punctuation">,</span>
          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"概要"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/Summary/SummaryView.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/workflow'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span>HomeView<span class="token punctuation">,</span>
      <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"VideoPlay"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/workflow"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"工作流"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"VideoPlay"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"工作流"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/workflow/workflowView.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/cluster"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"集群"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span>HomeView<span class="token punctuation">,</span>
      <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"home-filled"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"集群"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/cluster/node"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Node"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-s-data"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Node"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/cluster/nodeView.vue"</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/cluster/namespace"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Namespace"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-document-add"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"创建namespace"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/cluster/namespaceView.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/workload"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"工作负载"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span>HomeView<span class="token punctuation">,</span>
      <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"menu"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"工作负载"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/workload/deployment"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Deployment"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-s-data"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Deployment"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/workload/deploymentView.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

        <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"pod/:type/:deploymentName/:namespace"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Pod"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-document-add"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Pod"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">hidden</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/workload/podView.vue"</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/workload/deamonset"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"DaemonSet"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-document-add"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"DaemonSet"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/workload/daemonsetView.vue"</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/workload/statefulset"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"StatefulSet"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-document-add"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"DaemonSets"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/workload/statefulsetView.vue"</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/loadbalance"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"负载均衡"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span>HomeView<span class="token punctuation">,</span>
      <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"files"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"负载均衡"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/loadbalance/service"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Service"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-s-data"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Service"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/loadbalance/serviceView.vue"</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/loadbalance/ingress"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Ingress"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-document-add"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Ingress"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/loadbalance/ingressView.vue"</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/storage"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"存储与配置"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span>HomeView<span class="token punctuation">,</span>
      <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"tickets"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"存储与配置"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/storage/configmap"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Configmap"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-document-add"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Configmap"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/storage/configmapView.vue"</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/storage/secret"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Secret"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-document-add"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Secret"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/storage/secretView.vue"</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/storage/persistentvolume"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"PersistentVolume"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-document-add"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"PersistemtVolume"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/storage/persistentvolumeView.vue"</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/storage/persistentvolumeclaim"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"PersistentVolumeClaim"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-s-data"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"PersistentVolumeClaim"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/storage/persistentvolumeClainView.vue"</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

      <span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/users"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"用户管理"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span>HomeView<span class="token punctuation">,</span>
      <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"avatar"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"存储与配置"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/users/user"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"用户"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-document-add"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"用户"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/user/userView.vue"</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"user/:id"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"userDetail"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-document-add"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"用户详情"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">hidden</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/user/userInfoView.vue"</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/user/group"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"用户组"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-document-add"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"用户组"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/user/groupView.vue"</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/user/settings"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"用户设置"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"el-icon-s-data"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"用户设置"</span><span class="token punctuation">,</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/user/userSetView.vue"</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/404'</span><span class="token punctuation">,</span>
      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/common/404.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'404'</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/403'</span><span class="token punctuation">,</span>
      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/common/403.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'403'</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token comment">//其他路径跳转至404页面</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/:pathMatch(.*)'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">'/404'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>而如果我想让左侧菜单栏不显示某些路由呢？网上找了很多方法都不起作用，终于根据下面的方法成功了。注意，要在router路由中添加hidden属性如：meta: {title: “Pod”, requireAuth: true,hidden: true},</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">filterRoutes</span><span class="token punctuation">(</span><span class="token parameter">routes</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> routes
      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>r<span class="token punctuation">.</span>meta<span class="token operator">?.</span>hidden<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
            <span class="token operator">...</span>r<span class="token punctuation">,</span>
            <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token function">filterRoutes</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>children<span class="token punctuation">)</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> r<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> filteredRouters <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">filterRoutes</span><span class="token punctuation">(</span>routers<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>记录AWS Oracle实例数据迁移的艰辛过程</title>
    <url>/2024/03/12/%E8%AE%B0%E5%BD%95AWS%20Oracle%E5%AE%9E%E4%BE%8B%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E7%9A%84%E8%89%B0%E8%BE%9B%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>最近公司在aws的项目要迁移到我们公司云平台，需要将aws上面的rds（oracle）实例迁移到本地云平台，遇到各种各样的问题，下面总结下遇到的所有问题及解决方法。<br>我这边用了各种各样的方法进行迁移，最终才成功将数据迁回</p>
<h3 id="方法1（失败）：navicat-工具，因对oracle数据库不太熟悉，所以首先选择用工具直接同步，此过程步骤简单，只需要在工具上选择源库和目标库同步即可"><a href="#方法1（失败）：navicat-工具，因对oracle数据库不太熟悉，所以首先选择用工具直接同步，此过程步骤简单，只需要在工具上选择源库和目标库同步即可" class="headerlink" title="方法1（失败）：navicat 工具，因对oracle数据库不太熟悉，所以首先选择用工具直接同步，此过程步骤简单，只需要在工具上选择源库和目标库同步即可"></a>方法1（失败）：navicat 工具，因对oracle数据库不太熟悉，所以首先选择用工具直接同步，此过程步骤简单，只需要在工具上选择源库和目标库同步即可</h3><p><img src="https://img-blog.csdnimg.cn/direct/3a53a4fdc57045aca51eda517d7d625b.png" alt="在这里插入图片描述"><br>问题：</p>
<ul>
<li>用工具导出速度很慢，1秒大概导出1000条左右，且会随着导出时长增加而增加</li>
<li>容易中断，我这边首次导出到60多w条数据时工具卡住，无法继续导出</li>
<li>数据导出不全，通过navicat导出发现大部分表数据不全，甚至有些表数据完全没有导入</li>
</ul>
<p>基于上面遇到的问题，所以舍弃了该方法</p>
<h3 id="方法2（失败）：导出sql文件后，使用sqlplus导入"><a href="#方法2（失败）：导出sql文件后，使用sqlplus导入" class="headerlink" title="方法2（失败）：导出sql文件后，使用sqlplus导入"></a>方法2（失败）：导出sql文件后，使用sqlplus导入</h3><p>sql文件可以用工具导出，我这边还是使用navicat导出sql文件，导出后如下图是每个表生成一个sql文件<br><img src="https://img-blog.csdnimg.cn/direct/5b36f7a6bea1479f8be9856eb9376d20.png" alt="在这里插入图片描述"></p>
<p>使用sqlplus进入需导入数据的库中进行导入发现部分表报错了，报错原因是中有超过3000个字符长度的字段，而sqlplus不支持超过3000的，需要手动更改sql语句，因表数据量较大，故放弃此方法</p>
<p><img src="https://img-blog.csdnimg.cn/direct/17f0ff2054c14e799e7f893be486b63a.png" alt="在这里插入图片描述"></p>
<h3 id="方法3（失败）：导出csv文件，再通过sqlload导入"><a href="#方法3（失败）：导出csv文件，再通过sqlload导入" class="headerlink" title="方法3（失败）：导出csv文件，再通过sqlload导入"></a>方法3（失败）：导出csv文件，再通过sqlload导入</h3><h5 id="1、使用工具导出csv文件，注意字段分隔符和行分隔符。"><a href="#1、使用工具导出csv文件，注意字段分隔符和行分隔符。" class="headerlink" title="1、使用工具导出csv文件，注意字段分隔符和行分隔符。"></a>1、使用工具导出csv文件，注意字段分隔符和行分隔符。</h5><h5 id="2、创建控制文件"><a href="#2、创建控制文件" class="headerlink" title="2、创建控制文件"></a>2、创建控制文件</h5><p>该定义解析和导入CSV文件的数据。控制文件需要指定csv文件的位置、字段分隔符、数据格式等，需要和导出时候指定的相同，下面是我导出某个表的一个控制文件，可以看到字段比较多</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>oracle@waixuan-prod ~/pub<span class="token punctuation">]</span>$ <span class="token function">cat</span> epub_p_publications.ctl
LOAD DATA
INFILE <span class="token string">'EPUB_P_PUBLICATIONS.csv'</span>
BADFILE <span class="token string">'epub_p_publications_data.bad'</span>
DISCARDFILE <span class="token string">'epub_p_publications_data.discard'</span>
INTO TABLE EPUBLISHING.EPUB_P_PUBLICATIONS
FIELDS TERMINATED BY <span class="token string">','</span> OPTIONALLY ENCLOSED BY <span class="token string">'\"'</span> 
TRAILING NULLCOLS
<span class="token punctuation">(</span>
PUB_ID,
PUB_PARENT_ID,
PUB_VOLUME_ID,
PUB_ISSUE_ID,
PUBLISHER_ID,
PUB_TITLE,
PUB_CHINESE_TITLE,
PUB_AUTHOR,
PUB_CODE,
PUB_HAVEMARC,
PUB_MARCPATH,
PUB_PAGE_START,
PUB_PAGE_END,
LIST_PRICE,
LCURR,
SALE_PRICE,
SCURR,
BROWSE_PRECENT,
IN_COLLECTION,
CONTENT_TYPE,
CONTENT_COVER,
CREATE_ON TIMESTAMP <span class="token string">"DD/MM/YYYY HH24:MI:SS.FF3"</span>,
UPDATE_ON TIMESTAMP <span class="token string">"DD/MM/YYYY HH24:MI:SS.FF3"</span>,
CONTENT_PDF,
PUB_PATH,
PUB_LANG,
CONTENT_BREED,
CONTENT_SUBTITLE,
CONTENT_MEDIA,
CONTENT_ORIGINALNO,
CONTENT_VOLUMESNUM,
CONTENT_NORMS,
CONTENT_EVOLUTION,
HOMEPAGE,
NEWEST,
SELECTED,
SPECIAL,
STATUS,
OA,
FREE,
PUB_DATE,
PUB_SUBJECT,
PUB_LOCAL,
PUB_WEB_URL,
PUB_CREATE_DATE,
SISBN,
HISBN,
CONTENT_ACTIVITY,
PUB_SUBJECT_EN,
SOURCE_ID,
BUY_TIMES,
PUB_YEAR,
PUB_MONTH,
PUB_DAY,
PUB_VOLUME,
START_VOLUME,
END_VOLUME,
PUB_ISSUE,
PUB_DOI,
PUB_KEYWORD,
PUB_REFERENCE,
SUBSCRIPTION_CODE,
CODE_ISSUED_ABROAD,
POST_JOURNAL_CODE,
CN_CODE,
OLD_JOURNAL_CODE,
JOURNAL_CODE,
FORMERLY,
TITLE_PINYIN,
THEME,
AUDIENCE,
PUB_SIZE,
REVISION,
OTHER_AUTHOR,
CHOICE,
COLLECTION_BOOK_SUBCODE,
VOLUME_BOOK_SUBCODE,
IS_COLLECTION_BOOK,
IS_VOLUME_BOOK,
VICE_TITLE,
CONTENT_WORDS,
CONTENT_EDITOR,
CONTENT_PAGE_NUM,
CONTENT_PLACE,
CONTENT_LANG,
ISSUE_METHOD_ID,
FORMAT_ID,
PUBLISH_METHOD_ID,
CONTENT_VOLUME_BOOK_ID,
CONTENT_COLLECTION_BOOK_ID,
DIC_ID,
JOUR_DIC_ID,
CONTENT_FORMAT,
CONTENT_SPONSORS,
JOURNALSTATUS,
PUB_INITIAL,
PUB_ABSTRACT char<span class="token punctuation">(</span><span class="token number">99999</span><span class="token punctuation">)</span>,
AUTHOR_PINYIN,
CONTENT_SHUMING,
CONTENT_FENCE,
CONTENT_FENCE_TITLE,
CONTENT_BINGLIE_TITLE,
CONTENT_AUTHOR_JIANJIE,
CONTENT_XINXIYUAN,
CONTENT_GONGHUOSHANG,
CONTENT_MUCI,
CONTENT_CONG_SHU,
CONTENT_BEIZHU,
ISINSOLR,
CONTENT_GROUP,
CONTENT_SUBJECTCN_WX,
CONTENT_SUBJECTEN_WX,
CONTENT_SUBJECT_WX,
CONTENT_STATUS_WX,
SHELVES_STATUS
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="3、运行sqlldr命令"><a href="#3、运行sqlldr命令" class="headerlink" title="3、运行sqlldr命令"></a>3、运行sqlldr命令</h5><p>需要指定用户名、密码、控制文件、日志文件、支持最大的错误数量，注意要导入的表不能有数据，必须是空表</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>oracle@waixuan-prod ~/pub<span class="token punctuation">]</span>$ sqlldr <span class="token assign-left variable">userid</span><span class="token operator">=</span>epublishing/xxxxxxx <span class="token assign-left variable">control</span><span class="token operator">=</span>epub_p_publications.ctl <span class="token assign-left variable">log</span><span class="token operator">=</span>epub_p_publications.log <span class="token assign-left variable">errors</span><span class="token operator">=</span><span class="token number">9999999999</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>执行后如下图开始导入，原本以为很顺利，导入速度也比较快，100万数据大概30+秒左右导入完成<br><img src="https://img-blog.csdnimg.cn/direct/cb618f91db5642c085d79fddcfc5456c.png" alt="在这里插入图片描述"><br>导入完成发现导入日志有大量报错信息，信息如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Record <span class="token number">13110</span>: Rejected - Error on table EPUBLISHING.EPUB_P_PUBLICATIONS, <span class="token function">column</span> PUB_ABSTRACT.
second enclosure string not present
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>报错显示<code>PUB_ABSTRACT</code> 这个字段导入有问题，查了报错的原因可能如下：<br>1、查看源表该字段发现该字段是<code>long</code>类型，而我ctl文件中指定的该字段为<code>char(99999)</code>类型，如果该字段有任何记录超过该类型就不会被完全导入<br>2、<code>sqlload</code>的限制，<code>sqlload</code>处理<code>long</code>类型字段时可能会有限制或不支持，看了下oracle官网建议使用<code>clob</code>数据类型代替<code>long</code>，但是ctl文件中不能指定<code>CLOB</code>类型。<br>基于上面2个问题，发现数据还是无法完整导入，故放弃。</p>
<h3 id="方法4（成功）：使用Oracle-Data-Pump和数据库连接导入数据"><a href="#方法4（成功）：使用Oracle-Data-Pump和数据库连接导入数据" class="headerlink" title="方法4（成功）：使用Oracle Data Pump和数据库连接导入数据"></a>方法4（成功）：使用Oracle Data Pump和数据库连接导入数据</h3><p>该方法是查看aws官网推荐方式，链接如下：<a href="%E8%AF%A5%E6%96%B9%E6%B3%95%E6%98%AF%E6%9F%A5%E7%9C%8Baws%E5%AE%98%E7%BD%91%E6%8E%A8%E8%8D%90%E6%96%B9%E5%BC%8F%EF%BC%8C%E9%93%BE%E6%8E%A5%E5%A6%82%E4%B8%8B%EF%BC%9Ahttps://docs.aws.amazon.com/zh_cn/AmazonRDS/latest/UserGuide/Oracle.Procedural.Importing.DataPump.html#Oracle.Procedural.Importing.DataPumpDBLink.requirements%20%E5%85%B6%E5%AE%9E%E5%AE%98%E7%BD%91%E6%8E%A8%E8%8D%90%E6%9C%89%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F">https://docs.aws.amazon.com/zh_cn&#x2F;AmazonRDS&#x2F;latest&#x2F;UserGuide&#x2F;Oracle.Procedural.Importing.DataPump.html#Oracle.Procedural.Importing.DataPumpDBLink.requirements</a><br>其实官网推荐有两种方式</p>
<ul>
<li>1、使用<code>Oracle DataPump</code>和<code>AmazonS3</code>存储桶导入数据</li>
<li>2、使用<code>Oracle DataPump</code>和数据库连接导入数据</li>
</ul>
<p>我这边首先试的是第一种方式，该方法步骤如下：</p>
<ol>
<li>在<code>RDS for oracle </code>目标数据库实例上向数据库用户授予权限</li>
<li>使用<code>DBMS_DATAPUMP</code>将数据导出到转存文件中</li>
<li>将转存文件上传到AmazonS3存储桶</li>
<li>将转存文件从<code>AmazonS3</code>桶下载到目标数据库实例</li>
<li>使用<code>DBMS_DATAPUMP</code>将转存文件导入到目标数据库实例</li>
</ol>
<p>该种方法我这边尝试失败，卡在步骤3，无法将转存文件上传到S3桶，因项目时间问题没有过多研究，故选择第二种官方推荐方式，该方法流程如下：</p>
<h5 id="1-在RDS-for-oracle目标数据库实例上向用户授予权限"><a href="#1-在RDS-for-oracle目标数据库实例上向用户授予权限" class="headerlink" title="1. 在RDS for oracle目标数据库实例上向用户授予权限"></a>1. 在<code>RDS for oracle</code>目标数据库实例上向用户授予权限</h5><h5 id="2-向用户授予源数据库权限"><a href="#2-向用户授予源数据库权限" class="headerlink" title="2. 向用户授予源数据库权限"></a>2. 向用户授予源数据库权限</h5><h5 id="3-在源库使用DBMS-DATAPUMP创建转存文件"><a href="#3-在源库使用DBMS-DATAPUMP创建转存文件" class="headerlink" title="3. 在源库使用DBMS_DATAPUMP创建转存文件"></a>3. 在源库使用<code>DBMS_DATAPUMP</code>创建转存文件</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">DECLARE
  v_hdnl NUMBER<span class="token punctuation">;</span>
BEGIN
  v_hdnl :<span class="token operator">=</span> DBMS_DATAPUMP.OPEN<span class="token punctuation">(</span> 
    operation <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'EXPORT'</span> , 
    job_mode  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'SCHEMA'</span> , 
    job_name  <span class="token operator">=</span><span class="token operator">></span> null
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  DBMS_DATAPUMP.ADD_FILE<span class="token punctuation">(</span> 
    handle    <span class="token operator">=</span><span class="token operator">></span> v_hdnl, 
    filename  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'sample.dmp'</span>    , 
    directory <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'DATA_PUMP_DIR'</span> , 
    filetype  <span class="token operator">=</span><span class="token operator">></span> dbms_datapump.ku<span class="token variable">$_file_type_dump_file</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  DBMS_DATAPUMP.ADD_FILE<span class="token punctuation">(</span> 
    handle    <span class="token operator">=</span><span class="token operator">></span> v_hdnl           , 
    filename  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'sample_exp.log'</span> , 
    directory <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'DATA_PUMP_DIR'</span>  , 
    filetype  <span class="token operator">=</span><span class="token operator">></span> dbms_datapump.ku<span class="token variable">$_file_type_log_file</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  DBMS_DATAPUMP.METADATA_FILTER<span class="token punctuation">(</span>
    v_hdnl              ,
    <span class="token string">'SCHEMA_EXPR'</span>       ,
    <span class="token string">'IN ('</span>'SCHEMA_1<span class="token string">''</span><span class="token punctuation">)</span><span class="token string">'
  );
  DBMS_DATAPUMP.METADATA_FILTER(
    v_hdnl,
    '</span>EXCLUDE_NAME_EXPR<span class="token string">',
    q'</span><span class="token punctuation">[</span>IN <span class="token punctuation">(</span>SELECT NAME FROM sys.OBJ$ 
           WHERE TYPE<span class="token comment"># IN (66,67,74,79,59,62,46) </span>
           AND OWNER<span class="token comment"># IN </span>
             <span class="token punctuation">(</span>SELECT <span class="token environment constant">USER</span><span class="token comment"># FROM SYS.USER$ </span>
              WHERE NAME IN <span class="token punctuation">(</span><span class="token string">'RDSADMIN'</span>,<span class="token string">'SYS'</span>,<span class="token string">'SYSTEM'</span>,<span class="token string">'RDS_DATAGUARD'</span>,<span class="token string">'RDSSEC'</span><span class="token punctuation">)</span>
             <span class="token punctuation">)</span>
          <span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token string">',
    '</span>PROCOBJ'
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  DBMS_DATAPUMP.START_JOB<span class="token punctuation">(</span>v_hdnl<span class="token punctuation">)</span><span class="token punctuation">;</span>
END<span class="token punctuation">;</span>
/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可以使用<code>expdb</code>，<code>directory </code>可以使用原有目录<code>DATA_PUMP_DIR</code>，或自行创建<br>目录可以通过<code>SELECT directory_name, directory_path FROM dba_directories; </code>命令查询</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">expdp  dbman1/xxxxxxx@datacenter.cbxxxxxxxx.us-east-2.rds.amazonaws.com/datacent <span class="token assign-left variable">schemas</span><span class="token operator">=</span>mailserver  <span class="token assign-left variable">DIRECTORY</span><span class="token operator">=</span>DATA_PUMP_DIR <span class="token assign-left variable">DUMPFILE</span><span class="token operator">=</span>mailservers.dmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>导出之后会在该RDS实例的DIRECTORY 目录下生成mailservers.dmp，<strong>但我这里无法看到，因为是RDS数据库无法和常规自建数据库一样，连接到服务器上查看，所以也无法使用常规方法将dmp文件下载</strong></p>
<h5 id="4-在源库中创建目标数据库实例的数据库链接"><a href="#4-在源库中创建目标数据库实例的数据库链接" class="headerlink" title="4. 在源库中创建目标数据库实例的数据库链接"></a>4. 在源库中创建目标数据库实例的数据库链接</h5><p>创建名为<code>tolocal</code>的数据库连接，连接到位于我们公司云上的自建数据库实例</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CREATE DATABASE LINK tolocal 
  CONNECT TO <span class="token operator">&lt;</span>master_user_account<span class="token operator">></span> IDENTIFIED BY <span class="token operator">&lt;</span>password<span class="token operator">></span>
  USING <span class="token string">'(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=&lt;dns or ip address of remote db>)
         (PORT=&lt;listener port>))(CONNECT_DATA=(SID=&lt;remote SID>)))'</span><span class="token punctuation">;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="5-使用DMBS-FILE-TRANSFER将导出的转存文件复制到目标数据库实例"><a href="#5-使用DMBS-FILE-TRANSFER将导出的转存文件复制到目标数据库实例" class="headerlink" title="5. 使用DMBS_FILE_TRANSFER将导出的转存文件复制到目标数据库实例"></a>5. 使用DMBS_FILE_TRANSFER将导出的转存文件复制到目标数据库实例</h5><p>在源库使用 <code>DBMS_FILE_TRANSFER</code> 将转储文件从源数据库实例复制到目标数据库实例。以下脚本将名为<code> sample.dmp</code> 的转储文件从源实例复制到名为<code> tolocal</code> 的目标数据库链接</p>
<ul>
<li><code>source_directory_object</code>：源数据库目录对象</li>
<li><code>source_file_name</code>：源数据库dmp文件名</li>
<li><code>destination_directory_object</code>：目标数据库目录对象</li>
<li><code>destination_file_name</code>：目标数据库dmp文件名</li>
<li><code>destination_database</code>：指定上面第4步创建的链接名</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">BEGIN
  DBMS_FILE_TRANSFER.PUT_FILE<span class="token punctuation">(</span>
    source_directory_object       <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'DATA_PUMP_DIR'</span>,
    source_file_name              <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'sample.dmp'</span>,
    destination_directory_object  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'DATA_PUMP_DIR'</span>,
    destination_file_name         <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'sample_copied.dmp'</span>, 
    destination_database          <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'to_rds'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
END<span class="token punctuation">;</span>
/ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>该过程主要看数据量，执行后要耐心等待一段时间，执行成功后可以到目标oracle实例所在的服务器的<code>DATA_PUMP_DIR</code> 目录对应的路径查看是否有该<code>destination_file_name</code>文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>oracle@waixuan-test ~<span class="token punctuation">]</span>$  ll /data/oracle/product/19.3.000/db_home/rdbms/log/
total <span class="token number">9506324</span>
-rw-r----- <span class="token number">1</span> oracle oinstall <span class="token number">3442290688</span> Mar <span class="token number">12</span> <span class="token number">10</span>:46 CONVERTERALLNEWS.dmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="6-使用Oracle-Data-Pump-impdp方法将转存文件导入到目标数据库实例"><a href="#6-使用Oracle-Data-Pump-impdp方法将转存文件导入到目标数据库实例" class="headerlink" title="6. 使用Oracle Data Pump impdp方法将转存文件导入到目标数据库实例"></a>6. 使用Oracle Data Pump impdp方法将转存文件导入到目标数据库实例</h5><p>在目标库使用下面的命令将转存文件导入到数据库中</p>
<ul>
<li><code>DIRECTORY</code>：对应第5步的<code>destination_directory_object</code></li>
<li><code>DUMPFILE</code>：对应第5步的<code>destination_file_name</code></li>
<li><code>LOGFILE</code>：指定导入的日志文件名</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">impdp  converterserver/xxxxxx <span class="token assign-left variable">DIRECTORY</span><span class="token operator">=</span>yusys_dbdump_dir <span class="token assign-left variable">DUMPFILE</span><span class="token operator">=</span>CONVERTER_ALL_TABLES_all.dmp <span class="token assign-left variable">LOGFILE</span><span class="token operator">=</span>import_log.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>原以为这样终于可以导入成功。。。但意外来的总是那么突然<br><img src="https://img-blog.csdnimg.cn/direct/20188c41806e49879c87d60e7b0b618d.png" alt="在这里插入图片描述"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ORA-39002: invalid operation
ORA-39405: Oracle Data Pump does not support importing from a <span class="token builtin class-name">source</span> database with TSTZ version <span class="token number">33</span> into a target database with TSTZ version <span class="token number">32</span>.
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>好吧，继续，查看报错信息发现是源库的时区和目标库的时区不同导致导入失败，查看源库和目标库时区：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-- 源库：
SELECT version FROM <span class="token function">v</span><span class="token variable">$timezone_file</span><span class="token punctuation">;</span>
<span class="token number">33</span>

-- 目标库：
SELECT version FROM <span class="token function">v</span><span class="token variable">$timezone_file</span><span class="token punctuation">;</span>
<span class="token number">32</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到源库33，目标库32，所以需要升级目标库的时区，升级方法如下：<br>首先需要下载时区补丁，这个补丁不确定是否需要购买相关支持才有权限下载，我这边也是通过渠道获得的相关补丁。<br>解压补丁，将文件上传到需升级时区的数据库服务器上，然后将其解压到Opatch目录下，这个是我的路径</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>oracle@waixuan-test /data/oracle/product/19.3.000/db_home/OPatch<span class="token punctuation">]</span>$ <span class="token builtin class-name">pwd</span> 
/data/oracle/product/19.3.000/db_home/OPatch
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>解压补丁包后有两个目录，将这两个目录移动到Opatch目录下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
<span class="token punctuation">[</span>oracle@waixuan-test /data/oracle/product/19.3.000/db_home/OPatch/buding/28852325<span class="token punctuation">]</span>$ ll
total <span class="token number">16</span>
drwxr-x--- <span class="token number">3</span> oracle oinstall <span class="token number">4096</span> Aug  <span class="token number">9</span>  <span class="token number">2019</span> etc
drwxr-x--- <span class="token number">3</span> oracle oinstall <span class="token number">4096</span> Aug  <span class="token number">9</span>  <span class="token number">2019</span> files
-rw-rw-r-- <span class="token number">1</span> oracle oinstall <span class="token number">5779</span> Aug  <span class="token number">9</span>  <span class="token number">2019</span> README.txt

<span class="token punctuation">[</span>oracle@waixuan-test /data/oracle/product/19.3.000/db_home/OPatch<span class="token punctuation">]</span>$ ll
total <span class="token number">228</span>
drwxrwxrwx <span class="token number">6</span> oracle oinstall  <span class="token number">4096</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> auto
drwxr-x--- <span class="token number">3</span> oracle oinstall  <span class="token number">4096</span> Mar <span class="token number">12</span> <span class="token number">14</span>:49 buding
drwxrwxrwx <span class="token number">2</span> oracle oinstall  <span class="token number">4096</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> config
-rwxr-x--- <span class="token number">1</span> oracle oinstall   <span class="token number">589</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> datapatch
drwxrwxrwx <span class="token number">2</span> oracle oinstall  <span class="token number">4096</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> docs
-rwxr-x--- <span class="token number">1</span> oracle oinstall <span class="token number">23550</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> emdpatch.pl
drwxr-x--- <span class="token number">3</span> oracle oinstall  <span class="token number">4096</span> Aug  <span class="token number">9</span>  <span class="token number">2019</span> etc
drwxr-x--- <span class="token number">3</span> oracle oinstall  <span class="token number">4096</span> Aug  <span class="token number">9</span>  <span class="token number">2019</span> files
drwxrwxrwx <span class="token number">2</span> oracle oinstall  <span class="token number">4096</span> Jan <span class="token number">23</span> 08:47 jlib
drwxrwxrwx <span class="token number">5</span> oracle oinstall  <span class="token number">4096</span> Aug <span class="token number">17</span>  <span class="token number">2018</span> jre
drwxrwxrwx <span class="token number">9</span> oracle oinstall  <span class="token number">4096</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> modules
drwxrwxrwx <span class="token number">5</span> oracle oinstall  <span class="token number">4096</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> ocm
-rwxr-x--- <span class="token number">1</span> oracle oinstall <span class="token number">48493</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> opatch
-rwxr-x--- <span class="token number">1</span> oracle oinstall  <span class="token number">1442</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> opatchauto
-rwxrwxrwx <span class="token number">1</span> oracle oinstall   <span class="token number">393</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> opatchauto.cmd
-rwxrwxrwx <span class="token number">1</span> oracle oinstall  <span class="token number">4290</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> opatch_env.sh
-rwxr-x--- <span class="token number">1</span> oracle oinstall  <span class="token number">2551</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> opatch.pl
drwxrwxrwx <span class="token number">4</span> oracle oinstall  <span class="token number">4096</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> opatchprereqs
-rwxr-x--- <span class="token number">1</span> oracle oinstall  <span class="token number">3159</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> operr
-rwxrwxrwx <span class="token number">1</span> oracle oinstall  <span class="token number">3177</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> operr_readme.txt
drwxrwxrwx <span class="token number">2</span> oracle oinstall  <span class="token number">4096</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> oplan
drwxrwxrwx <span class="token number">3</span> oracle oinstall  <span class="token number">4096</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> oracle_common
drwxrwxrwx <span class="token number">3</span> oracle oinstall  <span class="token number">4096</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> plugins
-rw-rw-r-- <span class="token number">1</span> oracle oinstall  <span class="token number">5779</span> Aug  <span class="token number">9</span>  <span class="token number">2019</span> README.txt
drwxrwxrwx <span class="token number">2</span> oracle oinstall  <span class="token number">4096</span> Jan <span class="token number">23</span> 08:47 scripts
-rw-r----- <span class="token number">1</span> oracle oinstall    <span class="token number">27</span> Apr <span class="token number">12</span>  <span class="token number">2019</span> version.txt
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在此目录下执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>oracle@iZ2zehl1ro7yd08bzf0h3rZ OPatch<span class="token punctuation">]</span>$ ./opatch apply
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/direct/de3437ebe1ff4252b0bb2f47102a3494.png" alt="在这里插入图片描述"><br>看到下图的提示就是成功了<br><img src="https://img-blog.csdnimg.cn/direct/82ced0efb4814344b90d6d33e73a90f4.png" alt="在这里插入图片描述"><br>查看已装补丁情况</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">opatch lsinventory
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后需要执行补丁sql<br>upg_tzv_check.sql<br>upg_tzv_apply.sql</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>oracle@iZ2zehl1ro7yd08bzf0h3rZ yusys<span class="token punctuation">]</span>$ sqlplus / as sysdba 

SQL*Plus: Release <span class="token number">19.0</span>.0.0.0 - Production on Tue Mar <span class="token number">12</span> <span class="token number">10</span>:18:20 <span class="token number">2024</span>
Version <span class="token number">19.3</span>.0.0.0

Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">1982</span>, <span class="token number">2019</span>, Oracle.  All rights reserved.


Connected to:
Oracle Database 19c Enterprise Edition Release <span class="token number">19.0</span>.0.0.0 - Production
Version <span class="token number">19.3</span>.0.0.0

SQL<span class="token operator">></span> @upg_tzv_check.sql<span class="token punctuation">;</span>
INFO: Starting with RDBMS DST update preparation.
INFO: NO actual RDBMS DST update will be <span class="token keyword">done</span> by this script.
INFO: If an ERROR occurs the script will EXIT sqlplus.
INFO: Doing checks <span class="token keyword">for</span> known issues <span class="token punctuation">..</span>.
INFO: Database version is <span class="token number">19.0</span>.0.0 <span class="token builtin class-name">.</span>
INFO: Database RDBMS DST version is DSTv32 <span class="token builtin class-name">.</span>
INFO: No known issues detected.
INFO: Now detecting new RDBMS DST version.
A prepare window has been successfully started.
INFO: Newest RDBMS DST version detected is DSTv33 <span class="token builtin class-name">.</span>
INFO: Next step is checking all TSTZ data.
INFO: It might take a <span class="token keyword">while</span> before any further output is seen <span class="token punctuation">..</span>.
A prepare window has been successfully ended.
INFO: A newer RDBMS DST version than the one currently used is found.
INFO: Note that NO DST update was yet done.
INFO: Now run upg_tzv_apply.sql to <span class="token keyword">do</span> the actual RDBMS DST update.
INFO: Note that the upg_tzv_apply.sql script will
INFO: restart the database <span class="token number">2</span> <span class="token builtin class-name">times</span> WITHOUT any confirmation or prompt.
SQL<span class="token operator">></span> @upg_tzv_apply.sql<span class="token punctuation">;</span>
INFO: If an ERROR occurs the script will EXIT sqlplus.
INFO: The database RDBMS DST version will be updated to DSTv33 <span class="token builtin class-name">.</span>
WARNING: This script will restart the database <span class="token number">2</span> <span class="token builtin class-name">times</span>
WARNING: WITHOUT asking ANY confirmation.
WARNING: Hit control-c NOW <span class="token keyword">if</span> this is not intended.
INFO: Restarting the database <span class="token keyword">in</span> UPGRADE mode to start the DST upgrade.
Database closed.
Database dismounted.
ORACLE instance shut down.
ORACLE instance started.

Total System Global Area <span class="token number">9932109768</span> bytes
Fixed Size                 <span class="token number">12445640</span> bytes
Variable Size            <span class="token number">1610612736</span> bytes
Database Buffers         <span class="token number">8287944704</span> bytes
Redo Buffers               <span class="token number">21106688</span> bytes
Database mounted.
Database opened.
INFO: Starting the RDBMS DST upgrade.
INFO: Upgrading all SYS owned TSTZ data.
INFO: It might take <span class="token function">time</span> before any further output is seen <span class="token punctuation">..</span>.
An upgrade window has been successfully started.
INFO: Restarting the database <span class="token keyword">in</span> NORMAL mode to upgrade non-SYS TSTZ data.
Database closed.
Database dismounted.
ORACLE instance shut down.
ORACLE instance started.

Total System Global Area <span class="token number">9932109768</span> bytes
Fixed Size                 <span class="token number">12445640</span> bytes
Variable Size            <span class="token number">1610612736</span> bytes
Database Buffers         <span class="token number">8287944704</span> bytes
Redo Buffers               <span class="token number">21106688</span> bytes
Database mounted.
Database opened.
INFO: Upgrading all non-SYS TSTZ data.
INFO: It might take <span class="token function">time</span> before any further output is seen <span class="token punctuation">..</span>.
INFO: Do NOT start any application yet that uses TSTZ data<span class="token operator">!</span>
INFO: Next is a list of all upgraded tables:
Table list: <span class="token string">"GSMADMIN_INTERNAL"</span><span class="token builtin class-name">.</span><span class="token string">"AQ<span class="token variable">$_CHANGE_LOG_QUEUE_TABLE_L</span>"</span>
Number of failures: <span class="token number">0</span>
Table list: <span class="token string">"GSMADMIN_INTERNAL"</span><span class="token builtin class-name">.</span><span class="token string">"AQ<span class="token variable">$_CHANGE_LOG_QUEUE_TABLE_S</span>"</span>
Number of failures: <span class="token number">0</span>
Table list: <span class="token string">"MDSYS"</span><span class="token builtin class-name">.</span><span class="token string">"SDO_DIAG_MESSAGES_TABLE"</span>
Number of failures: <span class="token number">0</span>
Table list: <span class="token string">"DVSYS"</span><span class="token builtin class-name">.</span><span class="token string">"AUDIT_TRAIL$"</span>
Number of failures: <span class="token number">0</span>
Table list: <span class="token string">"DVSYS"</span><span class="token builtin class-name">.</span><span class="token string">"SIMULATION_LOG$"</span>
Number of failures: <span class="token number">0</span>
INFO: Total failures during update of TSTZ data: <span class="token number">0</span> <span class="token builtin class-name">.</span>
An upgrade window has been successfully ended.
INFO: Your new Server RDBMS DST version is DSTv33 <span class="token builtin class-name">.</span>
INFO: The RDBMS DST update is successfully finished.
INFO: Make sure to <span class="token builtin class-name">exit</span> this sqlplus session.
INFO: Do not use it <span class="token keyword">for</span> timezone related selects.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行过后查看当前数据库时区，和源库相同都是33了！<br><img src="https://img-blog.csdnimg.cn/direct/312ad03f3e8646c9844ad9ad94668de3.png" alt="在这里插入图片描述"><br>此时再执行导入命令就可以了<br><img src="https://img-blog.csdnimg.cn/direct/c47a328f14894aabbe52d92159db936f.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>oracle</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
</search>
